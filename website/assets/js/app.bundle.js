(window.webpackJsonp=window.webpackJsonp||[]).push([["app"],{0:function(e,t,n){e.exports=n("kFay")},1:function(e,t){},E4hX:function(e,t,n){(function(e,t){for(var n,o=function(){},s=["assert","clear","count","debug","dir","dirxml","error","exception","group","groupCollapsed","groupEnd","info","log","markTimeline","profile","profileEnd","table","time","timeEnd","timeline","timelineEnd","timeStamp","trace","warn"],c=s.length,a=window.console=window.console||{};c--;)a[n=s[c]]||(a[n]=o);window.addEventListener("keydown",(function e(t){9===t.keyCode&&(document.body.classList.add("user-is-tabbing"),window.removeEventListener("keydown",e))})),document.querySelector("html").setAttribute("data-browser",e.name);var i=document.querySelector("body");t({xlarge:["1281px","1680px"],large:["981px","1280px"],medium:["737px","980px"],small:["481px","736px"],xsmall:[null,"480px"]}),e.mobile?i.classList.add("is-mobile"):(t.on(">medium",(function(){i.classList.remove("is-mobile"),i.classList.add("is-desktop")})),t.on("<=medium",(function(){i.classList.remove("is-desktop"),i.classList.add("is-mobile")}))),"localhost"===window.location.hostname&&console.log("localhost detected!")}).call(this,n("txRt"),n("a6Qp"))},SEKM:function(e,t,n){"use strict";n.r(t);var o=n("lwsE"),s=n.n(o),c=n("W8MJ"),a=n.n(c),i=n("xVb/"),l=function(){function e(t,n,o){s()(this,e),this.inputType=t,this.inputDesc=n,this.inputVal=o}return a()(e,[{key:"getInput",value:function(){return{type:this.inputType.value,description:this.inputDesc.value,value:Number(this.inputVal.value)}}},{key:"formatNumber",value:function(e,t){var n=Math.abs(e);(n=n.toFixed(2)).split(".")}},{key:"render",value:function(e,t){var n,o="exp"===t?"expenses":"income",s=document.querySelector(".".concat(o,"__list"));n="\n    <li class='".concat(o,"__item' id='").concat(t,"-").concat(e.id,"'>\n      <div class='item-desc'><p>").concat(e.desc,"</p></div>\n      <div class=\"items\">\n        <div class='items__value'><p><span>&pound;</span>").concat(e.val,"</p></div>\n    "),"exp"===t&&(n+='<div class="items__percent"><p>0&#37;</p></div>'),n+='\n        <button class=\'btn btn--clear items__del\'>\n          <svg id="delete" class="icon" width="20" height="20" aria-hidden="true">\n            <use xlink:href="/assets/images/icons.svg#icon-delete"></use>\n          </svg>\n        </button>\n      </div>\n    </li>\n    ',s.innerHTML+=n}},{key:"getBudget",value:function(e){return{budget:e.budget,totalInc:e.totals.inc,totalExp:e.totals.exp,percent:e.percent}}},{key:"displayBudget",value:function(e){var t="exp"===(e.budget>0?"inc":"exp")?"expenses":"income",n=document.querySelector(".budget__value .budget"),o=document.querySelector(".budget__income .budget__amount .amount"),s=document.querySelector(".budget__expenses .budget__amount .amount");n.textContent=e.budget,o.textContent=e.totalInc,s.textContent=e.totalExp,console.log("The ".concat(t," is/are ").concat(e.budget)),console.log(o,s)}},{key:"displayPercentage",value:function(e){var t=document.querySelector(".percentage");e>0?(t.classList.add("show"),t.innerHTML="".concat(e,"&#37;")):t.classList.remove("show"),console.log(t)}},{key:"updateBudget",value:function(){var e=i.default.calculateBudget(),t=this.getBudget(e);console.log(t),this.displayBudget(t),this.displayPercentage(t.percent)}},{key:"displayPercentages",value:function(e){!function(e,t){for(var n=0;n<e.length;n++)t(e[n],n)}(document.querySelectorAll(".items__percent"),(function(t,n){e[n]>0?(t.classList.add("show"),t.innerHTML="".concat(e[n],"&#37;")):(t.classList.remove("show"),t.innerHTML="0&#37;")}))}},{key:"updatePercentages",value:function(){i.default.calculatePercentages();var e=i.default.getPercentages();this.displayPercentages(e)}},{key:"deleteItem",value:function(){var e=this;document.querySelector(".income-expenses").addEventListener("click",(function(t){if("delete"===t.target.id){var n=t.target.closest(".items").parentElement,o=n.id.split("-"),s=o[0],c=Number(o[1]);console.log(t.target,n,o,s,c),i.default.removeItem(s,c),n.remove(),e.updateBudget(),e.updatePercentages()}}))}}]),e}();t.default=l},a6Qp:function(e,t){e.exports=breakpoints},kFay:function(e,t,n){"use strict";n.r(t);var o=n("cDf5"),s=n.n(o),c=(n("OuUZ"),n("E4hX"),n("xVb/")),a=n("SEKM"),i=document.querySelector("body");window.onload=function(){window.setTimeout((function(){i.classList.remove("is-loading")}),100)};var l,u,r,d,p,m,g;l=c.default,u=document.querySelector(".add__form"),r=document.querySelector(".add__type"),d=document.querySelector(".add__description"),p=document.querySelector(".add__value"),m=document.querySelector("#check"),g=new a.default(r,d,p),r.addEventListener("change",(function(e){var t=Array.from(r.options);console.log(e),console.log(r.attributes,r.options,r.options.selectedIndex,t,t[1]),1===r.options.selectedIndex?(m.classList.add(r.value),t[0].removeAttribute("selected","selected"),t[1].setAttribute("selected","selected")):(t[1].removeAttribute("selected","selected"),t[0].setAttribute("selected","selected"),m.classList.remove("exp"))})),u.addEventListener("submit",(function(e){e.preventDefault();var t=g.getInput();if(console.log(t),console.log(s()(t.value)),u.reset(),""!==t.desc&&!isNaN(t.value)&&t.value>0){var n=l.addItem(t.type,t.description,t.value);g.render(n,t.type),g.updateBudget(),g.updatePercentages(),console.log("form submitted!"),console.log(n)}})),g.deleteItem()},txRt:function(e,t){e.exports=browser},"xVb/":function(e,t,n){"use strict";n.r(t);var o,s,c,a=n("cDf5"),i=n.n(a),l=n("lwsE"),u=n.n(l),r=n("W8MJ"),d=n.n(r),p=(o=function(){function e(t,n,o){u()(this,e),this.id=t,this.desc=n,this.val=o,this.percentage=-1}return d()(e,[{key:"calcPercentage",value:function(e){this.percentage=e>0?Math.round(this.val/e*100):-1,console.log("this value is ".concat(i()(this.val)),"the totalIncome ".concat(i()(e)))}},{key:"getPercentage",value:function(){return this.percentage}}]),e}(),s={allItems:{exp:[],inc:[]},totals:{exp:0,inc:0},budget:0},c=function(e){var t=0;s.allItems[e].forEach((function(e){t+=e.val})),s.totals[e]=t},{addItem:function(e,t,n){var c=s.allItems[e].length>0?s.allItems[e][s.allItems[e].length-1].id+1:0,a=new o(c,t,n);return s.allItems[e].push(a),a},calculateBudget:function(){return c("exp"),c("inc"),s.budget=s.totals.inc-s.totals.exp,s.totals.inc>0?s.percent=Math.round(s.totals.exp/s.totals.inc*100):s.percent=-1,console.log(s.totals.exp,s.totals.inc),console.log(s.budget,s.percent),s},calculatePercentages:function(){s.allItems.exp.forEach((function(e){e.calcPercentage(s.totals.inc)}))},getPercentages:function(){return s.allItems.exp.map((function(e){return e.getPercentage()}))},removeItem:function(e,t){var n=s.allItems[e].map((function(e){return e.id})).indexOf(t);-1!==n&&s.allItems[e].splice(n,1)}});t.default=p}},[[0,"runtime","vendors"]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,