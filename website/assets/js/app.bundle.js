(window.webpackJsonp=window.webpackJsonp||[]).push([["app"],{0:function(e,t,n){e.exports=n("kFay")},1:function(e,t){},E4hX:function(e,t,n){(function(e,t){for(var n,a=function(){},o=["assert","clear","count","debug","dir","dirxml","error","exception","group","groupCollapsed","groupEnd","info","log","markTimeline","profile","profileEnd","table","time","timeEnd","timeline","timelineEnd","timeStamp","trace","warn"],c=o.length,s=window.console=window.console||{};c--;)s[n=o[c]]||(s[n]=a);window.addEventListener("keydown",(function e(t){9===t.keyCode&&(document.body.classList.add("user-is-tabbing"),window.removeEventListener("keydown",e))})),document.querySelector("html").setAttribute("data-browser",e.name);var i=document.querySelector("body");t({xlarge:["1281px","1680px"],large:["981px","1280px"],medium:["737px","980px"],small:["481px","736px"],xsmall:[null,"480px"]}),e.mobile?i.classList.add("is-mobile"):(t.on(">medium",(function(){i.classList.remove("is-mobile"),i.classList.add("is-desktop")})),t.on("<=medium",(function(){i.classList.remove("is-desktop"),i.classList.add("is-mobile")}))),"localhost"===window.location.hostname&&console.log("localhost detected!")}).call(this,n("txRt"),n("a6Qp"))},SEKM:function(e,t,n){"use strict";n.r(t);var a=n("lwsE"),o=n.n(a),c=n("W8MJ"),s=n.n(c),i=n("xVb/"),l=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],o=Math.abs(e),c=(o=o.toFixed(2)).split("."),s=c[0],i=c[1];i=Number(i)>0?".".concat(i):"",s.length>3&&(s="".concat(s.substr(0,s.length-3),",").concat(s.substr(s.length-3,3)));var l=n?'<span class="currency">&pound;</span>':"";return"".concat(a?"exp"===t?'<span class="sign">&#45;</span> ':'<span class="sign">&#43;</span> ':"").concat(l).concat(s).concat(i)},u=function(){function e(t,n,a){o()(this,e),this.inputType=t,this.inputDesc=n,this.inputVal=a}return s()(e,[{key:"getInput",value:function(){return{type:this.inputType.value,description:this.inputDesc.value,value:Number(this.inputVal.value)}}},{key:"render",value:function(e,t){var n,a="exp"===t?"expenses":"sav"===t?"savings":"income",o=document.querySelector(".".concat(a,"__list"));n="\n    <li class='".concat(a,"__item' id='").concat(t,"-").concat(e.id,"'>\n      <div class='item-desc'><p>").concat(e.desc,"</p></div>\n      <div class=\"items\">\n        <div class='items__value'><p>").concat(l(e.val,t,!0,!1),"</p></div>\n    "),"exp"===t&&(n+='<div class="items__percent"><p>0&#37;</p></div>'),n+='\n        <button class=\'btn btn--clear items__del\'>\n          <svg id="delete" class="icon" width="20" height="20" aria-hidden="true">\n            <use xlink:href="/assets/images/icons.svg#icon-delete"></use>\n          </svg>\n        </button>\n      </div>\n    </li>\n    ',o.innerHTML+=n}},{key:"getBudget",value:function(e){return{budget:e.budget,totalInc:e.totals.inc,totalExp:e.totals.exp,percentExp:e.percent.exp,percentSav:e.percent.sav}}},{key:"displayBudget",value:function(e){var t=e.budget>0?"inc":"exp",n="exp"===t?"expenses":"income",a=document.querySelector(".budget__value"),o=document.querySelector(".budget__income .budget__amount"),c=document.querySelector(".budget__expenses .budget__amount"),s=document.querySelector(".budget__savings .budget__amount");a.innerHTML=l(e.budget,t,!0),o.innerHTML=l(e.totalInc,"inc"),c.innerHTML=l(e.totalExp,"exp"),s.innerHTML=l(e.totalSav,"sav"),console.log("The ".concat(n," is/are ").concat(e.budget)),console.log(o,c)}},{key:"displayPercentage",value:function(e,t){var n="exp"===t?"expenses":"savings",a=document.querySelector(".budget__".concat(n," .percentage"));e>0?(a.classList.add("show"),a.innerHTML="".concat(e,"&#37;")):a.classList.remove("show"),console.log(a)}},{key:"updateBudget",value:function(){var e=i.default.calculateBudget(),t=this.getBudget(e);console.log(t),this.displayBudget(t),this.displayPercentage(t.percentExp,"exp"),this.displayPercentage(t.percentSav,"sav")}},{key:"displayPercentages",value:function(e){!function(e,t){for(var n=0;n<e.length;n++)t(e[n],n)}(document.querySelectorAll(".items__percent"),(function(t,n){e[n]>0?(t.classList.add("show"),t.innerHTML="".concat(e[n],"&#37;")):(t.classList.remove("show"),t.innerHTML="0&#37;")}))}},{key:"updatePercentages",value:function(){i.default.calculatePercentages();var e=i.default.getPercentages();this.displayPercentages(e)}},{key:"displayDate",value:function(){var e=document.querySelector(".budget__date"),t=new Date;e.textContent="".concat(["January","February","March","April","May","June","July","August","Sepetember","October","November","December"][t.getMonth()]," ").concat(t.getFullYear())}},{key:"changeType",value:function(){var e=this.inputType,t=document.querySelector("#check"),n=[e,this.inputDesc,this.inputVal,t];console.log(n),e.addEventListener("change",(function(t){var a=Array.from(e.options);console.log(t),console.log(e.attributes,e.options,e.options.selectedIndex,a,a[1]),n.forEach((function(e){e.classList.toggle("exp")})),a.forEach((function(e,t){e.selected?e.setAttribute("selected","selected"):e.removeAttribute("selected","selected"),console.log(e,e.value,t)}))}))}},{key:"deleteItem",value:function(){var e=this;document.querySelector(".income-expenses").addEventListener("click",(function(t){if("delete"===t.target.id){var n=t.target.closest(".items").parentElement,a=n.id.split("-"),o=a[0],c=Number(a[1]);console.log(t.target,n,a,o,c),i.default.removeItem(o,c),n.remove(),e.updateBudget(),e.updatePercentages()}}))}}]),e}();t.default=u},a6Qp:function(e,t){e.exports=breakpoints},kFay:function(e,t,n){"use strict";n.r(t);var a=n("cDf5"),o=n.n(a),c=(n("OuUZ"),n("E4hX"),n("xVb/")),s=n("SEKM"),i=document.querySelector("body");window.onload=function(){window.setTimeout((function(){i.classList.remove("is-loading")}),100)};var l,u,r,d,p,g;l=c.default,u=document.querySelector(".add__form"),r=document.querySelector(".add__type"),d=document.querySelector(".add__description"),p=document.querySelector(".add__value"),(g=new s.default(r,d,p)).displayDate(),g.changeType(),u.addEventListener("submit",(function(e){e.preventDefault();var t=g.getInput();if(console.log(t),console.log(o()(t.value)),u.reset(),""!==t.desc&&!isNaN(t.value)&&t.value>0){var n=l.addItem(t.type,t.description,t.value);g.render(n,t.type),g.updateBudget(),g.updatePercentages(),console.log("form submitted!"),console.log(n)}})),g.deleteItem()},txRt:function(e,t){e.exports=browser},"xVb/":function(e,t,n){"use strict";n.r(t);var a,o,c,s=n("cDf5"),i=n.n(s),l=n("lwsE"),u=n.n(l),r=n("W8MJ"),d=n.n(r),p=(a=function(){function e(t,n,a){u()(this,e),this.id=t,this.desc=n,this.val=a,this.percentage=-1}return d()(e,[{key:"calcPercentage",value:function(e){this.percentage=e>0?Math.round(this.val/e*100):-1,console.log("this value is ".concat(i()(this.val)),"the totalIncome ".concat(i()(e)))}},{key:"getPercentage",value:function(){return this.percentage}}]),e}(),o={allItems:{exp:[],inc:[],sav:[]},totals:{exp:0,inc:0,sav:0},percent:{exp:-1,sav:-1},budget:0},c=function(e){var t=0;o.allItems[e].forEach((function(e){t+=e.val})),o.totals[e]=t},{addItem:function(e,t,n){var c=o.allItems[e].length>0?o.allItems[e][o.allItems[e].length-1].id+1:0,s=new a(c,t,n);return o.allItems[e].push(s),s},calculateBudget:function(){return c("exp"),c("inc"),c("sav"),o.budget=o.totals.inc-(o.totals.exp+o.totals.sav),o.totals.inc>0?(o.percent.exp=Math.round(o.totals.exp/o.totals.inc*100),o.percent.sav=Math.round(o.totals.sav/o.totals.inc*100)):(o.percent.exp=-1,o.percent.sav=-1),console.log(o.totals.exp,o.totals.inc),console.log(o.budget,o.percent.exp,o.percent.sav),o},calculatePercentages:function(){o.allItems.exp.forEach((function(e){e.calcPercentage(o.totals.inc)}))},getPercentages:function(){return o.allItems.exp.map((function(e){return e.getPercentage()}))},removeItem:function(e,t){var n=o.allItems[e].map((function(e){return e.id})).indexOf(t);-1!==n&&o.allItems[e].splice(n,1)}});t.default=p}},[[0,"runtime","vendors"]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,