(window.webpackJsonp=window.webpackJsonp||[]).push([["app"],{0:function(e,t,n){e.exports=n("kFay")},1:function(e,t){},E4hX:function(e,t,n){(function(e,t){for(var n,o=function(){},s=["assert","clear","count","debug","dir","dirxml","error","exception","group","groupCollapsed","groupEnd","info","log","markTimeline","profile","profileEnd","table","time","timeEnd","timeline","timelineEnd","timeStamp","trace","warn"],i=s.length,l=window.console=window.console||{};i--;)l[n=s[i]]||(l[n]=o);window.addEventListener("keydown",(function e(t){9===t.keyCode&&(document.body.classList.add("user-is-tabbing"),window.removeEventListener("keydown",e))})),document.querySelector("html").setAttribute("data-browser",e.name);var c=document.querySelector("body");t({xlarge:["1281px","1680px"],large:["981px","1280px"],medium:["737px","980px"],small:["481px","736px"],xsmall:[null,"480px"]}),e.mobile?c.classList.add("is-mobile"):(t.on(">medium",(function(){c.classList.remove("is-mobile"),c.classList.add("is-desktop")})),t.on("<=medium",(function(){c.classList.remove("is-desktop"),c.classList.add("is-mobile")}))),"localhost"===window.location.hostname&&console.log("localhost detected!")}).call(this,n("txRt"),n("a6Qp"))},SEKM:function(e,t,n){"use strict";n.r(t);var o=n("lwsE"),s=n.n(o),i=n("W8MJ"),l=n.n(i),c=n("xVb/"),a=function(){function e(t,n,o){s()(this,e),this.inputType=t,this.inputDesc=n,this.inputVal=o}return l()(e,[{key:"getInput",value:function(){return{type:this.inputType.value,description:this.inputDesc.value,value:Number(this.inputVal.value)}}},{key:"render",value:function(e,t){var n,o="exp"===t?"expenses":"income",s=document.querySelector(".".concat(o,"__list"));n="\n    <li class='".concat(o,"__item' id='").concat(t,"-").concat(e.id,"'>\n      <div class='item-desc'><p>").concat(e.desc,"</p></div>\n      <div class=\"items\">\n        <div class='items__value'><p><span>&pound;</span>").concat(e.val,"</p></div>\n    "),"exp"===t&&(n+='<div class="item-percent"><p>0&#37;</p></div>'),n+='\n        <button class=\'btn btn--clear items__del\'>\n          <svg id="delete" class="icon" width="20" height="20" aria-hidden="true">\n            <use xlink:href="/assets/images/icons.svg#icon-delete"></use>\n          </svg>\n        </button>\n      </div>\n    </li>\n    ',s.innerHTML+=n}},{key:"getBudget",value:function(e){return{budget:e.budget,totalInc:e.totals.inc,totalExp:e.totals.exp,percent:e.percent}}},{key:"updateBudget",value:function(e,t){var n="exp"===e?"expenses":"income",o=document.querySelector(".budget__value .budget"),s=document.querySelector(".budget__percentage"),i=document.querySelector(".budget__".concat(n," .budget__amount .amount")),l=this.getBudget(t);o.textContent=l.budget,i.innerHTML="exp"===e?"- ".concat(l.totalExp):"+ ".concat(l.totalInc),l.percent>0?(s.classList.add("show"),s.innerHTML="".concat(l.percent,"&#37;")):s.classList.remove("show"),console.log("The ".concat(n," is/are ").concat(l.budget)),console.log(i,s)}},{key:"deleteItem",value:function(){document.querySelector(".income-expenses").addEventListener("click",(function(e){if("BUTTON"===e.target.parentElement.tagName&&"delete"===e.target.id){var t=e.target.closest(".items").parentElement.id,n=t.split("-"),o=n[0],s=n[1];console.log(t,n,o,s),c.default.removeItem(o,s)}}))}}]),e}();t.default=a},a6Qp:function(e,t){e.exports=breakpoints},kFay:function(e,t,n){"use strict";n.r(t);var o=n("cDf5"),s=n.n(o),i=(n("OuUZ"),n("E4hX"),n("xVb/")),l=n("SEKM"),c=document.querySelector("body");window.onload=function(){window.setTimeout((function(){c.classList.remove("is-loading")}),100)};var a,u,d,r,p,m,v;a=i.default,u=document.querySelector(".add__form"),d=document.querySelector(".add__type"),r=document.querySelector(".add__description"),p=document.querySelector(".add__value"),m=document.querySelector("#check"),v=new l.default(d,r,p),d.addEventListener("change",(function(e){console.log(e);var t=Array.from(d.options);console.log(t),"exp"===d.value?m.classList.add(d.value):m.classList.remove("exp")})),u.addEventListener("submit",(function(e){e.preventDefault();var t=v.getInput();if(console.log(t),console.log(s()(t.value)),u.reset(),""!==t.desc&&!isNaN(t.value)&&t.value>0){var n=a.addItem(t.type,t.description,t.value),o=a.calculateBudget(t.type);v.render(n,t.type),v.updateBudget(t.type,o),v.deleteItem(),console.log("form submitted!"),console.log(n),console.log(o)}}))},txRt:function(e,t){e.exports=browser},"xVb/":function(e,t,n){"use strict";n.r(t);var o,s,i=n("lwsE"),l=n.n(i),c=(o=function e(t,n,o){l()(this,e),this.id=t,this.desc=n,this.val=o},s={allItems:{exp:[],inc:[]},totals:{exp:0,inc:0},budget:0},{addItem:function(e,t,n){var i=s.allItems[e].length>0?s.allItems[e][s.allItems[e].length-1].id+1:0,l=new o(i,t,n);return s.allItems[e].push(l),l},calculateBudget:function(e){var t=0;return s.allItems[e].forEach((function(e){t+=e.val})),s.totals[e]=t,s.budget=s.totals.inc-s.totals.exp,s.totals.inc>0?s.percent=Math.round(s.totals.exp/s.totals.inc*100):s.percent=-1,console.log(s.totals.exp,s.totals.inc),console.log(s.budget,s.percent),s},removeItem:function(e,t){var n=s.allItems[e].map((function(e){return e.id})).indexOf(t);-1!==n&&s.allItems[e].splice(n,1)}});t.default=c}},[[0,"runtime","vendors"]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,