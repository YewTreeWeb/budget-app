(window.webpackJsonp=window.webpackJsonp||[]).push([["app"],{"+4zn":function(e,t,n){"use strict";n.r(t);var a=n("o0o1"),o=n.n(a),s=n("yXPU"),c=n.n(s),r=n("lwsE"),i=n.n(r),l=n("W8MJ"),u=n.n(l),d=n("E4hX"),p=function(){function e(){i()(this,e),this.budgets=db.collection("budgets")}var t,n;return u()(e,[{key:"saveBudget",value:(n=c()(o.a.mark((function e(t){var n,a,s,c,r,i,l;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=new Date,a=t.allItems,s=t.budget,c=t.percent,r=t.totals,i={budget:s,totalInc:r.inc,totalExp:r.exp,totalSav:r.sav,percentExp:c.exp,percentSav:c.sav,allItems:{inc:Object(d.arrayReassign)(a.inc),exp:Object(d.arrayReassign)(a.exp),sav:Object(d.arrayReassign)(a.sav)},created_at:firebase.firestore.Timestamp.fromDate(n)},e.next=5,this.budgets.add(i);case 5:return l=e.sent,e.abrupt("return",l);case 7:case"end":return e.stop()}}),e,this)}))),function(e){return n.apply(this,arguments)})},{key:"updateBudget",value:(t=c()(o.a.mark((function e(t,n){var a,s,c,r,i,l;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=t.allItems,s=t.budget,c=t.percent,r=t.totals,i={budget:s,totalInc:r.inc,totalExp:r.exp,totalSav:r.sav,percentExp:c.exp,percentSav:c.sav,allItems:{inc:Object(d.arrayReassign)(a.inc),exp:Object(d.arrayReassign)(a.exp),sav:Object(d.arrayReassign)(a.sav)}},e.next=4,this.budgets.doc(n).update(i);case 4:return l=e.sent,e.abrupt("return",l);case 6:case"end":return e.stop()}}),e,this)}))),function(e,n){return t.apply(this,arguments)})},{key:"getBudget",value:function(e){this.budgets.orderBy("created_at").onSnapshot((function(t){t.docChanges().forEach((function(t){"added"===t.type&&e(t.doc.data(),t.doc.id)}))}))}}]),e}();t.default=p},0:function(e,t,n){e.exports=n("kFay")},1:function(e,t){},E4hX:function(e,t,n){"use strict";n.r(t),function(e,a){n.d(t,"arrayReassign",(function(){return u}));for(var o,s=function(){},c=["assert","clear","count","debug","dir","dirxml","error","exception","group","groupCollapsed","groupEnd","info","log","markTimeline","profile","profileEnd","table","time","timeEnd","timeline","timelineEnd","timeStamp","trace","warn"],r=c.length,i=window.console=window.console||{};r--;)i[o=c[r]]||(i[o]=s);window.addEventListener("keydown",(function e(t){9===t.keyCode&&(document.body.classList.add("user-is-tabbing"),window.removeEventListener("keydown",e))})),document.querySelector("html").setAttribute("data-browser",e.name);var l=document.querySelector("body");a({xlarge:["1281px","1680px"],large:["981px","1280px"],medium:["737px","980px"],small:["481px","736px"],xsmall:[null,"480px"]}),e.mobile?l.classList.add("is-mobile"):(a.on(">medium",(function(){l.classList.remove("is-mobile"),l.classList.add("is-desktop")})),a.on("<=medium",(function(){l.classList.remove("is-desktop"),l.classList.add("is-mobile")}))),"localhost"===window.location.hostname&&console.log("localhost detected!");var u=function(e){return e.map((function(e){return Object.assign({},e)}))}}.call(this,n("txRt"),n("a6Qp"))},SEKM:function(e,t,n){"use strict";n.r(t);var a=n("lwsE"),o=n.n(a),s=n("W8MJ"),c=n.n(s),r=n("b/SL"),i=n("xVb/"),l=n("+4zn"),u=(n("E4hX"),new l.default),d=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],o=Math.abs(e),s=(o=o.toFixed(2)).split("."),c=s[0],r=s[1];r=Number(r)>0?".".concat(r):"",c.length>3&&(c="".concat(c.substr(0,c.length-3),",").concat(c.substr(c.length-3,3)));var i=n?'<span class="currency">&pound;</span>':"";return"".concat(a?"exp"===t?'<span class="sign">&#45;</span> ':'<span class="sign">&#43;</span> ':"").concat(i).concat(c).concat(r)},p=function(){function e(t,n,a){o()(this,e),this.inputType=t,this.inputDesc=n,this.inputVal=a}return c()(e,[{key:"getInput",value:function(){return{type:this.inputType.value,description:this.inputDesc.value,value:Number(this.inputVal.value)}}},{key:"render",value:function(e,t){var n,a="exp"===t?"expenses":"sav"===t?"savings":"income",o=document.querySelector(".".concat(a,"__list"));n="\n    <li class='".concat(a,"__item' id='").concat(t,"-").concat(e.id,"'>\n      <div class='item-desc'><p>").concat(e.desc,"</p></div>\n      <div class=\"items\">\n        <div class='items__value'><p>").concat(d(e.val,t,!0,!1),"</p></div>\n    "),"exp"!==t&&"sav"!==t||(n+='<div class="items__percent"><p>0&#37;</p></div>'),n+='\n        <button class=\'btn btn--clear items__del\'>\n          <svg id="delete" class="icon" width="20" height="20" aria-hidden="true">\n            <use xlink:href="/assets/images/icons.svg#icon-delete"></use>\n          </svg>\n        </button>\n      </div>\n    </li>\n    ',o.innerHTML+=n}},{key:"loadedRender",value:function(e,t){var n=this,a=e.allItems,o=document.querySelector("#chosen-ID"),s=i.default.getData(),c=document.querySelector(".budget__title");if(t===o.value){var l=e.created_at.toDate(),u=Object(r.format)(new Date(l),"do MMMM yyyy");c.textContent="Available budget saved on ".concat(u),this.displayBudget(e),this.displayPercentage(e.percentExp,"exp"),this.displayPercentage(e.percentSav,"sav"),s.budget=e.budget,s.totals.inc=e.totalInc,s.totals.exp=e.totalExp,s.totals.sav=e.totalSav,s.percent.exp=e.percentExp,s.percent.sav=e.percentSav,a.inc.forEach((function(e){n.render(e,"inc"),i.default.addItem("inc",e.desc,e.val)})),a.exp.forEach((function(e){n.render(e,"exp"),i.default.addItem("exp",e.desc,e.val),n.updatePercentages("exp")})),a.sav.forEach((function(e){n.render(e,"sav"),i.default.addItem("sav",e.desc,e.val),n.updatePercentages("sav")})),console.log(s)}}},{key:"getBudget",value:function(e){return{budget:e.budget,totalInc:e.totals.inc,totalExp:e.totals.exp,totalSav:e.totals.sav,percentExp:e.percent.exp,percentSav:e.percent.sav}}},{key:"displayBudget",value:function(e){var t=e.budget>0?"inc":"exp",n=document.querySelector(".budget__value"),a=document.querySelector(".budget__income .budget__amount"),o=document.querySelector(".budget__expenses .budget__amount"),s=document.querySelector(".budget__savings .budget__amount");n.innerHTML=d(e.budget,t,!0),a.innerHTML=d(e.totalInc,"inc"),o.innerHTML=d(e.totalExp,"exp"),s.innerHTML=d(e.totalSav,"exp")}},{key:"displayPercentage",value:function(e,t){var n="exp"===t?"expenses":"savings",a=document.querySelector(".budget__".concat(n," .budget__percentage"));e>0?(a.classList.add("show"),a.innerHTML="".concat(e,"&#37;")):a.classList.remove("show"),console.log(a)}},{key:"updateBudget",value:function(){var e=i.default.calculateBudget(),t=this.getBudget(e);console.log(t),this.displayBudget(t),this.displayPercentage(t.percentExp,"exp"),this.displayPercentage(t.percentSav,"sav")}},{key:"displayPercentages",value:function(e,t){var n="exp"===t?"expenses":"savings";!function(e,t){for(var n=0;n<e.length;n++)t(e[n],n)}(document.querySelectorAll(".".concat(n," .items__percent")),(function(t,n){e[n]>0?(t.classList.add("show"),t.innerHTML="".concat(e[n],"&#37;")):(t.classList.remove("show"),t.innerHTML="0&#37;")}))}},{key:"updatePercentages",value:function(e){var t=e||this.inputType.value;i.default.calculatePercentages(t);var n=i.default.getPercentages(t);this.displayPercentages(n,t)}},{key:"displayDate",value:function(){var e=document.querySelector(".budget__date"),t=new Date;e.textContent="".concat(["January","February","March","April","May","June","July","August","Sepetember","October","November","December"][t.getMonth()]," ").concat(t.getFullYear())}},{key:"changeType",value:function(){var e=this.inputType,t=document.querySelector("#check");e.addEventListener("change",(function(n){var a=Array.from(e.options);console.log(n),console.log(e.attributes,e.options,e.options.selectedIndex,a,a[1]),a.forEach((function(e){e.selected?(e.setAttribute("selected","selected"),t.classList.remove("exp","sav"),"exp"===e.value?t.classList.add("exp"):"sav"===e.value&&t.classList.add("sav")):e.removeAttribute("selected","selected"),console.log("Value ".concat(e.value))}))}))}},{key:"deleteItem",value:function(){var e=this;document.querySelector(".income-expenses").addEventListener("click",(function(t){if("delete"===t.target.id){var n=t.target.closest(".items").parentElement,a=n.id.split("-"),o=a[0],s=Number(a[1]);console.log(t.target,n,a,o,s),i.default.removeItem(o,s),n.remove(),e.updateBudget(),e.updatePercentages()}}))}},{key:"saving",value:function(){var e=document.querySelector("#save"),t=i.default.getData();e.addEventListener("click",(function(){var n=document.querySelector("#chosen-ID"),a=n.value||null,o=!1;n.classList.contains("chosen")&&(o=!0),console.log(t,t.allItems.inc,a),o&&a?u.updateBudget(t,a).then((function(){console.log("updated"),e.textContent="Updated",e.classList.remove("btn--ghost"),setTimeout((function(){e.textContent="Save",e.classList.add("btn--ghost")}),2e3)})).catch((function(e){console.error(e)})):u.saveBudget(t).then((function(){console.log("saved"),e.textContent="Saved",e.classList.remove("btn--ghost"),setTimeout((function(){e.textContent="Save",e.classList.add("btn--ghost")}),2e3)})).catch((function(e){console.error(e)}))}))}},{key:"styledDropdown",value:function(){var e=document.querySelector("#chosen-date"),t=document.querySelector("#chosen-ID"),n=document.querySelector(".date-list");e.addEventListener("focus",(function(){e.placeholder="Type to filter",n.classList.add("open")})),e.addEventListener("blur",(function(){n.classList.remove("open"),e.placeholder="Choose a date"})),e.addEventListener("input",(function(t){var a=e.value.trim().toLowerCase();!function(e,t){Array.from(e.children).filter((function(e){return!e.textContent.toLowerCase().includes(t)})).forEach((function(e){return e.classList.add("filtered")})),Array.from(e.children).filter((function(e){return e.textContent.toLowerCase().includes(t)})).forEach((function(e){return e.classList.remove("filtered")}))}(n,a),console.log(t)})),n.addEventListener("click",(function(a){if(console.log(a,a.target),t.classList.add("chosen"),Array.from(n.children).forEach((function(e){e.classList.remove("selected")})),"LI"===a.target.tagName){var o=a.target.textContent,s=a.target.getAttribute("data-id");e.setAttribute("value",o),e.placeholder=o,t.setAttribute("value",s),a.target.classList.add("selected")}}))}},{key:"Loaded",value:function(){var e=this,t=document.querySelector(".load-budgets"),n=(i.default.getData(),document.querySelectorAll(".income__list",".expenses__list",".savings__list"));t.addEventListener("submit",(function(a){a.preventDefault(),Array.from(n).forEach((function(e){console.log(e),console.log(e.children)})),u.getBudget((function(t,n){return e.loadedRender(t,n)})),t.reset()}))}},{key:"loading",value:function(){var e=document.querySelector(".date-list"),t=document.querySelector(".date-list li");u.getBudget((function(n,a){var o=n.created_at.toDate();if(o){var s=Object(r.format)(new Date(o),"dd/MM/yyyy"),c='<li class="date-list__item" data-id="'.concat(a,'">').concat(s,"</li>");"No saved dates"===t.textContent&&t.remove(),e.innerHTML+=c}})),this.styledDropdown(),this.Loaded()}}]),e}();t.default=p},a6Qp:function(e,t){e.exports=breakpoints},kFay:function(e,t,n){"use strict";n.r(t);var a=n("cDf5"),o=n.n(a),s=(n("OuUZ"),n("E4hX"),n("xVb/")),c=n("SEKM"),r=n("+4zn"),i=document.querySelector("body");window.onload=function(){window.setTimeout((function(){i.classList.remove("is-loading")}),100)};!function(e){var t=document.querySelector(".add__form"),n=document.querySelector(".add__type"),a=document.querySelector(".add__description"),s=document.querySelector(".add__value"),i=new c.default(n,a,s),l=new r.default;i.displayDate(),i.changeType(),i.loading(),i.saving();var u=e.getData().allItems.inc;t.addEventListener("submit",(function(n){n.preventDefault();var a=i.getInput();if(console.log(a),console.log(o()(a.value)),t.reset(),""!==a.desc&&!isNaN(a.value)&&a.value>0){var s=e.addItem(a.type,a.description,a.value);i.render(s,a.type),i.updateBudget(),i.updatePercentages(),console.log("form submitted!"),console.log(s)}console.log(u)})),i.deleteItem(),l.getBudget((function(e,t){console.log(e,t)}))}(s.default)},txRt:function(e,t){e.exports=browser},"xVb/":function(e,t,n){"use strict";n.r(t);var a,o,s,c=n("cDf5"),r=n.n(c),i=n("lwsE"),l=n.n(i),u=n("W8MJ"),d=n.n(u),p=(a=function(){function e(t,n,a){l()(this,e),this.id=t,this.desc=n,this.val=a,this.percentage=-1}return d()(e,[{key:"calcPercentage",value:function(e){this.percentage=e>0?Math.round(this.val/e*100):-1,console.log("this value is ".concat(r()(this.val)),"the totalIncome ".concat(r()(e)))}},{key:"getPercentage",value:function(){return this.percentage}}]),e}(),o={allItems:{exp:[],inc:[],sav:[]},totals:{exp:0,inc:0,sav:0},percent:{exp:-1,sav:-1},budget:0},s=function(e){var t=0;o.allItems[e].forEach((function(e){t+=e.val})),o.totals[e]=t},{addItem:function(e,t,n){var s=o.allItems[e].length>0?o.allItems[e][o.allItems[e].length-1].id+1:0,c=new a(s,t,n);return o.allItems[e].push(c),c},calculateBudget:function(){return s("exp"),s("inc"),s("sav"),o.budget=o.totals.inc-(o.totals.exp+o.totals.sav),o.totals.inc>0?(o.percent.exp=Math.round(o.totals.exp/o.totals.inc*100),o.percent.sav=Math.round(o.totals.sav/o.totals.inc*100)):(o.percent.exp=-1,o.percent.sav=-1),console.log(o.totals.exp,o.totals.inc),console.log(o.budget,o.percent.exp,o.percent.sav),o},calculatePercentages:function(e){o.allItems[e].forEach((function(e){e.calcPercentage(o.totals.inc)}))},getPercentages:function(e){return o.allItems[e].map((function(e){return e.getPercentage()}))},removeItem:function(e,t){var n=o.allItems[e].map((function(e){return e.id})).indexOf(t);-1!==n&&o.allItems[e].splice(n,1)},getData:function(){return o}});t.default=p}},[[0,"runtime","vendors"]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,