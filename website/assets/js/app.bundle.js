(window.webpackJsonp=window.webpackJsonp||[]).push([["app"],{"+4zn":function(e,t,n){"use strict";n.r(t);var a=n("o0o1"),o=n.n(a),s=n("yXPU"),c=n.n(s),i=n("lwsE"),l=n.n(i),r=n("W8MJ"),u=n.n(r),d=function(e){return e.map((function(e){return Object.assign({},e)}))},p=function(){function e(){l()(this,e),this.budgets=db.collection("budgets")}var t,n;return u()(e,[{key:"saveBudget",value:(n=c()(o.a.mark((function e(t){var n,a,s,c,i,l,r;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=new Date,a=t.allItems,s=t.budget,c=t.percent,i=t.totals,l={budget:s,totalInc:i.inc,totalExp:i.exp,totalSav:i.sav,percentExp:c.exp,percentSav:c.sav,allItems:{inc:d(a.inc),exp:d(a.exp),sav:d(a.sav)},created_at:firebase.firestore.Timestamp.fromDate(n)},e.next=5,this.budgets.add(l);case 5:return r=e.sent,e.abrupt("return",r);case 7:case"end":return e.stop()}}),e,this)}))),function(e){return n.apply(this,arguments)})},{key:"updateBudget",value:(t=c()(o.a.mark((function e(t,n){var a,s,c,i,l,r,u;return o.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=new Date,s=t.allItems,c=t.budget,i=t.percent,l=t.totals,r={budget:c,totalInc:l.inc,totalExp:l.exp,totalSav:l.sav,percentExp:i.exp,percentSav:i.sav,allItems:{inc:d(s.inc),exp:d(s.exp),sav:d(s.sav)},created_at:firebase.firestore.Timestamp.fromDate(a)},e.next=5,this.budgets.doc(n).update(r);case 5:return u=e.sent,e.abrupt("return",u);case 7:case"end":return e.stop()}}),e,this)}))),function(e,n){return t.apply(this,arguments)})},{key:"getBudget",value:function(e){this.budgets.orderBy("created_at").onSnapshot((function(t){t.docChanges().forEach((function(t){"added"===t.type&&e(t.doc.data(),t.doc.id)}))}))}}]),e}();t.default=p},0:function(e,t,n){e.exports=n("kFay")},1:function(e,t){},E4hX:function(e,t,n){(function(e,t){for(var n,a=function(){},o=["assert","clear","count","debug","dir","dirxml","error","exception","group","groupCollapsed","groupEnd","info","log","markTimeline","profile","profileEnd","table","time","timeEnd","timeline","timelineEnd","timeStamp","trace","warn"],s=o.length,c=window.console=window.console||{};s--;)c[n=o[s]]||(c[n]=a);window.addEventListener("keydown",(function e(t){9===t.keyCode&&(document.body.classList.add("user-is-tabbing"),window.removeEventListener("keydown",e))})),document.querySelector("html").setAttribute("data-browser",e.name);var i=document.querySelector("body");t({xlarge:["1281px","1680px"],large:["981px","1280px"],medium:["737px","980px"],small:["481px","736px"],xsmall:[null,"480px"]}),e.mobile?i.classList.add("is-mobile"):(t.on(">medium",(function(){i.classList.remove("is-mobile"),i.classList.add("is-desktop")})),t.on("<=medium",(function(){i.classList.remove("is-desktop"),i.classList.add("is-mobile")}))),"localhost"===window.location.hostname&&console.log("localhost detected!")}).call(this,n("txRt"),n("a6Qp"))},SEKM:function(e,t,n){"use strict";n.r(t);var a=n("lwsE"),o=n.n(a),s=n("W8MJ"),c=n.n(s),i=n("b/SL"),l=n("xVb/"),r=new(n("+4zn").default),u=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],o=Math.abs(e),s=(o=o.toFixed(2)).split("."),c=s[0],i=s[1];i=Number(i)>0?".".concat(i):"",c.length>3&&(c="".concat(c.substr(0,c.length-3),",").concat(c.substr(c.length-3,3)));var l=n?'<span class="currency">&pound;</span>':"";return"".concat(a?"exp"===t?'<span class="sign">&#45;</span> ':'<span class="sign">&#43;</span> ':"").concat(l).concat(c).concat(i)},d=function(){function e(t,n,a){o()(this,e),this.inputType=t,this.inputDesc=n,this.inputVal=a}return c()(e,[{key:"getInput",value:function(){return{type:this.inputType.value,description:this.inputDesc.value,value:Number(this.inputVal.value)}}},{key:"render",value:function(e,t){var n,a="exp"===t?"expenses":"sav"===t?"savings":"income",o=document.querySelector(".".concat(a,"__list"));n="\n    <li class='".concat(a,"__item' id='").concat(t,"-").concat(e.id,"'>\n      <div class='item-desc'><p>").concat(e.desc,"</p></div>\n      <div class=\"items\">\n        <div class='items__value'><p>").concat(u(e.val,t,!0,!1),"</p></div>\n    "),"exp"!==t&&"sav"!==t||(n+='<div class="items__percent"><p>0&#37;</p></div>'),n+='\n        <button class=\'btn btn--clear items__del\'>\n          <svg id="delete" class="icon" width="20" height="20" aria-hidden="true">\n            <use xlink:href="/assets/images/icons.svg#icon-delete"></use>\n          </svg>\n        </button>\n      </div>\n    </li>\n    ',o.innerHTML+=n}},{key:"getBudget",value:function(e){return{budget:e.budget,totalInc:e.totals.inc,totalExp:e.totals.exp,totalSav:e.totals.sav,percentExp:e.percent.exp,percentSav:e.percent.sav}}},{key:"displayBudget",value:function(e){var t=e.budget>0?"inc":"exp",n="exp"===t?"expenses":"income",a=document.querySelector(".budget__value"),o=document.querySelector(".budget__income .budget__amount"),s=document.querySelector(".budget__expenses .budget__amount"),c=document.querySelector(".budget__savings .budget__amount");a.innerHTML=u(e.budget,t,!0),o.innerHTML=u(e.totalInc,"inc"),s.innerHTML=u(e.totalExp,"exp"),c.innerHTML=u(e.totalSav,"exp"),console.log("The ".concat(n," is/are ").concat(e.budget)),console.log(o,s)}},{key:"displayPercentage",value:function(e,t){var n="exp"===t?"expenses":"savings",a=document.querySelector(".budget__".concat(n," .budget__percentage"));e>0?(a.classList.add("show"),a.innerHTML="".concat(e,"&#37;")):a.classList.remove("show"),console.log(a)}},{key:"updateBudget",value:function(){var e=l.default.calculateBudget(),t=this.getBudget(e);console.log(t),this.displayBudget(t),this.displayPercentage(t.percentExp,"exp"),this.displayPercentage(t.percentSav,"sav")}},{key:"displayPercentages",value:function(e,t){var n="exp"===t?"expenses":"savings";!function(e,t){for(var n=0;n<e.length;n++)t(e[n],n)}(document.querySelectorAll(".".concat(n," .items__percent")),(function(t,n){e[n]>0?(t.classList.add("show"),t.innerHTML="".concat(e[n],"&#37;")):(t.classList.remove("show"),t.innerHTML="0&#37;")}))}},{key:"updatePercentages",value:function(){l.default.calculatePercentages(this.inputType.value);var e=l.default.getPercentages(this.inputType.value);this.displayPercentages(e,this.inputType.value)}},{key:"displayDate",value:function(){var e=document.querySelector(".budget__date"),t=new Date;e.textContent="".concat(["January","February","March","April","May","June","July","August","Sepetember","October","November","December"][t.getMonth()]," ").concat(t.getFullYear())}},{key:"changeType",value:function(){var e=this.inputType,t=document.querySelector("#check");e.addEventListener("change",(function(n){var a=Array.from(e.options);console.log(n),console.log(e.attributes,e.options,e.options.selectedIndex,a,a[1]),a.forEach((function(e){e.selected?(e.setAttribute("selected","selected"),t.classList.remove("exp","sav"),"exp"===e.value?t.classList.add("exp"):"sav"===e.value&&t.classList.add("sav")):e.removeAttribute("selected","selected"),console.log("Value ".concat(e.value))}))}))}},{key:"deleteItem",value:function(){var e=this;document.querySelector(".income-expenses").addEventListener("click",(function(t){if("delete"===t.target.id){var n=t.target.closest(".items").parentElement,a=n.id.split("-"),o=a[0],s=Number(a[1]);console.log(t.target,n,a,o,s),l.default.removeItem(o,s),n.remove(),e.updateBudget(),e.updatePercentages()}}))}},{key:"saving",value:function(){var e=document.querySelector("#save"),t=l.default.getData(),n=Object(i.format)(new Date,"dd/MM/yyyy"),a=[],o=!1;e.addEventListener("click",(function(){var s=document.querySelectorAll(".date-list > li");Array.from(s).forEach((function(e){a.push({date:e.textContent,id:e.getAttribute("data-id")})})),console.log(t,t.allItems.inc,a);for(var c=0;c<a.length;c++)if(a[c].date===n){o=!0;break}o?(a.forEach((function(a){a.date===n&&r.updateBudget(t,a.id).then((function(){console.log("updated"),e.textContent="Updated",e.classList.remove("btn--ghost"),setTimeout((function(){e.textContent="Save",e.classList.add("btn--ghost")}),4e3)})).catch((function(e){console.error(e)}))})),console.log("has todays date")):(r.saveBudget(t).then((function(){console.log("saved"),e.textContent="Saved",e.classList.remove("btn--ghost"),setTimeout((function(){e.textContent="Save",e.classList.add("btn--ghost")}),4e3)})).catch((function(e){console.error(e)})),console.log("does not have todays date"))}))}},{key:"loading",value:function(){var e=document.querySelector(".date-list");r.getBudget((function(t,n){var a=t.created_at.toDate();if(a){var o=Object(i.format)(new Date(a),"dd/MM/yyyy"),s='<li class="date-list__item" data-date="'.concat(o,'" data-id="').concat(n,'">').concat(o,"</li>");e.innerHTML+=s}}))}}]),e}();t.default=d},a6Qp:function(e,t){e.exports=breakpoints},kFay:function(e,t,n){"use strict";n.r(t);var a=n("cDf5"),o=n.n(a),s=(n("OuUZ"),n("E4hX"),n("xVb/")),c=n("SEKM"),i=n("+4zn"),l=document.querySelector("body");window.onload=function(){window.setTimeout((function(){l.classList.remove("is-loading")}),100)};!function(e){var t=document.querySelector(".add__form"),n=document.querySelector(".add__type"),a=document.querySelector(".add__description"),s=document.querySelector(".add__value"),l=new c.default(n,a,s),r=new i.default;l.displayDate(),l.changeType(),l.loading(),l.saving();var u=e.getData().allItems.inc;t.addEventListener("submit",(function(n){n.preventDefault();var a=l.getInput();if(console.log(a),console.log(o()(a.value)),t.reset(),""!==a.desc&&!isNaN(a.value)&&a.value>0){var s=e.addItem(a.type,a.description,a.value);l.render(s,a.type),l.updateBudget(),l.updatePercentages(),console.log("form submitted!"),console.log(s)}console.log(u)})),l.deleteItem(),r.getBudget((function(e,t){console.log(e,t)}))}(s.default)},txRt:function(e,t){e.exports=browser},"xVb/":function(e,t,n){"use strict";n.r(t);var a,o,s,c=n("cDf5"),i=n.n(c),l=n("lwsE"),r=n.n(l),u=n("W8MJ"),d=n.n(u),p=(a=function(){function e(t,n,a){r()(this,e),this.id=t,this.desc=n,this.val=a,this.percentage=-1}return d()(e,[{key:"calcPercentage",value:function(e){this.percentage=e>0?Math.round(this.val/e*100):-1,console.log("this value is ".concat(i()(this.val)),"the totalIncome ".concat(i()(e)))}},{key:"getPercentage",value:function(){return this.percentage}}]),e}(),o={allItems:{exp:[],inc:[],sav:[]},totals:{exp:0,inc:0,sav:0},percent:{exp:-1,sav:-1},budget:0},s=function(e){var t=0;o.allItems[e].forEach((function(e){t+=e.val})),o.totals[e]=t},{addItem:function(e,t,n){var s=o.allItems[e].length>0?o.allItems[e][o.allItems[e].length-1].id+1:0,c=new a(s,t,n);return o.allItems[e].push(c),c},calculateBudget:function(){return s("exp"),s("inc"),s("sav"),o.budget=o.totals.inc-(o.totals.exp+o.totals.sav),o.totals.inc>0?(o.percent.exp=Math.round(o.totals.exp/o.totals.inc*100),o.percent.sav=Math.round(o.totals.sav/o.totals.inc*100)):(o.percent.exp=-1,o.percent.sav=-1),console.log(o.totals.exp,o.totals.inc),console.log(o.budget,o.percent.exp,o.percent.sav),o},calculatePercentages:function(e){o.allItems[e].forEach((function(e){e.calcPercentage(o.totals.inc)}))},getPercentages:function(e){return o.allItems[e].map((function(e){return e.getPercentage()}))},removeItem:function(e,t){var n=o.allItems[e].map((function(e){return e.id})).indexOf(t);-1!==n&&o.allItems[e].splice(n,1)},getData:function(){return o}});t.default=p}},[[0,"runtime","vendors"]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,