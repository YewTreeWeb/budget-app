(window.webpackJsonp=window.webpackJsonp||[]).push([["vendors"],{"+71H":function(t,e,r){"use strict";var n=r("qjSr"),o=r("aTj1"),i=r("UBAn"),a=r("2GRh"),u=r("RJ/z"),c=r("hemD"),s=r("XsaD"),f=r("TU3P"),l=r("R5T6"),p=r("Khql"),y=r("VbLK"),h=Object("a"),v="a"!==h[0]||!(0 in h),d=p("String.prototype.split");t.exports=function(t){var e,r=f(this),p=v&&y(r)?d(r,""):r,h=s(p.length);if(!c(t))throw new TypeError("Array.prototype.map callback must be a function");arguments.length>1&&(e=arguments[1]);for(var b=n(r,h),g=0;g<h;){var m=l(g),w=u(r,m);if(w){var O=a(r,m),j=o(t,e,[O,g,r]);i(b,m,j)}g+=1}return b}},"+7c2":function(t,e,r){"use strict";var n=r("7r9i"),o=r("aOl1"),i=r("82c2");t.exports=function(){n();var t=o();return i(Promise,{allSettled:t},{allSettled:function(){return Promise.allSettled!==t}}),t}},"+85J":function(t,e,r){"use strict";var n=r("XhRf"),o=r("82c2");t.exports=function(){var t=n();return o(String.prototype,{padEnd:t},{padEnd:function(){return String.prototype.padEnd!==t}}),t}},"+IY2":function(t,e,r){"use strict";var n=r("aJg2");t.exports=function(){return"function"==typeof Object.entries?Object.entries:n}},"+okW":function(t,e,r){"use strict";var n=r("2GRh"),o=r("1SyS"),i=r("6ll1"),a=r("ciGR"),u=r("R5T6"),c=r("RIFg"),s=r("5xAX"),f=r("Zoej"),l=RegExp,p="flags"in RegExp.prototype,y=function(t){var e=this;if("Object"!==c(e))throw new TypeError('"this" value must be an Object');var r=u(t),y=function(t,e){var r="flags"in e?n(e,"flags"):u(s(e));return{flags:r,matcher:new t(p&&"string"==typeof r?e:t===l?e.source:e,r)}}(i(e,l),e),h=y.flags,v=y.matcher,d=a(n(e,"lastIndex"));return o(v,"lastIndex",d,!0),function(t,e,r,n){if("String"!==c(e))throw new TypeError('"S" value must be a String');if("Boolean"!==c(r))throw new TypeError('"global" value must be a Boolean');if("Boolean"!==c(n))throw new TypeError('"fullUnicode" value must be a Boolean');return new f(t,e,r,n)}(v,r,h.indexOf("g")>-1,h.indexOf("u")>-1)},h=Object.defineProperty,v=Object.getOwnPropertyDescriptor;if(h&&v){var d=v(y,"name");d&&d.configurable&&h(y,"name",{value:"[Symbol.matchAll]"})}t.exports=y},"/RMt":function(t,e,r){"use strict";var n,o="function"==typeof Map&&Map.prototype?Map:null,i="function"==typeof Set&&Set.prototype?Set:null;o||(n=function(t){return!1});var a=o?Map.prototype.has:null,u=i?Set.prototype.has:null;n||a||(n=function(t){return!1}),t.exports=n||function(t){if(!t||"object"!=typeof t)return!1;try{if(a.call(t),u)try{u.call(t)}catch(t){return!0}return t instanceof o}catch(t){}return!1}},"/sVA":function(t,e,r){"use strict";var n=Object.prototype.toString;if(r("UVaH")()){var o=Symbol.prototype.toString,i=/^Symbol\(.*\)$/;t.exports=function(t){if("symbol"==typeof t)return!0;if("[object Symbol]"!==n.call(t))return!1;try{return function(t){return"symbol"==typeof t.valueOf()&&i.test(o.call(t))}(t)}catch(t){return!1}}}else t.exports=function(t){return!1}},"03Sc":function(t,e,r){"use strict";var n=r("HvP7"),o=r("82c2");t.exports=function(){var t=n();return o(Object,{fromEntries:t},{fromEntries:function(){return Object.fromEntries!==t}}),t}},"0QyR":function(t,e,r){"use strict";r("ib7Q")(),r("HdW7")(),r("baqT")(),r("+85J")(),r("dEfh")(),r("GQul")},"0nHT":function(t,e,r){"use strict";(function(t){r("szxn"),r("D2IK"),r("570s"),r("bZMm"),"undefined"!=typeof window&&(r("7K3S"),r("hJwt"),r("dwco").polyfill(),r("7cND"),r("1yfs"),r("rTV3"),r("eYmq"),r("Wr5T"),r("lt0f")),r("lfCk"),r("DpIS"),t.requestIdleCallback=r("ucYh"),t.cancelIdleCallback=t.requestIdleCallback.cancelIdleCallback,"function"==typeof Symbol&&Symbol.iterator&&"function"==typeof TouchList&&"function"!=typeof TouchList.prototype[Symbol.iterator]&&(TouchList.prototype[Symbol.iterator]=Array.prototype[Symbol.iterator])}).call(this,r("yLpj"))},"0yco":function(t,e,r){"use strict";var n=r("6ayh")("%Math%"),o=r("u1xu"),i=r("IFfy"),a=r("xhJ2"),u=r("WXWk"),c=n.floor,s=n.abs;t.exports=function(t){var e=o(t);return i(e)?0:0!==e&&a(e)?u(e)*c(s(e)):e}},"1Fze":function(t,e,r){"use strict";var n=r("6ayh"),o=n("%TypeError%"),i=n("%Number%"),a=n("%RegExp%"),u=n("%parseInt%"),c=r("Khql"),s=r("D6qd"),f=r("E1iy"),l=c("String.prototype.slice"),p=s(/^0b[01]+$/i),y=s(/^0o[0-7]+$/i),h=s(/^[-+]0x[0-9a-f]+$/i),v=s(new a("["+["","​","￾"].join("")+"]","g")),d=["\t\n\v\f\r   ᠎    ","         　\u2028","\u2029\ufeff"].join(""),b=new RegExp("(^["+d+"]+)|(["+d+"]+$)","g"),g=c("String.prototype.replace"),m=r("zkC3");t.exports=function t(e){var r=f(e)?e:m(e,i);if("symbol"==typeof r)throw new o("Cannot convert a Symbol value to a number");if("string"==typeof r){if(p(r))return t(u(l(r,2),2));if(y(r))return t(u(l(r,2),8));if(v(r)||h(r))return NaN;var n=function(t){return g(t,b,"")}(r);if(n!==r)return t(n)}return i(r)}},"1KsK":function(t,e,r){"use strict";var n=Object.prototype.toString;t.exports=function(t){var e=n.call(t),r="[object Arguments]"===e;return r||(r="[object Array]"!==e&&null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Function]"===n.call(t.callee)),r}},"1Soo":function(t,e,r){"use strict";var n=r("6ayh")("%Array%"),o=!n.isArray&&r("Khql")("Object.prototype.toString");t.exports=n.isArray||function(t){return"[object Array]"===o(t)}},"1SyS":function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("rCmP"),i=r("RIFg");t.exports=function(t,e,r,a){if("Object"!==i(t))throw new n("Assertion failed: `O` must be an Object");if(!o(e))throw new n("Assertion failed: `P` must be a Property Key");if("Boolean"!==i(a))throw new n("Assertion failed: `Throw` must be a Boolean");if(a)return t[e]=r,!0;try{t[e]=r}catch(t){return!1}}},"1l3A":function(t,e,r){"use strict";var n=r("6ayh")("%Math%"),o=n.floor,i=n.abs,a=r("IFfy"),u=r("xhJ2");t.exports=function(t){if("number"!=typeof t||a(t)||!u(t))return!1;var e=i(t);return o(e)===e}},"1seS":function(t,e,r){"use strict";var n=Array.prototype.slice,o=r("1KsK"),i=Object.keys,a=i?function(t){return i(t)}:r("sYn3"),u=Object.keys;a.shim=function(){Object.keys?function(){var t=Object.keys(arguments);return t&&t.length===arguments.length}(1,2)||(Object.keys=function(t){return o(t)?u(n.call(t)):u(t)}):Object.keys=a;return Object.keys||a},t.exports=a},"1yfs":function(t,e){!function(){if(window.matchMedia&&window.matchMedia("all").addListener)return!1;var t=window.matchMedia,e=t("only all").matches,r=!1,n=0,o=[],i=function(e){clearTimeout(n),n=setTimeout((function(){for(var e=0,r=o.length;e<r;e++){var n=o[e].mql,i=o[e].listeners||[],a=t(n.media).matches;if(a!==n.matches){n.matches=a;for(var u=0,c=i.length;u<c;u++)i[u].call(window,n)}}}),30)};window.matchMedia=function(n){var a=t(n),u=[],c=0;return a.addListener=function(t){e&&(r||(r=!0,window.addEventListener("resize",i,!0)),0===c&&(c=o.push({mql:a,listeners:u})),u.push(t))},a.removeListener=function(t){for(var e=0,r=u.length;e<r;e++)u[e]===t&&u.splice(e,1)},a}}()},"22yB":function(t,e,r){"use strict";var n=r("yN6O");t.exports=function(){return Array.prototype.flat||n}},"2GRh":function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("JxQ3"),i=r("rCmP"),a=r("RIFg");t.exports=function(t,e){if("Object"!==a(t))throw new n("Assertion failed: Type(O) is not Object");if(!i(e))throw new n("Assertion failed: IsPropertyKey(P) is not true, got "+o(e));return t[e]}},"2Nju":function(t,e,r){"use strict";var n=r("oNNP"),o=RegExp.prototype.exec,i=Object.getOwnPropertyDescriptor,a=Object.prototype.toString,u="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;t.exports=function(t){if(!t||"object"!=typeof t)return!1;if(!u)return"[object RegExp]"===a.call(t);var e=i(t,"lastIndex");return!(!e||!n(e,"value"))&&function(t){try{var e=t.lastIndex;return t.lastIndex=0,o.call(t),!0}catch(t){return!1}finally{t.lastIndex=e}}(t)}},"2fPq":function(t,e,r){"use strict";r("y14U"),r("fpfb"),r("V5gn")},"3hvG":function(t,e,r){"use strict";var n=r("6ayh")("%String%"),o=r("zkC3"),i=r("R5T6");t.exports=function(t){var e=o(t,n);return"symbol"==typeof e?e:i(e)}},"45zb":function(t,e,r){"use strict";var n="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag,o=Object.prototype.toString,i=function(t){return!(n&&t&&"object"==typeof t&&Symbol.toStringTag in t)&&"[object Arguments]"===o.call(t)},a=function(t){return!!i(t)||null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Array]"!==o.call(t)&&"[object Function]"===o.call(t.callee)},u=function(){return i(arguments)}();i.isLegacyArguments=a,t.exports=u?i:a},"4GK0":function(t,e,r){"use strict";r("xmva"),r("yNSe"),r("nvDk"),r("FhVV"),r("b+qZ")},"570s":function(t,e){!function(t){"use strict";t.console||(t.console={});for(var e,r,n=t.console,o=function(){},i=["memory"],a="assert,clear,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,markTimeline,profile,profiles,profileEnd,show,table,time,timeEnd,timeline,timelineEnd,timeStamp,trace,warn".split(",");e=i.pop();)n[e]||(n[e]={});for(;r=a.pop();)n[r]||(n[r]=o)}("undefined"==typeof window?this:window)},"5xAX":function(t,e,r){"use strict";var n=r("82c2"),o=r("RLeF"),i=r("VwiP"),a=r("V+xs"),u=r("HH6Z"),c=o(i);n(c,{getPolyfill:a,implementation:i,shim:u}),t.exports=c},"5yQQ":function(t,e,r){"use strict";var n=r("nRDI");t.exports=function(){if("undefined"!=typeof document){if(document.contains)return document.contains;if(document.body&&document.body.contains)return document.body.contains}return n}},"6B6L":function(t,e,r){"use strict";var n=r("JxQ3"),o=r("6ayh")("%TypeError%"),i=r("aTj1"),a=r("2GRh"),u=r("xby5"),c=r("hemD"),s=r("JwX2"),f=r("m2++"),l=r("p2h6"),p=r("RIFg");t.exports=function(t,e,r){if(!c(r))throw new o("Assertion failed: `adder` is not callable");if(null==e)throw new o("Assertion failed: `iterable` is present, and not nullish");for(var y=u(e);;){var h=f(y);if(!h)return t;var v=l(h);if("Object"!==p(v)){var d=new o("iterator next must return an Object, got "+n(v));return s(y,(function(){throw d}))}try{var b=a(v,"0"),g=a(v,"1");i(r,t,[b,g])}catch(t){return s(y,(function(){throw t}))}}}},"6ayh":function(t,e,r){"use strict";var n=TypeError,o=Object.getOwnPropertyDescriptor;if(o)try{o({},"")}catch(t){o=null}var i=function(){throw new n},a=o?function(){try{return i}catch(t){try{return o(arguments,"callee").get}catch(t){return i}}}():i,u=r("UVaH")(),c=Object.getPrototypeOf||function(t){return t.__proto__},s=void 0,f="undefined"==typeof Uint8Array?void 0:c(Uint8Array),l={"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer,"%ArrayBufferPrototype%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer.prototype,"%ArrayIteratorPrototype%":u?c([][Symbol.iterator]()):void 0,"%ArrayPrototype%":Array.prototype,"%ArrayProto_entries%":Array.prototype.entries,"%ArrayProto_forEach%":Array.prototype.forEach,"%ArrayProto_keys%":Array.prototype.keys,"%ArrayProto_values%":Array.prototype.values,"%AsyncFromSyncIteratorPrototype%":void 0,"%AsyncFunction%":void 0,"%AsyncFunctionPrototype%":void 0,"%AsyncGenerator%":void 0,"%AsyncGeneratorFunction%":void 0,"%AsyncGeneratorPrototype%":void 0,"%AsyncIteratorPrototype%":s&&u&&Symbol.asyncIterator?s[Symbol.asyncIterator]():void 0,"%Atomics%":"undefined"==typeof Atomics?void 0:Atomics,"%Boolean%":Boolean,"%BooleanPrototype%":Boolean.prototype,"%DataView%":"undefined"==typeof DataView?void 0:DataView,"%DataViewPrototype%":"undefined"==typeof DataView?void 0:DataView.prototype,"%Date%":Date,"%DatePrototype%":Date.prototype,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%ErrorPrototype%":Error.prototype,"%eval%":eval,"%EvalError%":EvalError,"%EvalErrorPrototype%":EvalError.prototype,"%Float32Array%":"undefined"==typeof Float32Array?void 0:Float32Array,"%Float32ArrayPrototype%":"undefined"==typeof Float32Array?void 0:Float32Array.prototype,"%Float64Array%":"undefined"==typeof Float64Array?void 0:Float64Array,"%Float64ArrayPrototype%":"undefined"==typeof Float64Array?void 0:Float64Array.prototype,"%Function%":Function,"%FunctionPrototype%":Function.prototype,"%Generator%":void 0,"%GeneratorFunction%":void 0,"%GeneratorPrototype%":void 0,"%Int8Array%":"undefined"==typeof Int8Array?void 0:Int8Array,"%Int8ArrayPrototype%":"undefined"==typeof Int8Array?void 0:Int8Array.prototype,"%Int16Array%":"undefined"==typeof Int16Array?void 0:Int16Array,"%Int16ArrayPrototype%":"undefined"==typeof Int16Array?void 0:Int8Array.prototype,"%Int32Array%":"undefined"==typeof Int32Array?void 0:Int32Array,"%Int32ArrayPrototype%":"undefined"==typeof Int32Array?void 0:Int32Array.prototype,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":u?c(c([][Symbol.iterator]())):void 0,"%JSON%":"object"==typeof JSON?JSON:void 0,"%JSONParse%":"object"==typeof JSON?JSON.parse:void 0,"%Map%":"undefined"==typeof Map?void 0:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&u?c((new Map)[Symbol.iterator]()):void 0,"%MapPrototype%":"undefined"==typeof Map?void 0:Map.prototype,"%Math%":Math,"%Number%":Number,"%NumberPrototype%":Number.prototype,"%Object%":Object,"%ObjectPrototype%":Object.prototype,"%ObjProto_toString%":Object.prototype.toString,"%ObjProto_valueOf%":Object.prototype.valueOf,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?void 0:Promise,"%PromisePrototype%":"undefined"==typeof Promise?void 0:Promise.prototype,"%PromiseProto_then%":"undefined"==typeof Promise?void 0:Promise.prototype.then,"%Promise_all%":"undefined"==typeof Promise?void 0:Promise.all,"%Promise_reject%":"undefined"==typeof Promise?void 0:Promise.reject,"%Promise_resolve%":"undefined"==typeof Promise?void 0:Promise.resolve,"%Proxy%":"undefined"==typeof Proxy?void 0:Proxy,"%RangeError%":RangeError,"%RangeErrorPrototype%":RangeError.prototype,"%ReferenceError%":ReferenceError,"%ReferenceErrorPrototype%":ReferenceError.prototype,"%Reflect%":"undefined"==typeof Reflect?void 0:Reflect,"%RegExp%":RegExp,"%RegExpPrototype%":RegExp.prototype,"%Set%":"undefined"==typeof Set?void 0:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&u?c((new Set)[Symbol.iterator]()):void 0,"%SetPrototype%":"undefined"==typeof Set?void 0:Set.prototype,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer,"%SharedArrayBufferPrototype%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer.prototype,"%String%":String,"%StringIteratorPrototype%":u?c(""[Symbol.iterator]()):void 0,"%StringPrototype%":String.prototype,"%Symbol%":u?Symbol:void 0,"%SymbolPrototype%":u?Symbol.prototype:void 0,"%SyntaxError%":SyntaxError,"%SyntaxErrorPrototype%":SyntaxError.prototype,"%ThrowTypeError%":a,"%TypedArray%":f,"%TypedArrayPrototype%":f?f.prototype:void 0,"%TypeError%":n,"%TypeErrorPrototype%":n.prototype,"%Uint8Array%":"undefined"==typeof Uint8Array?void 0:Uint8Array,"%Uint8ArrayPrototype%":"undefined"==typeof Uint8Array?void 0:Uint8Array.prototype,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray,"%Uint8ClampedArrayPrototype%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray.prototype,"%Uint16Array%":"undefined"==typeof Uint16Array?void 0:Uint16Array,"%Uint16ArrayPrototype%":"undefined"==typeof Uint16Array?void 0:Uint16Array.prototype,"%Uint32Array%":"undefined"==typeof Uint32Array?void 0:Uint32Array,"%Uint32ArrayPrototype%":"undefined"==typeof Uint32Array?void 0:Uint32Array.prototype,"%URIError%":URIError,"%URIErrorPrototype%":URIError.prototype,"%WeakMap%":"undefined"==typeof WeakMap?void 0:WeakMap,"%WeakMapPrototype%":"undefined"==typeof WeakMap?void 0:WeakMap.prototype,"%WeakSet%":"undefined"==typeof WeakSet?void 0:WeakSet,"%WeakSetPrototype%":"undefined"==typeof WeakSet?void 0:WeakSet.prototype},p=r("D3zA").call(Function.call,String.prototype.replace),y=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,h=/\\(\\)?/g,v=function(t){var e=[];return p(t,y,(function(t,r,n,o){e[e.length]=n?p(o,h,"$1"):r||t})),e},d=function(t,e){if(!(t in l))throw new SyntaxError("intrinsic "+t+" does not exist!");if(void 0===l[t]&&!e)throw new n("intrinsic "+t+" exists, but is not available. Please file an issue!");return l[t]};t.exports=function(t,e){if("string"!=typeof t||0===t.length)throw new TypeError("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof e)throw new TypeError('"allowMissing" argument must be a boolean');for(var r=v(t),i=d("%"+(r.length>0?r[0]:"")+"%",e),a=1;a<r.length;a+=1)if(null!=i)if(o&&a+1>=r.length){var u=o(i,r[a]);if(!e&&!(r[a]in i))throw new n("base intrinsic for "+t+" exists, but the property is not available.");i=u?u.get||u.value:i[r[a]]}else i=i[r[a]];return i}},"6iti":function(t,e,r){"use strict";var n=r("6B6L"),o=r("UBAn"),i=r("2GRh"),a=r("1Soo"),u=r("Ii9V"),c=r("3hvG"),s=r("RIFg"),f=function(t,e){var r=c(t);o(this,r,e)},l="function"==typeof Symbol&&"symbol"==typeof Symbol("foo");t.exports=function(t){u(t);var e={};if(!l){if(!a(t))throw new TypeError("this environment lacks native Symbols, and can not support non-Array iterables");return function(t,e){for(var r=0;r<e.length;++r){var n=e[r];if("Object"!==s(n))throw new TypeError("iterator returned a non-object; entry expected");var a=i(n,"0"),u=i(n,"1"),f=c(a);o(t,f,u)}}(e,t),e}return n(e,t,f)}},"6ll1":function(t,e,r){"use strict";var n=r("6ayh"),o=n("%Symbol.species%",!0),i=n("%TypeError%"),a=r("zODz"),u=r("RIFg");t.exports=function(t,e){if("Object"!==u(t))throw new i("Assertion failed: Type(O) is not Object");var r=t.constructor;if(void 0===r)return e;if("Object"!==u(r))throw new i("O.constructor is not an Object");var n=o?r[o]:void 0;if(null==n)return e;if(a(n))return n;throw new i("no constructor found")}},"7IBh":function(t,e,r){"use strict";var n=r("xG2L"),o=r("RIFg");t.exports=function(t){if(void 0===t)return t;n(o,"Property Descriptor","Desc",t);var e={};return"[[Value]]"in t&&(e.value=t["[[Value]]"]),"[[Writable]]"in t&&(e.writable=t["[[Writable]]"]),"[[Get]]"in t&&(e.get=t["[[Get]]"]),"[[Set]]"in t&&(e.set=t["[[Set]]"]),"[[Enumerable]]"in t&&(e.enumerable=t["[[Enumerable]]"]),"[[Configurable]]"in t&&(e.configurable=t["[[Configurable]]"]),e}},"7K3S":function(t,e){"document"in window.self&&((!("classList"in document.createElement("_"))||document.createElementNS&&!("classList"in document.createElementNS("http://www.w3.org/2000/svg","g")))&&function(t){"use strict";if("Element"in t){var e=t.Element.prototype,r=Object,n=String.prototype.trim||function(){return this.replace(/^\s+|\s+$/g,"")},o=Array.prototype.indexOf||function(t){for(var e=0,r=this.length;e<r;e++)if(e in this&&this[e]===t)return e;return-1},i=function(t,e){this.name=t,this.code=DOMException[t],this.message=e},a=function(t,e){if(""===e)throw new i("SYNTAX_ERR","An invalid or illegal string was specified");if(/\s/.test(e))throw new i("INVALID_CHARACTER_ERR","String contains an invalid character");return o.call(t,e)},u=function(t){for(var e=n.call(t.getAttribute("class")||""),r=e?e.split(/\s+/):[],o=0,i=r.length;o<i;o++)this.push(r[o]);this._updateClassName=function(){t.setAttribute("class",this.toString())}},c=u.prototype=[],s=function(){return new u(this)};if(i.prototype=Error.prototype,c.item=function(t){return this[t]||null},c.contains=function(t){return-1!==a(this,t+="")},c.add=function(){var t,e=arguments,r=0,n=e.length,o=!1;do{t=e[r]+"",-1===a(this,t)&&(this.push(t),o=!0)}while(++r<n);o&&this._updateClassName()},c.remove=function(){var t,e,r=arguments,n=0,o=r.length,i=!1;do{for(t=r[n]+"",e=a(this,t);-1!==e;)this.splice(e,1),i=!0,e=a(this,t)}while(++n<o);i&&this._updateClassName()},c.toggle=function(t,e){t+="";var r=this.contains(t),n=r?!0!==e&&"remove":!1!==e&&"add";return n&&this[n](t),!0===e||!1===e?e:!r},c.toString=function(){return this.join(" ")},r.defineProperty){var f={get:s,enumerable:!0,configurable:!0};try{r.defineProperty(e,"classList",f)}catch(t){void 0!==t.number&&-2146823252!==t.number||(f.enumerable=!1,r.defineProperty(e,"classList",f))}}else r.prototype.__defineGetter__&&e.__defineGetter__("classList",s)}}(window.self),function(){"use strict";var t=document.createElement("_");if(t.classList.add("c1","c2"),!t.classList.contains("c2")){var e=function(t){var e=DOMTokenList.prototype[t];DOMTokenList.prototype[t]=function(t){var r,n=arguments.length;for(r=0;r<n;r++)t=arguments[r],e.call(this,t)}};e("add"),e("remove")}if(t.classList.toggle("c3",!1),t.classList.contains("c3")){var r=DOMTokenList.prototype.toggle;DOMTokenList.prototype.toggle=function(t,e){return 1 in arguments&&!this.contains(t)==!e?e:r.call(this,t)}}t=null}())},"7KAz":function(t,e,r){"use strict";var n=r("srjY"),o=TypeError,i=r("ZySq");t.exports=function(t){var e=n(t);if(!e)throw new o("non-iterable value provided");return arguments.length>1?i(e,arguments[1]):i(e)}},"7cND":function(t,e){window.matchMedia||(window.matchMedia=function(){"use strict";var t=window.styleMedia||window.media;if(!t){var e,r=document.createElement("style"),n=document.getElementsByTagName("script")[0];r.type="text/css",r.id="matchmediajs-test",n?n.parentNode.insertBefore(r,n):document.head.appendChild(r),e="getComputedStyle"in window&&window.getComputedStyle(r,null)||r.currentStyle,t={matchMedium:function(t){var n="@media "+t+"{ #matchmediajs-test { width: 1px; } }";return r.styleSheet?r.styleSheet.cssText=n:r.textContent=n,"1px"===e.width}}}return function(e){return{matches:t.matchMedium(e||"all"),media:e||"all"}}}())},"7r9i":function(t,e,r){"use strict";t.exports=function(){if("function"!=typeof Promise)throw new TypeError("`Promise.allSettled` requires a global `Promise` be available.")}},"82c2":function(t,e,r){"use strict";var n=r("1seS"),o="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),i=Object.prototype.toString,a=Array.prototype.concat,u=Object.defineProperty,c=u&&function(){var t={};try{for(var e in u(t,"x",{enumerable:!1,value:t}),t)return!1;return t.x===t}catch(t){return!1}}(),s=function(t,e,r,n){var o;(!(e in t)||"function"==typeof(o=n)&&"[object Function]"===i.call(o)&&n())&&(c?u(t,e,{configurable:!0,enumerable:!1,value:r,writable:!0}):t[e]=r)},f=function(t,e){var r=arguments.length>2?arguments[2]:{},i=n(e);o&&(i=a.call(i,Object.getOwnPropertySymbols(e)));for(var u=0;u<i.length;u+=1)s(t,i[u],e[i[u]],r[i[u]])};f.supportsDescriptors=!!c,t.exports=f},"8oxB":function(t,e){var r,n,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(t){if(r===setTimeout)return setTimeout(t,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(t){r=i}try{n="function"==typeof clearTimeout?clearTimeout:a}catch(t){n=a}}();var c,s=[],f=!1,l=-1;function p(){f&&c&&(f=!1,c.length?s=c.concat(s):l=-1,s.length&&y())}function y(){if(!f){var t=u(p);f=!0;for(var e=s.length;e;){for(c=s,s=[];++l<e;)c&&c[l].run();l=-1,e=s.length}c=null,f=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===a||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function h(t,e){this.fun=t,this.array=e}function v(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];s.push(new h(t,e)),1!==s.length||f||u(y)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},"9F/A":function(t,e,r){"use strict";var n=r("Khql")("Promise.resolve",!0);t.exports=function(t,e){if(!n)throw new SyntaxError("This environment does not support Promises.");return n(t,e)}},"9sGd":function(t,e,r){"use strict";var n=r("IFfy");t.exports=function(t,e){return t===e?0!==t||1/t==1/e:n(t)&&n(e)}},D2IK:function(t,e,r){"use strict";r("Kz4e")},D3zA:function(t,e,r){"use strict";var n=r("aI7X");t.exports=Function.prototype.bind||n},D6qd:function(t,e,r){"use strict";var n=r("6ayh")("RegExp.prototype.test"),o=r("RLeF");t.exports=function(t){return o(n,t)}},DmXP:function(t,e,r){"use strict";var n=Date.prototype.getDay,o=Object.prototype.toString,i="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;t.exports=function(t){return"object"==typeof t&&null!==t&&(i?function(t){try{return n.call(t),!0}catch(t){return!1}}(t):"[object Date]"===o.call(t))}},DpIS:function(t,e,r){r("xEkU").polyfill()},E1iy:function(t,e,r){"use strict";t.exports=function(t){return null===t||"function"!=typeof t&&"object"!=typeof t}},FHRK:function(t,e,r){"use strict";var n=r("uuTH");t.exports=function(){return Array.prototype.includes||n}},Fgxp:function(t,e,r){"use strict";r("7r9i")();var n=r("9F/A"),o=r("RIFg"),i=r("7KAz"),a=r("owxQ"),u=r("6ayh"),c=r("D3zA"),s=c.call(Function.call,u("%Promise_all%")),f=c.call(Function.call,u("%Promise_reject%"));t.exports=function(t){var e=this;if("Object"!==o(e))throw new TypeError("`this` value must be an object");var r=i(t);return s(e,a(r,(function(t){var r=n(e,t);try{return r.then((function(t){return{status:"fulfilled",value:t}}),(function(t){return{status:"rejected",reason:t}}))}catch(t){return f(e,t)}})))}},FhVV:function(t,e,r){"use strict";r("03Sc")()},FpZJ:function(t,e,r){"use strict";t.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var t={},e=Symbol("test"),r=Object(e);if("string"==typeof e)return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;for(e in t[e]=42,t)return!1;if("function"==typeof Object.keys&&0!==Object.keys(t).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(t).length)return!1;var n=Object.getOwnPropertySymbols(t);if(1!==n.length||n[0]!==e)return!1;if(!Object.prototype.propertyIsEnumerable.call(t,e))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var o=Object.getOwnPropertyDescriptor(t,e);if(42!==o.value||!0!==o.enumerable)return!1}return!0}},GPGZ:function(t,e,r){"use strict";var n=r("oNNP"),o=r("6ayh")("%TypeError%"),i=r("RIFg"),a=r("XnxE"),u=r("hemD");t.exports=function(t){if("Object"!==i(t))throw new o("ToPropertyDescriptor requires an object");var e={};if(n(t,"enumerable")&&(e["[[Enumerable]]"]=a(t.enumerable)),n(t,"configurable")&&(e["[[Configurable]]"]=a(t.configurable)),n(t,"value")&&(e["[[Value]]"]=t.value),n(t,"writable")&&(e["[[Writable]]"]=a(t.writable)),n(t,"get")){var r=t.get;if(void 0!==r&&!u(r))throw new TypeError("getter must be a function");e["[[Get]]"]=r}if(n(t,"set")){var c=t.set;if(void 0!==c&&!u(c))throw new o("setter must be a function");e["[[Set]]"]=c}if((n(e,"[[Get]]")||n(e,"[[Set]]"))&&(n(e,"[[Value]]")||n(e,"[[Writable]]")))throw new o("Invalid property descriptor. Cannot both specify accessors and a value or writable attribute");return e}},GQul:function(t,e,r){"use strict";"function"==typeof Promise&&r("NUvg"),r("4GK0")},Gn0q:function(t,e,r){"use strict";var n=r("82c2"),o=r("5yQQ");t.exports=function(){var t=o();return"undefined"!=typeof document&&(n(document,{contains:t},{contains:function(){return document.contains!==t}}),"undefined"!=typeof Element&&n(Element.prototype,{contains:t},{contains:function(){return Element.prototype.contains!==t}})),t}},H8rg:function(t,e,r){"use strict";var n=r("rGdr");t.exports=function(){return"function"==typeof Object.getOwnPropertyDescriptors?Object.getOwnPropertyDescriptors:n}},HH6Z:function(t,e,r){"use strict";var n=r("82c2").supportsDescriptors,o=r("V+xs"),i=Object.getOwnPropertyDescriptor,a=Object.defineProperty,u=TypeError,c=Object.getPrototypeOf,s=/a/;t.exports=function(){if(!n||!c)throw new u("RegExp.prototype.flags requires a true ES5 environment that supports property descriptors");var t=o(),e=c(s),r=i(e,"flags");return r&&r.get===t||a(e,"flags",{configurable:!0,enumerable:!1,get:t}),t}},HYxC:function(t,e,r){"use strict";var n=r("qjSr"),o=r("mJ3t"),i=r("2GRh"),a=r("hemD"),u=r("ciGR"),c=r("TU3P");t.exports=function(t){var e,r=c(this),s=u(i(r,"length"));if(!a(t))throw new TypeError("mapperFunction must be a function");arguments.length>1&&(e=arguments[1]);var f=n(r,0);return o(f,r,s,0,1,t,e),f}},HdHG:function(t,e,r){"use strict";var n=r("6ayh")("%Object.getOwnPropertyDescriptor%");if(n)try{n([],"length")}catch(t){n=null}t.exports=n},HdW7:function(t,e,r){"use strict";var n=r("+IY2"),o=r("82c2");t.exports=function(){var t=n();return o(Object,{entries:t},{entries:function(){return Object.entries!==t}}),t}},HgV8:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("Km29"),i=r("7IBh"),a=r("fyQZ"),u=r("hNTQ"),c=r("NjaY"),s=r("rCmP"),f=r("9sGd"),l=r("RIFg");t.exports=function(t,e,r){if("Object"!==l(t))throw new n("Assertion failed: Type(O) is not Object");if(!s(e))throw new n("Assertion failed: IsPropertyKey(P) is not true");var p=a(t,e),y=!p||c(t);return!(p&&(!p["[[Writable]]"]||!p["[[Configurable]]"])||!y)&&o(u,f,i,t,e,{"[[Configurable]]":!0,"[[Enumerable]]":!0,"[[Value]]":r,"[[Writable]]":!0})}},"Ho/E":function(t,e,r){"use strict";r("nIg7")()},HvP7:function(t,e,r){"use strict";var n=r("6iti");t.exports=function(){return"function"==typeof Object.fromEntries?Object.fromEntries:n}},IFfy:function(t,e,r){"use strict";t.exports=Number.isNaN||function(t){return t!=t}},IdCN:function(t,e,r){"use strict";var n=Function.prototype.toString,o=/^\s*class\b/,i=function(t){try{var e=n.call(t);return o.test(e)}catch(t){return!1}},a=Object.prototype.toString,u="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;t.exports=function(t){if(!t)return!1;if("function"!=typeof t&&"object"!=typeof t)return!1;if("function"==typeof t&&!t.prototype)return!0;if(u)return function(t){try{return!i(t)&&(n.call(t),!0)}catch(t){return!1}}(t);if(i(t))return!1;var e=a.call(t);return"[object Function]"===e||"[object GeneratorFunction]"===e}},Ii9V:function(t,e,r){"use strict";t.exports=r("TVLE")},JQAW:function(t,e,r){"use strict";var n=function(){return"string"==typeof function(){}.name},o=Object.getOwnPropertyDescriptor;if(o)try{o([],"length")}catch(t){o=null}n.functionsHaveConfigurableNames=function(){return n()&&o&&!!o((function(){}),"name").configurable};var i=Function.prototype.bind;n.boundFunctionsHaveNames=function(){return n()&&"function"==typeof i&&""!==function(){}.bind().name},t.exports=n},JwX2:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("aTj1"),i=r("XDGy"),a=r("hemD"),u=r("RIFg");t.exports=function(t,e){if("Object"!==u(t))throw new n("Assertion failed: Type(iterator) is not Object");if(!a(e))throw new n("Assertion failed: completion is not a thunk for a Completion Record");var r,c=e,s=i(t,"return");if(void 0===s)return c();try{var f=o(s,t,[])}catch(t){throw c(),c=null,t}if(r=c(),c=null,"Object"!==u(f))throw new n("iterator .return must return an object");return r}},JxQ3:function(t,e,r){var n="function"==typeof Map&&Map.prototype,o=Object.getOwnPropertyDescriptor&&n?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,i=n&&o&&"function"==typeof o.get?o.get:null,a=n&&Map.prototype.forEach,u="function"==typeof Set&&Set.prototype,c=Object.getOwnPropertyDescriptor&&u?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,s=u&&c&&"function"==typeof c.get?c.get:null,f=u&&Set.prototype.forEach,l="function"==typeof WeakMap&&WeakMap.prototype?WeakMap.prototype.has:null,p="function"==typeof WeakSet&&WeakSet.prototype?WeakSet.prototype.has:null,y=Boolean.prototype.valueOf,h=Object.prototype.toString,v=String.prototype.match,d="function"==typeof BigInt?BigInt.prototype.valueOf:null,b=r(1).custom,g=b&&j(b)?b:null;function m(t,e,r){var n="double"===(r.quoteStyle||e)?'"':"'";return n+t+n}function w(t){return String(t).replace(/"/g,"&quot;")}function O(t){return"[object Array]"===E(t)}function j(t){return"[object Symbol]"===E(t)}t.exports=function t(e,r,n,o){var u=r||{};if(T(u,"quoteStyle")&&"single"!==u.quoteStyle&&"double"!==u.quoteStyle)throw new TypeError('option "quoteStyle" must be "single" or "double"');if(void 0===e)return"undefined";if(null===e)return"null";if("boolean"==typeof e)return e?"true":"false";if("string"==typeof e)return function(t,e){return m(t.replace(/(['\\])/g,"\\$1").replace(/[\x00-\x1f]/g,x),"single",e)}(e,u);if("number"==typeof e)return 0===e?1/0/e>0?"0":"-0":String(e);if("bigint"==typeof e)return String(e)+"n";var c=void 0===u.depth?5:u.depth;if(void 0===n&&(n=0),n>=c&&c>0&&"object"==typeof e)return"[Object]";if(void 0===o)o=[];else if(function(t,e){if(t.indexOf)return t.indexOf(e);for(var r=0,n=t.length;r<n;r++)if(t[r]===e)return r;return-1}(o,e)>=0)return"[Circular]";function h(e,r){return r&&(o=o.slice()).push(r),t(e,u,n+1,o)}if("function"==typeof e){var b=function(t){if(t.name)return t.name;var e=v.call(t,/^function\s*([\w$]+)/);if(e)return e[1];return null}(e);return"[Function"+(b?": "+b:"")+"]"}if(j(e)){var S=Symbol.prototype.toString.call(e);return"object"==typeof e?P(S):S}if(function(t){if(!t||"object"!=typeof t)return!1;if("undefined"!=typeof HTMLElement&&t instanceof HTMLElement)return!0;return"string"==typeof t.nodeName&&"function"==typeof t.getAttribute}(e)){for(var R="<"+String(e.nodeName).toLowerCase(),M=e.attributes||[],C=0;C<M.length;C++)R+=" "+M[C].name+"="+m(w(M[C].value),"double",u);return R+=">",e.childNodes&&e.childNodes.length&&(R+="..."),R+="</"+String(e.nodeName).toLowerCase()+">"}if(O(e))return 0===e.length?"[]":"[ "+_(e,h).join(", ")+" ]";if(function(t){return"[object Error]"===E(t)}(e)){var N=_(e,h);return 0===N.length?"["+String(e)+"]":"{ ["+String(e)+"] "+N.join(", ")+" }"}if("object"==typeof e){if(g&&"function"==typeof e[g])return e[g]();if("function"==typeof e.inspect)return e.inspect()}if(function(t){if(!i||!t||"object"!=typeof t)return!1;try{i.call(t);try{s.call(t)}catch(t){return!0}return t instanceof Map}catch(t){}return!1}(e)){var D=[];return a.call(e,(function(t,r){D.push(h(r,e)+" => "+h(t,e))})),A("Map",i.call(e),D)}if(function(t){if(!s||!t||"object"!=typeof t)return!1;try{s.call(t);try{i.call(t)}catch(t){return!0}return t instanceof Set}catch(t){}return!1}(e)){var F=[];return f.call(e,(function(t){F.push(h(t,e))})),A("Set",s.call(e),F)}if(function(t){if(!l||!t||"object"!=typeof t)return!1;try{l.call(t,l);try{p.call(t,p)}catch(t){return!0}return t instanceof WeakMap}catch(t){}return!1}(e))return I("WeakMap");if(function(t){if(!p||!t||"object"!=typeof t)return!1;try{p.call(t,p);try{l.call(t,l)}catch(t){return!0}return t instanceof WeakSet}catch(t){}return!1}(e))return I("WeakSet");if(function(t){return"[object Number]"===E(t)}(e))return P(h(Number(e)));if(function(t){return"[object BigInt]"===E(t)}(e))return P(h(d.call(e)));if(function(t){return"[object Boolean]"===E(t)}(e))return P(y.call(e));if(function(t){return"[object String]"===E(t)}(e))return P(h(String(e)));if(!function(t){return"[object Date]"===E(t)}(e)&&!function(t){return"[object RegExp]"===E(t)}(e)){var k=_(e,h);return 0===k.length?"{}":"{ "+k.join(", ")+" }"}return String(e)};var S=Object.prototype.hasOwnProperty||function(t){return t in this};function T(t,e){return S.call(t,e)}function E(t){return h.call(t)}function x(t){var e=t.charCodeAt(0),r={8:"b",9:"t",10:"n",12:"f",13:"r"}[e];return r?"\\"+r:"\\x"+(e<16?"0":"")+e.toString(16)}function P(t){return"Object("+t+")"}function I(t){return t+" { ? }"}function A(t,e,r){return t+" ("+e+") {"+r.join(", ")+"}"}function _(t,e){var r=O(t),n=[];if(r){n.length=t.length;for(var o=0;o<t.length;o++)n[o]=T(t,o)?e(t[o],t):""}for(var i in t)T(t,i)&&(r&&String(Number(i))===i&&i<t.length||(/[^\w$]/.test(i)?n.push(e(i,t)+": "+e(t[i],t)):n.push(i+": "+e(t[i],t))));return n}},KFgS:function(t,e,r){"use strict";t.exports=r("TVLE")},KUT7:function(t,e,r){"use strict";var n=r("SrsA");t.exports=function(){return n(this)}},Khql:function(t,e,r){"use strict";var n=r("6ayh"),o=r("RLeF"),i=o(n("String.prototype.indexOf"));t.exports=function(t,e){var r=n(t,!!e);return"function"==typeof r&&i(t,".prototype.")?o(r):r}},Km29:function(t,e,r){"use strict";var n=r("6ayh")("%Object.defineProperty%",!0);if(n)try{n({},"a",{value:1})}catch(t){n=null}var o=r("Khql")("Object.prototype.propertyIsEnumerable");t.exports=function(t,e,r,i,a,u){if(!n){if(!t(u))return!1;if(!u["[[Configurable]]"]||!u["[[Writable]]"])return!1;if(a in i&&o(i,a)!==!!u["[[Enumerable]]"])return!1;var c=u["[[Value]]"];return i[a]=c,e(i[a],c)}return n(i,a,r(u)),!0}},Kz4e:function(t,e,r){"use strict";r("Gn0q")()},LJJ4:function(t,e,r){"use strict";t.exports=function(t){return"function"==typeof t&&!!t.prototype}},Lcws:function(t,e,r){"use strict";var n=r("0yco"),o=r("gvBt");t.exports=function(t){var e=o(t);return n(e)}},NKaP:function(t,e,r){"use strict";var n=r("IFfy");t.exports=function(t,e){return t===e||n(t)&&n(e)}},NUgV:function(t,e,r){"use strict";var n=r("82c2").supportsDescriptors,o=r("JQAW")(),i=r("gaAG"),a=Object.defineProperty,u=TypeError;t.exports=function(){var t=i();if(o)return t;if(!n)throw new u("Shimming Function.prototype.name support requires ES5 property descriptor support.");var e=Function.prototype;return a(e,"name",{configurable:!0,enumerable:!1,get:function(){var r=t.call(this);return this!==e&&a(this,"name",{configurable:!0,enumerable:!1,value:r,writable:!1}),r}}),t}},NUvg:function(t,e,r){"use strict";r("Ui0A")()},NjaY:function(t,e,r){"use strict";var n=r("6ayh")("%Object%"),o=r("E1iy"),i=n.preventExtensions,a=n.isExtensible;t.exports=i?function(t){return!o(t)&&a(t)}:function(t){return!o(t)}},OuUZ:function(t,e,r){"use strict";r("Pgtx"),r("0nHT")},P5mh:function(t,e,r){"use strict";var n=r("ciGR"),o=r("R5T6"),i=r("Ii9V"),a=r("Khql")("String.prototype.slice");t.exports=function(t){var e,r=i(this),u=o(r),c=n(u.length);arguments.length>1&&(e=arguments[1]);var s=void 0===e?"":o(e);""===s&&(s=" ");var f=n(t);if(f<=c)return u;for(var l=f-c;s.length<l;){var p=s.length,y=l-p;s+=p>y?a(s,0,y):s}var h=s.length>l?a(s,0,l):s;return h+u}},PScO:function(t,e,r){"use strict";var n=r("UYO7");t.exports=function(t){return"symbol"==typeof t?"Symbol":n(t)}},Pgtx:function(t,e,r){"use strict";r("2fPq")},PyeM:function(t,e,r){"use strict";var n=r("6ayh")("%Symbol.match%",!0),o=r("2Nju"),i=r("XnxE");t.exports=function(t){if(!t||"object"!=typeof t)return!1;if(n){var e=t[n];if(void 0!==e)return i(e)}return o(t)}},R5T6:function(t,e,r){"use strict";var n=r("6ayh"),o=n("%String%"),i=n("%TypeError%");t.exports=function(t){if("symbol"==typeof t)throw new i("Cannot convert a Symbol value to a string");return o(t)}},RIFg:function(t,e,r){"use strict";var n=r("UYO7");t.exports=function(t){return"symbol"==typeof t?"Symbol":n(t)}},"RJ/z":function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("rCmP"),i=r("RIFg");t.exports=function(t,e){if("Object"!==i(t))throw new n("Assertion failed: `O` must be an Object");if(!o(e))throw new n("Assertion failed: `P` must be a Property Key");return e in t}},RLeF:function(t,e,r){"use strict";var n=r("D3zA"),o=r("6ayh")("%Function%"),i=o.apply,a=o.call;t.exports=function(){return n.apply(a,arguments)},t.exports.apply=function(){return n.apply(i,arguments)}},"Ro/O":function(t,e,r){"use strict";var n=r("6ayh"),o=n("%Object.create%",!0),i=n("%TypeError%"),a=n("%SyntaxError%"),u=r("RIFg"),c=!({__proto__:null}instanceof Object);t.exports=function(t,e){if(null!==t&&"Object"!==u(t))throw new i("Assertion failed: `proto` must be null or an object");var r=arguments.length<2?[]:e;if(r.length>0)throw new a("es-abstract does not yet support internal slots");if(o)return o(t);if(c)return{__proto__:t};if(null===t)throw new a("native Object.create support is required to create null objects");var n=function(){};return n.prototype=t,new n}},SrsA:function(t,e,r){"use strict";var n=r("6ayh"),o=r("Khql"),i=n("%SyntaxError%"),a=o("Symbol.prototype.toString",!0),u=r("gvzj");t.exports=function(t){if(!a)throw new i("Symbols are not supported in this environment");var e=a(t);if(u){var r=u(t);if(""===r)return;return r.slice(1,-1)}var n=e.slice(7,-1);if(n)return n}},TU3P:function(t,e,r){"use strict";var n=r("6ayh")("%Object%"),o=r("Ii9V");t.exports=function(t){return o(t),n(t)}},TVLE:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%");t.exports=function(t,e){if(null==t)throw new n(e||"Cannot call method on "+t);return t}},Teho:function(t,e,r){"use strict";t.exports=function(t){return null===t||"function"!=typeof t&&"object"!=typeof t}},"U/4o":function(t,e,r){"use strict";var n=r("UVaH")(),o=r("zpJY"),i=r("gvzj"),a=Object.getOwnPropertyDescriptor,u=Object.defineProperty,c=Object.setPrototypeOf,s=function(t){u(Symbol.prototype,"description",{configurable:!0,enumerable:!1,get:t})};t.exports=function(){if(!n)return!1;var t=a(Symbol.prototype,"description"),e=o(),r=!t||"function"!=typeof t.get,u=!r&&(void 0!==Symbol().description||""!==Symbol("").description);if(r||u){if(!i)return function(t){var e=Function.apply.bind(Symbol),r=Object.create?Object.create(null):{},n=function(){var t=e(this,arguments);return arguments.length>0&&""===arguments[0]&&(r[t]=!0),t};n.prototype=Symbol.prototype,c(n,Symbol),Symbol=n;var o=Function.call.bind(t),i=function(){var t=o(this);return r[this]?"":t};return s(i),i}(e);s(e)}return e}},UBAn:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("HgV8"),i=r("rCmP"),a=r("RIFg");t.exports=function(t,e,r){if("Object"!==a(t))throw new n("Assertion failed: Type(O) is not Object");if(!i(e))throw new n("Assertion failed: IsPropertyKey(P) is not true");var u=o(t,e,r);if(!u)throw new n("unable to create data property");return u}},UBBE:function(t,e,r){"use strict";var n=r("sqVN"),o=r("Lcws");t.exports=function(t){var e=o(t);return e<=0?0:e>n?n:e}},UMYc:function(t,e,r){"use strict";var n=r("l+XD"),o=r("+71H");t.exports=function(){var t=Array.prototype.map;return n(t)?t:o}},UVaH:function(t,e,r){"use strict";(function(e){var n=e.Symbol,o=r("FpZJ");t.exports=function(){return"function"==typeof n&&("function"==typeof Symbol&&("symbol"==typeof n("foo")&&("symbol"==typeof Symbol("bar")&&o())))}}).call(this,r("yLpj"))},UYO7:function(t,e,r){"use strict";t.exports=function(t){return null===t?"Null":void 0===t?"Undefined":"function"==typeof t||"object"==typeof t?"Object":"number"==typeof t?"Number":"boolean"==typeof t?"Boolean":"string"==typeof t?"String":void 0}},Ufkg:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("RIFg");t.exports=function(t,e){if("Boolean"!==o(e))throw new n("Assertion failed: Type(done) is not Boolean");return{value:t,done:e}}},Ui0A:function(t,e,r){"use strict";var n=r("vndB"),o=r("iSaG"),i=r("82c2");t.exports=function(){n();var t=o();return i(Promise.prototype,{finally:t},{finally:function(){return Promise.prototype.finally!==t}}),t}},UsSR:function(t,e,r){"use strict";var n=r("UVaH")(),o=r("6ayh"),i=r("Khql"),a=o("%Symbol.iterator%",!0),u=i("String.prototype.slice");t.exports=function(t,e){var r;return n?r=t.GetMethod(e,a):t.IsArray(e)?r=function(){var t=-1,e=this;return{next:function(){return{done:(t+=1)>=e.length,value:e[t]}}}}:"String"===t.Type(e)&&(r=function(){var r=0;return{next:function(){var n=t.AdvanceStringIndex(e,r,!0),o=u(e,r,n);return r=n,{done:n>e.length,value:o}}}}),r}},"V+xs":function(t,e,r){"use strict";var n=r("VwiP"),o=r("82c2").supportsDescriptors,i=Object.getOwnPropertyDescriptor,a=TypeError;t.exports=function(){if(!o)throw new a("RegExp.prototype.flags requires a true ES5 environment that supports property descriptors");if("gim"===/a/gim.flags){var t=i(RegExp.prototype,"flags");if(t&&"function"==typeof t.get&&"boolean"==typeof/a/.dotAll)return t.get}return n}},V5gn:function(t,e,r){"use strict";r("qv/t"),r("NUgV")(),r("dzgB")},VAJa:function(t,e,r){"use strict";var n=r("6ayh"),o=r("Khql"),i=r("JxQ3"),a=n("%TypeError%"),u=n("%WeakMap%",!0),c=n("%Map%",!0),s=o("Array.prototype.push"),f=o("WeakMap.prototype.get",!0),l=o("WeakMap.prototype.set",!0),p=o("WeakMap.prototype.has",!0),y=o("Map.prototype.get",!0),h=o("Map.prototype.set",!0),v=o("Map.prototype.has",!0);t.exports=function(){var t,e,r,n={assert:function(t){if(!n.has(t))throw new a("Side channel does not contain "+i(t))},get:function(n){if(u&&n&&("object"==typeof n||"function"==typeof n)){if(t)return f(t,n)}else if(c){if(e)return y(e,n)}else if(r)return function(t,e){for(var r=0;r<t.length;r+=1)if(t[r].key===e)return t[r].value}(r,n)},has:function(n){if(u&&n&&("object"==typeof n||"function"==typeof n)){if(t)return p(t,n)}else if(c){if(e)return v(e,n)}else if(r)return function(t,e){for(var r=0;r<t.length;r+=1)if(t[r].key===e)return!0;return!1}(r,n);return!1},set:function(n,o){u&&n&&("object"==typeof n||"function"==typeof n)?(t||(t=new u),l(t,n,o)):c?(e||(e=new c),h(e,n,o)):(r||(r=[]),function(t,e,r){for(var n=0;n<t.length;n+=1)if(t[n].key===e)return void(t[n].value=r);s(t,{key:e,value:r})}(r,n,o))}};return n}},VbLK:function(t,e,r){"use strict";var n=String.prototype.valueOf,o=Object.prototype.toString,i="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;t.exports=function(t){return"string"==typeof t||"object"==typeof t&&(i?function(t){try{return n.call(t),!0}catch(t){return!1}}(t):"[object String]"===o.call(t))}},VwiP:function(t,e,r){"use strict";var n=Object,o=TypeError;t.exports=function(){if(null!=this&&this!==n(this))throw new o("RegExp.prototype.flags getter called on non-object");var t="";return this.global&&(t+="g"),this.ignoreCase&&(t+="i"),this.multiline&&(t+="m"),this.dotAll&&(t+="s"),this.unicode&&(t+="u"),this.sticky&&(t+="y"),t}},WXWk:function(t,e,r){"use strict";t.exports=function(t){return t>=0?1:-1}},WZeS:function(t,e,r){"use strict";var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator,o=r("Teho"),i=r("IdCN"),a=r("DmXP"),u=r("/sVA"),c=function(t,e){if(null==t)throw new TypeError("Cannot call method on "+t);if("string"!=typeof e||"number"!==e&&"string"!==e)throw new TypeError('hint must be "string" or "number"');var r,n,a,u="string"===e?["toString","valueOf"]:["valueOf","toString"];for(a=0;a<u.length;++a)if(r=t[u[a]],i(r)&&(n=r.call(t),o(n)))return n;throw new TypeError("No default value")},s=function(t,e){var r=t[e];if(null!=r){if(!i(r))throw new TypeError(r+" returned for property "+e+" of object "+t+" is not a function");return r}};t.exports=function(t){if(o(t))return t;var e,r="default";if(arguments.length>1&&(arguments[1]===String?r="string":arguments[1]===Number&&(r="number")),n&&(Symbol.toPrimitive?e=s(t,Symbol.toPrimitive):u(t)&&(e=Symbol.prototype.valueOf)),void 0!==e){var i=e.call(t,r);if(o(i))return i;throw new TypeError("unable to convert exotic object to primitive")}return"default"===r&&(a(t)||u(t))&&(r="string"),c(t,"default"===r?"number":r)}},Wr5T:function(t,e){!function(t,e){"use strict";if("IntersectionObserver"in t&&"IntersectionObserverEntry"in t&&"intersectionRatio"in t.IntersectionObserverEntry.prototype)"isIntersecting"in t.IntersectionObserverEntry.prototype||Object.defineProperty(t.IntersectionObserverEntry.prototype,"isIntersecting",{get:function(){return this.intersectionRatio>0}});else{var r=[];o.prototype.THROTTLE_TIMEOUT=100,o.prototype.POLL_INTERVAL=null,o.prototype.USE_MUTATION_OBSERVER=!0,o.prototype.observe=function(t){if(!this._observationTargets.some((function(e){return e.element==t}))){if(!t||1!=t.nodeType)throw new Error("target must be an Element");this._registerInstance(),this._observationTargets.push({element:t,entry:null}),this._monitorIntersections(),this._checkForIntersections()}},o.prototype.unobserve=function(t){this._observationTargets=this._observationTargets.filter((function(e){return e.element!=t})),this._observationTargets.length||(this._unmonitorIntersections(),this._unregisterInstance())},o.prototype.disconnect=function(){this._observationTargets=[],this._unmonitorIntersections(),this._unregisterInstance()},o.prototype.takeRecords=function(){var t=this._queuedEntries.slice();return this._queuedEntries=[],t},o.prototype._initThresholds=function(t){var e=t||[0];return Array.isArray(e)||(e=[e]),e.sort().filter((function(t,e,r){if("number"!=typeof t||isNaN(t)||t<0||t>1)throw new Error("threshold must be a number between 0 and 1 inclusively");return t!==r[e-1]}))},o.prototype._parseRootMargin=function(t){var e=(t||"0px").split(/\s+/).map((function(t){var e=/^(-?\d*\.?\d+)(px|%)$/.exec(t);if(!e)throw new Error("rootMargin must be specified in pixels or percent");return{value:parseFloat(e[1]),unit:e[2]}}));return e[1]=e[1]||e[0],e[2]=e[2]||e[0],e[3]=e[3]||e[1],e},o.prototype._monitorIntersections=function(){this._monitoringIntersections||(this._monitoringIntersections=!0,this.POLL_INTERVAL?this._monitoringInterval=setInterval(this._checkForIntersections,this.POLL_INTERVAL):(i(t,"resize",this._checkForIntersections,!0),i(e,"scroll",this._checkForIntersections,!0),this.USE_MUTATION_OBSERVER&&"MutationObserver"in t&&(this._domObserver=new MutationObserver(this._checkForIntersections),this._domObserver.observe(e,{attributes:!0,childList:!0,characterData:!0,subtree:!0}))))},o.prototype._unmonitorIntersections=function(){this._monitoringIntersections&&(this._monitoringIntersections=!1,clearInterval(this._monitoringInterval),this._monitoringInterval=null,a(t,"resize",this._checkForIntersections,!0),a(e,"scroll",this._checkForIntersections,!0),this._domObserver&&(this._domObserver.disconnect(),this._domObserver=null))},o.prototype._checkForIntersections=function(){var e=this._rootIsInDom(),r=e?this._getRootRect():{top:0,bottom:0,left:0,right:0,width:0,height:0};this._observationTargets.forEach((function(o){var i=o.element,a=u(i),c=this._rootContainsTarget(i),s=o.entry,f=e&&c&&this._computeTargetAndRootIntersection(i,r),l=o.entry=new n({time:t.performance&&performance.now&&performance.now(),target:i,boundingClientRect:a,rootBounds:r,intersectionRect:f});s?e&&c?this._hasCrossedThreshold(s,l)&&this._queuedEntries.push(l):s&&s.isIntersecting&&this._queuedEntries.push(l):this._queuedEntries.push(l)}),this),this._queuedEntries.length&&this._callback(this.takeRecords(),this)},o.prototype._computeTargetAndRootIntersection=function(r,n){if("none"!=t.getComputedStyle(r).display){for(var o,i,a,c,f,l,p,y,h=u(r),v=s(r),d=!1;!d;){var b=null,g=1==v.nodeType?t.getComputedStyle(v):{};if("none"==g.display)return;if(v==this.root||v==e?(d=!0,b=n):v!=e.body&&v!=e.documentElement&&"visible"!=g.overflow&&(b=u(v)),b&&(o=b,i=h,a=void 0,c=void 0,f=void 0,l=void 0,p=void 0,y=void 0,a=Math.max(o.top,i.top),c=Math.min(o.bottom,i.bottom),f=Math.max(o.left,i.left),l=Math.min(o.right,i.right),y=c-a,!(h=(p=l-f)>=0&&y>=0&&{top:a,bottom:c,left:f,right:l,width:p,height:y})))break;v=s(v)}return h}},o.prototype._getRootRect=function(){var t;if(this.root)t=u(this.root);else{var r=e.documentElement,n=e.body;t={top:0,left:0,right:r.clientWidth||n.clientWidth,width:r.clientWidth||n.clientWidth,bottom:r.clientHeight||n.clientHeight,height:r.clientHeight||n.clientHeight}}return this._expandRectByRootMargin(t)},o.prototype._expandRectByRootMargin=function(t){var e=this._rootMarginValues.map((function(e,r){return"px"==e.unit?e.value:e.value*(r%2?t.width:t.height)/100})),r={top:t.top-e[0],right:t.right+e[1],bottom:t.bottom+e[2],left:t.left-e[3]};return r.width=r.right-r.left,r.height=r.bottom-r.top,r},o.prototype._hasCrossedThreshold=function(t,e){var r=t&&t.isIntersecting?t.intersectionRatio||0:-1,n=e.isIntersecting?e.intersectionRatio||0:-1;if(r!==n)for(var o=0;o<this.thresholds.length;o++){var i=this.thresholds[o];if(i==r||i==n||i<r!=i<n)return!0}},o.prototype._rootIsInDom=function(){return!this.root||c(e,this.root)},o.prototype._rootContainsTarget=function(t){return c(this.root||e,t)},o.prototype._registerInstance=function(){r.indexOf(this)<0&&r.push(this)},o.prototype._unregisterInstance=function(){var t=r.indexOf(this);-1!=t&&r.splice(t,1)},t.IntersectionObserver=o,t.IntersectionObserverEntry=n}function n(t){this.time=t.time,this.target=t.target,this.rootBounds=t.rootBounds,this.boundingClientRect=t.boundingClientRect,this.intersectionRect=t.intersectionRect||{top:0,bottom:0,left:0,right:0,width:0,height:0},this.isIntersecting=!!t.intersectionRect;var e=this.boundingClientRect,r=e.width*e.height,n=this.intersectionRect,o=n.width*n.height;this.intersectionRatio=r?Number((o/r).toFixed(4)):this.isIntersecting?1:0}function o(t,e){var r,n,o,i=e||{};if("function"!=typeof t)throw new Error("callback must be a function");if(i.root&&1!=i.root.nodeType)throw new Error("root must be an Element");this._checkForIntersections=(r=this._checkForIntersections.bind(this),n=this.THROTTLE_TIMEOUT,o=null,function(){o||(o=setTimeout((function(){r(),o=null}),n))}),this._callback=t,this._observationTargets=[],this._queuedEntries=[],this._rootMarginValues=this._parseRootMargin(i.rootMargin),this.thresholds=this._initThresholds(i.threshold),this.root=i.root||null,this.rootMargin=this._rootMarginValues.map((function(t){return t.value+t.unit})).join(" ")}function i(t,e,r,n){"function"==typeof t.addEventListener?t.addEventListener(e,r,n||!1):"function"==typeof t.attachEvent&&t.attachEvent("on"+e,r)}function a(t,e,r,n){"function"==typeof t.removeEventListener?t.removeEventListener(e,r,n||!1):"function"==typeof t.detatchEvent&&t.detatchEvent("on"+e,r)}function u(t){var e;try{e=t.getBoundingClientRect()}catch(t){}return e?(e.width&&e.height||(e={top:e.top,right:e.right,bottom:e.bottom,left:e.left,width:e.right-e.left,height:e.bottom-e.top}),e):{top:0,bottom:0,left:0,right:0,width:0,height:0}}function c(t,e){for(var r=e;r;){if(r==t)return!0;r=s(r)}return!1}function s(t){var e=t.parentNode;return e&&11==e.nodeType&&e.host?e.host:e}}(window,document)},XDGy:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("tihr"),i=r("hemD"),a=r("rCmP");t.exports=function(t,e){if(!a(e))throw new n("Assertion failed: IsPropertyKey(P) is not true");var r=o(t,e);if(null!=r){if(!i(r))throw new n(e+"is not a function");return r}}},XhRf:function(t,e,r){"use strict";var n=r("s+gD");t.exports=function(){return"function"==typeof String.prototype.padEnd?String.prototype.padEnd:n}},XnxE:function(t,e,r){"use strict";t.exports=function(t){return!!t}},XsaD:function(t,e,r){"use strict";var n=r("1Fze");t.exports=function(t){return n(t)>>>0}},Zesl:function(t,e,r){"use strict";var n=r("6ayh"),o=r("oNNP"),i=r("VAJa")(),a=n("%TypeError%"),u={assert:function(t,e){if(!t||"object"!=typeof t&&"function"!=typeof t)throw new a("`O` is not an object");if("string"!=typeof e)throw new a("`slot` must be a string");i.assert(t)},get:function(t,e){if(!t||"object"!=typeof t&&"function"!=typeof t)throw new a("`O` is not an object");if("string"!=typeof e)throw new a("`slot` must be a string");var r=i.get(t);return r&&r["$"+e]},has:function(t,e){if(!t||"object"!=typeof t&&"function"!=typeof t)throw new a("`O` is not an object");if("string"!=typeof e)throw new a("`slot` must be a string");var r=i.get(t);return!!r&&o(r,"$"+e)},set:function(t,e,r){if(!t||"object"!=typeof t&&"function"!=typeof t)throw new a("`O` is not an object");if("string"!=typeof e)throw new a("`slot` must be a string");var n=i.get(t);n||(n={},i.set(t,n)),n["$"+e]=r}};Object.freeze&&Object.freeze(u),t.exports=u},Zoej:function(t,e,r){"use strict";var n=r("82c2"),o=r("b0r7"),i=r("Ufkg"),a=r("2GRh"),u=r("6ayh"),c=r("Ro/O"),s=r("xdJO"),f=r("1SyS"),l=r("ciGR"),p=r("R5T6"),y=r("RIFg"),h=r("UVaH")(),v=r("Zesl"),d=function(t,e,r,n){if("String"!==y(e))throw new TypeError("S must be a string");if("Boolean"!==y(r))throw new TypeError("global must be a boolean");if("Boolean"!==y(n))throw new TypeError("fullUnicode must be a boolean");v.set(this,"[[IteratingRegExp]]",t),v.set(this,"[[IteratedString]]",e),v.set(this,"[[Global]]",r),v.set(this,"[[Unicode]]",n),v.set(this,"[[Done]]",!1)},b=u("%IteratorPrototype%",!0);if(b&&(d.prototype=c(b)),n(d.prototype,{next:function(){var t=this;if("Object"!==y(t))throw new TypeError("receiver must be an object");if(!(t instanceof d&&v.has(t,"[[IteratingRegExp]]")&&v.has(t,"[[IteratedString]]")&&v.has(t,"[[Global]]")&&v.has(t,"[[Unicode]]")&&v.has(t,"[[Done]]")))throw new TypeError('"this" value must be a RegExpStringIterator instance');if(v.get(t,"[[Done]]"))return i(void 0,!0);var e=v.get(t,"[[IteratingRegExp]]"),r=v.get(t,"[[IteratedString]]"),n=v.get(t,"[[Global]]"),u=v.get(t,"[[Unicode]]"),c=s(e,r);if(null===c)return v.set(t,"[[Done]]",!0),i(void 0,!0);if(n){if(""===p(a(c,"0"))){var h=l(a(e,"lastIndex")),b=o(r,h,u);f(e,"lastIndex",b,!0)}return i(c,!1)}return v.set(t,"[[Done]]",!0),i(c,!1)}}),h){var g=Object.defineProperty;if(Symbol.toStringTag&&(g?g(d.prototype,Symbol.toStringTag,{configurable:!0,enumerable:!1,value:"RegExp String Iterator",writable:!1}):d.prototype[Symbol.toStringTag]="RegExp String Iterator"),!b&&Symbol.iterator){var m={};m[Symbol.iterator]=d.prototype[Symbol.iterator]||function(){return this};var w={};w[Symbol.iterator]=function(){return d.prototype[Symbol.iterator]!==m[Symbol.iterator]},n(d.prototype,m,w)}}t.exports=d},ZySq:function(t,e,r){"use strict";var n=TypeError;t.exports=function(t){if(!t||"function"!=typeof t.next)throw new n("iterator must be an object with a `next` method");if(arguments.length>1){var e=arguments[1];if("function"!=typeof e)throw new n("`callback`, if provided, must be a function")}for(var r,o=e||[];(r=t.next())&&!r.done;)e?e(r.value):o.push(r.value);if(!e)return o}},aI7X:function(t,e,r){"use strict";var n="Function.prototype.bind called on incompatible ",o=Array.prototype.slice,i=Object.prototype.toString;t.exports=function(t){var e=this;if("function"!=typeof e||"[object Function]"!==i.call(e))throw new TypeError(n+e);for(var r,a=o.call(arguments,1),u=function(){if(this instanceof r){var n=e.apply(this,a.concat(o.call(arguments)));return Object(n)===n?n:this}return e.apply(t,a.concat(o.call(arguments)))},c=Math.max(0,e.length-a.length),s=[],f=0;f<c;f++)s.push("$"+f);if(r=Function("binder","return function ("+s.join(",")+"){ return binder.apply(this,arguments); }")(u),e.prototype){var l=function(){};l.prototype=e.prototype,r.prototype=new l,l.prototype=null}return r}},aJg2:function(t,e,r){"use strict";var n=r("Ii9V"),o=r("oNNP"),i=r("Khql")("Object.prototype.propertyIsEnumerable");t.exports=function(t){var e=n(t),r=[];for(var a in e)o(e,a)&&i(e,a)&&r.push([a,e[a]]);return r}},aOl1:function(t,e,r){"use strict";var n=r("7r9i"),o=r("Fgxp");t.exports=function(){return n(),"function"==typeof Promise.allSettled?Promise.allSettled:o}},aTj1:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("JxQ3"),i=r("hemD");t.exports=function(t,e){var r=arguments.length>2?arguments[2]:[];if(!i(t))throw new n(o(t)+" is not a function");return t.apply(e,r)}},abtl:function(t,e,r){"use strict";r("+7c2")()},aqn5:function(t,e,r){"use strict";var n=r("82c2"),o=r("vzKJ");t.exports=function(){var t=o();if(n.supportsDescriptors){var e=Object.getOwnPropertyDescriptor(t,"globalThis");(!e||e.configurable&&(e.enumerable||e.writable||globalThis!==t))&&Object.defineProperty(t,"globalThis",{configurable:!0,enumerable:!1,value:t,writable:!1})}else"object"==typeof globalThis&&globalThis===t||(t.globalThis=t);return t}},"b+qZ":function(t,e,r){"use strict";r("Ho/E"),r("kx12"),r("abtl")},b0r7:function(t,e,r){"use strict";var n=r("6ayh"),o=r("1l3A"),i=r("RIFg"),a=r("sqVN"),u=n("%TypeError%"),c=r("Khql")("String.prototype.charCodeAt");t.exports=function(t,e,r){if("String"!==i(t))throw new u("Assertion failed: `S` must be a String");if(!o(e)||e<0||e>a)throw new u("Assertion failed: `length` must be an integer >= 0 and <= 2**53");if("Boolean"!==i(r))throw new u("Assertion failed: `unicode` must be a Boolean");if(!r)return e+1;if(e+1>=t.length)return e+1;var n=c(t,e);if(n<55296||n>56319)return e+1;var s=c(t,e+1);return s<56320||s>57343?e+1:e+2}},bBhT:function(t,e,r){"use strict";var n=r("UVaH")(),o=r("+okW");t.exports=function(){return n&&"symbol"==typeof Symbol.matchAll&&"function"==typeof RegExp.prototype[Symbol.matchAll]?RegExp.prototype[Symbol.matchAll]:o}},bQgK:function(t,e,r){(function(e){(function(){var r,n,o,i,a,u;"undefined"!=typeof performance&&null!==performance&&performance.now?t.exports=function(){return performance.now()}:null!=e&&e.hrtime?(t.exports=function(){return(r()-a)/1e6},n=e.hrtime,i=(r=function(){var t;return 1e9*(t=n())[0]+t[1]})(),u=1e9*e.uptime(),a=i-u):Date.now?(t.exports=function(){return Date.now()-o},o=Date.now()):(t.exports=function(){return(new Date).getTime()-o},o=(new Date).getTime())}).call(this)}).call(this,r("8oxB"))},bZMm:function(t,e){!function(t){"use strict";if(!t.fetch){c.prototype.append=function(t,e){t=a(t),e=u(e);var r=this.map[t];r||(r=[],this.map[t]=r),r.push(e)},c.prototype.delete=function(t){delete this.map[a(t)]},c.prototype.get=function(t){var e=this.map[a(t)];return e?e[0]:null},c.prototype.getAll=function(t){return this.map[a(t)]||[]},c.prototype.has=function(t){return this.map.hasOwnProperty(a(t))},c.prototype.set=function(t,e){this.map[a(t)]=[u(e)]},c.prototype.forEach=function(t,e){Object.getOwnPropertyNames(this.map).forEach((function(r){this.map[r].forEach((function(n){t.call(e,n,r,this)}),this)}),this)};var e="FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),r="FormData"in t,n="ArrayBuffer"in t,o=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];y.prototype.clone=function(){return new y(this)},p.call(y.prototype),p.call(d.prototype),d.prototype.clone=function(){return new d(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new c(this.headers),url:this.url})},d.error=function(){var t=new d(null,{status:0,statusText:""});return t.type="error",t};var i=[301,302,303,307,308];d.redirect=function(t,e){if(-1===i.indexOf(e))throw new RangeError("Invalid status code");return new d(null,{status:e,headers:{location:t}})},t.Headers=c,t.Request=y,t.Response=d,t.fetch=function(t,r){return new Promise((function(n,o){var i;i=y.prototype.isPrototypeOf(t)&&!r?t:new y(t,r);var a=new XMLHttpRequest;a.onload=function(){var t=1223===a.status?204:a.status;if(t<100||t>599)o(new TypeError("Network request failed"));else{var e={status:t,statusText:a.statusText,headers:v(a),url:"responseURL"in a?a.responseURL:/^X-Request-URL:/m.test(a.getAllResponseHeaders())?a.getResponseHeader("X-Request-URL"):void 0},r="response"in a?a.response:a.responseText;n(new d(r,e))}},a.onerror=function(){o(new TypeError("Network request failed"))},a.ontimeout=function(){o(new TypeError("Network request failed"))},a.open(i.method,i.url,!0),"include"===i.credentials&&(a.withCredentials=!0),"responseType"in a&&e&&(a.responseType="blob"),i.headers.forEach((function(t,e){a.setRequestHeader(e,t)})),a.send(void 0===i._bodyInit?null:i._bodyInit)}))},t.fetch.polyfill=!0}function a(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function u(t){return"string"!=typeof t&&(t=String(t)),t}function c(t){this.map={},t instanceof c?t.forEach((function(t,e){this.append(e,t)}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function s(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function f(t){return new Promise((function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}}))}function l(t){var e=new FileReader;return e.readAsArrayBuffer(t),f(e)}function p(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t,"string"==typeof t)this._bodyText=t;else if(e&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(r&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(t){if(!n||!ArrayBuffer.prototype.isPrototypeOf(t))throw new Error("unsupported BodyInit type")}else this._bodyText="";this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type&&this.headers.set("content-type",this._bodyBlob.type))},e?(this.blob=function(){var t=s(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this.blob().then(l)},this.text=function(){var t,e,r=s(this);if(r)return r;if(this._bodyBlob)return t=this._bodyBlob,(e=new FileReader).readAsText(t),f(e);if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)}):this.text=function(){var t=s(this);return t||Promise.resolve(this._bodyText)},r&&(this.formData=function(){return this.text().then(h)}),this.json=function(){return this.text().then(JSON.parse)},this}function y(t,e){var r,n,i=(e=e||{}).body;if(y.prototype.isPrototypeOf(t)){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new c(t.headers)),this.method=t.method,this.mode=t.mode,i||(i=t._bodyInit,t.bodyUsed=!0)}else this.url=t;if(this.credentials=e.credentials||this.credentials||"omit",!e.headers&&this.headers||(this.headers=new c(e.headers)),this.method=(r=e.method||this.method||"GET",n=r.toUpperCase(),o.indexOf(n)>-1?n:r),this.mode=e.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&i)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(i)}function h(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var r=t.split("="),n=r.shift().replace(/\+/g," "),o=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(o))}})),e}function v(t){var e=new c;return(t.getAllResponseHeaders()||"").trim().split("\n").forEach((function(t){var r=t.trim().split(":"),n=r.shift().trim(),o=r.join(":").trim();e.append(n,o)})),e}function d(t,e){e||(e={}),this.type="default",this.status=e.status,this.ok=this.status>=200&&this.status<300,this.statusText=e.statusText,this.headers=e.headers instanceof c?e.headers:new c(e.headers),this.url=e.url||"",this._initBody(t)}}("undefined"!=typeof self?self:this)},baqT:function(t,e,r){"use strict";var n=r("s+g2"),o=r("82c2");t.exports=function(){var t=n();return o(String.prototype,{padStart:t},{padStart:function(){return String.prototype.padStart!==t}}),t}},cCsD:function(t,e,r){"use strict";var n=r("6ayh")("%Object%"),o=r("KFgS");t.exports=function(t){return o(t),n(t)}},ciGR:function(t,e,r){"use strict";var n=r("sqVN"),o=r("wrft");t.exports=function(t){var e=o(t);return e<=0?0:e>n?n:e}},dEfh:function(t,e,r){"use strict";var n=r("H8rg"),o=r("82c2");t.exports=function(){var t=n();return o(Object,{getOwnPropertyDescriptors:t},{getOwnPropertyDescriptors:function(){return Object.getOwnPropertyDescriptors!==t}}),t}},dwco:function(t,e,r){!function(e,r,n){"use strict";t.exports={polyfill:function(){if(!("scrollBehavior"in r.documentElement.style)){var t=e.HTMLElement||e.Element,n={scroll:e.scroll||e.scrollTo,scrollBy:e.scrollBy,elScroll:t.prototype.scroll||i,scrollIntoView:t.prototype.scrollIntoView},o=e.performance&&e.performance.now?e.performance.now.bind(e.performance):Date.now;e.scroll=e.scrollTo=function(){a(arguments[0])?n.scroll.call(e,arguments[0].left||arguments[0],arguments[0].top||arguments[1]):s.call(e,r.body,~~arguments[0].left,~~arguments[0].top)},e.scrollBy=function(){a(arguments[0])?n.scrollBy.call(e,arguments[0].left||arguments[0],arguments[0].top||arguments[1]):s.call(e,r.body,~~arguments[0].left+(e.scrollX||e.pageXOffset),~~arguments[0].top+(e.scrollY||e.pageYOffset))},t.prototype.scroll=t.prototype.scrollTo=function(){if(a(arguments[0]))n.elScroll.call(this,arguments[0].left||arguments[0],arguments[0].top||arguments[1]);else{var t=arguments[0].left,e=arguments[0].top;s.call(this,this,"number"==typeof t?t:this.scrollLeft,"number"==typeof e?e:this.scrollTop)}},t.prototype.scrollBy=function(){var t=arguments[0];"object"==typeof t?this.scroll({left:t.left+this.scrollLeft,top:t.top+this.scrollTop,behavior:t.behavior}):this.scroll(this.scrollLeft+t,this.scrollTop+arguments[1])},t.prototype.scrollIntoView=function(){if(a(arguments[0]))n.scrollIntoView.call(this,void 0===arguments[0]||arguments[0]);else{var t=u(this),o=t.getBoundingClientRect(),i=this.getBoundingClientRect();t!==r.body?(s.call(this,t,t.scrollLeft+i.left-o.left,t.scrollTop+i.top-o.top),e.scrollBy({left:o.left,top:o.top,behavior:"smooth"})):e.scrollBy({left:i.left,top:i.top,behavior:"smooth"})}}}function i(t,e){this.scrollLeft=t,this.scrollTop=e}function a(t){if("object"!=typeof t||null===t||void 0===t.behavior||"auto"===t.behavior||"instant"===t.behavior)return!0;if("object"==typeof t&&"smooth"===t.behavior)return!1;throw new TypeError("behavior not valid")}function u(t){var n,o,i;do{n=(t=t.parentNode)===r.body,o=t.clientHeight<t.scrollHeight||t.clientWidth<t.scrollWidth,i="visible"===e.getComputedStyle(t,null).overflow}while(!n&&(!o||i));return n=o=i=null,t}function c(t){var r,n,i,a,u=(o()-t.startTime)/468;a=u=u>1?1:u,r=.5*(1-Math.cos(Math.PI*a)),n=t.startX+(t.x-t.startX)*r,i=t.startY+(t.y-t.startY)*r,t.method.call(t.scrollable,n,i),n===t.x&&i===t.y||e.requestAnimationFrame(c.bind(e,t))}function s(t,a,u){var s,f,l,p,y=o();t===r.body?(s=e,f=e.scrollX||e.pageXOffset,l=e.scrollY||e.pageYOffset,p=n.scroll):(s=t,f=t.scrollLeft,l=t.scrollTop,p=i),c({scrollable:s,method:p,startTime:y,startX:f,startY:l,x:a,y:u})}}}}(window,document)},dzgB:function(t,e,r){"use strict";r("iNmR")(),r("0QyR")},eYmq:function(t,e){function r(t){target=t.currentTarget?t.currentTarget:t.srcElement,target.value==target.getAttribute("placeholder")&&(target.value="")}function n(t){target=t.currentTarget?t.currentTarget:t.srcElement,""==target.value&&(target.value=target.getAttribute("placeholder"))}if(!("placeholder"in document.createElement("input")))for(var o=document.getElementsByTagName("input"),i=0;i<o.length;i++)o[i].value||(o[i].value=o[i].getAttribute("placeholder")),o[i].addEventListener?(o[i].addEventListener("click",r,!1),o[i].addEventListener("blur",n,!1)):o[i].attachEvent&&(o[i].attachEvent("onclick",r),o[i].attachEvent("onblur",n))},exP7:function(t,e,r){"use strict";r("vndB")();var n=r("f3PD"),o=r("glNi"),i=r("PScO"),a=function(t,e){return new t((function(t){t(e)}))},u=Promise,c=function(t){if("Object"!==i(this))throw new TypeError("receiver is not an Object");var e=o(this,u),r=t,c=t;return n(t)&&(r=function(t,e){return function(r){var n=e();return a(t,n).then((function(){return r}))}}(e,t),c=function(t,e){return function(r){var n=e();return a(t,n).then((function(){throw r}))}}(e,t)),this.then(r,c)};if(Object.getOwnPropertyDescriptor){var s=Object.getOwnPropertyDescriptor(c,"name");s&&s.configurable&&Object.defineProperty(c,"name",{configurable:!0,value:"finally"})}t.exports=c},f3PD:function(t,e,r){"use strict";t.exports=r("IdCN")},fpfb:function(t,e,r){var n,o;!function(i,a){"use strict";void 0===(o="function"==typeof(n=function(){var t,e,r,n,o=Function.call,i=Object.prototype,a=o.bind(i.hasOwnProperty),u=o.bind(i.propertyIsEnumerable),c=o.bind(i.toString),s=a(i,"__defineGetter__");s&&(t=o.bind(i.__defineGetter__),e=o.bind(i.__defineSetter__),r=o.bind(i.__lookupGetter__),n=o.bind(i.__lookupSetter__));var f=function(t){return null==t||"object"!=typeof t&&"function"!=typeof t};Object.getPrototypeOf||(Object.getPrototypeOf=function(t){var e=t.__proto__;return e||null===e?e:"[object Function]"===c(t.constructor)?t.constructor.prototype:t instanceof Object?i:null});if(Object.defineProperty){var l=function(t){try{return t.sentinel=0,0===Object.getOwnPropertyDescriptor(t,"sentinel").value}catch(t){return!1}},p=l({});if(!("undefined"==typeof document||l(document.createElement("div")))||!p)var y=Object.getOwnPropertyDescriptor}if(!Object.getOwnPropertyDescriptor||y){Object.getOwnPropertyDescriptor=function(t,e){if(f(t))throw new TypeError("Object.getOwnPropertyDescriptor called on a non-object: "+t);if(y)try{return y.call(Object,t,e)}catch(t){}var o;if(!a(t,e))return o;if(o={enumerable:u(t,e),configurable:!0},s){var c=t.__proto__,l=t!==i;l&&(t.__proto__=i);var p=r(t,e),h=n(t,e);if(l&&(t.__proto__=c),p||h)return p&&(o.get=p),h&&(o.set=h),o}return o.value=t[e],o.writable=!0,o}}Object.getOwnPropertyNames||(Object.getOwnPropertyNames=function(t){return Object.keys(t)});if(!Object.create){var h;h=!({__proto__:null}instanceof Object)||"undefined"==typeof document?function(){return{__proto__:null}}:function(){var t=function(){if(!document.domain)return!1;try{return!!new ActiveXObject("htmlfile")}catch(t){return!1}}()?function(){var t,e;return(e=new ActiveXObject("htmlfile")).write("<script><\/script>"),e.close(),t=e.parentWindow.Object.prototype,e=null,t}():function(){var t,e=document.createElement("iframe"),r=document.body||document.documentElement;return e.style.display="none",r.appendChild(e),e.src="javascript:",t=e.contentWindow.Object.prototype,r.removeChild(e),e=null,t}();delete t.constructor,delete t.hasOwnProperty,delete t.propertyIsEnumerable,delete t.isPrototypeOf,delete t.toLocaleString,delete t.toString,delete t.valueOf;var e=function(){};return e.prototype=t,h=function(){return new e},new e},Object.create=function(t,e){var r,n=function(){};if(null===t)r=h();else{if(f(t))throw new TypeError("Object prototype may only be an Object or null");n.prototype=t,(r=new n).__proto__=t}return void 0!==e&&Object.defineProperties(r,e),r}}var v=function(t){try{return Object.defineProperty(t,"sentinel",{}),"sentinel"in t}catch(t){return!1}};if(Object.defineProperty){var d=v({}),b="undefined"==typeof document||v(document.createElement("div"));if(!d||!b)var g=Object.defineProperty,m=Object.defineProperties}if(!Object.defineProperty||g){Object.defineProperty=function(o,a,u){if(f(o))throw new TypeError("Object.defineProperty called on non-object: "+o);if(f(u))throw new TypeError("Property description must be an object: "+u);if(g)try{return g.call(Object,o,a,u)}catch(t){}if("value"in u)if(s&&(r(o,a)||n(o,a))){var c=o.__proto__;o.__proto__=i,delete o[a],o[a]=u.value,o.__proto__=c}else o[a]=u.value;else{var l="get"in u,p="set"in u;if(!s&&(l||p))throw new TypeError("getters & setters can not be defined on this javascript engine");l&&t(o,a,u.get),p&&e(o,a,u.set)}return o}}Object.defineProperties&&!m||(Object.defineProperties=function(t,e){if(m)try{return m.call(Object,t,e)}catch(t){}return Object.keys(e).forEach((function(r){"__proto__"!==r&&Object.defineProperty(t,r,e[r])})),t});Object.seal||(Object.seal=function(t){if(Object(t)!==t)throw new TypeError("Object.seal can only be called on Objects.");return t});Object.freeze||(Object.freeze=function(t){if(Object(t)!==t)throw new TypeError("Object.freeze can only be called on Objects.");return t});try{Object.freeze((function(){}))}catch(t){Object.freeze=(w=Object.freeze,function(t){return"function"==typeof t?t:w(t)})}var w;Object.preventExtensions||(Object.preventExtensions=function(t){if(Object(t)!==t)throw new TypeError("Object.preventExtensions can only be called on Objects.");return t});Object.isSealed||(Object.isSealed=function(t){if(Object(t)!==t)throw new TypeError("Object.isSealed can only be called on Objects.");return!1});Object.isFrozen||(Object.isFrozen=function(t){if(Object(t)!==t)throw new TypeError("Object.isFrozen can only be called on Objects.");return!1});Object.isExtensible||(Object.isExtensible=function(t){if(Object(t)!==t)throw new TypeError("Object.isExtensible can only be called on Objects.");for(var e="";a(t,e);)e+="?";t[e]=!0;var r=a(t,e);return delete t[e],r})})?n.call(e,r,e,t):n)||(t.exports=o)}()},fyQZ:function(t,e,r){"use strict";var n=r("6ayh"),o=r("HdHG"),i=n("%TypeError%"),a=r("Khql")("Object.prototype.propertyIsEnumerable"),u=r("oNNP"),c=r("1Soo"),s=r("rCmP"),f=r("PyeM"),l=r("GPGZ"),p=r("RIFg");t.exports=function(t,e){if("Object"!==p(t))throw new i("Assertion failed: O must be an Object");if(!s(e))throw new i("Assertion failed: P must be a Property Key");if(u(t,e)){if(!o){var r=c(t)&&"length"===e,n=f(t)&&"lastIndex"===e;return{"[[Configurable]]":!(r||n),"[[Enumerable]]":a(t,e),"[[Value]]":t[e],"[[Writable]]":!0}}return l(o(t,e))}}},gaAG:function(t,e,r){"use strict";var n=r("l4Qr");t.exports=function(){return n}},glNi:function(t,e,r){"use strict";var n=r("6ayh"),o=n("%Symbol.species%",!0),i=n("%TypeError%"),a=r("LJJ4"),u=r("PScO");t.exports=function(t,e){if("Object"!==u(t))throw new i("Assertion failed: Type(O) is not Object");var r=t.constructor;if(void 0===r)return e;if("Object"!==u(r))throw new i("O.constructor is not an Object");var n=o?r[o]:void 0;if(null==n)return e;if(a(n))return n;throw new i("no constructor found")}},gvBt:function(t,e,r){"use strict";var n=r("6ayh"),o=n("%TypeError%"),i=n("%Number%"),a=n("%RegExp%"),u=n("%parseInt%"),c=r("Khql"),s=r("D6qd"),f=r("E1iy"),l=c("String.prototype.slice"),p=s(/^0b[01]+$/i),y=s(/^0o[0-7]+$/i),h=s(/^[-+]0x[0-9a-f]+$/i),v=s(new a("["+["","​","￾"].join("")+"]","g")),d=["\t\n\v\f\r   ᠎    ","         　\u2028","\u2029\ufeff"].join(""),b=new RegExp("(^["+d+"]+)|(["+d+"]+$)","g"),g=c("String.prototype.replace"),m=r("zWG1");t.exports=function t(e){var r=f(e)?e:m(e,i);if("symbol"==typeof r)throw new o("Cannot convert a Symbol value to a number");if("string"==typeof r){if(p(r))return t(u(l(r,2),2));if(y(r))return t(u(l(r,2),8));if(v(r)||h(r))return NaN;var n=function(t){return g(t,b,"")}(r);if(n!==r)return t(n)}return i(r)}},gvzj:function(t,e,r){"use strict";var n;try{n=Function("s","return { [s]() {} }[s].name;")}catch(t){}t.exports=n&&"inferred"===function(){}.name?n:null},hBby:function(t,e,r){"use strict";"undefined"!=typeof self?t.exports=self:"undefined"!=typeof window?t.exports=window:t.exports=Function("return this")()},hJwt:function(t,e){var r;"function"!=typeof(r=window.Element.prototype).matches&&(r.matches=r.msMatchesSelector||r.mozMatchesSelector||r.webkitMatchesSelector||function(t){for(var e=(this.document||this.ownerDocument).querySelectorAll(t),r=0;e[r]&&e[r]!==this;)++r;return Boolean(e[r])}),"function"!=typeof r.closest&&(r.closest=function(t){for(var e=this;e&&1===e.nodeType;){if(e.matches(t))return e;e=e.parentNode}return null})},hLiU:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("Khql")("Array.prototype.slice"),i=r("aTj1"),a=r("tihr"),u=r("rCmP");t.exports=function(t,e){if(!u(e))throw new n("P must be a Property Key");var r=o(arguments,2),c=a(t,e);return i(c,t,r)}},hNTQ:function(t,e,r){"use strict";var n=r("oNNP"),o=r("xG2L"),i=r("RIFg");t.exports=function(t){return void 0!==t&&(o(i,"Property Descriptor","Desc",t),!(!n(t,"[[Value]]")&&!n(t,"[[Writable]]")))}},hemD:function(t,e,r){"use strict";t.exports=r("IdCN")},iNmR:function(t,e,r){"use strict";var n=r("82c2"),o=r("FHRK");t.exports=function(){var t=o();return n(Array.prototype,{includes:t},{includes:function(){return Array.prototype.includes!==t}}),t}},iSaG:function(t,e,r){"use strict";var n=r("vndB"),o=r("exP7");t.exports=function(){return n(),"function"==typeof Promise.prototype.finally?Promise.prototype.finally:o}},ib7Q:function(t,e,r){"use strict";var n=r("xoj2"),o=r("82c2");t.exports=function(){var t=n();return o(Object,{values:t},{values:function(){return Object.values!==t}}),t}},kx12:function(t,e,r){"use strict";r("aqn5")()},"l+XD":function(t,e){t.exports=function(t){var e=!0,r=!0,n=!1;if("function"==typeof t){try{t.call("f",(function(t,r,n){"object"!=typeof n&&(e=!1)})),t.call([null],(function(){"use strict";r="string"==typeof this}),"x")}catch(t){n=!0}return!n&&e&&r}return!1}},"l1+S":function(t,e,r){"use strict";var n=r("HYxC");t.exports=function(){return Array.prototype.flatMap||n}},l4Qr:function(t,e,r){"use strict";var n=r("hemD"),o=r("JQAW")(),i=r("Khql"),a=i("Function.prototype.toString"),u=i("String.prototype.match"),c=/^class /,s=/\s*function\s+([^(\s]*)\s*/,f=Function.prototype;t.exports=function(){if(!function(t){if(n(t))return!1;if("function"!=typeof t)return!1;try{return!!u(a(t),c)}catch(t){}return!1}(this)&&!n(this))throw new TypeError("Function.prototype.name sham getter called on non-function");if(o)return this.name;if(this===f)return"";var t=a(this),e=u(t,s);return e&&e[1]}},lfCk:function(t,e,r){!function(){"use strict";function t(t){var e=!0,r=!1,n=null,o={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function i(t){return!!(t&&t!==document&&"HTML"!==t.nodeName&&"BODY"!==t.nodeName&&"classList"in t&&"contains"in t.classList)}function a(t){t.classList.contains("focus-visible")||(t.classList.add("focus-visible"),t.setAttribute("data-focus-visible-added",""))}function u(t){e=!1}function c(){document.addEventListener("mousemove",s),document.addEventListener("mousedown",s),document.addEventListener("mouseup",s),document.addEventListener("pointermove",s),document.addEventListener("pointerdown",s),document.addEventListener("pointerup",s),document.addEventListener("touchmove",s),document.addEventListener("touchstart",s),document.addEventListener("touchend",s)}function s(t){t.target.nodeName&&"html"===t.target.nodeName.toLowerCase()||(e=!1,document.removeEventListener("mousemove",s),document.removeEventListener("mousedown",s),document.removeEventListener("mouseup",s),document.removeEventListener("pointermove",s),document.removeEventListener("pointerdown",s),document.removeEventListener("pointerup",s),document.removeEventListener("touchmove",s),document.removeEventListener("touchstart",s),document.removeEventListener("touchend",s))}document.addEventListener("keydown",(function(r){r.metaKey||r.altKey||r.ctrlKey||(i(t.activeElement)&&a(t.activeElement),e=!0)}),!0),document.addEventListener("mousedown",u,!0),document.addEventListener("pointerdown",u,!0),document.addEventListener("touchstart",u,!0),document.addEventListener("visibilitychange",(function(t){"hidden"===document.visibilityState&&(r&&(e=!0),c())}),!0),c(),t.addEventListener("focus",(function(t){var r,n,u;i(t.target)&&(e||(r=t.target,n=r.type,"INPUT"===(u=r.tagName)&&o[n]&&!r.readOnly||"TEXTAREA"===u&&!r.readOnly||r.isContentEditable))&&a(t.target)}),!0),t.addEventListener("blur",(function(t){var e;i(t.target)&&(t.target.classList.contains("focus-visible")||t.target.hasAttribute("data-focus-visible-added"))&&(r=!0,window.clearTimeout(n),n=window.setTimeout((function(){r=!1}),100),(e=t.target).hasAttribute("data-focus-visible-added")&&(e.classList.remove("focus-visible"),e.removeAttribute("data-focus-visible-added")))}),!0),t.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&t.host?t.host.setAttribute("data-js-focus-visible",""):t.nodeType===Node.DOCUMENT_NODE&&(document.documentElement.classList.add("js-focus-visible"),document.documentElement.setAttribute("data-js-focus-visible",""))}if("undefined"!=typeof window&&"undefined"!=typeof document){var e;window.applyFocusVisiblePolyfill=t;try{e=new CustomEvent("focus-visible-polyfill-ready")}catch(t){(e=document.createEvent("CustomEvent")).initCustomEvent("focus-visible-polyfill-ready",!1,!1,{})}window.dispatchEvent(e)}"undefined"!=typeof document&&t(document)}()},lmVY:function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},lt0f:function(t,e){!function(){"use strict";if(self.document){var t=KeyboardEvent.prototype,e=Object.getOwnPropertyDescriptor(t,"key");if(e){var r={Win:"Meta",Scroll:"ScrollLock",Spacebar:" ",Down:"ArrowDown",Left:"ArrowLeft",Right:"ArrowRight",Up:"ArrowUp",Del:"Delete",Apps:"ContextMenu",Esc:"Escape",Multiply:"*",Add:"+",Subtract:"-",Decimal:".",Divide:"/"};Object.defineProperty(t,"key",{get:function(){var t=e.get.call(this);return r.hasOwnProperty(t)?r[t]:t}})}}}()},lwsE:function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},"m2++":function(t,e,r){"use strict";var n=r("oM6l"),o=r("tPqs");t.exports=function(t){var e=o(t);return!0!==n(e)&&e}},mJ3t:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("sqVN"),i=r("aTj1"),a=r("UBAn"),u=r("2GRh"),c=r("RJ/z"),s=r("1Soo"),f=r("ciGR"),l=r("R5T6");t.exports=function t(e,r,p,y,h){var v;arguments.length>5&&(v=arguments[5]);for(var d=y,b=0;b<p;){var g=l(b),m=c(r,g);if(!0===m){var w=u(r,g);if(void 0!==v){if(arguments.length<=6)throw new n("Assertion failed: thisArg is required when mapperFunction is provided");w=i(v,arguments[6],[w,b,r])}var O=!1;if(h>0&&(O=s(w)),O){var j=f(u(w,"length"));d=t(e,w,j,d,h-1)}else{if(d>=o)throw new n("index too large");a(e,l(d),w),d+=1}}b+=1}return d}},nIg7:function(t,e,r){"use strict";var n=r("82c2"),o=r("UVaH")(),i=r("uKH6"),a=r("bBhT"),u=Object.defineProperty,c=Object.getOwnPropertyDescriptor;t.exports=function(){var t=i();if(n(String.prototype,{matchAll:t},{matchAll:function(){return String.prototype.matchAll!==t}}),o){var e=Symbol.matchAll||(Symbol.for?Symbol.for("Symbol.matchAll"):Symbol("Symbol.matchAll"));if(n(Symbol,{matchAll:e},{matchAll:function(){return Symbol.matchAll!==e}}),u&&c){var r=c(Symbol,e);r&&!r.configurable||u(Symbol,e,{configurable:!1,enumerable:!1,value:e,writable:!1})}var s=a(),f={};f[e]=s;var l={};l[e]=function(){return RegExp.prototype[e]!==s},n(RegExp.prototype,f,l)}return t}},nRDI:function(t,e,r){"use strict";t.exports=function(t){if(arguments.length<1)throw new TypeError("1 argument is required");if("object"!=typeof t)throw new TypeError("Argument 1 (”other“) to Node.contains must be an instance of Node");var e=t;do{if(this===e)return!0;e&&(e=e.parentNode)}while(e);return!1}},nvDk:function(t,e,r){"use strict";r("U/4o")()},oM6l:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("2GRh"),i=r("XnxE"),a=r("RIFg");t.exports=function(t){if("Object"!==a(t))throw new n("Assertion failed: Type(iterResult) is not Object");return i(o(t,"done"))}},oNNP:function(t,e,r){"use strict";var n=r("D3zA");t.exports=n.call(Function.call,Object.prototype.hasOwnProperty)},owxQ:function(t,e,r){"use strict";var n=r("82c2"),o=r("Ii9V"),i=r("Khql"),a=r("+71H"),u=r("UMYc"),c=u(),s=r("yBRW"),f=i("Array.prototype.slice"),l=function(t,e){return o(t),c.apply(t,f(arguments,1))};n(l,{getPolyfill:u,implementation:a,shim:s}),t.exports=l},p2h6:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("2GRh"),i=r("RIFg");t.exports=function(t){if("Object"!==i(t))throw new n("Assertion failed: Type(iterResult) is not Object");return o(t,"value")}},qjSr:function(t,e,r){"use strict";var n=r("6ayh"),o=n("%Array%"),i=n("%Symbol.species%",!0),a=n("%TypeError%"),u=r("2GRh"),c=r("1Soo"),s=r("zODz"),f=r("1l3A"),l=r("RIFg");t.exports=function(t,e){if(!f(e)||e<0)throw new a("Assertion failed: length must be an integer >= 0");var r,n=0===e?0:e;if(c(t)&&(r=u(t,"constructor"),i&&"Object"===l(r)&&null===(r=u(r,i))&&(r=void 0)),void 0===r)return o(n);if(!s(r))throw new a("C must be a constructor");return new r(n)}},"qv/t":function(t,e,r){(function(n,o){var i,a;void 0===(a="function"==typeof(i=function(){"use strict";var t,e=Function.call.bind(Function.apply),r=Function.call.bind(Function.call),i=Array.isArray,a=Object.keys,u=function(t){return function(){return!e(t,this,arguments)}},c=function(t){try{return t(),!1}catch(t){return!0}},s=function(t){try{return t()}catch(t){return!1}},f=u(c),l=function(){return!c((function(){return Object.defineProperty({},"x",{get:function(){}})}))},p=!!Object.defineProperty&&l(),y="foo"===function(){}.name,h=Function.call.bind(Array.prototype.forEach),v=Function.call.bind(Array.prototype.reduce),d=Function.call.bind(Array.prototype.filter),b=Function.call.bind(Array.prototype.some),g=function(t,e,r,n){!n&&e in t||(p?Object.defineProperty(t,e,{configurable:!0,enumerable:!1,writable:!0,value:r}):t[e]=r)},m=function(t,e,r){h(a(e),(function(n){var o=e[n];g(t,n,o,!!r)}))},w=Function.call.bind(Object.prototype.toString),O=function(t){return"function"==typeof t},j={getter:function(t,e,r){if(!p)throw new TypeError("getters require true ES5 support");Object.defineProperty(t,e,{configurable:!0,enumerable:!1,get:r})},proxy:function(t,e,r){if(!p)throw new TypeError("getters require true ES5 support");var n=Object.getOwnPropertyDescriptor(t,e);Object.defineProperty(r,e,{configurable:n.configurable,enumerable:n.enumerable,get:function(){return t[e]},set:function(r){t[e]=r}})},redefine:function(t,e,r){if(p){var n=Object.getOwnPropertyDescriptor(t,e);n.value=r,Object.defineProperty(t,e,n)}else t[e]=r},defineByDescriptor:function(t,e,r){p?Object.defineProperty(t,e,r):"value"in r&&(t[e]=r.value)},preserveToString:function(t,e){e&&O(e.toString)&&g(t,"toString",e.toString.bind(e),!0)}},S=Object.create||function(t,e){var r=function(){};r.prototype=t;var n=new r;return void 0!==e&&a(e).forEach((function(t){j.defineByDescriptor(n,t,e[t])})),n},T=function(t,e){return!!Object.setPrototypeOf&&s((function(){var r=function e(r){var n=new t(r);return Object.setPrototypeOf(n,e.prototype),n};return Object.setPrototypeOf(r,t),r.prototype=S(t.prototype,{constructor:{value:r}}),e(r)}))},E=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n)return n;throw new Error("unable to locate global object")},x=E(),P=x.isFinite,I=Function.call.bind(String.prototype.indexOf),A=Function.apply.bind(Array.prototype.indexOf),_=Function.call.bind(Array.prototype.concat),R=Function.call.bind(String.prototype.slice),M=Function.call.bind(Array.prototype.push),C=Function.apply.bind(Array.prototype.push),N=Function.call.bind(Array.prototype.shift),D=Math.max,F=Math.min,k=Math.floor,L=Math.abs,U=Math.exp,B=Math.log,q=Math.sqrt,G=Function.call.bind(Object.prototype.hasOwnProperty),V=function(){},z=x.Map,H=z&&z.prototype.delete,W=z&&z.prototype.get,$=z&&z.prototype.has,K=z&&z.prototype.set,J=x.Symbol||{},X=J.species||"@@species",Y=Number.isNaN||function(t){return t!=t},Z=Number.isFinite||function(t){return"number"==typeof t&&P(t)},Q=O(Math.sign)?Math.sign:function(t){var e=Number(t);return 0===e||Y(e)?e:e<0?-1:1},tt=function(t){var e=Number(t);return e<-1||Y(e)?NaN:0===e||e===1/0?e:-1===e?-1/0:1+e-1==0?e:e*(B(1+e)/(1+e-1))},et=function(t){return"[object Arguments]"===w(t)},rt=function(t){return null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Array]"!==w(t)&&"[object Function]"===w(t.callee)},nt=et(arguments)?et:rt,ot={primitive:function(t){return null===t||"function"!=typeof t&&"object"!=typeof t},string:function(t){return"[object String]"===w(t)},regex:function(t){return"[object RegExp]"===w(t)},symbol:function(t){return"function"==typeof x.Symbol&&"symbol"==typeof t}},it=function(t,e,r){var n=t[e];g(t,e,r,!0),j.preserveToString(t[e],n)},at="function"==typeof J&&"function"==typeof J.for&&ot.symbol(J()),ut=ot.symbol(J.iterator)?J.iterator:"_es6-shim iterator_";x.Set&&"function"==typeof(new x.Set)["@@iterator"]&&(ut="@@iterator"),x.Reflect||g(x,"Reflect",{},!0);var ct,st=x.Reflect,ft=String,lt="undefined"!=typeof document&&document?document.all:null,pt=null==lt?function(t){return null==t}:function(t){return null==t&&t!==lt},yt={Call:function(t,r){var n=arguments.length>2?arguments[2]:[];if(!yt.IsCallable(t))throw new TypeError(t+" is not a function");return e(t,r,n)},RequireObjectCoercible:function(t,e){if(pt(t))throw new TypeError(e||"Cannot call method on "+t);return t},TypeIsObject:function(t){return null!=t&&!0!==t&&!1!==t&&("function"==typeof t||"object"==typeof t||t===lt)},ToObject:function(t,e){return Object(yt.RequireObjectCoercible(t,e))},IsCallable:O,IsConstructor:function(t){return yt.IsCallable(t)},ToInt32:function(t){return yt.ToNumber(t)>>0},ToUint32:function(t){return yt.ToNumber(t)>>>0},ToNumber:function(t){if("[object Symbol]"===w(t))throw new TypeError("Cannot convert a Symbol value to a number");return+t},ToInteger:function(t){var e=yt.ToNumber(t);return Y(e)?0:0!==e&&Z(e)?(e>0?1:-1)*k(L(e)):e},ToLength:function(t){var e=yt.ToInteger(t);return e<=0?0:e>Number.MAX_SAFE_INTEGER?Number.MAX_SAFE_INTEGER:e},SameValue:function(t,e){return t===e?0!==t||1/t==1/e:Y(t)&&Y(e)},SameValueZero:function(t,e){return t===e||Y(t)&&Y(e)},IsIterable:function(t){return yt.TypeIsObject(t)&&(void 0!==t[ut]||nt(t))},GetIterator:function(e){if(nt(e))return new t(e,"value");var r=yt.GetMethod(e,ut);if(!yt.IsCallable(r))throw new TypeError("value is not an iterable");var n=yt.Call(r,e);if(!yt.TypeIsObject(n))throw new TypeError("bad iterator");return n},GetMethod:function(t,e){var r=yt.ToObject(t)[e];if(!pt(r)){if(!yt.IsCallable(r))throw new TypeError("Method not callable: "+e);return r}},IteratorComplete:function(t){return!!t.done},IteratorClose:function(t,e){var r=yt.GetMethod(t,"return");if(void 0!==r){var n,o;try{n=yt.Call(r,t)}catch(t){o=t}if(!e){if(o)throw o;if(!yt.TypeIsObject(n))throw new TypeError("Iterator's return method returned a non-object.")}}},IteratorNext:function(t){var e=arguments.length>1?t.next(arguments[1]):t.next();if(!yt.TypeIsObject(e))throw new TypeError("bad iterator");return e},IteratorStep:function(t){var e=yt.IteratorNext(t);return!yt.IteratorComplete(e)&&e},Construct:function(t,e,r,n){var o=void 0===r?t:r;if(!n&&st.construct)return st.construct(t,e,o);var i=o.prototype;yt.TypeIsObject(i)||(i=Object.prototype);var a=S(i),u=yt.Call(t,a,e);return yt.TypeIsObject(u)?u:a},SpeciesConstructor:function(t,e){var r=t.constructor;if(void 0===r)return e;if(!yt.TypeIsObject(r))throw new TypeError("Bad constructor");var n=r[X];if(pt(n))return e;if(!yt.IsConstructor(n))throw new TypeError("Bad @@species");return n},CreateHTML:function(t,e,r,n){var o=yt.ToString(t),i="<"+e;return""!==r&&(i+=" "+r+'="'+yt.ToString(n).replace(/"/g,"&quot;")+'"'),i+">"+o+"</"+e+">"},IsRegExp:function(t){if(!yt.TypeIsObject(t))return!1;var e=t[J.match];return void 0!==e?!!e:ot.regex(t)},ToString:function(t){return ft(t)}};if(p&&at){var ht=function(t){if(ot.symbol(J[t]))return J[t];var e=J.for("Symbol."+t);return Object.defineProperty(J,t,{configurable:!1,enumerable:!1,writable:!1,value:e}),e};if(!ot.symbol(J.search)){var vt=ht("search"),dt=String.prototype.search;g(RegExp.prototype,vt,(function(t){return yt.Call(dt,t,[this])}));var bt=function(t){var e=yt.RequireObjectCoercible(this);if(!pt(t)){var r=yt.GetMethod(t,vt);if(void 0!==r)return yt.Call(r,t,[e])}return yt.Call(dt,e,[yt.ToString(t)])};it(String.prototype,"search",bt)}if(!ot.symbol(J.replace)){var gt=ht("replace"),mt=String.prototype.replace;g(RegExp.prototype,gt,(function(t,e){return yt.Call(mt,t,[this,e])}));var wt=function(t,e){var r=yt.RequireObjectCoercible(this);if(!pt(t)){var n=yt.GetMethod(t,gt);if(void 0!==n)return yt.Call(n,t,[r,e])}return yt.Call(mt,r,[yt.ToString(t),e])};it(String.prototype,"replace",wt)}if(!ot.symbol(J.split)){var Ot=ht("split"),jt=String.prototype.split;g(RegExp.prototype,Ot,(function(t,e){return yt.Call(jt,t,[this,e])}));var St=function(t,e){var r=yt.RequireObjectCoercible(this);if(!pt(t)){var n=yt.GetMethod(t,Ot);if(void 0!==n)return yt.Call(n,t,[r,e])}return yt.Call(jt,r,[yt.ToString(t),e])};it(String.prototype,"split",St)}var Tt=ot.symbol(J.match),Et=Tt&&((ct={})[J.match]=function(){return 42},42!=="a".match(ct));if(!Tt||Et){var xt=ht("match"),Pt=String.prototype.match;g(RegExp.prototype,xt,(function(t){return yt.Call(Pt,t,[this])}));var It=function(t){var e=yt.RequireObjectCoercible(this);if(!pt(t)){var r=yt.GetMethod(t,xt);if(void 0!==r)return yt.Call(r,t,[e])}return yt.Call(Pt,e,[yt.ToString(t)])};it(String.prototype,"match",It)}}var At=function(t,e,r){j.preserveToString(e,t),Object.setPrototypeOf&&Object.setPrototypeOf(t,e),p?h(Object.getOwnPropertyNames(t),(function(n){n in V||r[n]||j.proxy(t,n,e)})):h(Object.keys(t),(function(n){n in V||r[n]||(e[n]=t[n])})),e.prototype=t.prototype,j.redefine(t.prototype,"constructor",e)},_t=function(){return this},Rt=function(t){p&&!G(t,X)&&j.getter(t,X,_t)},Mt=function(t,e){var r=e||function(){return this};g(t,ut,r),!t[ut]&&ot.symbol(ut)&&(t[ut]=r)},Ct=function(t,e,r){p?Object.defineProperty(t,e,{configurable:!0,enumerable:!0,writable:!0,value:r}):t[e]=r},Nt=function(t,e,r){if(Ct(t,e,r),!yt.SameValue(t[e],r))throw new TypeError("property is nonconfigurable")},Dt=function(t,e,r,n){if(!yt.TypeIsObject(t))throw new TypeError("Constructor requires `new`: "+e.name);var o=e.prototype;yt.TypeIsObject(o)||(o=r);var i=S(o);for(var a in n)if(G(n,a)){var u=n[a];g(i,a,u,!0)}return i};if(String.fromCodePoint&&1!==String.fromCodePoint.length){var Ft=String.fromCodePoint;it(String,"fromCodePoint",(function(t){return yt.Call(Ft,this,arguments)}))}var kt={fromCodePoint:function(t){for(var e,r=[],n=0,o=arguments.length;n<o;n++){if(e=Number(arguments[n]),!yt.SameValue(e,yt.ToInteger(e))||e<0||e>1114111)throw new RangeError("Invalid code point "+e);e<65536?M(r,String.fromCharCode(e)):(e-=65536,M(r,String.fromCharCode(55296+(e>>10))),M(r,String.fromCharCode(e%1024+56320)))}return r.join("")},raw:function(t){var e=yt.ToObject(t,"bad callSite"),r=yt.ToObject(e.raw,"bad raw value"),n=r.length,o=yt.ToLength(n);if(o<=0)return"";for(var i,a,u,c,s=[],f=0;f<o&&(i=yt.ToString(f),u=yt.ToString(r[i]),M(s,u),!(f+1>=o));)a=f+1<arguments.length?arguments[f+1]:"",c=yt.ToString(a),M(s,c),f+=1;return s.join("")}};String.raw&&"xy"!==String.raw({raw:{0:"x",1:"y",length:2}})&&it(String,"raw",kt.raw),m(String,kt);var Lt=function t(e,r){if(r<1)return"";if(r%2)return t(e,r-1)+e;var n=t(e,r/2);return n+n},Ut=1/0,Bt={repeat:function(t){var e=yt.ToString(yt.RequireObjectCoercible(this)),r=yt.ToInteger(t);if(r<0||r>=Ut)throw new RangeError("repeat count must be less than infinity and not overflow maximum string size");return Lt(e,r)},startsWith:function(t){var e=yt.ToString(yt.RequireObjectCoercible(this));if(yt.IsRegExp(t))throw new TypeError('Cannot call method "startsWith" with a regex');var r,n=yt.ToString(t);arguments.length>1&&(r=arguments[1]);var o=D(yt.ToInteger(r),0);return R(e,o,o+n.length)===n},endsWith:function(t){var e=yt.ToString(yt.RequireObjectCoercible(this));if(yt.IsRegExp(t))throw new TypeError('Cannot call method "endsWith" with a regex');var r,n=yt.ToString(t),o=e.length;arguments.length>1&&(r=arguments[1]);var i=void 0===r?o:yt.ToInteger(r),a=F(D(i,0),o);return R(e,a-n.length,a)===n},includes:function(t){if(yt.IsRegExp(t))throw new TypeError('"includes" does not accept a RegExp');var e,r=yt.ToString(t);return arguments.length>1&&(e=arguments[1]),-1!==I(this,r,e)},codePointAt:function(t){var e=yt.ToString(yt.RequireObjectCoercible(this)),r=yt.ToInteger(t),n=e.length;if(r>=0&&r<n){var o=e.charCodeAt(r);if(o<55296||o>56319||r+1===n)return o;var i=e.charCodeAt(r+1);return i<56320||i>57343?o:1024*(o-55296)+(i-56320)+65536}}};if(String.prototype.includes&&!1!=="a".includes("a",1/0)&&it(String.prototype,"includes",Bt.includes),String.prototype.startsWith&&String.prototype.endsWith){var qt=c((function(){return"/a/".startsWith(/a/)})),Gt=s((function(){return!1==="abc".startsWith("a",1/0)}));qt&&Gt||(it(String.prototype,"startsWith",Bt.startsWith),it(String.prototype,"endsWith",Bt.endsWith))}if(at){var Vt=s((function(){var t=/a/;return t[J.match]=!1,"/a/".startsWith(t)}));Vt||it(String.prototype,"startsWith",Bt.startsWith);var zt=s((function(){var t=/a/;return t[J.match]=!1,"/a/".endsWith(t)}));zt||it(String.prototype,"endsWith",Bt.endsWith);var Ht=s((function(){var t=/a/;return t[J.match]=!1,"/a/".includes(t)}));Ht||it(String.prototype,"includes",Bt.includes)}m(String.prototype,Bt);var Wt=["\t\n\v\f\r   ᠎    ","         　\u2028","\u2029\ufeff"].join(""),$t=new RegExp("(^["+Wt+"]+)|(["+Wt+"]+$)","g"),Kt=function(){return yt.ToString(yt.RequireObjectCoercible(this)).replace($t,"")},Jt=["","​","￾"].join(""),Xt=new RegExp("["+Jt+"]","g"),Yt=/^[-+]0x[0-9a-f]+$/i,Zt=Jt.trim().length!==Jt.length;g(String.prototype,"trim",Kt,Zt);var Qt=function(t){return{value:t,done:0===arguments.length}},te=function(t){yt.RequireObjectCoercible(t),this._s=yt.ToString(t),this._i=0};te.prototype.next=function(){var t=this._s,e=this._i;if(void 0===t||e>=t.length)return this._s=void 0,Qt();var r,n,o=t.charCodeAt(e);return n=o<55296||o>56319||e+1===t.length||(r=t.charCodeAt(e+1))<56320||r>57343?1:2,this._i=e+n,Qt(t.substr(e,n))},Mt(te.prototype),Mt(String.prototype,(function(){return new te(this)}));var ee={from:function(t){var e,n,o,i=this;if(arguments.length>1&&(e=arguments[1]),void 0===e)n=!1;else{if(!yt.IsCallable(e))throw new TypeError("Array.from: when provided, the second argument must be a function");arguments.length>2&&(o=arguments[2]),n=!0}var a,u,c,s=void 0!==(nt(t)||yt.GetMethod(t,ut));if(s){u=yt.IsConstructor(i)?Object(new i):[];var f,l,p=yt.GetIterator(t);for(c=0;!1!==(f=yt.IteratorStep(p));){l=f.value;try{n&&(l=void 0===o?e(l,c):r(e,o,l,c)),u[c]=l}catch(t){throw yt.IteratorClose(p,!0),t}c+=1}a=c}else{var y,h=yt.ToObject(t);for(a=yt.ToLength(h.length),u=yt.IsConstructor(i)?Object(new i(a)):new Array(a),c=0;c<a;++c)y=h[c],n&&(y=void 0===o?e(y,c):r(e,o,y,c)),Nt(u,c,y)}return u.length=a,u},of:function(){for(var t=arguments.length,e=this,r=i(e)||!yt.IsCallable(e)?new Array(t):yt.Construct(e,[t]),n=0;n<t;++n)Nt(r,n,arguments[n]);return r.length=t,r}};m(Array,ee),Rt(Array),m((t=function(t,e){this.i=0,this.array=t,this.kind=e}).prototype,{next:function(){var e=this.i,r=this.array;if(!(this instanceof t))throw new TypeError("Not an ArrayIterator");if(void 0!==r)for(var n=yt.ToLength(r.length);e<n;e++){var o,i=this.kind;return"key"===i?o=e:"value"===i?o=r[e]:"entry"===i&&(o=[e,r[e]]),this.i=e+1,Qt(o)}return this.array=void 0,Qt()}}),Mt(t.prototype);var re=Array.of===ee.of||function(){var t=function(t){this.length=t};t.prototype=[];var e=Array.of.apply(t,[1,2]);return e instanceof t&&2===e.length}();re||it(Array,"of",ee.of);var ne={copyWithin:function(t,e){var r,n=yt.ToObject(this),o=yt.ToLength(n.length),i=yt.ToInteger(t),a=yt.ToInteger(e),u=i<0?D(o+i,0):F(i,o),c=a<0?D(o+a,0):F(a,o);arguments.length>2&&(r=arguments[2]);var s=void 0===r?o:yt.ToInteger(r),f=s<0?D(o+s,0):F(s,o),l=F(f-c,o-u),p=1;for(c<u&&u<c+l&&(p=-1,c+=l-1,u+=l-1);l>0;)c in n?n[u]=n[c]:delete n[u],c+=p,u+=p,l-=1;return n},fill:function(t){var e,r;arguments.length>1&&(e=arguments[1]),arguments.length>2&&(r=arguments[2]);var n=yt.ToObject(this),o=yt.ToLength(n.length);e=yt.ToInteger(void 0===e?0:e),r=yt.ToInteger(void 0===r?o:r);for(var i=e<0?D(o+e,0):F(e,o),a=r<0?o+r:r,u=i;u<o&&u<a;++u)n[u]=t;return n},find:function(t){var e=yt.ToObject(this),n=yt.ToLength(e.length);if(!yt.IsCallable(t))throw new TypeError("Array#find: predicate must be a function");for(var o,i=arguments.length>1?arguments[1]:null,a=0;a<n;a++)if(o=e[a],i){if(r(t,i,o,a,e))return o}else if(t(o,a,e))return o},findIndex:function(t){var e=yt.ToObject(this),n=yt.ToLength(e.length);if(!yt.IsCallable(t))throw new TypeError("Array#findIndex: predicate must be a function");for(var o=arguments.length>1?arguments[1]:null,i=0;i<n;i++)if(o){if(r(t,o,e[i],i,e))return i}else if(t(e[i],i,e))return i;return-1},keys:function(){return new t(this,"key")},values:function(){return new t(this,"value")},entries:function(){return new t(this,"entry")}};if(Array.prototype.keys&&!yt.IsCallable([1].keys().next)&&delete Array.prototype.keys,Array.prototype.entries&&!yt.IsCallable([1].entries().next)&&delete Array.prototype.entries,Array.prototype.keys&&Array.prototype.entries&&!Array.prototype.values&&Array.prototype[ut]&&(m(Array.prototype,{values:Array.prototype[ut]}),ot.symbol(J.unscopables)&&(Array.prototype[J.unscopables].values=!0)),y&&Array.prototype.values&&"values"!==Array.prototype.values.name){var oe=Array.prototype.values;it(Array.prototype,"values",(function(){return yt.Call(oe,this,arguments)})),g(Array.prototype,ut,Array.prototype.values,!0)}m(Array.prototype,ne),1/[!0].indexOf(!0,-0)<0&&g(Array.prototype,"indexOf",(function(t){var e=A(this,arguments);return 0===e&&1/e<0?0:e}),!0),Mt(Array.prototype,(function(){return this.values()})),Object.getPrototypeOf&&Mt(Object.getPrototypeOf([].values()));var ie,ae=s((function(){return 0===Array.from({length:-1}).length})),ue=1===(ie=Array.from([0].entries())).length&&i(ie[0])&&0===ie[0][0]&&0===ie[0][1];ae&&ue||it(Array,"from",ee.from);var ce=s((function(){return Array.from([0],void 0)}));if(!ce){var se=Array.from;it(Array,"from",(function(t){return arguments.length>1&&void 0!==arguments[1]?yt.Call(se,this,arguments):r(se,this,t)}))}var fe=-(Math.pow(2,32)-1),le=function(t,e){var n={length:fe};return n[e?(n.length>>>0)-1:0]=!0,s((function(){return r(t,n,(function(){throw new RangeError("should not reach here")}),[]),!0}))};if(!le(Array.prototype.forEach)){var pe=Array.prototype.forEach;it(Array.prototype,"forEach",(function(t){return yt.Call(pe,this.length>=0?this:[],arguments)}),!0)}if(!le(Array.prototype.map)){var ye=Array.prototype.map;it(Array.prototype,"map",(function(t){return yt.Call(ye,this.length>=0?this:[],arguments)}),!0)}if(!le(Array.prototype.filter)){var he=Array.prototype.filter;it(Array.prototype,"filter",(function(t){return yt.Call(he,this.length>=0?this:[],arguments)}),!0)}if(!le(Array.prototype.some)){var ve=Array.prototype.some;it(Array.prototype,"some",(function(t){return yt.Call(ve,this.length>=0?this:[],arguments)}),!0)}if(!le(Array.prototype.every)){var de=Array.prototype.every;it(Array.prototype,"every",(function(t){return yt.Call(de,this.length>=0?this:[],arguments)}),!0)}if(!le(Array.prototype.reduce)){var be=Array.prototype.reduce;it(Array.prototype,"reduce",(function(t){return yt.Call(be,this.length>=0?this:[],arguments)}),!0)}if(!le(Array.prototype.reduceRight,!0)){var ge=Array.prototype.reduceRight;it(Array.prototype,"reduceRight",(function(t){return yt.Call(ge,this.length>=0?this:[],arguments)}),!0)}var me=8!==Number("0o10"),we=2!==Number("0b10"),Oe=b(Jt,(function(t){return 0===Number(t+0+t)}));if(me||we||Oe){var je=Number,Se=/^0b[01]+$/i,Te=/^0o[0-7]+$/i,Ee=Se.test.bind(Se),xe=Te.test.bind(Te),Pe=function(t){var e;if("function"==typeof t.valueOf&&(e=t.valueOf(),ot.primitive(e)))return e;if("function"==typeof t.toString&&(e=t.toString(),ot.primitive(e)))return e;throw new TypeError("No default value")},Ie=Xt.test.bind(Xt),Ae=Yt.test.bind(Yt),_e=function(){var t=function(e){var r;"string"==typeof(r=arguments.length>0?ot.primitive(e)?e:Pe(e,"number"):0)&&(r=yt.Call(Kt,r),Ee(r)?r=parseInt(R(r,2),2):xe(r)?r=parseInt(R(r,2),8):(Ie(r)||Ae(r))&&(r=NaN));var n=this,o=s((function(){return je.prototype.valueOf.call(n),!0}));return n instanceof t&&!o?new je(r):je(r)};return t}();At(je,_e,{}),m(_e,{NaN:je.NaN,MAX_VALUE:je.MAX_VALUE,MIN_VALUE:je.MIN_VALUE,NEGATIVE_INFINITY:je.NEGATIVE_INFINITY,POSITIVE_INFINITY:je.POSITIVE_INFINITY}),Number=_e,j.redefine(x,"Number",_e)}var Re=Math.pow(2,53)-1;m(Number,{MAX_SAFE_INTEGER:Re,MIN_SAFE_INTEGER:-Re,EPSILON:2220446049250313e-31,parseInt:x.parseInt,parseFloat:x.parseFloat,isFinite:Z,isInteger:function(t){return Z(t)&&yt.ToInteger(t)===t},isSafeInteger:function(t){return Number.isInteger(t)&&L(t)<=Number.MAX_SAFE_INTEGER},isNaN:Y}),g(Number,"parseInt",x.parseInt,Number.parseInt!==x.parseInt),1===[,1].find((function(){return!0}))&&it(Array.prototype,"find",ne.find),0!==[,1].findIndex((function(){return!0}))&&it(Array.prototype,"findIndex",ne.findIndex);var Me,Ce,Ne,De=Function.bind.call(Function.bind,Object.prototype.propertyIsEnumerable),Fe=function(t,e){p&&De(t,e)&&Object.defineProperty(t,e,{enumerable:!1})},ke=function(){for(var t=Number(this),e=arguments.length,r=e-t,n=new Array(r<0?0:r),o=t;o<e;++o)n[o-t]=arguments[o];return n},Le=function(t){return function(e,r){return e[r]=t[r],e}},Ue=function(t,e){var r,n=a(Object(e));return yt.IsCallable(Object.getOwnPropertySymbols)&&(r=d(Object.getOwnPropertySymbols(Object(e)),De(e))),v(_(n,r||[]),Le(e),t)},Be={assign:function(t,e){var r=yt.ToObject(t,"Cannot convert undefined or null to object");return v(yt.Call(ke,1,arguments),Ue,r)},is:function(t,e){return yt.SameValue(t,e)}},qe=Object.assign&&Object.preventExtensions&&function(){var t=Object.preventExtensions({1:2});try{Object.assign(t,"xy")}catch(e){return"y"===t[1]}}();if(qe&&it(Object,"assign",Be.assign),m(Object,Be),p){var Ge={setPrototypeOf:function(t,e){var n,o=function(t,e){return function(t,e){if(!yt.TypeIsObject(t))throw new TypeError("cannot set prototype on a non-object");if(null!==e&&!yt.TypeIsObject(e))throw new TypeError("can only set prototype to an object or null"+e)}(t,e),r(n,t,e),t};try{n=t.getOwnPropertyDescriptor(t.prototype,"__proto__").set,r(n,{},null)}catch(e){if(t.prototype!=={}.__proto__)return;n=function(t){this.__proto__=t},o.polyfill=o(o({},null),t.prototype)instanceof t}return o}(Object)};m(Object,Ge)}Object.setPrototypeOf&&Object.getPrototypeOf&&null!==Object.getPrototypeOf(Object.setPrototypeOf({},null))&&null===Object.getPrototypeOf(Object.create(null))&&(Me=Object.create(null),Ce=Object.getPrototypeOf,Ne=Object.setPrototypeOf,Object.getPrototypeOf=function(t){var e=Ce(t);return e===Me?null:e},Object.setPrototypeOf=function(t,e){return Ne(t,null===e?Me:e)},Object.setPrototypeOf.polyfill=!1);var Ve=!c((function(){return Object.keys("foo")}));if(!Ve){var ze=Object.keys;it(Object,"keys",(function(t){return ze(yt.ToObject(t))})),a=Object.keys}var He=c((function(){return Object.keys(/a/g)}));if(He){var We=Object.keys;it(Object,"keys",(function(t){if(ot.regex(t)){var e=[];for(var r in t)G(t,r)&&M(e,r);return e}return We(t)})),a=Object.keys}if(Object.getOwnPropertyNames){var $e=!c((function(){return Object.getOwnPropertyNames("foo")}));if(!$e){var Ke="object"==typeof window?Object.getOwnPropertyNames(window):[],Je=Object.getOwnPropertyNames;it(Object,"getOwnPropertyNames",(function(t){var e=yt.ToObject(t);if("[object Window]"===w(e))try{return Je(e)}catch(t){return _([],Ke)}return Je(e)}))}}if(Object.getOwnPropertyDescriptor){var Xe=!c((function(){return Object.getOwnPropertyDescriptor("foo","bar")}));if(!Xe){var Ye=Object.getOwnPropertyDescriptor;it(Object,"getOwnPropertyDescriptor",(function(t,e){return Ye(yt.ToObject(t),e)}))}}if(Object.seal){var Ze=!c((function(){return Object.seal("foo")}));if(!Ze){var Qe=Object.seal;it(Object,"seal",(function(t){return yt.TypeIsObject(t)?Qe(t):t}))}}if(Object.isSealed){var tr=!c((function(){return Object.isSealed("foo")}));if(!tr){var er=Object.isSealed;it(Object,"isSealed",(function(t){return!yt.TypeIsObject(t)||er(t)}))}}if(Object.freeze){var rr=!c((function(){return Object.freeze("foo")}));if(!rr){var nr=Object.freeze;it(Object,"freeze",(function(t){return yt.TypeIsObject(t)?nr(t):t}))}}if(Object.isFrozen){var or=!c((function(){return Object.isFrozen("foo")}));if(!or){var ir=Object.isFrozen;it(Object,"isFrozen",(function(t){return!yt.TypeIsObject(t)||ir(t)}))}}if(Object.preventExtensions){var ar=!c((function(){return Object.preventExtensions("foo")}));if(!ar){var ur=Object.preventExtensions;it(Object,"preventExtensions",(function(t){return yt.TypeIsObject(t)?ur(t):t}))}}if(Object.isExtensible){var cr=!c((function(){return Object.isExtensible("foo")}));if(!cr){var sr=Object.isExtensible;it(Object,"isExtensible",(function(t){return!!yt.TypeIsObject(t)&&sr(t)}))}}if(Object.getPrototypeOf){var fr=!c((function(){return Object.getPrototypeOf("foo")}));if(!fr){var lr=Object.getPrototypeOf;it(Object,"getPrototypeOf",(function(t){return lr(yt.ToObject(t))}))}}var pr,yr=p&&((pr=Object.getOwnPropertyDescriptor(RegExp.prototype,"flags"))&&yt.IsCallable(pr.get));if(p&&!yr){var hr=function(){if(!yt.TypeIsObject(this))throw new TypeError("Method called on incompatible type: must be an object.");var t="";return this.global&&(t+="g"),this.ignoreCase&&(t+="i"),this.multiline&&(t+="m"),this.unicode&&(t+="u"),this.sticky&&(t+="y"),t};j.getter(RegExp.prototype,"flags",hr)}var vr,dr=p&&s((function(){return"/a/i"===String(new RegExp(/a/g,"i"))})),br=at&&p&&((vr=/./)[J.match]=!1,RegExp(vr)===vr),gr=s((function(){return"/abc/"===RegExp.prototype.toString.call({source:"abc"})})),mr=gr&&s((function(){return"/a/b"===RegExp.prototype.toString.call({source:"a",flags:"b"})}));if(!gr||!mr){var wr=RegExp.prototype.toString;g(RegExp.prototype,"toString",(function(){var t=yt.RequireObjectCoercible(this);return ot.regex(t)?r(wr,t):"/"+ft(t.source)+"/"+ft(t.flags)}),!0),j.preserveToString(RegExp.prototype.toString,wr)}if(p&&(!dr||br)){var Or=Object.getOwnPropertyDescriptor(RegExp.prototype,"flags").get,jr=Object.getOwnPropertyDescriptor(RegExp.prototype,"source")||{},Sr=function(){return this.source},Tr=yt.IsCallable(jr.get)?jr.get:Sr,Er=RegExp,xr=function t(e,r){var n=yt.IsRegExp(e);return this instanceof t||!n||void 0!==r||e.constructor!==t?ot.regex(e)?new t(yt.Call(Tr,e),void 0===r?yt.Call(Or,e):r):(n&&(e.source,void 0===r&&e.flags),new Er(e,r)):e};At(Er,xr,{$input:!0}),RegExp=xr,j.redefine(x,"RegExp",xr)}if(p){var Pr={input:"$_",lastMatch:"$&",lastParen:"$+",leftContext:"$`",rightContext:"$'"};h(a(Pr),(function(t){t in RegExp&&!(Pr[t]in RegExp)&&j.getter(RegExp,Pr[t],(function(){return RegExp[t]}))}))}Rt(RegExp);var Ir=1/Number.EPSILON,Ar=function(t){return t+Ir-Ir},_r=Math.pow(2,-23),Rr=Math.pow(2,127)*(2-_r),Mr=Math.pow(2,-126),Cr=Math.E,Nr=Math.LOG2E,Dr=Math.LOG10E,Fr=Number.prototype.clz;delete Number.prototype.clz;var kr={acosh:function(t){var e=Number(t);if(Y(e)||t<1)return NaN;if(1===e)return 0;if(e===1/0)return e;var r=1/(e*e);if(e<2)return tt(e-1+q(1-r)*e);var n=e/2;return tt(n+q(1-r)*n-1)+1/Nr},asinh:function(t){var e=Number(t);if(0===e||!P(e))return e;var r=L(e),n=r*r,o=Q(e);return r<1?o*tt(r+n/(q(n+1)+1)):o*(tt(r/2+q(1+1/n)*r/2-1)+1/Nr)},atanh:function(t){var e=Number(t);if(0===e)return e;if(-1===e)return-1/0;if(1===e)return 1/0;if(Y(e)||e<-1||e>1)return NaN;var r=L(e);return Q(e)*tt(2*r/(1-r))/2},cbrt:function(t){var e=Number(t);if(0===e)return e;var r,n=e<0;return n&&(e=-e),r=e===1/0?1/0:(e/((r=U(B(e)/3))*r)+2*r)/3,n?-r:r},clz32:function(t){var e=Number(t),r=yt.ToUint32(e);return 0===r?32:Fr?yt.Call(Fr,r):31-k(B(r+.5)*Nr)},cosh:function(t){var e=Number(t);if(0===e)return 1;if(Y(e))return NaN;if(!P(e))return 1/0;var r=U(L(e)-1);return(r+1/(r*Cr*Cr))*(Cr/2)},expm1:function(t){var e=Number(t);if(e===-1/0)return-1;if(!P(e)||0===e)return e;if(L(e)>.5)return U(e)-1;for(var r=e,n=0,o=1;n+r!==n;)n+=r,r*=e/(o+=1);return n},hypot:function(t,e){for(var r=0,n=0,o=0;o<arguments.length;++o){var i=L(Number(arguments[o]));n<i?(r*=n/i*(n/i),r+=1,n=i):r+=i>0?i/n*(i/n):i}return n===1/0?1/0:n*q(r)},log2:function(t){return B(t)*Nr},log10:function(t){return B(t)*Dr},log1p:tt,sign:Q,sinh:function(t){var e=Number(t);if(!P(e)||0===e)return e;var r=L(e);if(r<1){var n=Math.expm1(r);return Q(e)*n*(1+1/(n+1))/2}var o=U(r-1);return Q(e)*(o-1/(o*Cr*Cr))*(Cr/2)},tanh:function(t){var e=Number(t);return Y(e)||0===e?e:e>=20?1:e<=-20?-1:(Math.expm1(e)-Math.expm1(-e))/(U(e)+U(-e))},trunc:function(t){var e=Number(t);return e<0?-k(-e):k(e)},imul:function(t,e){var r=yt.ToUint32(t),n=yt.ToUint32(e),o=65535&r,i=65535&n;return o*i+((r>>>16&65535)*i+o*(n>>>16&65535)<<16>>>0)|0},fround:function(t){var e=Number(t);if(0===e||e===1/0||e===-1/0||Y(e))return e;var r=Q(e),n=L(e);if(n<Mr)return r*Ar(n/Mr/_r)*Mr*_r;var o=(1+_r/Number.EPSILON)*n,i=o-(o-n);return i>Rr||Y(i)?r*(1/0):r*i}},Lr=function(t,e,r){return L(1-t/e)/Number.EPSILON<(r||8)};m(Math,kr),g(Math,"sinh",kr.sinh,Math.sinh(710)===1/0),g(Math,"cosh",kr.cosh,Math.cosh(710)===1/0),g(Math,"log1p",kr.log1p,-1e-17!==Math.log1p(-1e-17)),g(Math,"asinh",kr.asinh,Math.asinh(-1e7)!==-Math.asinh(1e7)),g(Math,"asinh",kr.asinh,Math.asinh(1e300)===1/0),g(Math,"atanh",kr.atanh,0===Math.atanh(1e-300)),g(Math,"tanh",kr.tanh,-2e-17!==Math.tanh(-2e-17)),g(Math,"acosh",kr.acosh,Math.acosh(Number.MAX_VALUE)===1/0),g(Math,"acosh",kr.acosh,!Lr(Math.acosh(1+Number.EPSILON),Math.sqrt(2*Number.EPSILON))),g(Math,"cbrt",kr.cbrt,!Lr(Math.cbrt(1e-300),1e-100)),g(Math,"sinh",kr.sinh,-2e-17!==Math.sinh(-2e-17));var Ur=Math.expm1(10);g(Math,"expm1",kr.expm1,Ur>22025.465794806718||Ur<22025.465794806718);var Br=Math.round,qr=0===Math.round(.5-Number.EPSILON/4)&&1===Math.round(Number.EPSILON/3.99-.5),Gr=Ir+1,Vr=2*Ir-1,zr=[Gr,Vr].every((function(t){return Math.round(t)===t}));g(Math,"round",(function(t){var e=k(t);return t-e<.5?e:-1===e?-0:e+1}),!qr||!zr),j.preserveToString(Math.round,Br);var Hr=Math.imul;-5!==Math.imul(4294967295,5)&&(Math.imul=kr.imul,j.preserveToString(Math.imul,Hr)),2!==Math.imul.length&&it(Math,"imul",(function(t,e){return yt.Call(Hr,Math,arguments)}));var Wr,$r,Kr=function(){var t=x.setTimeout;if("function"==typeof t||"object"==typeof t){yt.IsPromise=function(t){return!!yt.TypeIsObject(t)&&void 0!==t._promise};var e,n=function(t){if(!yt.IsConstructor(t))throw new TypeError("Bad promise constructor");var e=this;if(e.resolve=void 0,e.reject=void 0,e.promise=new t((function(t,r){if(void 0!==e.resolve||void 0!==e.reject)throw new TypeError("Bad Promise implementation!");e.resolve=t,e.reject=r})),!yt.IsCallable(e.resolve)||!yt.IsCallable(e.reject))throw new TypeError("Bad promise constructor")};"undefined"!=typeof window&&yt.IsCallable(window.postMessage)&&(e=function(){var t=[];return window.addEventListener("message",(function(e){if(e.source===window&&"zero-timeout-message"===e.data){if(e.stopPropagation(),0===t.length)return;N(t)()}}),!0),function(e){M(t,e),window.postMessage("zero-timeout-message","*")}});var i,a,u,c,s=yt.IsCallable(x.setImmediate)?x.setImmediate:"object"==typeof o&&o.nextTick?o.nextTick:(i=x.Promise,(a=i&&i.resolve&&i.resolve())&&function(t){return a.then(t)}||(yt.IsCallable(e)?e():function(e){t(e,0)})),f=function(t){return t},l=function(t){throw t},p={},y=function(t,e,r){s((function(){h(t,e,r)}))},h=function(t,e,r){var n,o;if(e===p)return t(r);try{n=t(r),o=e.resolve}catch(t){n=t,o=e.reject}o(n)},v=function(t,e){var r=t._promise,n=r.reactionLength;if(n>0&&(y(r.fulfillReactionHandler0,r.reactionCapability0,e),r.fulfillReactionHandler0=void 0,r.rejectReactions0=void 0,r.reactionCapability0=void 0,n>1))for(var o=1,i=0;o<n;o++,i+=3)y(r[i+0],r[i+2],e),t[i+0]=void 0,t[i+1]=void 0,t[i+2]=void 0;r.result=e,r.state=1,r.reactionLength=0},d=function(t,e){var r=t._promise,n=r.reactionLength;if(n>0&&(y(r.rejectReactionHandler0,r.reactionCapability0,e),r.fulfillReactionHandler0=void 0,r.rejectReactions0=void 0,r.reactionCapability0=void 0,n>1))for(var o=1,i=0;o<n;o++,i+=3)y(r[i+1],r[i+2],e),t[i+0]=void 0,t[i+1]=void 0,t[i+2]=void 0;r.result=e,r.state=2,r.reactionLength=0},b=function(t){var e=!1;return{resolve:function(r){var n;if(!e){if(e=!0,r===t)return d(t,new TypeError("Self resolution"));if(!yt.TypeIsObject(r))return v(t,r);try{n=r.then}catch(e){return d(t,e)}if(!yt.IsCallable(n))return v(t,r);s((function(){w(t,r,n)}))}},reject:function(r){if(!e)return e=!0,d(t,r)}}},g=function(t,e,n,o){t===c?r(t,e,n,o,p):r(t,e,n,o)},w=function(t,e,r){var n=b(t),o=n.resolve,i=n.reject;try{g(r,e,o,i)}catch(t){i(t)}},O=function(){var t=function(e){if(!(this instanceof t))throw new TypeError('Constructor Promise requires "new"');if(this&&this._promise)throw new TypeError("Bad construction");if(!yt.IsCallable(e))throw new TypeError("not a valid resolver");var r=Dt(this,t,u,{_promise:{result:void 0,state:0,reactionLength:0,fulfillReactionHandler0:void 0,rejectReactionHandler0:void 0,reactionCapability0:void 0}}),n=b(r),o=n.reject;try{e(n.resolve,o)}catch(t){o(t)}return r};return t}();u=O.prototype;var j=function(t,e,r,n){var o=!1;return function(i){o||(o=!0,e[t]=i,0==--n.count&&(0,r.resolve)(e))}};return m(O,{all:function(t){var e=this;if(!yt.TypeIsObject(e))throw new TypeError("Promise is not object");var r,o,i=new n(e);try{return function(t,e,r){for(var n,o,i=t.iterator,a=[],u={count:1},c=0;;){try{if(!1===(n=yt.IteratorStep(i))){t.done=!0;break}o=n.value}catch(e){throw t.done=!0,e}a[c]=void 0;var s=e.resolve(o),f=j(c,a,r,u);u.count+=1,g(s.then,s,f,r.reject),c+=1}return 0==--u.count&&(0,r.resolve)(a),r.promise}(o={iterator:r=yt.GetIterator(t),done:!1},e,i)}catch(t){var a=t;if(o&&!o.done)try{yt.IteratorClose(r,!0)}catch(t){a=t}return(0,i.reject)(a),i.promise}},race:function(t){var e=this;if(!yt.TypeIsObject(e))throw new TypeError("Promise is not object");var r,o,i=new n(e);try{return function(t,e,r){for(var n,o,i,a=t.iterator;;){try{if(!1===(n=yt.IteratorStep(a))){t.done=!0;break}o=n.value}catch(e){throw t.done=!0,e}i=e.resolve(o),g(i.then,i,r.resolve,r.reject)}return r.promise}(o={iterator:r=yt.GetIterator(t),done:!1},e,i)}catch(t){var a=t;if(o&&!o.done)try{yt.IteratorClose(r,!0)}catch(t){a=t}return(0,i.reject)(a),i.promise}},reject:function(t){if(!yt.TypeIsObject(this))throw new TypeError("Bad promise constructor");var e=new n(this);return(0,e.reject)(t),e.promise},resolve:function(t){var e=this;if(!yt.TypeIsObject(e))throw new TypeError("Bad promise constructor");if(yt.IsPromise(t)&&t.constructor===e)return t;var r=new n(e);return(0,r.resolve)(t),r.promise}}),m(u,{catch:function(t){return this.then(null,t)},then:function(t,e){var r=this;if(!yt.IsPromise(r))throw new TypeError("not a promise");var o,i=yt.SpeciesConstructor(r,O),a=arguments.length>2&&arguments[2]===p;o=a&&i===O?p:new n(i);var u,c=yt.IsCallable(t)?t:f,s=yt.IsCallable(e)?e:l,h=r._promise;if(0===h.state){if(0===h.reactionLength)h.fulfillReactionHandler0=c,h.rejectReactionHandler0=s,h.reactionCapability0=o;else{var v=3*(h.reactionLength-1);h[v+0]=c,h[v+1]=s,h[v+2]=o}h.reactionLength+=1}else if(1===h.state)u=h.result,y(c,o,u);else{if(2!==h.state)throw new TypeError("unexpected Promise state");u=h.result,y(s,o,u)}return o.promise}}),p=new n(O),c=u.then,O}}();if(x.Promise&&(delete x.Promise.accept,delete x.Promise.defer,delete x.Promise.prototype.chain),"function"==typeof Kr){m(x,{Promise:Kr});var Jr=T(x.Promise,(function(t){return t.resolve(42).then((function(){}))instanceof t})),Xr=!c((function(){return x.Promise.reject(42).then(null,5).then(null,V)})),Yr=c((function(){return x.Promise.call(3,V)})),Zr=function(t){var e=t.resolve(5);e.constructor={};var r=t.resolve(e);try{r.then(null,V).then(null,V)}catch(t){return!0}return e===r}(x.Promise),Qr=p&&(Wr=0,$r=Object.defineProperty({},"then",{get:function(){Wr+=1}}),Promise.resolve($r),1===Wr),tn=function t(e){var r=new Promise(e);e(3,(function(){})),this.then=r.then,this.constructor=t};tn.prototype=Promise.prototype,tn.all=Promise.all;var en=s((function(){return!!tn.all([1,2])}));if(Jr&&Xr&&Yr&&!Zr&&Qr&&!en||(Promise=Kr,it(x,"Promise",Kr)),1!==Promise.all.length){var rn=Promise.all;it(Promise,"all",(function(t){return yt.Call(rn,this,arguments)}))}if(1!==Promise.race.length){var nn=Promise.race;it(Promise,"race",(function(t){return yt.Call(nn,this,arguments)}))}if(1!==Promise.resolve.length){var on=Promise.resolve;it(Promise,"resolve",(function(t){return yt.Call(on,this,arguments)}))}if(1!==Promise.reject.length){var an=Promise.reject;it(Promise,"reject",(function(t){return yt.Call(an,this,arguments)}))}Fe(Promise,"all"),Fe(Promise,"race"),Fe(Promise,"resolve"),Fe(Promise,"reject"),Rt(Promise)}var un,cn,sn=function(t){var e=a(v(t,(function(t,e){return t[e]=!0,t}),{}));return t.join(":")===e.join(":")},fn=sn(["z","a","bb"]),ln=sn(["z",1,"a","3",2]);if(p){var pn=function(t,e){return e||fn?pt(t)?"^"+yt.ToString(t):"string"==typeof t?"$"+t:"number"==typeof t?ln?t:"n"+t:"boolean"==typeof t?"b"+t:null:null},yn=function(){return Object.create?Object.create(null):{}},hn=function(t,e,n){if(i(n)||ot.string(n))h(n,(function(t){if(!yt.TypeIsObject(t))throw new TypeError("Iterator value "+t+" is not an entry object");e.set(t[0],t[1])}));else if(n instanceof t)r(t.prototype.forEach,n,(function(t,r){e.set(r,t)}));else{var o,a;if(!pt(n)){if(a=e.set,!yt.IsCallable(a))throw new TypeError("bad map");o=yt.GetIterator(n)}if(void 0!==o)for(;;){var u=yt.IteratorStep(o);if(!1===u)break;var c=u.value;try{if(!yt.TypeIsObject(c))throw new TypeError("Iterator value "+c+" is not an entry object");r(a,e,c[0],c[1])}catch(t){throw yt.IteratorClose(o,!0),t}}}},vn=function(t,e,n){if(i(n)||ot.string(n))h(n,(function(t){e.add(t)}));else if(n instanceof t)r(t.prototype.forEach,n,(function(t){e.add(t)}));else{var o,a;if(!pt(n)){if(a=e.add,!yt.IsCallable(a))throw new TypeError("bad set");o=yt.GetIterator(n)}if(void 0!==o)for(;;){var u=yt.IteratorStep(o);if(!1===u)break;var c=u.value;try{r(a,e,c)}catch(t){throw yt.IteratorClose(o,!0),t}}}},dn={Map:function(){var t={},e=function(t,e){this.key=t,this.value=e,this.next=null,this.prev=null};e.prototype.isRemoved=function(){return this.key===t};var n,o=function(t,e){if(!yt.TypeIsObject(t)||!function(t){return!!t._es6map}(t))throw new TypeError("Method Map.prototype."+e+" called on incompatible receiver "+yt.ToString(t))},i=function(t,e){o(t,"[[MapIterator]]"),this.head=t._head,this.i=this.head,this.kind=e};Mt(i.prototype={isMapIterator:!0,next:function(){if(!this.isMapIterator)throw new TypeError("Not a MapIterator");var t,e=this.i,r=this.kind,n=this.head;if(void 0===this.i)return Qt();for(;e.isRemoved()&&e!==n;)e=e.prev;for(;e.next!==n;)if(!(e=e.next).isRemoved())return t="key"===r?e.key:"value"===r?e.value:[e.key,e.value],this.i=e,Qt(t);return this.i=void 0,Qt()}});var a=function t(){if(!(this instanceof t))throw new TypeError('Constructor Map requires "new"');if(this&&this._es6map)throw new TypeError("Bad construction");var r=Dt(this,t,n,{_es6map:!0,_head:null,_map:z?new z:null,_size:0,_storage:yn()}),o=new e(null,null);return o.next=o.prev=o,r._head=o,arguments.length>0&&hn(t,r,arguments[0]),r};return n=a.prototype,j.getter(n,"size",(function(){if(void 0===this._size)throw new TypeError("size method called on incompatible Map");return this._size})),m(n,{get:function(t){var e;o(this,"get");var r=pn(t,!0);if(null!==r)return(e=this._storage[r])?e.value:void 0;if(this._map)return(e=W.call(this._map,t))?e.value:void 0;for(var n=this._head,i=n;(i=i.next)!==n;)if(yt.SameValueZero(i.key,t))return i.value},has:function(t){o(this,"has");var e=pn(t,!0);if(null!==e)return void 0!==this._storage[e];if(this._map)return $.call(this._map,t);for(var r=this._head,n=r;(n=n.next)!==r;)if(yt.SameValueZero(n.key,t))return!0;return!1},set:function(t,r){o(this,"set");var n,i=this._head,a=i,u=pn(t,!0);if(null!==u){if(void 0!==this._storage[u])return this._storage[u].value=r,this;n=this._storage[u]=new e(t,r),a=i.prev}else this._map&&($.call(this._map,t)?W.call(this._map,t).value=r:(n=new e(t,r),K.call(this._map,t,n),a=i.prev));for(;(a=a.next)!==i;)if(yt.SameValueZero(a.key,t))return a.value=r,this;return n=n||new e(t,r),yt.SameValue(-0,t)&&(n.key=0),n.next=this._head,n.prev=this._head.prev,n.prev.next=n,n.next.prev=n,this._size+=1,this},delete:function(e){o(this,"delete");var r=this._head,n=r,i=pn(e,!0);if(null!==i){if(void 0===this._storage[i])return!1;n=this._storage[i].prev,delete this._storage[i]}else if(this._map){if(!$.call(this._map,e))return!1;n=W.call(this._map,e).prev,H.call(this._map,e)}for(;(n=n.next)!==r;)if(yt.SameValueZero(n.key,e))return n.key=t,n.value=t,n.prev.next=n.next,n.next.prev=n.prev,this._size-=1,!0;return!1},clear:function(){o(this,"clear"),this._map=z?new z:null,this._size=0,this._storage=yn();for(var e=this._head,r=e,n=r.next;(r=n)!==e;)r.key=t,r.value=t,n=r.next,r.next=r.prev=e;e.next=e.prev=e},keys:function(){return o(this,"keys"),new i(this,"key")},values:function(){return o(this,"values"),new i(this,"value")},entries:function(){return o(this,"entries"),new i(this,"key+value")},forEach:function(t){o(this,"forEach");for(var e=arguments.length>1?arguments[1]:null,n=this.entries(),i=n.next();!i.done;i=n.next())e?r(t,e,i.value[1],i.value[0],this):t(i.value[1],i.value[0],this)}}),Mt(n,n.entries),a}(),Set:function(){var t,e=function(t,e){if(!yt.TypeIsObject(t)||!function(t){return t._es6set&&void 0!==t._storage}(t))throw new TypeError("Set.prototype."+e+" called on incompatible receiver "+yt.ToString(t))},n=function e(){if(!(this instanceof e))throw new TypeError('Constructor Set requires "new"');if(this&&this._es6set)throw new TypeError("Bad construction");var r=Dt(this,e,t,{_es6set:!0,"[[SetData]]":null,_storage:yn()});if(!r._es6set)throw new TypeError("bad set");return arguments.length>0&&vn(e,r,arguments[0]),r};t=n.prototype;var o=function(t){if(!t["[[SetData]]"]){var e=new dn.Map;t["[[SetData]]"]=e,h(a(t._storage),(function(t){var r=function(t){var e=t;if("^null"===e)return null;if("^undefined"!==e){var r=e.charAt(0);return"$"===r?R(e,1):"n"===r?+R(e,1):"b"===r?"btrue"===e:+e}}(t);e.set(r,r)})),t["[[SetData]]"]=e}t._storage=null};j.getter(n.prototype,"size",(function(){return e(this,"size"),this._storage?a(this._storage).length:(o(this),this["[[SetData]]"].size)})),m(n.prototype,{has:function(t){var r;return e(this,"has"),this._storage&&null!==(r=pn(t))?!!this._storage[r]:(o(this),this["[[SetData]]"].has(t))},add:function(t){var r;return e(this,"add"),this._storage&&null!==(r=pn(t))?(this._storage[r]=!0,this):(o(this),this["[[SetData]]"].set(t,t),this)},delete:function(t){var r;if(e(this,"delete"),this._storage&&null!==(r=pn(t))){var n=G(this._storage,r);return delete this._storage[r]&&n}return o(this),this["[[SetData]]"].delete(t)},clear:function(){e(this,"clear"),this._storage&&(this._storage=yn()),this["[[SetData]]"]&&this["[[SetData]]"].clear()},values:function(){return e(this,"values"),o(this),new i(this["[[SetData]]"].values())},entries:function(){return e(this,"entries"),o(this),new i(this["[[SetData]]"].entries())},forEach:function(t){e(this,"forEach");var n=arguments.length>1?arguments[1]:null,i=this;o(i),this["[[SetData]]"].forEach((function(e,o){n?r(t,n,o,o,i):t(o,o,i)}))}}),g(n.prototype,"keys",n.prototype.values,!0),Mt(n.prototype,n.prototype.values);var i=function(t){this.it=t};return i.prototype={isSetIterator:!0,next:function(){if(!this.isSetIterator)throw new TypeError("Not a SetIterator");return this.it.next()}},Mt(i.prototype),n}()},bn=x.Set&&!Set.prototype.delete&&Set.prototype.remove&&Set.prototype.items&&Set.prototype.map&&Array.isArray((new Set).keys);if(bn&&(x.Set=dn.Set),x.Map||x.Set){var gn=s((function(){return 2===new Map([[1,2]]).get(1)}));gn||(x.Map=function t(){if(!(this instanceof t))throw new TypeError('Constructor Map requires "new"');var e=new z;return arguments.length>0&&hn(t,e,arguments[0]),delete e.constructor,Object.setPrototypeOf(e,x.Map.prototype),e},x.Map.prototype=S(z.prototype),g(x.Map.prototype,"constructor",x.Map,!0),j.preserveToString(x.Map,z));var mn=new Map,wn=((cn=new Map([[1,0],[2,0],[3,0],[4,0]])).set(-0,cn),cn.get(0)===cn&&cn.get(-0)===cn&&cn.has(0)&&cn.has(-0)),On=mn.set(1,2)===mn;wn&&On||it(Map.prototype,"set",(function(t,e){return r(K,this,0===t?0:t,e),this})),wn||(m(Map.prototype,{get:function(t){return r(W,this,0===t?0:t)},has:function(t){return r($,this,0===t?0:t)}},!0),j.preserveToString(Map.prototype.get,W),j.preserveToString(Map.prototype.has,$));var jn=new Set,Sn=Set.prototype.delete&&Set.prototype.add&&Set.prototype.has&&((un=jn).delete(0),un.add(-0),!un.has(0)),Tn=jn.add(1)===jn;if(!Sn||!Tn){var En=Set.prototype.add;Set.prototype.add=function(t){return r(En,this,0===t?0:t),this},j.preserveToString(Set.prototype.add,En)}if(!Sn){var xn=Set.prototype.has;Set.prototype.has=function(t){return r(xn,this,0===t?0:t)},j.preserveToString(Set.prototype.has,xn);var Pn=Set.prototype.delete;Set.prototype.delete=function(t){return r(Pn,this,0===t?0:t)},j.preserveToString(Set.prototype.delete,Pn)}var In=T(x.Map,(function(t){var e=new t([]);return e.set(42,42),e instanceof t})),An=Object.setPrototypeOf&&!In,_n=function(){try{return!(x.Map()instanceof x.Map)}catch(t){return t instanceof TypeError}}();0===x.Map.length&&!An&&_n||(x.Map=function t(){if(!(this instanceof t))throw new TypeError('Constructor Map requires "new"');var e=new z;return arguments.length>0&&hn(t,e,arguments[0]),delete e.constructor,Object.setPrototypeOf(e,t.prototype),e},x.Map.prototype=z.prototype,g(x.Map.prototype,"constructor",x.Map,!0),j.preserveToString(x.Map,z));var Rn=T(x.Set,(function(t){var e=new t([]);return e.add(42,42),e instanceof t})),Mn=Object.setPrototypeOf&&!Rn,Cn=function(){try{return!(x.Set()instanceof x.Set)}catch(t){return t instanceof TypeError}}();if(0!==x.Set.length||Mn||!Cn){var Nn=x.Set;x.Set=function t(){if(!(this instanceof t))throw new TypeError('Constructor Set requires "new"');var e=new Nn;return arguments.length>0&&vn(t,e,arguments[0]),delete e.constructor,Object.setPrototypeOf(e,t.prototype),e},x.Set.prototype=Nn.prototype,g(x.Set.prototype,"constructor",x.Set,!0),j.preserveToString(x.Set,Nn)}var Dn=new x.Map,Fn=!s((function(){return Dn.keys().next().done}));if(("function"!=typeof x.Map.prototype.clear||0!==(new x.Set).size||0!==Dn.size||"function"!=typeof x.Map.prototype.keys||"function"!=typeof x.Set.prototype.keys||"function"!=typeof x.Map.prototype.forEach||"function"!=typeof x.Set.prototype.forEach||f(x.Map)||f(x.Set)||"function"!=typeof Dn.keys().next||Fn||!In)&&m(x,{Map:dn.Map,Set:dn.Set},!0),x.Set.prototype.keys!==x.Set.prototype.values&&g(x.Set.prototype,"keys",x.Set.prototype.values,!0),Mt(Object.getPrototypeOf((new x.Map).keys())),Mt(Object.getPrototypeOf((new x.Set).keys())),y&&"has"!==x.Set.prototype.has.name){var kn=x.Set.prototype.has;it(x.Set.prototype,"has",(function(t){return r(kn,this,t)}))}}m(x,dn),Rt(x.Map),Rt(x.Set)}var Ln=function(t){if(!yt.TypeIsObject(t))throw new TypeError("target must be an object")},Un={apply:function(){return yt.Call(yt.Call,null,arguments)},construct:function(t,e){if(!yt.IsConstructor(t))throw new TypeError("First argument must be a constructor.");var r=arguments.length>2?arguments[2]:t;if(!yt.IsConstructor(r))throw new TypeError("new.target must be a constructor.");return yt.Construct(t,e,r,"internal")},deleteProperty:function(t,e){if(Ln(t),p){var r=Object.getOwnPropertyDescriptor(t,e);if(r&&!r.configurable)return!1}return delete t[e]},has:function(t,e){return Ln(t),e in t}};Object.getOwnPropertyNames&&Object.assign(Un,{ownKeys:function(t){Ln(t);var e=Object.getOwnPropertyNames(t);return yt.IsCallable(Object.getOwnPropertySymbols)&&C(e,Object.getOwnPropertySymbols(t)),e}});var Bn=function(t){return!c(t)};if(Object.preventExtensions&&Object.assign(Un,{isExtensible:function(t){return Ln(t),Object.isExtensible(t)},preventExtensions:function(t){return Ln(t),Bn((function(){return Object.preventExtensions(t)}))}}),p){var qn=function(t,e,r){var n=Object.getOwnPropertyDescriptor(t,e);if(!n){var o=Object.getPrototypeOf(t);if(null===o)return;return qn(o,e,r)}return"value"in n?n.value:n.get?yt.Call(n.get,r):void 0},Gn=function(t,e,n,o){var i=Object.getOwnPropertyDescriptor(t,e);if(!i){var a=Object.getPrototypeOf(t);if(null!==a)return Gn(a,e,n,o);i={value:void 0,writable:!0,enumerable:!0,configurable:!0}}return"value"in i?!!i.writable&&!!yt.TypeIsObject(o)&&(Object.getOwnPropertyDescriptor(o,e)?st.defineProperty(o,e,{value:n}):st.defineProperty(o,e,{value:n,writable:!0,enumerable:!0,configurable:!0})):!!i.set&&(r(i.set,o,n),!0)};Object.assign(Un,{defineProperty:function(t,e,r){return Ln(t),Bn((function(){return Object.defineProperty(t,e,r)}))},getOwnPropertyDescriptor:function(t,e){return Ln(t),Object.getOwnPropertyDescriptor(t,e)},get:function(t,e){Ln(t);var r=arguments.length>2?arguments[2]:t;return qn(t,e,r)},set:function(t,e,r){Ln(t);var n=arguments.length>3?arguments[3]:t;return Gn(t,e,r,n)}})}if(Object.getPrototypeOf){var Vn=Object.getPrototypeOf;Un.getPrototypeOf=function(t){return Ln(t),Vn(t)}}if(Object.setPrototypeOf&&Un.getPrototypeOf){var zn=function(t,e){for(var r=e;r;){if(t===r)return!0;r=Un.getPrototypeOf(r)}return!1};Object.assign(Un,{setPrototypeOf:function(t,e){if(Ln(t),null!==e&&!yt.TypeIsObject(e))throw new TypeError("proto must be an object or null");return e===st.getPrototypeOf(t)||!(st.isExtensible&&!st.isExtensible(t))&&!zn(t,e)&&(Object.setPrototypeOf(t,e),!0)}})}var Hn=function(t,e){yt.IsCallable(x.Reflect[t])?s((function(){return x.Reflect[t](1),x.Reflect[t](NaN),x.Reflect[t](!0),!0}))&&it(x.Reflect,t,e):g(x.Reflect,t,e)};Object.keys(Un).forEach((function(t){Hn(t,Un[t])}));var Wn=x.Reflect.getPrototypeOf;if(y&&Wn&&"getPrototypeOf"!==Wn.name&&it(x.Reflect,"getPrototypeOf",(function(t){return r(Wn,x.Reflect,t)})),x.Reflect.setPrototypeOf&&s((function(){return x.Reflect.setPrototypeOf(1,{}),!0}))&&it(x.Reflect,"setPrototypeOf",Un.setPrototypeOf),x.Reflect.defineProperty&&(s((function(){var t=!x.Reflect.defineProperty(1,"test",{value:1}),e="function"!=typeof Object.preventExtensions||!x.Reflect.defineProperty(Object.preventExtensions({}),"test",{});return t&&e}))||it(x.Reflect,"defineProperty",Un.defineProperty)),x.Reflect.construct&&(s((function(){var t=function(){};return x.Reflect.construct((function(){}),[],t)instanceof t}))||it(x.Reflect,"construct",Un.construct)),"Invalid Date"!==String(new Date(NaN))){var $n=Date.prototype.toString,Kn=function(){var t=+this;return t!=t?"Invalid Date":yt.Call($n,this)};it(Date.prototype,"toString",Kn)}var Jn={anchor:function(t){return yt.CreateHTML(this,"a","name",t)},big:function(){return yt.CreateHTML(this,"big","","")},blink:function(){return yt.CreateHTML(this,"blink","","")},bold:function(){return yt.CreateHTML(this,"b","","")},fixed:function(){return yt.CreateHTML(this,"tt","","")},fontcolor:function(t){return yt.CreateHTML(this,"font","color",t)},fontsize:function(t){return yt.CreateHTML(this,"font","size",t)},italics:function(){return yt.CreateHTML(this,"i","","")},link:function(t){return yt.CreateHTML(this,"a","href",t)},small:function(){return yt.CreateHTML(this,"small","","")},strike:function(){return yt.CreateHTML(this,"strike","","")},sub:function(){return yt.CreateHTML(this,"sub","","")},sup:function(){return yt.CreateHTML(this,"sup","","")}};h(Object.keys(Jn),(function(t){var e=String.prototype[t],n=!1;if(yt.IsCallable(e)){var o=r(e,"",' " '),i=_([],o.match(/"/g)).length;n=o!==o.toLowerCase()||i>2}else n=!0;n&&it(String.prototype,t,Jn[t])}));var Xn=function(){if(!at)return!1;var t="object"==typeof JSON&&"function"==typeof JSON.stringify?JSON.stringify:null;if(!t)return!1;if(void 0!==t(J()))return!0;if("[null]"!==t([J()]))return!0;var e={a:J()};return e[J()]=!0,"{}"!==t(e)}(),Yn=s((function(){return!at||"{}"===JSON.stringify(Object(J()))&&"[{}]"===JSON.stringify([Object(J())])}));if(Xn||!Yn){var Zn=JSON.stringify;it(JSON,"stringify",(function(t){if("symbol"!=typeof t){var e;arguments.length>1&&(e=arguments[1]);var n=[t];if(i(e))n.push(e);else{var o=yt.IsCallable(e)?e:null,a=function(t,e){var n=o?r(o,this,t,e):e;if("symbol"!=typeof n)return ot.symbol(n)?Le({})(n):n};n.push(a)}return arguments.length>2&&n.push(arguments[2]),Zn.apply(this,n)}}))}return x})?i.call(e,r,e,t):i)||(t.exports=a)}).call(this,r("yLpj"),r("8oxB"))},rCmP:function(t,e,r){"use strict";t.exports=function(t){return"string"==typeof t||"symbol"==typeof t}},rGdr:function(t,e,r){"use strict";var n=r("HgV8"),o=r("hemD"),i=r("Ii9V"),a=r("TU3P"),u=r("Khql"),c=Object.getOwnPropertyDescriptor,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,l=u("Array.prototype.concat"),p=u("Array.prototype.reduce"),y=f?function(t){return l(s(t),f(t))}:s,h=o(c)&&o(s);t.exports=function(t){if(i(t),!h)throw new TypeError("getOwnPropertyDescriptors requires Object.getOwnPropertyDescriptor");var e=a(t);return p(y(e),(function(t,r){var o=c(e,r);return void 0!==o&&n(t,r,o),t}),{})}},rQy3:function(t,e,r){"use strict";var n=r("oNNP"),o=r("Ii9V"),i=r("Khql")("Object.prototype.propertyIsEnumerable");t.exports=function(t){var e=o(t),r=[];for(var a in e)n(e,a)&&i(e,a)&&r.push(e[a]);return r}},rTV3:function(t,e){!function(t){"use strict";if(!t.origin){var e=t.protocol+"//"+t.hostname+(t.port&&":"+t.port);try{Object.defineProperty(t,"origin",{enumerable:!0,value:e})}catch(r){t.origin=e}}}(window.location)},"s+g2":function(t,e,r){"use strict";var n=r("P5mh");t.exports=function(){return"function"==typeof String.prototype.padStart?String.prototype.padStart:n}},"s+gD":function(t,e,r){"use strict";var n=r("ciGR"),o=r("R5T6"),i=r("Ii9V"),a=r("Khql")("String.prototype.slice");t.exports=function(t){var e,r=i(this),u=o(r),c=n(u.length);arguments.length>1&&(e=arguments[1]);var s=void 0===e?"":o(e);""===s&&(s=" ");var f=n(t);if(f<=c)return u;for(var l=f-c;s.length<l;){var p=s.length,y=l-p;s+=p>y?a(s,0,y):s}var h=s.length>l?a(s,0,l):s;return u+h}},sYn3:function(t,e,r){"use strict";var n;if(!Object.keys){var o=Object.prototype.hasOwnProperty,i=Object.prototype.toString,a=r("1KsK"),u=Object.prototype.propertyIsEnumerable,c=!u.call({toString:null},"toString"),s=u.call((function(){}),"prototype"),f=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],l=function(t){var e=t.constructor;return e&&e.prototype===t},p={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},y=function(){if("undefined"==typeof window)return!1;for(var t in window)try{if(!p["$"+t]&&o.call(window,t)&&null!==window[t]&&"object"==typeof window[t])try{l(window[t])}catch(t){return!0}}catch(t){return!0}return!1}();n=function(t){var e=null!==t&&"object"==typeof t,r="[object Function]"===i.call(t),n=a(t),u=e&&"[object String]"===i.call(t),p=[];if(!e&&!r&&!n)throw new TypeError("Object.keys called on a non-object");var h=s&&r;if(u&&t.length>0&&!o.call(t,0))for(var v=0;v<t.length;++v)p.push(String(v));if(n&&t.length>0)for(var d=0;d<t.length;++d)p.push(String(d));else for(var b in t)h&&"prototype"===b||!o.call(t,b)||p.push(String(b));if(c)for(var g=function(t){if("undefined"==typeof window||!y)return l(t);try{return l(t)}catch(t){return!1}}(t),m=0;m<f.length;++m)g&&"constructor"===f[m]||!o.call(t,f[m])||p.push(f[m]);return p}}t.exports=n},sqVN:function(t,e,r){"use strict";var n=r("6ayh"),o=n("%Math%"),i=n("%Number%");t.exports=i.MAX_SAFE_INTEGER||o.pow(2,53)-1},srjY:function(t,e,r){"use strict";(function(e){var n=r("45zb");if(r("UVaH")()||r("FpZJ")()){var o=Symbol.iterator;t.exports=function(t){return null!=t&&void 0!==t[o]?t[o]():n(t)?Array.prototype[o].call(t):void 0}}else{var i=r("lmVY"),a=r("VbLK"),u=r("6ayh"),c=u("%Map%",!0),s=u("%Set%",!0),f=r("Khql"),l=f("Array.prototype.push"),p=f("String.prototype.charCodeAt"),y=f("String.prototype.slice"),h=function(t){var e=0;return{next:function(){var r,n=e>=t.length;return n||(r=t[e],e+=1),{done:n,value:r}}}},v=function(t){if(i(t)||n(t))return h(t);if(a(t)){var e=0;return{next:function(){var r=function(t,e){if(e+1>=t.length)return e+1;var r=p(t,e);if(r<55296||r>56319)return e+1;var n=p(t,e+1);return n<56320||n>57343?e+1:e+2}(t,e),n=y(t,e,r);return e=r,{done:r>t.length,value:n}}}}};if(c||s){var d=r("/RMt"),b=r("vgOX"),g=f("Map.prototype.forEach",!0),m=f("Set.prototype.forEach",!0);if(void 0===e||!e.versions||!e.versions.node)var w=f("Map.prototype.iterator",!0),O=f("Set.prototype.iterator",!0),j=function(t){var e=!1;return{next:function(){try{return{done:e,value:e?void 0:t.next()}}catch(t){return e=!0,{done:!0,value:void 0}}}}};var S=f("Map.prototype.@@iterator",!0)||f("Map.prototype._es6-shim iterator_",!0),T=f("Set.prototype.@@iterator",!0)||f("Set.prototype._es6-shim iterator_",!0);t.exports=function(t){return function(t){if(d(t)){if(w)return j(w(t));if(S)return S(t);if(g){var e=[];return g(t,(function(t,r){l(e,[r,t])})),h(e)}}if(b(t)){if(O)return j(O(t));if(T)return T(t);if(m){var r=[];return m(t,(function(t){l(r,t)})),h(r)}}}(t)||v(t)}}else t.exports=v}}).call(this,r("8oxB"))},szxn:function(t,e){!function(){if(!Object.setPrototypeOf&&!{}.__proto__){var t=Object.getPrototypeOf;Object.getPrototypeOf=function(e){return e.__proto__?e.__proto__:t.call(Object,e)}}}()},tPqs:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("hLiU"),i=r("RIFg");t.exports=function(t,e){var r=o(t,"next",arguments.length<2?[]:[e]);if("Object"!==i(r))throw new n("iterator next must return an object");return r}},tihr:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("rCmP"),i=r("TU3P");t.exports=function(t,e){if(!o(e))throw new n("Assertion failed: IsPropertyKey(P) is not true");return i(t)[e]}},u1xu:function(t,e,r){"use strict";t.exports=function(t){return+t}},uKH6:function(t,e,r){"use strict";var n=r("wX2V");t.exports=function(){if(String.prototype.matchAll)try{"".matchAll(RegExp.prototype)}catch(t){return String.prototype.matchAll}return n}},ucYh:function(t,e){var r="undefined"!=typeof requestIdleCallback;t.exports=r?requestIdleCallback:function(t){return setTimeout((function(){var e=Date.now();t({didTimeout:!1,timeRemaining:function(){return Math.max(0,50-(Date.now()-e))}})}),1)},t.exports.cancelIdleCallback=r?cancelIdleCallback:clearTimeout},uuTH:function(t,e,r){"use strict";var n=r("Lcws"),o=r("UBBE"),i=r("cCsD"),a=r("NKaP"),u=r("IFfy"),c=r("xhJ2"),s=r("6ayh"),f=r("Khql"),l=r("VbLK"),p=f("String.prototype.charAt"),y=s("%Array.prototype.indexOf%");t.exports=function(t){var e=arguments.length>1?n(arguments[1]):0;if(y&&!u(t)&&c(e)&&void 0!==t)return y.apply(this,arguments)>-1;var r=i(this),s=o(r.length);if(0===s)return!1;for(var f=e>=0?e:Math.max(0,s+e);f<s;){if(a(t,l(r)?p(r,f):r[f]))return!0;f+=1}return!1}},v3P4:function(t,e,r){"use strict";var n=r("82c2"),o=r("22yB");t.exports=function(){var t=o();return n(Array.prototype,{flat:t},{flat:function(){return Array.prototype.flat!==t}}),t}},vgOX:function(t,e,r){"use strict";var n,o="function"==typeof Map&&Map.prototype?Map:null,i="function"==typeof Set&&Set.prototype?Set:null;i||(n=function(t){return!1});var a=o?Map.prototype.has:null,u=i?Set.prototype.has:null;n||u||(n=function(t){return!1}),t.exports=n||function(t){if(!t||"object"!=typeof t)return!1;try{if(u.call(t),a)try{a.call(t)}catch(t){return!0}return t instanceof i}catch(t){}return!1}},vndB:function(t,e,r){"use strict";t.exports=function(){if("function"!=typeof Promise)throw new TypeError("`Promise.prototype.finally` requires a global `Promise` be available.")}},vzKJ:function(t,e,r){"use strict";(function(e){var n=r("hBby");t.exports=function(){return"object"==typeof e&&e&&e.Math===Math&&e.Array===Array?e:n}}).call(this,r("yLpj"))},wX2V:function(t,e,r){"use strict";var n=r("aTj1"),o=r("2GRh"),i=r("XDGy"),a=r("PyeM"),u=r("R5T6"),c=r("Ii9V"),s=r("Khql"),f=r("UVaH")(),l=r("5xAX"),p=s("String.prototype.indexOf"),y=r("bBhT"),h=function(t){var e=y();if(f&&"symbol"==typeof Symbol.matchAll){var r=i(t,Symbol.matchAll);return r===RegExp.prototype[Symbol.matchAll]&&r!==e?e:r}if(a(t))return e};t.exports=function(t){var e=c(this);if(null!=t){if(a(t)){var r="flags"in t?o(t,"flags"):l(t);if(c(r),p(u(r),"g")<0)throw new TypeError("matchAll requires a global regular expression")}var i=h(t);if(void 0!==i)return n(i,t,[e])}var s=u(e),f=new RegExp(t,"g");return n(h(f),f,[s])}},wrft:function(t,e,r){"use strict";var n=r("0yco"),o=r("1Fze");t.exports=function(t){var e=o(t);return n(e)}},xEkU:function(t,e,r){(function(e){for(var n=r("bQgK"),o="undefined"==typeof window?e:window,i=["moz","webkit"],a="AnimationFrame",u=o["request"+a],c=o["cancel"+a]||o["cancelRequest"+a],s=0;!u&&s<i.length;s++)u=o[i[s]+"Request"+a],c=o[i[s]+"Cancel"+a]||o[i[s]+"CancelRequest"+a];if(!u||!c){var f=0,l=0,p=[];u=function(t){if(0===p.length){var e=n(),r=Math.max(0,1e3/60-(e-f));f=r+e,setTimeout((function(){var t=p.slice(0);p.length=0;for(var e=0;e<t.length;e++)if(!t[e].cancelled)try{t[e].callback(f)}catch(t){setTimeout((function(){throw t}),0)}}),Math.round(r))}return p.push({handle:++l,callback:t,cancelled:!1}),l},c=function(t){for(var e=0;e<p.length;e++)p[e].handle===t&&(p[e].cancelled=!0)}}t.exports=function(t){return u.call(o,t)},t.exports.cancel=function(){c.apply(o,arguments)},t.exports.polyfill=function(t){t||(t=o),t.requestAnimationFrame=u,t.cancelAnimationFrame=c}}).call(this,r("yLpj"))},xG2L:function(t,e,r){"use strict";var n=r("6ayh"),o=n("%TypeError%"),i=n("%SyntaxError%"),a=r("oNNP"),u={"Property Descriptor":function(t,e){if("Object"!==t(e))return!1;var r={"[[Configurable]]":!0,"[[Enumerable]]":!0,"[[Get]]":!0,"[[Set]]":!0,"[[Value]]":!0,"[[Writable]]":!0};for(var n in e)if(a(e,n)&&!r[n])return!1;var i=a(e,"[[Value]]"),u=a(e,"[[Get]]")||a(e,"[[Set]]");if(i&&u)throw new o("Property Descriptors may not be both accessor and data descriptors");return!0}};t.exports=function(t,e,r,n){var a=u[e];if("function"!=typeof a)throw new i("unknown record type: "+e);if(!a(t,n))throw new o(r+" must be a "+e)}},xby5:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("UsSR"),i=r("b0r7"),a=r("aTj1"),u=r("XDGy"),c=r("1Soo"),s=r("RIFg");t.exports=function(t,e){var r=e;arguments.length<2&&(r=o({AdvanceStringIndex:i,GetMethod:u,IsArray:c,Type:s},t));var f=a(r,t);if("Object"!==s(f))throw new n("iterator must return an object");return f}},xdJO:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("Khql")("RegExp.prototype.exec"),i=r("aTj1"),a=r("2GRh"),u=r("hemD"),c=r("RIFg");t.exports=function(t,e){if("Object"!==c(t))throw new n("Assertion failed: `R` must be an Object");if("String"!==c(e))throw new n("Assertion failed: `S` must be a String");var r=a(t,"exec");if(u(r)){var s=i(r,t,[e]);if(null===s||"Object"===c(s))return s;throw new n('"exec" method must return `null` or an Object')}return o(t,e)}},xhJ2:function(t,e,r){"use strict";var n=Number.isNaN||function(t){return t!=t};t.exports=Number.isFinite||function(t){return"number"==typeof t&&!n(t)&&t!==1/0&&t!==-1/0}},xmva:function(t,e,r){"use strict";r("v3P4")()},xoj2:function(t,e,r){"use strict";var n=r("rQy3");t.exports=function(){return"function"==typeof Object.values?Object.values:n}},y14U:function(t,e,r){var n,o;!function(i,a){"use strict";void 0===(o="function"==typeof(n=function(){var t,e,r=Array,n=r.prototype,o=Object,i=o.prototype,a=Function,u=a.prototype,c=String,s=c.prototype,f=Number,l=f.prototype,p=n.slice,y=n.splice,h=n.push,v=n.unshift,d=n.concat,b=n.join,g=u.call,m=u.apply,w=Math.max,O=Math.min,j=i.toString,S="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag,T=Function.prototype.toString,E=/^\s*class /,x=function(t){try{var e=T.call(t).replace(/\/\/.*\n/g,"").replace(/\/\*[.\s\S]*\*\//g,"").replace(/\n/gm," ").replace(/ {2}/g," ");return E.test(e)}catch(t){return!1}},P=function(t){try{return!x(t)&&(T.call(t),!0)}catch(t){return!1}},I="[object Function]",A="[object GeneratorFunction]",_=function(t){if(!t)return!1;if("function"!=typeof t&&"object"!=typeof t)return!1;if(S)return P(t);if(x(t))return!1;var e=j.call(t);return e===I||e===A},R=RegExp.prototype.exec,M=function(t){try{return R.call(t),!0}catch(t){return!1}},C="[object RegExp]";t=function(t){return"object"==typeof t&&(S?M(t):j.call(t)===C)};var N=String.prototype.valueOf,D=function(t){try{return N.call(t),!0}catch(t){return!1}},F="[object String]";e=function(t){return"string"==typeof t||"object"==typeof t&&(S?D(t):j.call(t)===F)};var k=o.defineProperty&&function(){try{var t={};for(var e in o.defineProperty(t,"x",{enumerable:!1,value:t}),t)return!1;return t.x===t}catch(t){return!1}}(),L=(V=i.hasOwnProperty,z=k?function(t,e,r,n){!n&&e in t||o.defineProperty(t,e,{configurable:!0,enumerable:!1,writable:!0,value:r})}:function(t,e,r,n){!n&&e in t||(t[e]=r)},function(t,e,r){for(var n in e)V.call(e,n)&&z(t,n,e[n],r)}),U=function(t){var e=typeof t;return null===t||"object"!==e&&"function"!==e},B=f.isNaN||function(t){return t!=t},q={ToInteger:function(t){var e=+t;return B(e)?e=0:0!==e&&e!==1/0&&e!==-1/0&&(e=(e>0||-1)*Math.floor(Math.abs(e))),e},ToPrimitive:function(t){var e,r,n;if(U(t))return t;if(r=t.valueOf,_(r)&&(e=r.call(t),U(e)))return e;if(n=t.toString,_(n)&&(e=n.call(t),U(e)))return e;throw new TypeError},ToObject:function(t){if(null==t)throw new TypeError("can't convert "+t+" to object");return o(t)},ToUint32:function(t){return t>>>0}},G=function(){};var V,z;L(u,{bind:function(t){var e=this;if(!_(e))throw new TypeError("Function.prototype.bind called on incompatible "+e);for(var r,n=p.call(arguments,1),i=function(){if(this instanceof r){var i=m.call(e,this,d.call(n,p.call(arguments)));return o(i)===i?i:this}return m.call(e,t,d.call(n,p.call(arguments)))},u=w(0,e.length-n.length),c=[],s=0;s<u;s++)h.call(c,"$"+s);return r=a("binder","return function ("+b.call(c,",")+"){ return binder.apply(this, arguments); }")(i),e.prototype&&(G.prototype=e.prototype,r.prototype=new G,G.prototype=null),r}});var H=g.bind(i.hasOwnProperty),W=g.bind(i.toString),$=g.bind(p),K=m.bind(p);if("object"==typeof document&&document&&document.documentElement)try{$(document.documentElement.childNodes)}catch(t){var J=$,X=K;$=function(t){for(var e=[],r=t.length;r-- >0;)e[r]=t[r];return X(e,J(arguments,1))},K=function(t,e){return X($(t),e)}}var Y=g.bind(s.slice),Z=g.bind(s.split),Q=g.bind(s.indexOf),tt=g.bind(h),et=g.bind(i.propertyIsEnumerable),rt=g.bind(n.sort),nt=r.isArray||function(t){return"[object Array]"===W(t)},ot=1!==[].unshift(0);L(n,{unshift:function(){return v.apply(this,arguments),this.length}},ot),L(r,{isArray:nt});var it=o("a"),at="a"!==it[0]||!(0 in it),ut=function(t){var e=!0,r=!0,n=!1;if(t)try{t.call("foo",(function(t,r,n){"object"!=typeof n&&(e=!1)})),t.call([1],(function(){r="string"==typeof this}),"x")}catch(t){n=!0}return!!t&&!n&&e&&r};L(n,{forEach:function(t){var r,n=q.ToObject(this),o=at&&e(this)?Z(this,""):n,i=-1,a=q.ToUint32(o.length);if(arguments.length>1&&(r=arguments[1]),!_(t))throw new TypeError("Array.prototype.forEach callback must be a function");for(;++i<a;)i in o&&(void 0===r?t(o[i],i,n):t.call(r,o[i],i,n))}},!ut(n.forEach)),L(n,{map:function(t){var n,o=q.ToObject(this),i=at&&e(this)?Z(this,""):o,a=q.ToUint32(i.length),u=r(a);if(arguments.length>1&&(n=arguments[1]),!_(t))throw new TypeError("Array.prototype.map callback must be a function");for(var c=0;c<a;c++)c in i&&(u[c]=void 0===n?t(i[c],c,o):t.call(n,i[c],c,o));return u}},!ut(n.map)),L(n,{filter:function(t){var r,n,o=q.ToObject(this),i=at&&e(this)?Z(this,""):o,a=q.ToUint32(i.length),u=[];if(arguments.length>1&&(n=arguments[1]),!_(t))throw new TypeError("Array.prototype.filter callback must be a function");for(var c=0;c<a;c++)c in i&&(r=i[c],(void 0===n?t(r,c,o):t.call(n,r,c,o))&&tt(u,r));return u}},!ut(n.filter)),L(n,{every:function(t){var r,n=q.ToObject(this),o=at&&e(this)?Z(this,""):n,i=q.ToUint32(o.length);if(arguments.length>1&&(r=arguments[1]),!_(t))throw new TypeError("Array.prototype.every callback must be a function");for(var a=0;a<i;a++)if(a in o&&!(void 0===r?t(o[a],a,n):t.call(r,o[a],a,n)))return!1;return!0}},!ut(n.every)),L(n,{some:function(t){var r,n=q.ToObject(this),o=at&&e(this)?Z(this,""):n,i=q.ToUint32(o.length);if(arguments.length>1&&(r=arguments[1]),!_(t))throw new TypeError("Array.prototype.some callback must be a function");for(var a=0;a<i;a++)if(a in o&&(void 0===r?t(o[a],a,n):t.call(r,o[a],a,n)))return!0;return!1}},!ut(n.some));var ct=!1;n.reduce&&(ct="object"==typeof n.reduce.call("es5",(function(t,e,r,n){return n})));L(n,{reduce:function(t){var r=q.ToObject(this),n=at&&e(this)?Z(this,""):r,o=q.ToUint32(n.length);if(!_(t))throw new TypeError("Array.prototype.reduce callback must be a function");if(0===o&&1===arguments.length)throw new TypeError("reduce of empty array with no initial value");var i,a=0;if(arguments.length>=2)i=arguments[1];else for(;;){if(a in n){i=n[a++];break}if(++a>=o)throw new TypeError("reduce of empty array with no initial value")}for(;a<o;a++)a in n&&(i=t(i,n[a],a,r));return i}},!ct);var st=!1;n.reduceRight&&(st="object"==typeof n.reduceRight.call("es5",(function(t,e,r,n){return n})));L(n,{reduceRight:function(t){var r,n=q.ToObject(this),o=at&&e(this)?Z(this,""):n,i=q.ToUint32(o.length);if(!_(t))throw new TypeError("Array.prototype.reduceRight callback must be a function");if(0===i&&1===arguments.length)throw new TypeError("reduceRight of empty array with no initial value");var a=i-1;if(arguments.length>=2)r=arguments[1];else for(;;){if(a in o){r=o[a--];break}if(--a<0)throw new TypeError("reduceRight of empty array with no initial value")}if(a<0)return r;do{a in o&&(r=t(r,o[a],a,n))}while(a--);return r}},!st);var ft=n.indexOf&&-1!==[0,1].indexOf(1,2);L(n,{indexOf:function(t){var r=at&&e(this)?Z(this,""):q.ToObject(this),n=q.ToUint32(r.length);if(0===n)return-1;var o=0;for(arguments.length>1&&(o=q.ToInteger(arguments[1])),o=o>=0?o:w(0,n+o);o<n;o++)if(o in r&&r[o]===t)return o;return-1}},ft);var lt=n.lastIndexOf&&-1!==[0,1].lastIndexOf(0,-3);L(n,{lastIndexOf:function(t){var r=at&&e(this)?Z(this,""):q.ToObject(this),n=q.ToUint32(r.length);if(0===n)return-1;var o=n-1;for(arguments.length>1&&(o=O(o,q.ToInteger(arguments[1]))),o=o>=0?o:n-Math.abs(o);o>=0;o--)if(o in r&&t===r[o])return o;return-1}},lt);var pt=(yt=[1,2],ht=yt.splice(),2===yt.length&&nt(ht)&&0===ht.length);var yt,ht;L(n,{splice:function(t,e){return 0===arguments.length?[]:y.apply(this,arguments)}},!pt);var vt=(dt={},n.splice.call(dt,0,0,1),1===dt.length);var dt;L(n,{splice:function(t,e){if(0===arguments.length)return[];var r=arguments;return this.length=w(q.ToInteger(this.length),0),arguments.length>0&&"number"!=typeof e&&((r=$(arguments)).length<2?tt(r,this.length-t):r[1]=q.ToInteger(e)),y.apply(this,r)}},!vt);var bt=(mt=new r(1e5),mt[8]="x",mt.splice(1,1),7===mt.indexOf("x")),gt=function(){var t=[];return t[256]="a",t.splice(257,0,"b"),"a"===t[256]}();var mt;L(n,{splice:function(t,e){for(var r,n=q.ToObject(this),o=[],i=q.ToUint32(n.length),a=q.ToInteger(t),u=a<0?w(i+a,0):O(a,i),s=0===arguments.length?0:1===arguments.length?i-u:O(w(q.ToInteger(e),0),i-u),f=0;f<s;)r=c(u+f),H(n,r)&&(o[f]=n[r]),f+=1;var l,p=$(arguments,2),y=p.length;if(y<s){f=u;for(var h=i-s;f<h;)r=c(f+s),l=c(f+y),H(n,r)?n[l]=n[r]:delete n[l],f+=1;f=i;for(var v=i-s+y;f>v;)delete n[f-1],f-=1}else if(y>s)for(f=i-s;f>u;)r=c(f+s-1),l=c(f+y-1),H(n,r)?n[l]=n[r]:delete n[l],f-=1;f=u;for(var d=0;d<p.length;++d)n[f]=p[d],f+=1;return n.length=i-s+y,o}},!bt||!gt);var wt,Ot=n.join;try{wt="1,2,3"!==Array.prototype.join.call("123",",")}catch(t){wt=!0}wt&&L(n,{join:function(t){var r=void 0===t?",":t;return Ot.call(e(this)?Z(this,""):this,r)}},wt);var jt="1,2"!==[1,2].join(void 0);jt&&L(n,{join:function(t){var e=void 0===t?",":t;return Ot.call(this,e)}},jt);var St=function(t){for(var e=q.ToObject(this),r=q.ToUint32(e.length),n=0;n<arguments.length;)e[r+n]=arguments[n],n+=1;return e.length=r+n,r+n},Tt=function(){var t={};return 1!==Array.prototype.push.call(t,void 0)||1!==t.length||void 0!==t[0]||!H(t,0)}();L(n,{push:function(t){return nt(this)?h.apply(this,arguments):St.apply(this,arguments)}},Tt);var Et=function(){var t=[];return 1!==t.push(void 0)||1!==t.length||void 0!==t[0]||!H(t,0)}();L(n,{push:St},Et),L(n,{slice:function(t,r){var n=e(this)?Z(this,""):this;return K(n,arguments)}},at);var xt=function(){try{[1,2].sort(null)}catch(t){try{[1,2].sort({})}catch(t){return!1}}return!0}(),Pt=function(){try{return[1,2].sort(/a/),!1}catch(t){}return!0}(),It=function(){try{return[1,2].sort(void 0),!0}catch(t){}return!1}();L(n,{sort:function(t){if(void 0===t)return rt(this);if(!_(t))throw new TypeError("Array.prototype.sort callback must be a function");return rt(this,t)}},xt||!It||!Pt);var At=!et({toString:null},"toString"),_t=et((function(){}),"prototype"),Rt=!H("x","0"),Mt=function(t){var e=t.constructor;return e&&e.prototype===t},Ct={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0,$width:!0,$height:!0,$top:!0,$localStorage:!0},Nt=function(){if("undefined"==typeof window)return!1;for(var t in window)try{!Ct["$"+t]&&H(window,t)&&null!==window[t]&&"object"==typeof window[t]&&Mt(window[t])}catch(t){return!0}return!1}(),Dt=function(t){if("undefined"==typeof window||!Nt)return Mt(t);try{return Mt(t)}catch(t){return!1}},Ft=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],kt=Ft.length,Lt=function(t){return"[object Arguments]"===W(t)},Ut=function(t){return null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&!nt(t)&&_(t.callee)},Bt=Lt(arguments)?Lt:Ut;L(o,{keys:function(t){var r=_(t),n=Bt(t),o=null!==t&&"object"==typeof t,i=o&&e(t);if(!o&&!r&&!n)throw new TypeError("Object.keys called on a non-object");var a=[],u=_t&&r;if(i&&Rt||n)for(var s=0;s<t.length;++s)tt(a,c(s));if(!n)for(var f in t)u&&"prototype"===f||!H(t,f)||tt(a,c(f));if(At)for(var l=Dt(t),p=0;p<kt;p++){var y=Ft[p];l&&"constructor"===y||!H(t,y)||tt(a,y)}return a}});var qt=o.keys&&function(){return 2===o.keys(arguments).length}(1,2),Gt=o.keys&&function(){var t=o.keys(arguments);return 1!==arguments.length||1!==t.length||1!==t[0]}(1),Vt=o.keys;L(o,{keys:function(t){return Bt(t)?Vt($(t)):Vt(t)}},!qt||Gt);var zt,Ht,Wt=0!==new Date(-0xc782b5b342b24).getUTCMonth(),$t=new Date(-0x55d318d56a724),Kt=new Date(14496624e5),Jt="Mon, 01 Jan -45875 11:59:59 GMT"!==$t.toUTCString(),Xt=$t.getTimezoneOffset();Xt<-720?(zt="Tue Jan 02 -45875"!==$t.toDateString(),Ht=!/^Thu Dec 10 2015 \d\d:\d\d:\d\d GMT[-+]\d\d\d\d(?: |$)/.test(String(Kt))):(zt="Mon Jan 01 -45875"!==$t.toDateString(),Ht=!/^Wed Dec 09 2015 \d\d:\d\d:\d\d GMT[-+]\d\d\d\d(?: |$)/.test(String(Kt)));var Yt=g.bind(Date.prototype.getFullYear),Zt=g.bind(Date.prototype.getMonth),Qt=g.bind(Date.prototype.getDate),te=g.bind(Date.prototype.getUTCFullYear),ee=g.bind(Date.prototype.getUTCMonth),re=g.bind(Date.prototype.getUTCDate),ne=g.bind(Date.prototype.getUTCDay),oe=g.bind(Date.prototype.getUTCHours),ie=g.bind(Date.prototype.getUTCMinutes),ae=g.bind(Date.prototype.getUTCSeconds),ue=g.bind(Date.prototype.getUTCMilliseconds),ce=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],se=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],fe=function(t,e){return Qt(new Date(e,t,0))};L(Date.prototype,{getFullYear:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=Yt(this);return t<0&&Zt(this)>11?t+1:t},getMonth:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=Yt(this),e=Zt(this);return t<0&&e>11?0:e},getDate:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=Yt(this),e=Zt(this),r=Qt(this);return t<0&&e>11?12===e?r:fe(0,t+1)-r+1:r},getUTCFullYear:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=te(this);return t<0&&ee(this)>11?t+1:t},getUTCMonth:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=te(this),e=ee(this);return t<0&&e>11?0:e},getUTCDate:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=te(this),e=ee(this),r=re(this);return t<0&&e>11?12===e?r:fe(0,t+1)-r+1:r}},Wt),L(Date.prototype,{toUTCString:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=ne(this),e=re(this),r=ee(this),n=te(this),o=oe(this),i=ie(this),a=ae(this);return ce[t]+", "+(e<10?"0"+e:e)+" "+se[r]+" "+n+" "+(o<10?"0"+o:o)+":"+(i<10?"0"+i:i)+":"+(a<10?"0"+a:a)+" GMT"}},Wt||Jt),L(Date.prototype,{toDateString:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=this.getDay(),e=this.getDate(),r=this.getMonth(),n=this.getFullYear();return ce[t]+" "+se[r]+" "+(e<10?"0"+e:e)+" "+n}},Wt||zt),(Wt||Ht)&&(Date.prototype.toString=function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=this.getDay(),e=this.getDate(),r=this.getMonth(),n=this.getFullYear(),o=this.getHours(),i=this.getMinutes(),a=this.getSeconds(),u=this.getTimezoneOffset(),c=Math.floor(Math.abs(u)/60),s=Math.floor(Math.abs(u)%60);return ce[t]+" "+se[r]+" "+(e<10?"0"+e:e)+" "+n+" "+(o<10?"0"+o:o)+":"+(i<10?"0"+i:i)+":"+(a<10?"0"+a:a)+" GMT"+(u>0?"-":"+")+(c<10?"0"+c:c)+(s<10?"0"+s:s)},k&&o.defineProperty(Date.prototype,"toString",{configurable:!0,enumerable:!1,writable:!0}));var le=-621987552e5,pe="-000001",ye=Date.prototype.toISOString&&-1===new Date(le).toISOString().indexOf(pe),he=Date.prototype.toISOString&&"1969-12-31T23:59:59.999Z"!==new Date(-1).toISOString(),ve=g.bind(Date.prototype.getTime);L(Date.prototype,{toISOString:function(){if(!isFinite(this)||!isFinite(ve(this)))throw new RangeError("Date.prototype.toISOString called on non-finite value.");var t=te(this),e=ee(this);t+=Math.floor(e/12);var r=[(e=(e%12+12)%12)+1,re(this),oe(this),ie(this),ae(this)];t=(t<0?"-":t>9999?"+":"")+Y("00000"+Math.abs(t),0<=t&&t<=9999?-4:-6);for(var n=0;n<r.length;++n)r[n]=Y("00"+r[n],-2);return t+"-"+$(r,0,2).join("-")+"T"+$(r,2).join(":")+"."+Y("000"+ue(this),-3)+"Z"}},ye||he);var de=function(){try{return Date.prototype.toJSON&&null===new Date(NaN).toJSON()&&-1!==new Date(le).toJSON().indexOf(pe)&&Date.prototype.toJSON.call({toISOString:function(){return!0}})}catch(t){return!1}}();de||(Date.prototype.toJSON=function(t){var e=o(this),r=q.ToPrimitive(e);if("number"==typeof r&&!isFinite(r))return null;var n=e.toISOString;if(!_(n))throw new TypeError("toISOString property is not callable");return n.call(e)});var be=1e15===Date.parse("+033658-09-27T01:46:40.000Z"),ge=!isNaN(Date.parse("2012-04-04T24:00:00.500Z"))||!isNaN(Date.parse("2012-11-31T23:59:59.000Z"))||!isNaN(Date.parse("2012-12-31T23:59:60.000Z")),me=isNaN(Date.parse("2000-01-01T00:00:00.000Z"));if(me||ge||!be){var we=Math.pow(2,31)-1,Oe=B(new Date(1970,0,1,0,0,0,we+1).getTime());Date=function(t){var e=function(r,n,o,i,a,u,s){var f,l=arguments.length;if(this instanceof t){var p=u,y=s;if(Oe&&l>=7&&s>we){var h=Math.floor(s/we)*we,v=Math.floor(h/1e3);p+=v,y-=1e3*v}f=1===l&&c(r)===r?new t(e.parse(r)):l>=7?new t(r,n,o,i,a,p,y):l>=6?new t(r,n,o,i,a,p):l>=5?new t(r,n,o,i,a):l>=4?new t(r,n,o,i):l>=3?new t(r,n,o):l>=2?new t(r,n):l>=1?new t(r instanceof t?+r:r):new t}else f=t.apply(this,arguments);return U(f)||L(f,{constructor:e},!0),f},r=new RegExp("^(\\d{4}|[+-]\\d{6})(?:-(\\d{2})(?:-(\\d{2})(?:T(\\d{2}):(\\d{2})(?::(\\d{2})(?:(\\.\\d{1,}))?)?(Z|(?:([-+])(\\d{2}):(\\d{2})))?)?)?)?$"),n=[0,31,59,90,120,151,181,212,243,273,304,334,365],o=function(t,e){var r=e>1?1:0;return n[e]+Math.floor((t-1969+r)/4)-Math.floor((t-1901+r)/100)+Math.floor((t-1601+r)/400)+365*(t-1970)},i=function(e){var r=0,n=e;if(Oe&&n>we){var o=Math.floor(n/we)*we,i=Math.floor(o/1e3);r+=i,n-=1e3*i}return f(new t(1970,0,1,0,0,r,n))};for(var a in t)H(t,a)&&(e[a]=t[a]);L(e,{now:t.now,UTC:t.UTC},!0),e.prototype=t.prototype,L(e.prototype,{constructor:e},!0);return L(e,{parse:function(e){var n=r.exec(e);if(n){var a,u=f(n[1]),c=f(n[2]||1)-1,s=f(n[3]||1)-1,l=f(n[4]||0),p=f(n[5]||0),y=f(n[6]||0),h=Math.floor(1e3*f(n[7]||0)),v=Boolean(n[4]&&!n[8]),d="-"===n[9]?1:-1,b=f(n[10]||0),g=f(n[11]||0),m=p>0||y>0||h>0;return l<(m?24:25)&&p<60&&y<60&&h<1e3&&c>-1&&c<12&&b<24&&g<60&&s>-1&&s<o(u,c+1)-o(u,c)&&(a=1e3*(60*((a=60*(24*(o(u,c)+s)+l+b*d))+p+g*d)+y)+h,v&&(a=i(a)),-864e13<=a&&a<=864e13)?a:NaN}return t.parse.apply(this,arguments)}}),e}(Date)}Date.now||(Date.now=function(){return(new Date).getTime()});var je=l.toFixed&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0)),Se={base:1e7,size:6,data:[0,0,0,0,0,0],multiply:function(t,e){for(var r=-1,n=e;++r<Se.size;)n+=t*Se.data[r],Se.data[r]=n%Se.base,n=Math.floor(n/Se.base)},divide:function(t){for(var e=Se.size,r=0;--e>=0;)r+=Se.data[e],Se.data[e]=Math.floor(r/t),r=r%t*Se.base},numToString:function(){for(var t=Se.size,e="";--t>=0;)if(""!==e||0===t||0!==Se.data[t]){var r=c(Se.data[t]);""===e?e=r:e+=Y("0000000",0,7-r.length)+r}return e},pow:function t(e,r,n){return 0===r?n:r%2==1?t(e,r-1,n*e):t(e*e,r/2,n)},log:function(t){for(var e=0,r=t;r>=4096;)e+=12,r/=4096;for(;r>=2;)e+=1,r/=2;return e}},Te=function(t){var e,r,n,o,i,a,u,s;if(e=f(t),(e=B(e)?0:Math.floor(e))<0||e>20)throw new RangeError("Number.toFixed called with invalid number of decimals");if(r=f(this),B(r))return"NaN";if(r<=-1e21||r>=1e21)return c(r);if(n="",r<0&&(n="-",r=-r),o="0",r>1e-21)if(a=(i=Se.log(r*Se.pow(2,69,1))-69)<0?r*Se.pow(2,-i,1):r/Se.pow(2,i,1),a*=4503599627370496,(i=52-i)>0){for(Se.multiply(0,a),u=e;u>=7;)Se.multiply(1e7,0),u-=7;for(Se.multiply(Se.pow(10,u,1),0),u=i-1;u>=23;)Se.divide(1<<23),u-=23;Se.divide(1<<u),Se.multiply(1,1),Se.divide(2),o=Se.numToString()}else Se.multiply(0,a),Se.multiply(1<<-i,0),o=Se.numToString()+Y("0.00000000000000000000",2,2+e);return o=e>0?(s=o.length)<=e?n+Y("0.0000000000000000000",0,e-s+2)+o:n+Y(o,0,s-e)+"."+Y(o,s-e):n+o};L(l,{toFixed:Te},je);var Ee=function(){try{return"1"===1..toPrecision(void 0)}catch(t){return!0}}(),xe=l.toPrecision;L(l,{toPrecision:function(t){return void 0===t?xe.call(this):xe.call(this,t)}},Ee),2!=="ab".split(/(?:ab)*/).length||4!==".".split(/(.?)(.?)/).length||"t"==="tesst".split(/(s)*/)[1]||4!=="test".split(/(?:)/,-1).length||"".split(/.?/).length||".".split(/()()/).length>1?(Pe=void 0===/()??/.exec("")[1],Ie=Math.pow(2,32)-1,s.split=function(e,r){var n=String(this);if(void 0===e&&0===r)return[];if(!t(e))return Z(this,e,r);var o,i,a,u,c=[],s=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),f=0,l=new RegExp(e.source,s+"g");Pe||(o=new RegExp("^"+l.source+"$(?!\\s)",s));var p=void 0===r?Ie:q.ToUint32(r);for(i=l.exec(n);i&&!((a=i.index+i[0].length)>f&&(tt(c,Y(n,f,i.index)),!Pe&&i.length>1&&i[0].replace(o,(function(){for(var t=1;t<arguments.length-2;t++)void 0===arguments[t]&&(i[t]=void 0)})),i.length>1&&i.index<n.length&&h.apply(c,$(i,1)),u=i[0].length,f=a,c.length>=p));)l.lastIndex===i.index&&l.lastIndex++,i=l.exec(n);return f===n.length?!u&&l.test("")||tt(c,""):tt(c,Y(n,f)),c.length>p?$(c,0,p):c}):"0".split(void 0,0).length&&(s.split=function(t,e){return void 0===t&&0===e?[]:Z(this,t,e)});var Pe,Ie;var Ae=s.replace,_e=(Re=[],"x".replace(/x(.)?/g,(function(t,e){tt(Re,e)})),1===Re.length&&void 0===Re[0]);var Re;_e||(s.replace=function(e,r){var n=_(r),o=t(e)&&/\)[*?]/.test(e.source);if(n&&o){return Ae.call(this,e,(function(t){var n=arguments.length,o=e.lastIndex;e.lastIndex=0;var i=e.exec(t)||[];return e.lastIndex=o,tt(i,arguments[n-2],arguments[n-1]),r.apply(this,i)}))}return Ae.call(this,e,r)});var Me=s.substr,Ce="".substr&&"b"!=="0b".substr(-1);L(s,{substr:function(t,e){var r=t;return t<0&&(r=w(this.length+t,0)),Me.call(this,r,e)}},Ce);var Ne="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff",De="​",Fe="["+Ne+"]",ke=new RegExp("^"+Fe+Fe+"*"),Le=new RegExp(Fe+Fe+"*$"),Ue=s.trim&&(Ne.trim()||!De.trim());L(s,{trim:function(){if(null==this)throw new TypeError("can't convert "+this+" to object");return c(this).replace(ke,"").replace(Le,"")}},Ue);var Be=g.bind(String.prototype.trim),qe=s.lastIndexOf&&-1!=="abcあい".lastIndexOf("あい",2);L(s,{lastIndexOf:function(t){if(null==this)throw new TypeError("can't convert "+this+" to object");for(var e=c(this),r=c(t),n=arguments.length>1?f(arguments[1]):NaN,o=B(n)?1/0:q.ToInteger(n),i=O(w(o,0),e.length),a=r.length,u=i+a;u>0;){u=w(0,u-a);var s=Q(Y(e,u,i+a),r);if(-1!==s)return u+s}return-1}},qe);var Ge=s.lastIndexOf;L(s,{lastIndexOf:function(t){return Ge.apply(this,arguments)}},1!==s.lastIndexOf.length),(8!==parseInt(Ne+"08")||22!==parseInt(Ne+"0x16"))&&(parseInt=(Ve=parseInt,ze=/^[-+]?0[xX]/,function(t,e){var r=Be(String(t)),n=f(e)||(ze.test(r)?16:10);return Ve(r,n)}));var Ve,ze;1/parseFloat("-0")!=-1/0&&(parseFloat=(He=parseFloat,function(t){var e=Be(String(t)),r=He(e);return 0===r&&"-"===Y(e,0,1)?-0:r}));var He;if("RangeError: test"!==String(new RangeError("test"))){var We=function(){if(null==this)throw new TypeError("can't convert "+this+" to object");var t=this.name;void 0===t?t="Error":"string"!=typeof t&&(t=c(t));var e=this.message;return void 0===e?e="":"string"!=typeof e&&(e=c(e)),t?e?t+": "+e:t:e};Error.prototype.toString=We}if(k){var $e=function(t,e){if(et(t,e)){var r=Object.getOwnPropertyDescriptor(t,e);r.configurable&&(r.enumerable=!1,Object.defineProperty(t,e,r))}};$e(Error.prototype,"message"),""!==Error.prototype.message&&(Error.prototype.message=""),$e(Error.prototype,"name")}if("/a/gim"!==String(/a/gim)){var Ke=function(){var t="/"+this.source+"/";return this.global&&(t+="g"),this.ignoreCase&&(t+="i"),this.multiline&&(t+="m"),t};RegExp.prototype.toString=Ke}})?n.call(e,r,e,t):n)||(t.exports=o)}()},yBRW:function(t,e,r){"use strict";var n=r("82c2"),o=r("UMYc");t.exports=function(){var t=o();return n(Array.prototype,{map:t},{map:function(){return Array.prototype.map!==t}}),t}},yCJC:function(t,e,r){"use strict";var n=r("82c2"),o=r("l1+S");t.exports=function(){var t=o();return n(Array.prototype,{flatMap:t},{flatMap:function(){return Array.prototype.flatMap!==t}}),t}},yLpj:function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},yN6O:function(t,e,r){"use strict";var n=r("qjSr"),o=r("mJ3t"),i=r("2GRh"),a=r("wrft"),u=r("ciGR"),c=r("TU3P");t.exports=function(){var t=c(this),e=u(i(t,"length")),r=1;arguments.length>0&&void 0!==arguments[0]&&(r=a(arguments[0]));var s=n(t,0);return o(s,t,e,0,r),s}},yNSe:function(t,e,r){"use strict";r("yCJC")()},zODz:function(t,e,r){"use strict";t.exports=function(t){return"function"==typeof t&&!!t.prototype}},zWG1:function(t,e,r){"use strict";var n=r("WZeS");t.exports=function(t){return arguments.length>1?n(t,arguments[1]):n(t)}},zkC3:function(t,e,r){"use strict";var n=r("WZeS");t.exports=function(t){return arguments.length>1?n(t,arguments[1]):n(t)}},zpJY:function(t,e,r){"use strict";var n=r("UVaH")(),o=r("KUT7"),i=Object.getOwnPropertyDescriptor;t.exports=function(){if(!n||"function"!=typeof i)return null;var t=i(Symbol.prototype,"description");if(!t||"function"!=typeof t.get)return o;var e=t.get.call(Symbol());return(void 0===e||""===e)&&"a"===t.get.call(Symbol("a"))?t.get:o}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJyYXkucHJvdG90eXBlLm1hcC9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvbWlzZS5hbGxzZXR0bGVkL3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmluZy5wcm90b3R5cGUucGFkZW5kL3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC5lbnRyaWVzL3BvbHlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmcucHJvdG90eXBlLm1hdGNoYWxsL3JlZ2V4cC1tYXRjaGFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtbWFwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1zeW1ib2wvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC5mcm9tZW50cmllcy9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9haXJibmItanMtc2hpbXMvdGFyZ2V0L2VzMjAxNy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWlyYm5iLWJyb3dzZXItc2hpbXMvYnJvd3Nlci1vbmx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC81L1RvSW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Ub051bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWtleXMvaXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvSXNBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9TZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvSXNJbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3Qta2V5cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0Y2htZWRpYS1wb2x5ZmlsbC9tYXRjaE1lZGlhLmFkZExpc3RlbmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcnJheS5wcm90b3R5cGUuZmxhdC9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9HZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLXJlZ2V4L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9haXJibmItanMtc2hpbXMvdGFyZ2V0L2VzNS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Ub1Byb3BlcnR5S2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1hcmd1bWVudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FpcmJuYi1qcy1zaGltcy90YXJnZXQvZXMyMDE5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb25zb2xlLXBvbHlmaWxsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdleHAucHJvdG90eXBlLmZsYWdzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb2N1bWVudC5jb250YWlucy9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9BZGRFbnRyaWVzRnJvbUl0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9HZXRJbnRyaW5zaWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC5mcm9tZW50cmllcy9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9TcGVjaWVzQ29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvRnJvbVByb3BlcnR5RGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2xhc3NsaXN0LXBvbHlmaWxsL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXRlcmF0ZS12YWx1ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0Y2htZWRpYS1wb2x5ZmlsbC9tYXRjaE1lZGlhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9taXNlLmFsbHNldHRsZWQvcmVxdWlyZVByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlZmluZS1wcm9wZXJ0aWVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvUHJvbWlzZVJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvU2FtZVZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9haXJibmItYnJvd3Nlci1zaGltcy9kb2N1bWVudC1jb250YWlucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24tYmluZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9yZWdleFRlc3Rlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtZGF0ZS1vYmplY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JhZi9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9pc1ByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJyYXktaW5jbHVkZXMvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb21pc2UuYWxsc2V0dGxlZC9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LmZyb21lbnRyaWVzL2F1dG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhcy1zeW1ib2xzL3NoYW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L1RvUHJvcGVydHlEZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9haXJibmItanMtc2hpbXMvdGFyZ2V0L2VzMjAxOC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9jdW1lbnQuY29udGFpbnMvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnMvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2V4cC5wcm90b3R5cGUuZmxhZ3Mvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJyYXkucHJvdG90eXBlLmZsYXRtYXAvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QuZW50cmllcy9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0NyZWF0ZURhdGFQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyaW5nLnByb3RvdHlwZS5tYXRjaGFsbC9hdXRvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QuZnJvbWVudHJpZXMvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvaXNOYU4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWNhbGxhYmxlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L1JlcXVpcmVPYmplY3RDb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Z1bmN0aW9ucy1oYXZlLW5hbWVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0l0ZXJhdG9yQ2xvc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1pbnNwZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE4L1JlcXVpcmVPYmplY3RDb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb24vaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvY2FsbEJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL0RlZmluZU93blByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb2N1bWVudC5jb250YWlucy9hdXRvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE4L0lzQ29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTgvVG9JbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE4L1NhbWVWYWx1ZVplcm8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Z1bmN0aW9uLnByb3RvdHlwZS5uYW1lL3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb21pc2UucHJvdG90eXBlLmZpbmFsbHkvYXV0by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Jc0V4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FpcmJuYi1icm93c2VyLXNoaW1zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmcucHJvdG90eXBlLnBhZHN0YXJ0L2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE4L1R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FpcmJuYi1qcy1zaGltcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Jc1JlZ0V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Ub1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9UeXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0hhc1Byb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL2NhbGxCaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L09iamVjdENyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9nZXRTeW1ib2xEZXNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Ub09iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvNS9DaGVja09iamVjdENvZXJjaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtdG8tcHJpbWl0aXZlL2hlbHBlcnMvaXNQcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb24vc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9DcmVhdGVEYXRhUHJvcGVydHlPclRocm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE4L1RvTGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcnJheS5wcm90b3R5cGUubWFwL3BvbHlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMtc3ltYm9scy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvNS9UeXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0NyZWF0ZUl0ZXJSZXN1bHRPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb21pc2UucHJvdG90eXBlLmZpbmFsbHkvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9nZXRJdGVyYXRvck1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZXhwLnByb3RvdHlwZS5mbGFncy9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWlyYm5iLWpzLXNoaW1zL3RhcmdldC9lczIwMTUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NpZGUtY2hhbm5lbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtc3RyaW5nL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdleHAucHJvdG90eXBlLmZsYWdzL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLXRvLXByaW1pdGl2ZS9lczIwMTUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludGVyc2VjdGlvbi1vYnNlcnZlci9pbnRlcnNlY3Rpb24tb2JzZXJ2ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvR2V0TWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmcucHJvdG90eXBlLnBhZGVuZC9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Ub0Jvb2xlYW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvVG9VaW50MzIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludGVybmFsLXNsb3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmluZy5wcm90b3R5cGUubWF0Y2hhbGwvaGVscGVycy9SZWdFeHBTdHJpbmdJdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXRlcmF0ZS1pdGVyYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24tYmluZC9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LmVudHJpZXMvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb21pc2UuYWxsc2V0dGxlZC9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9DYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9taXNlLmFsbHNldHRsZWQvYXV0by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2xvYmFsdGhpcy9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9haXJibmItanMtc2hpbXMvdGFyZ2V0L2VzMjAyMC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9BZHZhbmNlU3RyaW5nSW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmluZy5wcm90b3R5cGUubWF0Y2hhbGwvcG9seWZpbGwtcmVnZXhwLW1hdGNoYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wZXJmb3JtYW5jZS1ub3cvbGliL3BlcmZvcm1hbmNlLW5vdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2hhdHdnLWZldGNoL2ZldGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmcucHJvdG90eXBlLnBhZHN0YXJ0L3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTgvVG9PYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvVG9MZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzL3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Ntb290aHNjcm9sbC1wb2x5ZmlsbC9kaXN0L3Ntb290aHNjcm9sbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWlyYm5iLWpzLXNoaW1zL3RhcmdldC9lczIwMTYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lucHV0LXBsYWNlaG9sZGVyLXBvbHlmaWxsL2Rpc3QvbWFpbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb21pc2UucHJvdG90eXBlLmZpbmFsbHkvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTgvSXNDYWxsYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXM1LXNoaW0vZXM1LXNoYW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvT3JkaW5hcnlHZXRPd25Qcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24ucHJvdG90eXBlLm5hbWUvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTgvU3BlY2llc0NvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE4L1RvTnVtYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL2dldEluZmVycmVkTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2xvYmFsdGhpcy9pbXBsZW1lbnRhdGlvbi5icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbGVtZW50LWNsb3Nlc3QvZWxlbWVudC1jbG9zZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0ludm9rZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Jc0RhdGFEZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0lzQ2FsbGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FycmF5LWluY2x1ZGVzL3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb21pc2UucHJvdG90eXBlLmZpbmFsbHkvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC52YWx1ZXMvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2xvYmFsdGhpcy9hdXRvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hcnJheS1tZXRob2QtYm94ZXMtcHJvcGVybHkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FycmF5LnByb3RvdHlwZS5mbGF0bWFwL3BvbHlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mdW5jdGlvbi5wcm90b3R5cGUubmFtZS9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZm9jdXMtdmlzaWJsZS9kaXN0L2ZvY3VzLXZpc2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWdldC1pdGVyYXRvci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hpbS1rZXlib2FyZC1ldmVudC1rZXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvSXRlcmF0b3JTdGVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0ZsYXR0ZW5JbnRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmluZy5wcm90b3R5cGUubWF0Y2hhbGwvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9jdW1lbnQuY29udGFpbnMvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb24vYXV0by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9JdGVyYXRvckNvbXBsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMvc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcnJheS5wcm90b3R5cGUubWFwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0l0ZXJhdG9yVmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvQXJyYXlTcGVjaWVzQ3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lczYtc2hpbS9lczYtc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Jc1Byb3BlcnR5S2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9ycy9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LnZhbHVlcy9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2luZG93LWxvY2F0aW9uLW9yaWdpbi9zcmMvd2luZG93LWxvY2F0aW9uLW9yaWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyaW5nLnByb3RvdHlwZS5wYWRzdGFydC9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyaW5nLnByb3RvdHlwZS5wYWRlbmQvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1rZXlzL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL21heFNhZmVJbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1nZXQtaXRlcmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ltYS1iYWJlbDYtcG9seWZpbGwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvSXRlcmF0b3JOZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0dldFYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzUvVG9OdW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmluZy5wcm90b3R5cGUubWF0Y2hhbGwvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JpYy1zaGltL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcnJheS1pbmNsdWRlcy9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJyYXkucHJvdG90eXBlLmZsYXQvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtc2V0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9taXNlLnByb3RvdHlwZS5maW5hbGx5L3JlcXVpcmVQcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nbG9iYWx0aGlzL3BvbHlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmcucHJvdG90eXBlLm1hdGNoYWxsL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L1RvSW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmFmL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL2Fzc2VydFJlY29yZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9HZXRJdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9SZWdFeHBFeGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL2lzRmluaXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcnJheS5wcm90b3R5cGUuZmxhdC9hdXRvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QudmFsdWVzL3BvbHlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lczUtc2hpbS9lczUtc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJyYXkucHJvdG90eXBlLm1hcC9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcnJheS5wcm90b3R5cGUuZmxhdG1hcC9zaGltLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FycmF5LnByb3RvdHlwZS5mbGF0L2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcnJheS5wcm90b3R5cGUuZmxhdG1hcC9hdXRvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0lzQ29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTgvVG9QcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvVG9QcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb24vcG9seWZpbGwuanMiXSwibmFtZXMiOlsiQXJyYXlTcGVjaWVzQ3JlYXRlIiwiQ2FsbCIsIkNyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3ciLCJHZXQiLCJIYXNQcm9wZXJ0eSIsIklzQ2FsbGFibGUiLCJUb1VpbnQzMiIsIlRvT2JqZWN0IiwiVG9TdHJpbmciLCJjYWxsQm91bmQiLCJpc1N0cmluZyIsImJveGVkU3RyaW5nIiwiT2JqZWN0Iiwic3BsaXRTdHJpbmciLCJzdHJTcGxpdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJjYWxsYmFja2ZuIiwiVCIsIk8iLCJ0aGlzIiwic2VsZiIsImxlbiIsImxlbmd0aCIsIlR5cGVFcnJvciIsImFyZ3VtZW50cyIsIkEiLCJrIiwiUGsiLCJrUHJlc2VudCIsImtWYWx1ZSIsIm1hcHBlZFZhbHVlIiwicmVxdWlyZVByb21pc2UiLCJnZXRQb2x5ZmlsbCIsImRlZmluZSIsInBvbHlmaWxsIiwiUHJvbWlzZSIsImFsbFNldHRsZWQiLCJTdHJpbmciLCJwcm90b3R5cGUiLCJwYWRFbmQiLCJpbXBsZW1lbnRhdGlvbiIsImVudHJpZXMiLCJTZXQiLCJTcGVjaWVzQ29uc3RydWN0b3IiLCJUb0xlbmd0aCIsIlR5cGUiLCJmbGFnc0dldHRlciIsIlJlZ0V4cFN0cmluZ0l0ZXJhdG9yIiwiT3JpZ1JlZ0V4cCIsIlJlZ0V4cCIsInN1cHBvcnRzQ29uc3RydWN0aW5nV2l0aEZsYWdzIiwicmVnZXhNYXRjaEFsbCIsInN0cmluZyIsIlIiLCJTIiwidG1wIiwiQyIsImZsYWdzIiwibWF0Y2hlciIsInNvdXJjZSIsImNvbnN0cnVjdFJlZ2V4V2l0aEZsYWdzIiwibGFzdEluZGV4IiwiZ2xvYmFsIiwiZnVsbFVuaWNvZGUiLCJDcmVhdGVSZWdFeHBTdHJpbmdJdGVyYXRvciIsImluZGV4T2YiLCJkZWZpbmVQIiwiZGVmaW5lUHJvcGVydHkiLCJnT1BEIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZGVzYyIsImNvbmZpZ3VyYWJsZSIsInZhbHVlIiwiZXhwb3J0ZWQiLCIkTWFwIiwiTWFwIiwiJFNldCIsIngiLCIkbWFwSGFzIiwiaGFzIiwiJHNldEhhcyIsImNhbGwiLCJlIiwidG9TdHIiLCJ0b1N0cmluZyIsInN5bVRvU3RyIiwiU3ltYm9sIiwic3ltU3RyaW5nUmVnZXgiLCJ2YWx1ZU9mIiwidGVzdCIsImlzU3ltYm9sT2JqZWN0IiwiZnJvbUVudHJpZXMiLCJ3aW5kb3ciLCJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwiY2FuY2VsSWRsZUNhbGxiYWNrIiwiaXRlcmF0b3IiLCJUb3VjaExpc3QiLCJBcnJheSIsIiRNYXRoIiwiR2V0SW50cmluc2ljIiwiVG9OdW1iZXIiLCIkaXNOYU4iLCIkaXNGaW5pdGUiLCIkc2lnbiIsIiRmbG9vciIsImZsb29yIiwiJGFicyIsImFicyIsIm51bWJlciIsIiRUeXBlRXJyb3IiLCIkTnVtYmVyIiwiJFJlZ0V4cCIsIiRwYXJzZUludGVnZXIiLCJyZWdleFRlc3RlciIsImlzUHJpbWl0aXZlIiwiJHN0clNsaWNlIiwiaXNCaW5hcnkiLCJpc09jdGFsIiwiaXNJbnZhbGlkSGV4TGl0ZXJhbCIsImhhc05vbldTIiwiam9pbiIsIndzIiwidHJpbVJlZ2V4IiwiJHJlcGxhY2UiLCJUb1ByaW1pdGl2ZSIsImFyZ3VtZW50IiwiTmFOIiwidHJpbW1lZCIsIiR0cmltIiwic3RyIiwiaXNBcmdzIiwiY2FsbGVlIiwiJEFycmF5IiwiaXNBcnJheSIsIklzUHJvcGVydHlLZXkiLCJQIiwiViIsIlRocm93Iiwic2xpY2UiLCJvcmlnS2V5cyIsImtleXMiLCJrZXlzU2hpbSIsIm8iLCJvcmlnaW5hbEtleXMiLCJzaGltIiwiYXJncyIsIm9iamVjdCIsIm1hdGNoTWVkaWEiLCJhZGRMaXN0ZW5lciIsImxvY2FsTWF0Y2hNZWRpYSIsImhhc01lZGlhUXVlcmllcyIsIm1hdGNoZXMiLCJpc0xpc3RlbmluZyIsInRpbWVvdXRJRCIsInF1ZXJpZXMiLCJoYW5kbGVDaGFuZ2UiLCJldnQiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiaSIsImlsIiwibXFsIiwibGlzdGVuZXJzIiwibWVkaWEiLCJqIiwiamwiLCJpbmRleCIsImxpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInB1c2giLCJyZW1vdmVMaXN0ZW5lciIsInNwbGljZSIsImZsYXQiLCJpbnNwZWN0IiwicmVnZXhFeGVjIiwiZXhlYyIsImhhc1RvU3RyaW5nVGFnIiwidG9TdHJpbmdUYWciLCJkZXNjcmlwdG9yIiwidHJ5UmVnZXhFeGVjQ2FsbCIsIiRTdHJpbmciLCJrZXkiLCJpc1N0YW5kYXJkQXJndW1lbnRzIiwiaXNMZWdhY3lBcmd1bWVudHMiLCJzdXBwb3J0c1N0YW5kYXJkQXJndW1lbnRzIiwiY29uc29sZSIsInByb3AiLCJtZXRob2QiLCJjb24iLCJkdW1teSIsInByb3BlcnRpZXMiLCJtZXRob2RzIiwic3BsaXQiLCJwb3AiLCJjYWxsQmluZCIsImZsYWdzQm91bmQiLCJkb2N1bWVudCIsImNvbnRhaW5zIiwiYm9keSIsIkdldEl0ZXJhdG9yIiwiSXRlcmF0b3JDbG9zZSIsIkl0ZXJhdG9yU3RlcCIsIkl0ZXJhdG9yVmFsdWUiLCJ0YXJnZXQiLCJpdGVyYWJsZSIsImFkZGVyIiwiaXRlcmF0b3JSZWNvcmQiLCJuZXh0IiwibmV4dEl0ZW0iLCJlcnJvciIsInYiLCIkZ09QRCIsInRocm93VHlwZUVycm9yIiwiVGhyb3dUeXBlRXJyb3IiLCJjYWxsZWVUaHJvd3MiLCJnZXQiLCJnT1BEdGhyb3dzIiwiaGFzU3ltYm9scyIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhc3luY0dlbkl0ZXJhdG9yIiwidW5kZWZpbmVkIiwiVHlwZWRBcnJheSIsIlVpbnQ4QXJyYXkiLCJJTlRSSU5TSUNTIiwiQXJyYXlCdWZmZXIiLCJmb3JFYWNoIiwidmFsdWVzIiwiYXN5bmNJdGVyYXRvciIsIkF0b21pY3MiLCJCb29sZWFuIiwiRGF0YVZpZXciLCJEYXRlIiwiZGVjb2RlVVJJIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlVVJJIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiRXJyb3IiLCJldmFsIiwiRXZhbEVycm9yIiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwiRnVuY3Rpb24iLCJJbnQ4QXJyYXkiLCJJbnQxNkFycmF5IiwiSW50MzJBcnJheSIsImlzRmluaXRlIiwiaXNOYU4iLCJKU09OIiwicGFyc2UiLCJNYXRoIiwiTnVtYmVyIiwicGFyc2VGbG9hdCIsInBhcnNlSW50IiwidGhlbiIsImFsbCIsInJlamVjdCIsInJlc29sdmUiLCJQcm94eSIsIlJhbmdlRXJyb3IiLCJSZWZlcmVuY2VFcnJvciIsIlJlZmxlY3QiLCJTaGFyZWRBcnJheUJ1ZmZlciIsIlN5bnRheEVycm9yIiwiVWludDhDbGFtcGVkQXJyYXkiLCJVaW50MTZBcnJheSIsIlVpbnQzMkFycmF5IiwiVVJJRXJyb3IiLCJXZWFrTWFwIiwiV2Vha1NldCIsInJlcGxhY2UiLCJyZVByb3BOYW1lIiwicmVFc2NhcGVDaGFyIiwic3RyaW5nVG9QYXRoIiwicmVzdWx0IiwibWF0Y2giLCJxdW90ZSIsInN1YlN0cmluZyIsImdldEJhc2VJbnRyaW5zaWMiLCJuYW1lIiwiYWxsb3dNaXNzaW5nIiwicGFydHMiLCJBZGRFbnRyaWVzRnJvbUl0ZXJhYmxlIiwiSXNBcnJheSIsIlJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJUb1Byb3BlcnR5S2V5IiwicHJvcGVydHlLZXkiLCJvYmoiLCJlbnRyeSIsImxlZ2FjeUFzc2lnbiIsIiRzcGVjaWVzIiwiSXNDb25zdHJ1Y3RvciIsImRlZmF1bHRDb25zdHJ1Y3RvciIsImNvbnN0cnVjdG9yIiwiYXNzZXJ0UmVjb3JkIiwiRGVzYyIsIndyaXRhYmxlIiwic2V0IiwiZW51bWVyYWJsZSIsImNyZWF0ZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJ2aWV3IiwiZWxlbUN0clByb3RvIiwiRWxlbWVudCIsIm9iakN0ciIsInN0clRyaW0iLCJ0cmltIiwiYXJySW5kZXhPZiIsIml0ZW0iLCJET01FeCIsInR5cGUiLCJtZXNzYWdlIiwiY29kZSIsIkRPTUV4Y2VwdGlvbiIsImNoZWNrVG9rZW5BbmRHZXRJbmRleCIsImNsYXNzTGlzdCIsInRva2VuIiwiQ2xhc3NMaXN0IiwiZWxlbSIsInRyaW1tZWRDbGFzc2VzIiwiZ2V0QXR0cmlidXRlIiwiY2xhc3NlcyIsIl91cGRhdGVDbGFzc05hbWUiLCJzZXRBdHRyaWJ1dGUiLCJjbGFzc0xpc3RQcm90byIsImNsYXNzTGlzdEdldHRlciIsImFkZCIsInRva2VucyIsImwiLCJ1cGRhdGVkIiwicmVtb3ZlIiwidG9nZ2xlIiwiZm9yY2UiLCJjbGFzc0xpc3RQcm9wRGVzYyIsImV4IiwiX19kZWZpbmVHZXR0ZXJfXyIsInRlc3RFbGVtZW50IiwiY3JlYXRlTWV0aG9kIiwib3JpZ2luYWwiLCJET01Ub2tlbkxpc3QiLCJfdG9nZ2xlIiwiZ2V0SXRlcmF0b3IiLCJpdGVyYXRlIiwic3R5bGVNZWRpYSIsImluZm8iLCJzdHlsZSIsInNjcmlwdCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaWQiLCJwYXJlbnROb2RlIiwiaW5zZXJ0QmVmb3JlIiwiaGVhZCIsImFwcGVuZENoaWxkIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImN1cnJlbnRTdHlsZSIsIm1hdGNoTWVkaXVtIiwidGV4dCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwidGV4dENvbnRlbnQiLCJ3aWR0aCIsImNvbmNhdCIsIm9yaWdEZWZpbmVQcm9wZXJ0eSIsInN1cHBvcnRzRGVzY3JpcHRvcnMiLCJfIiwiYXJlUHJvcGVydHlEZXNjcmlwdG9yc1N1cHBvcnRlZCIsInByZWRpY2F0ZSIsImZuIiwiZGVmaW5lUHJvcGVydGllcyIsIm1hcCIsInByZWRpY2F0ZXMiLCJwcm9wcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJwcm9jZXNzIiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwidGltZW91dCIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJhcnJheSIsIm5vb3AiLCJuZXh0VGljayIsImFwcGx5IiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsIm9uIiwib25jZSIsIm9mZiIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCIkUHJvbWlzZVJlc29sdmUiLCJ5IiwiYmluZCIsIiR0ZXN0IiwicmVnZXgiLCJnZXREYXkiLCJ0cnlEYXRlT2JqZWN0IiwiaW5jbHVkZXMiLCJQcm9taXNlUmVzb2x2ZSIsImdldEludHJpbnNpYyIsIml0ZW1Qcm9taXNlIiwic3RhdHVzIiwicmVhc29uIiwic3ltIiwic3ltT2JqIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInN5bXMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIlRvQm9vbGVhbiIsIk9iaiIsImdldHRlciIsInNldHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJUeXBlRXJyIiwicHJvdG8iLCJGbGF0dGVuSW50b0FycmF5IiwibWFwcGVyRnVuY3Rpb24iLCJzb3VyY2VMZW4iLCJEZWZpbmVPd25Qcm9wZXJ0eSIsIkZyb21Qcm9wZXJ0eURlc2NyaXB0b3IiLCJPcmRpbmFyeUdldE93blByb3BlcnR5IiwiSXNEYXRhRGVzY3JpcHRvciIsIklzRXh0ZW5zaWJsZSIsIlNhbWVWYWx1ZSIsIm9sZERlc2MiLCJleHRlbnNpYmxlIiwiYSIsImZuVG9TdHIiLCJjb25zdHJ1Y3RvclJlZ2V4IiwiaXNFUzZDbGFzc0ZuIiwiZm5TdHIiLCJ0cnlGdW5jdGlvbk9iamVjdCIsInN0ckNsYXNzIiwiZnVuY3Rpb25zSGF2ZU5hbWVzIiwiZnVuY3Rpb25zSGF2ZUNvbmZpZ3VyYWJsZU5hbWVzIiwiJGJpbmQiLCJib3VuZEZ1bmN0aW9uc0hhdmVOYW1lcyIsIkdldE1ldGhvZCIsImNvbXBsZXRpb24iLCJjb21wbGV0aW9uUmVjb3JkIiwiY29tcGxldGlvblRodW5rIiwiaXRlcmF0b3JSZXR1cm4iLCJpbm5lclJlc3VsdCIsImhhc01hcCIsIm1hcFNpemVEZXNjcmlwdG9yIiwibWFwU2l6ZSIsIm1hcEZvckVhY2giLCJoYXNTZXQiLCJzZXRTaXplRGVzY3JpcHRvciIsInNldFNpemUiLCJzZXRGb3JFYWNoIiwid2Vha01hcEhhcyIsIndlYWtTZXRIYXMiLCJib29sZWFuVmFsdWVPZiIsIm9iamVjdFRvU3RyaW5nIiwiYmlnSW50VmFsdWVPZiIsIkJpZ0ludCIsImluc3BlY3RDdXN0b20iLCJjdXN0b20iLCJpbnNwZWN0U3ltYm9sIiwiaXNTeW1ib2wiLCJ3cmFwUXVvdGVzIiwicyIsImRlZmF1bHRTdHlsZSIsIm9wdHMiLCJxdW90ZUNoYXIiLCJxdW90ZVN0eWxlIiwiaW5zcGVjdF8iLCJvcHRpb25zIiwiZGVwdGgiLCJzZWVuIiwibG93Ynl0ZSIsImluc3BlY3RTdHJpbmciLCJJbmZpbml0eSIsIm1heERlcHRoIiwieHMiLCJmcm9tIiwiZiIsIm0iLCJuYW1lT2YiLCJzeW1TdHJpbmciLCJtYXJrQm94ZWQiLCJIVE1MRWxlbWVudCIsIm5vZGVOYW1lIiwiaXNFbGVtZW50IiwidG9Mb3dlckNhc2UiLCJhdHRycyIsImF0dHJpYnV0ZXMiLCJjaGlsZE5vZGVzIiwiYXJyT2JqS2V5cyIsImlzRXJyb3IiLCJpc01hcCIsIm1hcFBhcnRzIiwiY29sbGVjdGlvbk9mIiwiaXNTZXQiLCJzZXRQYXJ0cyIsImlzV2Vha01hcCIsIndlYWtDb2xsZWN0aW9uT2YiLCJpc1dlYWtTZXQiLCJpc051bWJlciIsImlzQmlnSW50IiwiaXNCb29sZWFuIiwiaXNEYXRlIiwiaXNSZWdFeHAiLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsImMiLCJuIiwiY2hhckNvZGVBdCIsIjgiLCI5IiwiMTAiLCIxMiIsIjEzIiwic2l6ZSIsImlzQXJyIiwiZ2V0U3ltYm9sRGVzY3JpcHRpb24iLCIkaW5kZXhPZiIsImludHJpbnNpYyIsIiRkZWZpbmVQcm9wZXJ0eSIsIiRpc0VudW1lcmFibGUiLCJFUzVUb0ludGVnZXIiLCJmdW5jdGlvblByb3RvIiwiJE9iamVjdCIsIiRwcmV2ZW50RXh0ZW5zaW9ucyIsInByZXZlbnRFeHRlbnNpb25zIiwiJGlzRXh0ZW5zaWJsZSIsImlzRXh0ZW5zaWJsZSIsIiRzbGljZSIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJzdHJpbmdMZW5ndGgiLCJmaWxsZXIiLCJpbnRNYXhMZW5ndGgiLCJmaWxsTGVuIiwiZkxlbiIsInJlbWFpbmluZ0NvZGVVbml0cyIsInRydW5jYXRlZFN0cmluZ0ZpbGxlciIsIkVTNVR5cGUiLCIkbWF0Y2giLCJoYXNSZWdFeHBNYXRjaGVyIiwiJEZ1bmN0aW9uIiwiJGFwcGx5IiwiJGNhbGwiLCIkT2JqZWN0Q3JlYXRlIiwiJFN5bnRheEVycm9yIiwiaGFzUHJvdG8iLCJpbnRlcm5hbFNsb3RzTGlzdCIsInNsb3RzIiwiZ2V0SW5mZXJyZWROYW1lIiwic3ltYm9sIiwib3B0TWVzc2FnZSIsImRQIiwic2V0UHJvdG8iLCJzZXRQcm90b3R5cGVPZiIsImlzTWlzc2luZyIsImlzQnJva2VuIiwiZGVzY3JpcHRpb24iLCJvcmlnU3ltIiwiZW1wdHlTdHJpbmdzIiwiY3JlYXRlIiwiU3ltTmV3IiwiYm91bmRHZXR0ZXIiLCJ3cmFwcGVkR2V0dGVyIiwic3ltYm9sRGVzY3JpcHRpb24iLCJzaGltR2xvYmFsIiwiQ3JlYXRlRGF0YVByb3BlcnR5Iiwic3VjY2VzcyIsIk1BWF9TQUZFX0lOVEVHRVIiLCJUb0ludGVnZXIiLCJhcnJheU1ldGhvZEJveGVzUHJvcGVybHkiLCJvcmlnU3ltYm9sIiwiaGFzU3ltYm9sU2hhbSIsImRvbmUiLCIkaXRlcmF0b3IiLCIkc3RyaW5nU2xpY2UiLCJFUyIsInVzaW5nSXRlcmF0b3IiLCJhcnIiLCJuZXh0SW5kZXgiLCJBZHZhbmNlU3RyaW5nSW5kZXgiLCJkb3RBbGwiLCIkV2Vha01hcCIsIiRwdXNoIiwiJHdlYWtNYXBHZXQiLCIkd2Vha01hcFNldCIsIiR3ZWFrTWFwSGFzIiwiJG1hcEdldCIsIiRtYXBTZXQiLCIkd20iLCIkbSIsIiRvIiwiY2hhbm5lbCIsImFzc2VydCIsIm9iamVjdHMiLCJvYmplY3RHZXQiLCJvYmplY3RIYXMiLCJvYmplY3RTZXQiLCJzdHJWYWx1ZSIsInRyeVN0cmluZ09iamVjdCIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJ1bmljb2RlIiwic3RpY2t5IiwiaXNDYWxsYWJsZSIsIm9yZGluYXJ5VG9QcmltaXRpdmUiLCJoaW50IiwibWV0aG9kTmFtZXMiLCJmdW5jIiwiaW5wdXQiLCJleG90aWNUb1ByaW0iLCJ0b1ByaW1pdGl2ZSIsIkludGVyc2VjdGlvbk9ic2VydmVyRW50cnkiLCJpbnRlcnNlY3Rpb25SYXRpbyIsInJlZ2lzdHJ5IiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJUSFJPVFRMRV9USU1FT1VUIiwiUE9MTF9JTlRFUlZBTCIsIlVTRV9NVVRBVElPTl9PQlNFUlZFUiIsIm9ic2VydmUiLCJfb2JzZXJ2YXRpb25UYXJnZXRzIiwic29tZSIsImVsZW1lbnQiLCJub2RlVHlwZSIsIl9yZWdpc3Rlckluc3RhbmNlIiwiX21vbml0b3JJbnRlcnNlY3Rpb25zIiwiX2NoZWNrRm9ySW50ZXJzZWN0aW9ucyIsInVub2JzZXJ2ZSIsImZpbHRlciIsIl91bm1vbml0b3JJbnRlcnNlY3Rpb25zIiwiX3VucmVnaXN0ZXJJbnN0YW5jZSIsImRpc2Nvbm5lY3QiLCJ0YWtlUmVjb3JkcyIsInJlY29yZHMiLCJfcXVldWVkRW50cmllcyIsIl9pbml0VGhyZXNob2xkcyIsIm9wdF90aHJlc2hvbGQiLCJ0aHJlc2hvbGQiLCJzb3J0IiwidCIsIl9wYXJzZVJvb3RNYXJnaW4iLCJvcHRfcm9vdE1hcmdpbiIsIm1hcmdpbnMiLCJtYXJnaW4iLCJ1bml0IiwiX21vbml0b3JpbmdJbnRlcnNlY3Rpb25zIiwiX21vbml0b3JpbmdJbnRlcnZhbCIsInNldEludGVydmFsIiwiYWRkRXZlbnQiLCJfZG9tT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiY2hpbGRMaXN0IiwiY2hhcmFjdGVyRGF0YSIsInN1YnRyZWUiLCJjbGVhckludGVydmFsIiwicmVtb3ZlRXZlbnQiLCJyb290SXNJbkRvbSIsIl9yb290SXNJbkRvbSIsInJvb3RSZWN0IiwiX2dldFJvb3RSZWN0IiwidG9wIiwiYm90dG9tIiwibGVmdCIsInJpZ2h0IiwiaGVpZ2h0IiwidGFyZ2V0UmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInJvb3RDb250YWluc1RhcmdldCIsIl9yb290Q29udGFpbnNUYXJnZXQiLCJvbGRFbnRyeSIsImludGVyc2VjdGlvblJlY3QiLCJfY29tcHV0ZVRhcmdldEFuZFJvb3RJbnRlcnNlY3Rpb24iLCJuZXdFbnRyeSIsInRpbWUiLCJwZXJmb3JtYW5jZSIsIm5vdyIsImJvdW5kaW5nQ2xpZW50UmVjdCIsInJvb3RCb3VuZHMiLCJfaGFzQ3Jvc3NlZFRocmVzaG9sZCIsImlzSW50ZXJzZWN0aW5nIiwiX2NhbGxiYWNrIiwiZGlzcGxheSIsInJlY3QxIiwicmVjdDIiLCJwYXJlbnQiLCJnZXRQYXJlbnROb2RlIiwiYXRSb290IiwicGFyZW50UmVjdCIsInBhcmVudENvbXB1dGVkU3R5bGUiLCJyb290IiwiZG9jdW1lbnRFbGVtZW50Iiwib3ZlcmZsb3ciLCJtYXgiLCJtaW4iLCJodG1sIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJfZXhwYW5kUmVjdEJ5Um9vdE1hcmdpbiIsInJlY3QiLCJfcm9vdE1hcmdpblZhbHVlcyIsIm5ld1JlY3QiLCJvbGRSYXRpbyIsIm5ld1JhdGlvIiwidGhyZXNob2xkcyIsImNvbnRhaW5zRGVlcCIsInRhcmdldEFyZWEiLCJpbnRlcnNlY3Rpb25BcmVhIiwidG9GaXhlZCIsImNhbGxiYWNrIiwib3B0X29wdGlvbnMiLCJ0aW1lciIsInJvb3RNYXJnaW4iLCJub2RlIiwiZXZlbnQiLCJvcHRfdXNlQ2FwdHVyZSIsImF0dGFjaEV2ZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRldGF0Y2hFdmVudCIsImVsIiwiZXJyIiwiY2hpbGQiLCJob3N0IiwiR2V0ViIsIlNMT1QiLCJzbG90IiwiZnJlZXplIiwiQ3JlYXRlSXRlclJlc3VsdE9iamVjdCIsIk9iamVjdENyZWF0ZSIsIlJlZ0V4cEV4ZWMiLCJJdGVyYXRvclByb3RvdHlwZSIsInRoaXNJbmRleCIsIkVSUk9SX01FU1NBR0UiLCJ0aGF0IiwiYm91bmQiLCJiaW5kZXIiLCJib3VuZExlbmd0aCIsImJvdW5kQXJncyIsIkVtcHR5IiwiZW50cnlzIiwiRiIsImdsb2JhbFRoaXMiLCJJc0ludGVnZXIiLCIkY2hhckNvZGVBdCIsImZpcnN0Iiwic2Vjb25kIiwicmVnZXhwTWF0Y2hBbGwiLCJtYXRjaEFsbCIsImdldE5hbm9TZWNvbmRzIiwiaHJ0aW1lIiwibG9hZFRpbWUiLCJtb2R1bGVMb2FkVGltZSIsIm5vZGVMb2FkVGltZSIsInVwVGltZSIsImhyIiwidXB0aW1lIiwiZ2V0VGltZSIsImZldGNoIiwiSGVhZGVycyIsImFwcGVuZCIsIm5vcm1hbGl6ZU5hbWUiLCJub3JtYWxpemVWYWx1ZSIsImxpc3QiLCJnZXRBbGwiLCJ0aGlzQXJnIiwic3VwcG9ydCIsIkJsb2IiLCJSZXF1ZXN0IiwiY2xvbmUiLCJCb2R5IiwiUmVzcG9uc2UiLCJfYm9keUluaXQiLCJzdGF0dXNUZXh0IiwiaGVhZGVycyIsInVybCIsInJlc3BvbnNlIiwicmVkaXJlY3RTdGF0dXNlcyIsInJlZGlyZWN0IiwibG9jYXRpb24iLCJpbml0IiwicmVxdWVzdCIsImlzUHJvdG90eXBlT2YiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9ubG9hZCIsInJlc3BvbnNlVVJMIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJyZXNwb25zZVRleHQiLCJvbmVycm9yIiwib250aW1lb3V0Iiwib3BlbiIsImNyZWRlbnRpYWxzIiwid2l0aENyZWRlbnRpYWxzIiwicmVzcG9uc2VUeXBlIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJjb25zdW1lZCIsImJvZHlVc2VkIiwiZmlsZVJlYWRlclJlYWR5IiwicmVhZGVyIiwicmVhZEJsb2JBc0FycmF5QnVmZmVyIiwiYmxvYiIsIkZpbGVSZWFkZXIiLCJyZWFkQXNBcnJheUJ1ZmZlciIsIl9pbml0Qm9keSIsIl9ib2R5VGV4dCIsIl9ib2R5QmxvYiIsIkZvcm1EYXRhIiwiX2JvZHlGb3JtRGF0YSIsInJlamVjdGVkIiwiYXJyYXlCdWZmZXIiLCJyZWFkQXNUZXh0IiwiZm9ybURhdGEiLCJkZWNvZGUiLCJqc29uIiwidXBjYXNlZCIsIm1vZGUiLCJ0b1VwcGVyQ2FzZSIsInJlZmVycmVyIiwiZm9ybSIsImJ5dGVzIiwic2hpZnQiLCJoZWFkZXIiLCJib2R5SW5pdCIsIm9rIiwicGFkU3RhcnQiLCJ3IiwiZCIsInNjcm9sbCIsInNjcm9sbFRvIiwic2Nyb2xsQnkiLCJlbFNjcm9sbCIsInNjcm9sbEVsZW1lbnQiLCJzY3JvbGxJbnRvVmlldyIsInNob3VsZEJhaWxPdXQiLCJzbW9vdGhTY3JvbGwiLCJzY3JvbGxYIiwicGFnZVhPZmZzZXQiLCJzY3JvbGxZIiwicGFnZVlPZmZzZXQiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwiYXJnMCIsImJlaGF2aW9yIiwic2Nyb2xsYWJsZVBhcmVudCIsImZpbmRTY3JvbGxhYmxlUGFyZW50IiwicGFyZW50UmVjdHMiLCJjbGllbnRSZWN0cyIsImlzQm9keSIsImhhc1Njcm9sbGFibGVTcGFjZSIsImhhc1Zpc2libGVPdmVyZmxvdyIsInNjcm9sbEhlaWdodCIsInNjcm9sbFdpZHRoIiwic3RlcCIsImNvbnRleHQiLCJjdXJyZW50WCIsImN1cnJlbnRZIiwiZWxhcHNlZCIsInN0YXJ0VGltZSIsImNvcyIsIlBJIiwic3RhcnRYIiwic3RhcnRZIiwic2Nyb2xsYWJsZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImhpZGVQbGFjZWhvbGRlck9uRm9jdXMiLCJjdXJyZW50VGFyZ2V0Iiwic3JjRWxlbWVudCIsInVuZm9jdXNPbkFuRWxlbWVudCIsImlucHV0cyIsInByb21pc2VSZXNvbHZlIiwiT3JpZ2luYWxQcm9taXNlIiwicHJvbWlzZUZpbmFsbHkiLCJvbkZpbmFsbHkiLCJ0aGVuRmluYWxseSIsImNhdGNoRmluYWxseSIsImNyZWF0ZVRoZW5GaW5hbGx5IiwiY3JlYXRlQ2F0Y2hGaW5hbGx5IiwiZmFjdG9yeSIsImRlZmluZUdldHRlciIsImRlZmluZVNldHRlciIsImxvb2t1cEdldHRlciIsImxvb2t1cFNldHRlciIsInByb3RvdHlwZU9mT2JqZWN0Iiwib3ducyIsImlzRW51bWVyYWJsZSIsInN1cHBvcnRzQWNjZXNzb3JzIiwiX19kZWZpbmVTZXR0ZXJfXyIsIl9fbG9va3VwR2V0dGVyX18iLCJfX2xvb2t1cFNldHRlcl9fIiwiZG9lc0dldE93blByb3BlcnR5RGVzY3JpcHRvcldvcmsiLCJzZW50aW5lbCIsImV4Y2VwdGlvbiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcldvcmtzT25PYmplY3QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JGYWxsYmFjayIsInByb3BlcnR5Iiwibm90UHJvdG90eXBlT2ZPYmplY3QiLCJjcmVhdGVFbXB0eSIsImVtcHR5IiwiZG9tYWluIiwiQWN0aXZlWE9iamVjdCIsInNob3VsZFVzZUFjdGl2ZVgiLCJ4RG9jIiwid3JpdGUiLCJjbG9zZSIsInBhcmVudFdpbmRvdyIsImdldEVtcHR5VmlhQWN0aXZlWCIsImlmcmFtZSIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJyZW1vdmVDaGlsZCIsImdldEVtcHR5VmlhSUZyYW1lIiwidG9Mb2NhbGVTdHJpbmciLCJkb2VzRGVmaW5lUHJvcGVydHlXb3JrIiwiZGVmaW5lUHJvcGVydHlXb3Jrc09uT2JqZWN0IiwiZGVmaW5lUHJvcGVydHlXb3Jrc09uRG9tIiwiZGVmaW5lUHJvcGVydHlGYWxsYmFjayIsImRlZmluZVByb3BlcnRpZXNGYWxsYmFjayIsImhhc0dldHRlciIsImhhc1NldHRlciIsInNlYWwiLCJmcmVlemVPYmplY3QiLCJpc1NlYWxlZCIsImlzRnJvemVuIiwicmV0dXJuVmFsdWUiLCJJc1JlZ0V4cCIsIlRvUHJvcGVydHlEZXNjcmlwdG9yIiwiYXJyYXlMZW5ndGgiLCJyZWdleExhc3RJbmRleCIsIkVsZW1lbnRQcm90byIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwic2VsZWN0b3IiLCJlbGVtZW50cyIsIm93bmVyRG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY2xvc2VzdCIsIiRhcnJheVNsaWNlIiwiYXJndW1lbnRzTGlzdCIsInByb3Blcmx5Qm94ZXNOb25TdHJpY3QiLCJwcm9wZXJseUJveGVzU3RyaWN0IiwidGhyZXdFeGNlcHRpb24iLCJfXyIsImZsYXRNYXAiLCIkZnVuY3Rpb25Ub1N0cmluZyIsIiRzdHJpbmdNYXRjaCIsImNsYXNzUmVnZXgiLCJpc0NsYXNzIiwiYXBwbHlGb2N1c1Zpc2libGVQb2x5ZmlsbCIsInNjb3BlIiwiaGFkS2V5Ym9hcmRFdmVudCIsImhhZEZvY3VzVmlzaWJsZVJlY2VudGx5IiwiaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0IiwiaW5wdXRUeXBlc1doaXRlbGlzdCIsInNlYXJjaCIsInRlbCIsImVtYWlsIiwicGFzc3dvcmQiLCJkYXRlIiwibW9udGgiLCJ3ZWVrIiwiZGF0ZXRpbWUiLCJpc1ZhbGlkRm9jdXNUYXJnZXQiLCJhZGRGb2N1c1Zpc2libGVDbGFzcyIsIm9uUG9pbnRlckRvd24iLCJhZGRJbml0aWFsUG9pbnRlck1vdmVMaXN0ZW5lcnMiLCJvbkluaXRpYWxQb2ludGVyTW92ZSIsIm1ldGFLZXkiLCJhbHRLZXkiLCJjdHJsS2V5IiwiYWN0aXZlRWxlbWVudCIsInZpc2liaWxpdHlTdGF0ZSIsInRhZ05hbWUiLCJyZWFkT25seSIsImlzQ29udGVudEVkaXRhYmxlIiwiaGFzQXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiTm9kZSIsIkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUiLCJET0NVTUVOVF9OT0RFIiwiQ3VzdG9tRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRDdXN0b21FdmVudCIsImRpc3BhdGNoRXZlbnQiLCJLZXlib2FyZEV2ZW50IiwiV2luIiwiU2Nyb2xsIiwiU3BhY2ViYXIiLCJEb3duIiwiTGVmdCIsIlJpZ2h0IiwiVXAiLCJEZWwiLCJBcHBzIiwiRXNjIiwiTXVsdGlwbHkiLCJBZGQiLCJTdWJ0cmFjdCIsIkRlY2ltYWwiLCJEaXZpZGUiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiSXRlcmF0b3JDb21wbGV0ZSIsIkl0ZXJhdG9yTmV4dCIsInN0YXJ0IiwidGFyZ2V0SW5kZXgiLCJzb3VyY2VJbmRleCIsImV4aXN0cyIsInNob3VsZEZsYXR0ZW4iLCJlbGVtZW50TGVuIiwicmVnZXhwTWF0Y2hBbGxQb2x5ZmlsbCIsIm90aGVyIiwiaXRlclJlc3VsdCIsImJvdW5kTWFwU2hpbSIsIm9yaWdpbmFsQXJyYXkiLCJBcnJheUl0ZXJhdG9yIiwiX2FwcGx5IiwiX2NhbGwiLCJub3QiLCJ0aHJvd3NFcnJvciIsInZhbHVlT3JGYWxzZUlmVGhyb3dzIiwiaXNDYWxsYWJsZVdpdGhvdXROZXciLCJfZm9yRWFjaCIsIl9yZWR1Y2UiLCJyZWR1Y2UiLCJfZmlsdGVyIiwiX3NvbWUiLCJmb3JjZU92ZXJyaWRlIiwiX3RvU3RyaW5nIiwiVmFsdWUiLCJwcm94eSIsIm9yaWdpbmFsT2JqZWN0IiwidGFyZ2V0T2JqZWN0Iiwib3JpZ2luYWxEZXNjcmlwdG9yIiwicmVkZWZpbmUiLCJuZXdWYWx1ZSIsImRlZmluZUJ5RGVzY3JpcHRvciIsInByZXNlcnZlVG9TdHJpbmciLCJQcm90b3R5cGUiLCJzdXBwb3J0c1N1YmNsYXNzaW5nIiwiU3ViIiwiU3ViY2xhc3MiLCJhcmciLCJnZXRHbG9iYWwiLCJnbG9iYWxzIiwiZ2xvYmFsSXNGaW5pdGUiLCJfaW5kZXhPZiIsIl9hcnJheUluZGV4T2ZBcHBseSIsIl9jb25jYXQiLCJfc3RyU2xpY2UiLCJfcHVzaCIsIl9wdXNoQXBwbHkiLCJfc2hpZnQiLCJfbWF4IiwiX21pbiIsIl9mbG9vciIsIl9hYnMiLCJfZXhwIiwiZXhwIiwiX2xvZyIsImxvZyIsIl9zcXJ0Iiwic3FydCIsIl9oYXNPd25Qcm9wZXJ0eSIsIk9yaWdNYXAiLCJvcmlnTWFwRGVsZXRlIiwib3JpZ01hcEdldCIsIm9yaWdNYXBIYXMiLCJvcmlnTWFwU2V0Iiwic3ltYm9sU3BlY2llcyIsInNwZWNpZXMiLCJudW1iZXJJc05hTiIsIm51bWJlcklzRmluaXRlIiwiX3NpZ24iLCJzaWduIiwiX2xvZzFwIiwiaXNBcmd1bWVudHMiLCJwcmltaXRpdmUiLCJvdmVycmlkZU5hdGl2ZSIsInJlcGxhY2VtZW50IiwiJGl0ZXJhdG9yJCIsImRvbUFsbCIsImlzTnVsbE9yVW5kZWZpbmVkIiwiVHlwZUlzT2JqZWN0IiwiVG9JbnQzMiIsImIiLCJTYW1lVmFsdWVaZXJvIiwiSXNJdGVyYWJsZSIsIml0Rm4iLCJpdCIsInAiLCJjb21wbGV0aW9uSXNUaHJvdyIsInJldHVybk1ldGhvZCIsImlubmVyRXhjZXB0aW9uIiwiQ29uc3RydWN0IiwibmV3VGFyZ2V0IiwiaXNFUzZpbnRlcm5hbCIsImNvbnN0cnVjdCIsIkNyZWF0ZUhUTUwiLCJ0YWciLCJhdHRyaWJ1dGUiLCJwMSIsImRlZmluZVdlbGxLbm93blN5bWJvbCIsInN5bWJvbFNlYXJjaCIsIm9yaWdpbmFsU2VhcmNoIiwic2VhcmNoU2hpbSIsInJlZ2V4cCIsInNlYXJjaGVyIiwic3ltYm9sUmVwbGFjZSIsIm9yaWdpbmFsUmVwbGFjZSIsInJlcGxhY2VWYWx1ZSIsInJlcGxhY2VTaGltIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlciIsInN5bWJvbFNwbGl0Iiwib3JpZ2luYWxTcGxpdCIsImxpbWl0Iiwic3BsaXRTaGltIiwic2VwYXJhdG9yIiwic3BsaXR0ZXIiLCJzeW1ib2xNYXRjaEV4aXN0cyIsInN0cmluZ01hdGNoSWdub3Jlc1N5bWJvbE1hdGNoIiwic3ltYm9sTWF0Y2giLCJvcmlnaW5hbE1hdGNoIiwibWF0Y2hTaGltIiwid3JhcENvbnN0cnVjdG9yIiwia2V5c1RvU2tpcCIsImRlZmF1bHRTcGVjaWVzR2V0dGVyIiwiYWRkRGVmYXVsdFNwZWNpZXMiLCJhZGRJdGVyYXRvciIsImltcGwiLCJjcmVhdGVEYXRhUHJvcGVydHkiLCJjcmVhdGVEYXRhUHJvcGVydHlPclRocm93IiwiZW11bGF0ZUVTNmNvbnN0cnVjdCIsImRlZmF1bHROZXdUYXJnZXQiLCJkZWZhdWx0UHJvdG8iLCJmcm9tQ29kZVBvaW50Iiwib3JpZ2luYWxGcm9tQ29kZVBvaW50IiwiY29kZVBvaW50cyIsIlN0cmluZ1NoaW1zIiwiZnJvbUNoYXJDb2RlIiwicmF3IiwiY2FsbFNpdGUiLCJjb29rZWQiLCJyYXdTdHJpbmciLCJsaXRlcmFsc2VnbWVudHMiLCJuZXh0S2V5IiwibmV4dFNlZyIsIm5leHRTdWIiLCJzdHJpbmdFbGVtZW50cyIsIjAiLCIxIiwic3RyaW5nUmVwZWF0IiwicmVwZWF0IiwidGltZXMiLCJoYWxmIiwic3RyaW5nTWF4TGVuZ3RoIiwiU3RyaW5nUHJvdG90eXBlU2hpbXMiLCJ0aGlzU3RyIiwibnVtVGltZXMiLCJzdGFydHNXaXRoIiwic2VhcmNoU3RyaW5nIiwicG9zaXRpb24iLCJzZWFyY2hTdHIiLCJlbmRzV2l0aCIsImVuZFBvc2l0aW9uIiwicG9zIiwiZW5kIiwiY29kZVBvaW50QXQiLCJzdGFydHNXaXRoUmVqZWN0c1JlZ2V4Iiwic3RhcnRzV2l0aEhhbmRsZXNJbmZpbml0eSIsInN0YXJ0c1dpdGhTdXBwb3J0c1N5bWJvbE1hdGNoIiwicmUiLCJlbmRzV2l0aFN1cHBvcnRzU3ltYm9sTWF0Y2giLCJpbmNsdWRlc1N1cHBvcnRzU3ltYm9sTWF0Y2giLCJ0cmltUmVnZXhwIiwidHJpbVNoaW0iLCJub25XUyIsIm5vbldTcmVnZXgiLCJpc0JhZEhleFJlZ2V4IiwiaGFzU3RyaW5nVHJpbUJ1ZyIsIml0ZXJhdG9yUmVzdWx0IiwiU3RyaW5nSXRlcmF0b3IiLCJfcyIsIl9pIiwic3Vic3RyIiwiQXJyYXlTaGltcyIsIml0ZW1zIiwibWFwRm4iLCJtYXBwaW5nIiwibmV4dFZhbHVlIiwiYXJyYXlMaWtlIiwib2YiLCJraW5kIiwicmV0dmFsIiwiYXJyYXlPZlN1cHBvcnRzU3ViY2xhc3NpbmciLCJGb28iLCJmb29BcnIiLCJBcnJheVByb3RvdHlwZVNoaW1zIiwiY29weVdpdGhpbiIsInJlbGF0aXZlVGFyZ2V0IiwicmVsYXRpdmVTdGFydCIsInRvIiwicmVsYXRpdmVFbmQiLCJmaW5hbEl0ZW0iLCJjb3VudCIsImRpcmVjdGlvbiIsImZpbGwiLCJmaW5kIiwiZmluZEluZGV4IiwidW5zY29wYWJsZXMiLCJvcmlnaW5hbEFycmF5UHJvdG90eXBlVmFsdWVzIiwic2VhcmNoRWxlbWVudCIsImFycmF5RnJvbVN3YWxsb3dzTmVnYXRpdmVMZW5ndGhzIiwiYXJyYXlGcm9tSGFuZGxlc0l0ZXJhYmxlcyIsImFycmF5RnJvbUhhbmRsZXNVbmRlZmluZWRNYXBGdW5jdGlvbiIsIm9yaWdBcnJheUZyb20iLCJpbnQzMnNBc09uZSIsInBvdyIsInRvTGVuZ3Roc0NvcnJlY3RseSIsInJldmVyc2VkIiwib3JpZ2luYWxGb3JFYWNoIiwiY2FsbGJhY2tGbiIsIm9yaWdpbmFsTWFwIiwib3JpZ2luYWxGaWx0ZXIiLCJvcmlnaW5hbFNvbWUiLCJldmVyeSIsIm9yaWdpbmFsRXZlcnkiLCJvcmlnaW5hbFJlZHVjZSIsInJlZHVjZVJpZ2h0Iiwib3JpZ2luYWxSZWR1Y2VSaWdodCIsImxhY2tzT2N0YWxTdXBwb3J0IiwibGFja3NCaW5hcnlTdXBwb3J0IiwidHJpbXNOb25XaGl0ZXNwYWNlIiwiT3JpZ051bWJlciIsImJpbmFyeVJlZ2V4Iiwib2N0YWxSZWdleCIsImlzQmFkSGV4IiwiTnVtYmVyU2hpbSIsInByaW1WYWx1ZSIsInJlY2VpdmVyIiwidmFsdWVPZlN1Y2NlZWRzIiwiTUFYX1ZBTFVFIiwiTUlOX1ZBTFVFIiwiTkVHQVRJVkVfSU5GSU5JVFkiLCJQT1NJVElWRV9JTkZJTklUWSIsIm1heFNhZmVJbnRlZ2VyIiwiTUlOX1NBRkVfSU5URUdFUiIsIkVQU0lMT04iLCJpc0ludGVnZXIiLCJpc1NhZmVJbnRlZ2VyIiwiRkFLRU5VTEwiLCJncG8iLCJzcG8iLCJpc0VudW1lcmFibGVPbiIsImVuc3VyZUVudW1lcmFibGUiLCJzbGljZUFyZ3MiLCJpbml0aWFsIiwiZGVzaXJlZEFyZ0NvdW50IiwiYXNzaWduVG8iLCJhc3NpZ25SZWR1Y2VyIiwic3ltYm9scyIsInNvdXJjZUtleXMiLCJPYmplY3RTaGltcyIsImFzc2lnbiIsImlzIiwiYXNzaWduSGFzUGVuZGluZ0V4Y2VwdGlvbnMiLCJ0aHJvd2VyIiwiRVM1T2JqZWN0U2hpbXMiLCJtYWdpYyIsImNoZWNrQXJncyIsIm9iamVjdEtleXNBY2NlcHRzUHJpbWl0aXZlcyIsIm9yaWdpbmFsT2JqZWN0S2V5cyIsIm9iamVjdEtleXNSZWplY3RzUmVnZXgiLCJyZWdleFJlamVjdGluZ09iamVjdEtleXMiLCJyZWdleEtleXMiLCJvYmplY3RHT1BOQWNjZXB0c1ByaW1pdGl2ZXMiLCJjYWNoZWRXaW5kb3dOYW1lcyIsIm9yaWdpbmFsT2JqZWN0R2V0T3duUHJvcGVydHlOYW1lcyIsInZhbCIsIm9iamVjdEdPUERBY2NlcHRzUHJpbWl0aXZlcyIsIm9yaWdpbmFsT2JqZWN0R2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwib2JqZWN0U2VhbEFjY2VwdHNQcmltaXRpdmVzIiwib3JpZ2luYWxPYmplY3RTZWFsIiwib2JqZWN0SXNTZWFsZWRBY2NlcHRzUHJpbWl0aXZlcyIsIm9yaWdpbmFsT2JqZWN0SXNTZWFsZWQiLCJvYmplY3RGcmVlemVBY2NlcHRzUHJpbWl0aXZlcyIsIm9yaWdpbmFsT2JqZWN0RnJlZXplIiwib2JqZWN0SXNGcm96ZW5BY2NlcHRzUHJpbWl0aXZlcyIsIm9yaWdpbmFsT2JqZWN0SXNGcm96ZW4iLCJvYmplY3RQcmV2ZW50RXh0ZW5zaW9uc0FjY2VwdHNQcmltaXRpdmVzIiwib3JpZ2luYWxPYmplY3RQcmV2ZW50RXh0ZW5zaW9ucyIsIm9iamVjdElzRXh0ZW5zaWJsZUFjY2VwdHNQcmltaXRpdmVzIiwib3JpZ2luYWxPYmplY3RJc0V4dGVuc2libGUiLCJvYmplY3RHZXRQcm90b0FjY2VwdHNQcmltaXRpdmVzIiwib3JpZ2luYWxHZXRQcm90byIsImhhc0ZsYWdzIiwicmVnRXhwRmxhZ3NHZXR0ZXIiLCJyZWdFeHBTdXBwb3J0c0ZsYWdzV2l0aFJlZ2V4IiwicmVnRXhwTmVlZHNUb1N1cHBvcnRTeW1ib2xNYXRjaCIsInJlZ2V4VG9TdHJpbmdJc0dlbmVyaWMiLCJyZWdleFRvU3RyaW5nU3VwcG9ydHNHZW5lcmljRmxhZ3MiLCJvcmlnUmVnRXhwVG9TdHJpbmciLCJzb3VyY2VEZXNjIiwibGVnYWN5U291cmNlR2V0dGVyIiwic291cmNlR2V0dGVyIiwiUmVnRXhwU2hpbSIsInBhdHRlcm4iLCJwYXR0ZXJuSXNSZWdFeHAiLCIkaW5wdXQiLCJyZWdleEdsb2JhbHMiLCJsYXN0TWF0Y2giLCJsYXN0UGFyZW4iLCJsZWZ0Q29udGV4dCIsInJpZ2h0Q29udGV4dCIsImludmVyc2VFcHNpbG9uIiwicm91bmRUaWVzVG9FdmVuIiwiQklOQVJZXzMyX0VQU0lMT04iLCJCSU5BUllfMzJfTUFYX1ZBTFVFIiwiQklOQVJZXzMyX01JTl9WQUxVRSIsIkUiLCJMT0cyRSIsIkxPRzEwRSIsIm51bWJlckNMWiIsImNseiIsIk1hdGhTaGltcyIsImFjb3NoIiwieEludlNxdWFyZWQiLCJoYWxmWCIsImFzaW5oIiwiYVNxdWFyZWQiLCJhdGFuaCIsImNicnQiLCJuZWdhdGUiLCJjbHozMiIsImNvc2giLCJleHBtMSIsInN1bSIsImh5cG90IiwibGFyZ2VzdCIsImxvZzIiLCJsb2cxMCIsImxvZzFwIiwic2luaCIsInUiLCJ0YW5oIiwidHJ1bmMiLCJpbXVsIiwiYWwiLCJibCIsImZyb3VuZCIsIndpdGhpblVMUERpc3RhbmNlIiwiZXhwZWN0ZWQiLCJkaXN0YW5jZSIsImV4cG0xT2ZUZW4iLCJvcmlnTWF0aFJvdW5kIiwicm91bmQiLCJyb3VuZEhhbmRsZXNCb3VuZGFyeUNvbmRpdGlvbnMiLCJzbWFsbGVzdFBvc2l0aXZlTnVtYmVyV2hlcmVSb3VuZEJyZWFrcyIsImxhcmdlc3RQb3NpdGl2ZU51bWJlcldoZXJlUm91bmRCcmVha3MiLCJyb3VuZERvZXNOb3RJbmNyZWFzZUludGVnZXJzIiwibnVtIiwib3JpZ0ltdWwiLCJ0aGVuYWJsZSIsIlByb21pc2VTaGltIiwiSXNQcm9taXNlIiwicHJvbWlzZSIsIl9wcm9taXNlIiwibWFrZVplcm9UaW1lb3V0IiwiUHJvbWlzZUNhcGFiaWxpdHkiLCJjYXBhYmlsaXR5IiwicG9zdE1lc3NhZ2UiLCJ0aW1lb3V0cyIsImRhdGEiLCJzdG9wUHJvcGFnYXRpb24iLCJwciIsIlByb21pc2UkcHJvdG90eXBlIiwiUHJvbWlzZSRwcm90b3R5cGUkdGhlbiIsImVucXVldWUiLCJzZXRJbW1lZGlhdGUiLCJ0YXNrIiwiUFJPTUlTRV9JREVOVElUWSIsIlBST01JU0VfVEhST1dFUiIsIlBST01JU0VfRkFLRV9DQVBBQklMSVRZIiwiZW5xdWV1ZVByb21pc2VSZWFjdGlvbkpvYiIsImhhbmRsZXIiLCJwcm9taXNlUmVhY3Rpb25Kb2IiLCJwcm9taXNlQ2FwYWJpbGl0eSIsImhhbmRsZXJSZXN1bHQiLCJmdWxmaWxsUHJvbWlzZSIsInJlYWN0aW9uTGVuZ3RoIiwiZnVsZmlsbFJlYWN0aW9uSGFuZGxlcjAiLCJyZWFjdGlvbkNhcGFiaWxpdHkwIiwicmVqZWN0UmVhY3Rpb25zMCIsImlkeCIsInN0YXRlIiwicmVqZWN0UHJvbWlzZSIsInJlamVjdFJlYWN0aW9uSGFuZGxlcjAiLCJjcmVhdGVSZXNvbHZpbmdGdW5jdGlvbnMiLCJhbHJlYWR5UmVzb2x2ZWQiLCJyZXNvbHV0aW9uIiwicHJvbWlzZVJlc29sdmVUaGVuYWJsZUpvYiIsIm9wdGltaXplZFRoZW4iLCJyZXNvbHZpbmdGdW5jdGlvbnMiLCJyZXNvbHZlciIsIl9wcm9taXNlQWxsUmVzb2x2ZXIiLCJyZW1haW5pbmciLCJhbHJlYWR5Q2FsbGVkIiwicmVzdWx0Q2FwYWJpbGl0eSIsIm5leHRQcm9taXNlIiwicmVzb2x2ZUVsZW1lbnQiLCJwZXJmb3JtUHJvbWlzZUFsbCIsImVlIiwicmFjZSIsInBlcmZvcm1Qcm9taXNlUmFjZSIsInJlamVjdEZ1bmMiLCJyZXNvbHZlRnVuYyIsIm9uUmVqZWN0ZWQiLCJvbkZ1bGZpbGxlZCIsInJldHVyblZhbHVlSXNJZ25vcmVkIiwiZnVsZmlsbFJlYWN0aW9uSGFuZGxlciIsInJlamVjdFJlYWN0aW9uSGFuZGxlciIsImFjY2VwdCIsImRlZmVyIiwiY2hhaW4iLCJwcm9taXNlU3VwcG9ydHNTdWJjbGFzc2luZyIsInByb21pc2VJZ25vcmVzTm9uRnVuY3Rpb25UaGVuQ2FsbGJhY2tzIiwicHJvbWlzZVJlcXVpcmVzT2JqZWN0Q29udGV4dCIsInByb21pc2VSZXNvbHZlQnJva2VuIiwicDIiLCJnZXRzVGhlblN5bmNocm9ub3VzbHkiLCJCYWRSZXNvbHZlclByb21pc2UiLCJleGVjdXRvciIsImhhc0JhZFJlc29sdmVyUHJvbWlzZSIsIm9yaWdBbGwiLCJvcmlnUmFjZSIsIm9yaWdSZXNvbHZlIiwib3JpZ1JlamVjdCIsInIiLCJ0ZXN0T3JkZXIiLCJwcmVzZXJ2ZXNJbnNlcnRpb25PcmRlciIsInByZXNlcnZlc051bWVyaWNJbnNlcnRpb25PcmRlciIsImZhc3RrZXkiLCJza2lwSW5zZXJ0aW9uT3JkZXJDaGVjayIsImVtcHR5T2JqZWN0IiwiYWRkSXRlcmFibGVUb01hcCIsIk1hcENvbnN0cnVjdG9yIiwiaXRlciIsImFkZEl0ZXJhYmxlVG9TZXQiLCJTZXRDb25zdHJ1Y3RvciIsImNvbGxlY3Rpb25TaGltcyIsIk1hcEVudHJ5IiwicHJldiIsImlzUmVtb3ZlZCIsIk1hcCRwcm90b3R5cGUiLCJyZXF1aXJlTWFwU2xvdCIsIl9lczZtYXAiLCJNYXBJdGVyYXRvciIsIl9oZWFkIiwiaXNNYXBJdGVyYXRvciIsIk1hcFNoaW0iLCJfbWFwIiwiX3NpemUiLCJfc3RvcmFnZSIsImZrZXkiLCJjbGVhciIsIlNldCRwcm90b3R5cGUiLCJyZXF1aXJlU2V0U2xvdCIsIl9lczZzZXQiLCJTZXRTaGltIiwiZW5zdXJlTWFwIiwiY2hhckF0IiwiZGVjb2RlS2V5IiwiaGFzRktleSIsIlNldEl0ZXJhdG9yIiwiZW50aXJlU2V0IiwiaXNTZXRJdGVyYXRvciIsImlzR29vZ2xlVHJhbnNsYXRlIiwibWFwQWNjZXB0c0FyZ3VtZW50cyIsInRlc3RNYXAiLCJtYXBVc2VzU2FtZVZhbHVlWmVybyIsIm1hcFN1cHBvcnRzQ2hhaW5pbmciLCJ0ZXN0U2V0Iiwic2V0VXNlc1NhbWVWYWx1ZVplcm8iLCJzZXRTdXBwb3J0c0NoYWluaW5nIiwib3JpZ1NldEFkZCIsIm9yaWdTZXRIYXMiLCJvcmlnU2V0RGVsIiwibWFwU3VwcG9ydHNTdWJjbGFzc2luZyIsIk0iLCJtYXBGYWlsc1RvU3VwcG9ydFN1YmNsYXNzaW5nIiwibWFwUmVxdWlyZXNOZXciLCJzZXRTdXBwb3J0c1N1YmNsYXNzaW5nIiwic2V0RmFpbHNUb1N1cHBvcnRTdWJjbGFzc2luZyIsInNldFJlcXVpcmVzTmV3IiwiT3JpZ1NldCIsIm5ld01hcCIsIm1hcEl0ZXJhdGlvblRocm93c1N0b3BJdGVyYXRvciIsImFub255bW91c1NldEhhcyIsInRocm93VW5sZXNzVGFyZ2V0SXNPYmplY3QiLCJSZWZsZWN0U2hpbXMiLCJkZWxldGVQcm9wZXJ0eSIsIm93bktleXMiLCJjYWxsQW5kQ2F0Y2hFeGNlcHRpb24iLCJpbnRlcm5hbEdldCIsImludGVybmFsU2V0Iiwib2JqZWN0RG90R2V0UHJvdG90eXBlT2YiLCJ3aWxsQ3JlYXRlQ2lyY3VsYXJQcm90b3R5cGUiLCJsYXN0UHJvdG8iLCJkZWZpbmVPck92ZXJyaWRlUmVmbGVjdFByb3BlcnR5Iiwib3JpZ2luYWxSZWZsZWN0R2V0UHJvdG8iLCJiYXNpYyIsImRhdGVUb1N0cmluZyIsInNoaW1tZWREYXRlVG9TdHJpbmciLCJzdHJpbmdIVE1Mc2hpbXMiLCJhbmNob3IiLCJiaWciLCJibGluayIsImJvbGQiLCJmaXhlZCIsImZvbnRjb2xvciIsImNvbG9yIiwiZm9udHNpemUiLCJpdGFsaWNzIiwibGluayIsInNtYWxsIiwic3RyaWtlIiwic3ViIiwic3VwIiwic2hvdWxkT3ZlcndyaXRlIiwib3V0cHV0IiwicXVvdGVzQ291bnQiLCJKU09Oc3RyaW5naWZpZXNTeW1ib2xzIiwic3RyaW5naWZ5IiwiSlNPTnN0cmluZ2lmeUFjY2VwdHNPYmplY3RTeW1ib2wiLCJvcmlnU3RyaW5naWZ5IiwicmVwbGFjZUZuIiwid3JhcHBlZFJlcGxhY2VyIiwicGFyc2VkVmFsdWUiLCIkZ2V0T3duTmFtZXMiLCIkZ2V0U3ltYm9scyIsIiRjb25jYXQiLCIkcmVkdWNlIiwiaXNFUzUiLCJhY2MiLCJ2YWxzIiwib3JpZ2luIiwicHJvdG9jb2wiLCJob3N0bmFtZSIsInBvcnQiLCJoYXNEb250RW51bUJ1ZyIsImhhc1Byb3RvRW51bUJ1ZyIsImRvbnRFbnVtcyIsImVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlIiwiY3RvciIsImV4Y2x1ZGVkS2V5cyIsIiRhcHBsaWNhdGlvbkNhY2hlIiwiJGNvbnNvbGUiLCIkZXh0ZXJuYWwiLCIkZnJhbWUiLCIkZnJhbWVFbGVtZW50IiwiJGZyYW1lcyIsIiRpbm5lckhlaWdodCIsIiRpbm5lcldpZHRoIiwiJG9ubW96ZnVsbHNjcmVlbmNoYW5nZSIsIiRvbm1vemZ1bGxzY3JlZW5lcnJvciIsIiRvdXRlckhlaWdodCIsIiRvdXRlcldpZHRoIiwiJHBhZ2VYT2Zmc2V0IiwiJHBhZ2VZT2Zmc2V0IiwiJHBhcmVudCIsIiRzY3JvbGxMZWZ0IiwiJHNjcm9sbFRvcCIsIiRzY3JvbGxYIiwiJHNjcm9sbFkiLCIkc2VsZiIsIiR3ZWJraXRJbmRleGVkREIiLCIkd2Via2l0U3RvcmFnZUluZm8iLCIkd2luZG93IiwiaGFzQXV0b21hdGlvbkVxdWFsaXR5QnVnIiwiaXNPYmplY3QiLCJpc0Z1bmN0aW9uIiwidGhlS2V5cyIsInNraXBQcm90byIsInNraXBDb25zdHJ1Y3RvciIsImVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlSWZOb3RCdWdneSIsIiRhcnJheVB1c2giLCJnZXRBcnJheUl0ZXJhdG9yIiwiYXJyYXlsaWtlIiwiZ2V0Tm9uQ29sbGVjdGlvbkl0ZXJhdG9yIiwiYWR2YW5jZVN0cmluZ0luZGV4IiwiJG1hcEZvckVhY2giLCIkc2V0Rm9yRWFjaCIsIiRtYXBJdGVyYXRvciIsIiRzZXRJdGVyYXRvciIsImdldFN0b3BJdGVyYXRpb25JdGVyYXRvciIsIiRtYXBBdEF0SXRlcmF0b3IiLCIkc2V0QXRBdEl0ZXJhdG9yIiwiZ2V0Q29sbGVjdGlvbkl0ZXJhdG9yIiwibmF0aXZlR2V0UHJvdG90eXBlT2YiLCJJbnZva2UiLCJpc1N1cHBvcnRlZCIsImNiIiwiZGlkVGltZW91dCIsInRpbWVSZW1haW5pbmciLCIkY2hhckF0IiwiZnJvbUluZGV4IiwiZ2V0TWF0Y2hlciIsIm1hdGNoZXJQb2x5ZmlsbCIsInJ4IiwidmVuZG9ycyIsInN1ZmZpeCIsInJhZiIsImNhZiIsImxhc3QiLCJfbm93IiwiY3AiLCJjYW5jZWxsZWQiLCJoYW5kbGUiLCJjYW5jZWwiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImFsbG93ZWQiLCJpc0RhdGEiLCJJc0FjY2Vzc29yIiwicmVjb3JkVHlwZSIsImFyZ3VtZW50TmFtZSIsImdldEl0ZXJhdG9yTWV0aG9kIiwiYWN0dWFsTWV0aG9kIiwiaXNSZWdleCIsIkFycmF5UHJvdG90eXBlIiwiT2JqZWN0UHJvdG90eXBlIiwiRnVuY3Rpb25Qcm90b3R5cGUiLCJTdHJpbmdQcm90b3R5cGUiLCJOdW1iZXJQcm90b3R5cGUiLCJhcnJheV9zbGljZSIsImFycmF5X3NwbGljZSIsImFycmF5X3B1c2giLCJhcnJheV91bnNoaWZ0IiwidW5zaGlmdCIsImFycmF5X2NvbmNhdCIsImFycmF5X2pvaW4iLCJ0b19zdHJpbmciLCJzcGFjZVN0cmlwcGVkIiwiZm5DbGFzcyIsImdlbkNsYXNzIiwidHJ5UmVnZXhFeGVjIiwicmVnZXhDbGFzcyIsInN0cmluZ0NsYXNzIiwiZm9yY2VBc3NpZ24iLCJpc0FjdHVhbE5hTiIsImFycmF5U2xpY2UiLCJhcnJheVNsaWNlQXBwbHkiLCJvcmlnQXJyYXlTbGljZSIsIm9yaWdBcnJheVNsaWNlQXBwbHkiLCJzdHJTbGljZSIsInN0ckluZGV4T2YiLCJwdXNoQ2FsbCIsImlzRW51bSIsImFycmF5U29ydCIsImhhc1Vuc2hpZnRSZXR1cm5WYWx1ZUJ1ZyIsInByb3Blcmx5Qm94ZXNDb250ZXh0IiwicmVkdWNlQ29lcmNlc1RvT2JqZWN0IiwiX19fIiwicmVkdWNlUmlnaHRDb2VyY2VzVG9PYmplY3QiLCJoYXNGaXJlZm94MkluZGV4T2ZCdWciLCJoYXNGaXJlZm94Mkxhc3RJbmRleE9mQnVnIiwibGFzdEluZGV4T2YiLCJzcGxpY2VOb29wUmV0dXJuc0VtcHR5QXJyYXkiLCJkZWxldGVDb3VudCIsInNwbGljZVdvcmtzV2l0aEVtcHR5T2JqZWN0Iiwic3BsaWNlV29ya3NXaXRoTGFyZ2VTcGFyc2VBcnJheXMiLCJzcGxpY2VXb3Jrc1dpdGhTbWFsbFNwYXJzZUFycmF5cyIsImFjdHVhbFN0YXJ0IiwiYWN0dWFsRGVsZXRlQ291bnQiLCJpdGVtQ291bnQiLCJtYXhLIiwibWluSyIsImhhc1N0cmluZ0pvaW5CdWciLCJvcmlnaW5hbEpvaW4iLCJzZXAiLCJoYXNKb2luVW5kZWZpbmVkQnVnIiwicHVzaFNoaW0iLCJwdXNoSXNOb3RHZW5lcmljIiwicHVzaFVuZGVmaW5lZElzV2VpcmQiLCJzb3J0SWdub3Jlc05vbkZ1bmN0aW9ucyIsImUyIiwic29ydFRocm93c09uUmVnZXgiLCJzb3J0SWdub3Jlc1VuZGVmaW5lZCIsImNvbXBhcmVGbiIsImhhc1N0cmluZ0VudW1CdWciLCIkd2lkdGgiLCIkaGVpZ2h0IiwiJHRvcCIsIiRsb2NhbFN0b3JhZ2UiLCJkb250RW51bXNMZW5ndGgiLCJpc0ZuIiwiaXNTdHIiLCJkb250RW51bSIsImtleXNXb3Jrc1dpdGhBcmd1bWVudHMiLCJrZXlzSGFzQXJndW1lbnRzTGVuZ3RoQnVnIiwiYXJnS2V5cyIsImhhc1RvRGF0ZVN0cmluZ0Zvcm1hdEJ1ZyIsImhhc1RvU3RyaW5nRm9ybWF0QnVnIiwiaGFzTmVnYXRpdmVNb250aFllYXJCdWciLCJnZXRVVENNb250aCIsImFOZWdhdGl2ZVRlc3REYXRlIiwiYVBvc2l0aXZlVGVzdERhdGUiLCJoYXNUb1VUQ1N0cmluZ0Zvcm1hdEJ1ZyIsInRvVVRDU3RyaW5nIiwidGltZVpvbmVPZmZzZXQiLCJnZXRUaW1lem9uZU9mZnNldCIsInRvRGF0ZVN0cmluZyIsIm9yaWdpbmFsR2V0RnVsbFllYXIiLCJnZXRGdWxsWWVhciIsIm9yaWdpbmFsR2V0TW9udGgiLCJnZXRNb250aCIsIm9yaWdpbmFsR2V0RGF0ZSIsImdldERhdGUiLCJvcmlnaW5hbEdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDRnVsbFllYXIiLCJvcmlnaW5hbEdldFVUQ01vbnRoIiwib3JpZ2luYWxHZXRVVENEYXRlIiwiZ2V0VVRDRGF0ZSIsIm9yaWdpbmFsR2V0VVRDRGF5IiwiZ2V0VVRDRGF5Iiwib3JpZ2luYWxHZXRVVENIb3VycyIsImdldFVUQ0hvdXJzIiwib3JpZ2luYWxHZXRVVENNaW51dGVzIiwiZ2V0VVRDTWludXRlcyIsIm9yaWdpbmFsR2V0VVRDU2Vjb25kcyIsImdldFVUQ1NlY29uZHMiLCJvcmlnaW5hbEdldFVUQ01pbGxpc2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsImRheU5hbWUiLCJtb250aE5hbWUiLCJkYXlzSW5Nb250aCIsInllYXIiLCJkYXkiLCJob3VyIiwibWludXRlIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsInRpbWV6b25lT2Zmc2V0IiwiaG91cnNPZmZzZXQiLCJtaW51dGVzT2Zmc2V0IiwibmVnYXRpdmVEYXRlIiwibmVnYXRpdmVZZWFyU3RyaW5nIiwiaGFzTmVnYXRpdmVEYXRlQnVnIiwidG9JU09TdHJpbmciLCJoYXNTYWZhcmk1MURhdGVCdWciLCJkYXRlVG9KU09OSXNTdXBwb3J0ZWQiLCJ0b0pTT04iLCJ0diIsInRvSVNPIiwic3VwcG9ydHNFeHRlbmRlZFllYXJzIiwiYWNjZXB0c0ludmFsaWREYXRlcyIsImRvZXNOb3RQYXJzZVkyS05ld1llYXIiLCJtYXhTYWZlVW5zaWduZWQzMkJpdCIsImhhc1NhZmFyaVNpZ25lZEludEJ1ZyIsIk5hdGl2ZURhdGUiLCJEYXRlU2hpbSIsIlkiLCJEIiwiaCIsIm1zIiwic2Vjb25kcyIsIm1pbGxpcyIsIm1zVG9TaGlmdCIsInNUb1NoaWZ0IiwiaXNvRGF0ZUV4cHJlc3Npb24iLCJtb250aHMiLCJkYXlGcm9tTW9udGgiLCJ0b1VUQyIsIlVUQyIsIm1pbGxpc2Vjb25kIiwiaXNMb2NhbFRpbWUiLCJzaWduT2Zmc2V0IiwiaG91ck9mZnNldCIsIm1pbnV0ZU9mZnNldCIsImhhc01pbnV0ZXNPclNlY29uZHNPck1pbGxpc2Vjb25kcyIsImhhc1RvRml4ZWRCdWdzIiwidG9GaXhlZEhlbHBlcnMiLCJiYXNlIiwibXVsdGlwbHkiLCJjMiIsImRpdmlkZSIsIm51bVRvU3RyaW5nIiwieDIiLCJ0b0ZpeGVkU2hpbSIsImZyYWN0aW9uRGlnaXRzIiwieiIsImhhc1RvUHJlY2lzaW9uVW5kZWZpbmVkQnVnIiwidG9QcmVjaXNpb24iLCJvcmlnaW5hbFRvUHJlY2lzaW9uIiwicHJlY2lzaW9uIiwiY29tcGxpYW50RXhlY05wY2ciLCJtYXhTYWZlMzJCaXRJbnQiLCJzZXBhcmF0b3IyIiwibGFzdExlbmd0aCIsImxhc3RMYXN0SW5kZXgiLCJzZXBhcmF0b3JDb3B5Iiwic3BsaXRMaW1pdCIsInN0cl9yZXBsYWNlIiwicmVwbGFjZVJlcG9ydHNHcm91cHNDb3JyZWN0bHkiLCJncm91cHMiLCJncm91cCIsImhhc0NhcHR1cmluZ0dyb3VwcyIsIm9yaWdpbmFsTGFzdEluZGV4Iiwic3RyaW5nX3N1YnN0ciIsImhhc05lZ2F0aXZlU3Vic3RyQnVnIiwibm9ybWFsaXplZFN0YXJ0IiwiemVyb1dpZHRoIiwid3NSZWdleENoYXJzIiwidHJpbUJlZ2luUmVnZXhwIiwidHJpbUVuZFJlZ2V4cCIsImhhc1RyaW1XaGl0ZXNwYWNlQnVnIiwiaGFzTGFzdEluZGV4QnVnIiwibnVtUG9zIiwic2VhcmNoTGVuIiwib3JpZ2luYWxMYXN0SW5kZXhPZiIsIm9yaWdQYXJzZUludCIsImhleFJlZ2V4IiwicmFkaXgiLCJkZWZhdWx0ZWRSYWRpeCIsIm9yaWdQYXJzZUZsb2F0IiwiaW5wdXRTdHJpbmciLCJlcnJvclRvU3RyaW5nU2hpbSIsIm1zZyIsImVuc3VyZU5vbkVudW1lcmFibGUiLCJyZWdleFRvU3RyaW5nIiwiZyIsImRlcHRoTnVtIiwiZW1wdHlTeW1ib2xEZXNjIl0sIm1hcHBpbmdzIjoicUdBRUEsSUFBSUEsRUFBcUIsRUFBUSxRQUM3QkMsRUFBTyxFQUFRLFFBQ2ZDLEVBQTRCLEVBQVEsUUFDcENDLEVBQU0sRUFBUSxRQUNkQyxFQUFjLEVBQVEsUUFDdEJDLEVBQWEsRUFBUSxRQUNyQkMsRUFBVyxFQUFRLFFBQ25CQyxFQUFXLEVBQVEsUUFDbkJDLEVBQVcsRUFBUSxRQUNuQkMsRUFBWSxFQUFRLFFBQ3BCQyxFQUFXLEVBQVEsUUFHbkJDLEVBQWNDLE9BQU8sS0FDckJDLEVBQWlDLE1BQW5CRixFQUFZLE1BQWdCLEtBQUtBLEdBRS9DRyxFQUFXTCxFQUFVLDBCQUV6Qk0sRUFBT0MsUUFBVSxTQUFhQyxHQUM3QixJQVNJQyxFQVRBQyxFQUFJWixFQUFTYSxNQUNiQyxFQUFPUixHQUFlSCxFQUFTUyxHQUFLTCxFQUFTSyxFQUFHLElBQU1BLEVBQ3RERyxFQUFNaEIsRUFBU2UsRUFBS0UsUUFHeEIsSUFBS2xCLEVBQVdZLEdBQ2YsTUFBTSxJQUFJTyxVQUFVLG1EQUlqQkMsVUFBVUYsT0FBUyxJQUN0QkwsRUFBSU8sVUFBVSxJQUtmLElBRkEsSUFBSUMsRUFBSTFCLEVBQW1CbUIsRUFBR0csR0FDMUJLLEVBQUksRUFDREEsRUFBSUwsR0FBSyxDQUNmLElBQUlNLEVBQUtwQixFQUFTbUIsR0FDZEUsRUFBV3pCLEVBQVllLEVBQUdTLEdBQzlCLEdBQUlDLEVBQVUsQ0FDYixJ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LFFBQTZCLElBQWpCRSxVQUFVLEtBQzVDeXlELEVBQVdodkMsRUFBVXpqQixVQUFVLEtBR2hDLElBQUlDLEVBQUkxQixFQUFtQm1CLEVBQUcsR0FFOUIsT0FEQXFhLEVBQWlCOVosRUFBR1AsRUFBR3VhLEVBQVcsRUFBR3c0QyxHQUM5Qnh5RCxJLGtDQ2xCUixFQUFRLE9BQVIsSSxrQ0NFQVgsRUFBT0MsUUFBVSxTQUF1QjhHLEdBQ3ZDLE1BQTJCLG1CQUFiQSxLQUE2QkEsRUFBU3ZGLFksa0NDSHJELElBQUlxbEIsRUFBYyxFQUFRLFFBSTFCN21CLEVBQU9DLFFBQVUsU0FBcUIwbUIsR0FDckMsT0FBSWptQixVQUFVRixPQUFTLEVBQ2ZxbUIsRUFBWUYsRUFBT2ptQixVQUFVLElBRTlCbW1CLEVBQVlGLEssa0NDUnBCLElBQUlFLEVBQWMsRUFBUSxRQUkxQjdtQixFQUFPQyxRQUFVLFNBQXFCMG1CLEdBQ3JDLE9BQUlqbUIsVUFBVUYsT0FBUyxFQUNmcW1CLEVBQVlGLEVBQU9qbUIsVUFBVSxJQUU5Qm1tQixFQUFZRixLLGtDQ1JwQixJQUFJaGEsRUFBYSxFQUFRLE9BQVIsR0FFYmpMLEVBQWlCLEVBQVEsUUFDekI0QixFQUFPekQsT0FBTzBELHlCQUVsQnZELEVBQU9DLFFBQVUsV0FDaEIsSUFBSzBNLEdBQThCLG1CQUFUckosRUFDekIsT0FBTyxLQUdSLElBQUlFLEVBQU9GLEVBQUtrQixPQUFPaEQsVUFBVyxlQUNsQyxJQUFLZ0MsR0FBNEIsbUJBQWJBLEVBQUtpSixJQUN4QixPQUFPL0ssRUFHUixJQUFJMHhELEVBQWtCNXZELEVBQUtpSixJQUFJdEksS0FBS0ssVUFFcEMsWUFEZ0QsSUFBcEI0dUQsR0FBdUQsS0FBcEJBLElBQ1QsTUFBL0I1dkQsRUFBS2lKLElBQUl0SSxLQUFLSyxPQUFPLE1BR3JDaEIsRUFBS2lKLElBRkovSyIsImZpbGUiOiJ2ZW5kb3JzLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvQXJyYXlTcGVjaWVzQ3JlYXRlJyk7XG52YXIgQ2FsbCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvQ2FsbCcpO1xudmFyIENyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3cgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0NyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3cnKTtcbnZhciBHZXQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0dldCcpO1xudmFyIEhhc1Byb3BlcnR5ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9IYXNQcm9wZXJ0eScpO1xudmFyIElzQ2FsbGFibGUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0lzQ2FsbGFibGUnKTtcbnZhciBUb1VpbnQzMiA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVG9VaW50MzInKTtcbnZhciBUb09iamVjdCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVG9PYmplY3QnKTtcbnZhciBUb1N0cmluZyA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVG9TdHJpbmcnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9oZWxwZXJzL2NhbGxCb3VuZCcpO1xudmFyIGlzU3RyaW5nID0gcmVxdWlyZSgnaXMtc3RyaW5nJyk7XG5cbi8vIENoZWNrIGZhaWx1cmUgb2YgYnktaW5kZXggYWNjZXNzIG9mIHN0cmluZyBjaGFyYWN0ZXJzIChJRSA8IDkpIGFuZCBmYWlsdXJlIG9mIGAwIGluIGJveGVkU3RyaW5nYCAoUmhpbm8pXG52YXIgYm94ZWRTdHJpbmcgPSBPYmplY3QoJ2EnKTtcbnZhciBzcGxpdFN0cmluZyA9IGJveGVkU3RyaW5nWzBdICE9PSAnYScgfHwgISgwIGluIGJveGVkU3RyaW5nKTtcblxudmFyIHN0clNwbGl0ID0gY2FsbEJvdW5kKCdTdHJpbmcucHJvdG90eXBlLnNwbGl0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4pIHtcblx0dmFyIE8gPSBUb09iamVjdCh0aGlzKTtcblx0dmFyIHNlbGYgPSBzcGxpdFN0cmluZyAmJiBpc1N0cmluZyhPKSA/IHN0clNwbGl0KE8sICcnKSA6IE87XG5cdHZhciBsZW4gPSBUb1VpbnQzMihzZWxmLmxlbmd0aCk7XG5cblx0Ly8gSWYgbm8gY2FsbGJhY2sgZnVuY3Rpb24gb3IgaWYgY2FsbGJhY2sgaXMgbm90IGEgY2FsbGFibGUgZnVuY3Rpb25cblx0aWYgKCFJc0NhbGxhYmxlKGNhbGxiYWNrZm4pKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkucHJvdG90eXBlLm1hcCBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblx0fVxuXG5cdHZhciBUO1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRUID0gYXJndW1lbnRzWzFdO1xuXHR9XG5cblx0dmFyIEEgPSBBcnJheVNwZWNpZXNDcmVhdGUoTywgbGVuKTtcblx0dmFyIGsgPSAwO1xuXHR3aGlsZSAoayA8IGxlbikge1xuXHRcdHZhciBQayA9IFRvU3RyaW5nKGspO1xuXHRcdHZhciBrUHJlc2VudCA9IEhhc1Byb3BlcnR5KE8sIFBrKTtcblx0XHRpZiAoa1ByZXNlbnQpIHtcblx0XHRcdHZhciBrVmFsdWUgPSBHZXQoTywgUGspO1xuXHRcdFx0dmFyIG1hcHBlZFZhbHVlID0gQ2FsbChjYWxsYmFja2ZuLCBULCBba1ZhbHVlLCBrLCBPXSk7XG5cdFx0XHRDcmVhdGVEYXRhUHJvcGVydHlPclRocm93KEEsIFBrLCBtYXBwZWRWYWx1ZSk7XG5cdFx0fVxuXHRcdGsgKz0gMTtcblx0fVxuXG5cdHJldHVybiBBO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlcXVpcmVQcm9taXNlID0gcmVxdWlyZSgnLi9yZXF1aXJlUHJvbWlzZScpO1xuXG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltQWxsU2V0dGxlZCgpIHtcblx0cmVxdWlyZVByb21pc2UoKTtcblxuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoUHJvbWlzZSwgeyBhbGxTZXR0bGVkOiBwb2x5ZmlsbCB9LCB7XG5cdFx0YWxsU2V0dGxlZDogZnVuY3Rpb24gdGVzdEFsbFNldHRsZWQoKSB7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5hbGxTZXR0bGVkICE9PSBwb2x5ZmlsbDtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltUGFkRW5kKCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgeyBwYWRFbmQ6IHBvbHlmaWxsIH0sIHtcblx0XHRwYWRFbmQ6IGZ1bmN0aW9uIHRlc3RQYWRFbmQoKSB7XG5cdFx0XHRyZXR1cm4gU3RyaW5nLnByb3RvdHlwZS5wYWRFbmQgIT09IHBvbHlmaWxsO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0cmV0dXJuIHR5cGVvZiBPYmplY3QuZW50cmllcyA9PT0gJ2Z1bmN0aW9uJyA/IE9iamVjdC5lbnRyaWVzIDogaW1wbGVtZW50YXRpb247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyB2YXIgQ29uc3RydWN0ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Db25zdHJ1Y3QnKTtcbnZhciBHZXQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0dldCcpO1xudmFyIFNldCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvU2V0Jyk7XG52YXIgU3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9TcGVjaWVzQ29uc3RydWN0b3InKTtcbnZhciBUb0xlbmd0aCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVG9MZW5ndGgnKTtcbnZhciBUb1N0cmluZyA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVG9TdHJpbmcnKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9UeXBlJyk7XG52YXIgZmxhZ3NHZXR0ZXIgPSByZXF1aXJlKCdyZWdleHAucHJvdG90eXBlLmZsYWdzJyk7XG5cbnZhciBSZWdFeHBTdHJpbmdJdGVyYXRvciA9IHJlcXVpcmUoJy4vaGVscGVycy9SZWdFeHBTdHJpbmdJdGVyYXRvcicpO1xudmFyIE9yaWdSZWdFeHAgPSBSZWdFeHA7XG5cbnZhciBDcmVhdGVSZWdFeHBTdHJpbmdJdGVyYXRvciA9IGZ1bmN0aW9uIENyZWF0ZVJlZ0V4cFN0cmluZ0l0ZXJhdG9yKFIsIFMsIGdsb2JhbCwgZnVsbFVuaWNvZGUpIHtcblx0aWYgKFR5cGUoUykgIT09ICdTdHJpbmcnKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignXCJTXCIgdmFsdWUgbXVzdCBiZSBhIFN0cmluZycpO1xuXHR9XG5cdGlmIChUeXBlKGdsb2JhbCkgIT09ICdCb29sZWFuJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZ2xvYmFsXCIgdmFsdWUgbXVzdCBiZSBhIEJvb2xlYW4nKTtcblx0fVxuXHRpZiAoVHlwZShmdWxsVW5pY29kZSkgIT09ICdCb29sZWFuJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZnVsbFVuaWNvZGVcIiB2YWx1ZSBtdXN0IGJlIGEgQm9vbGVhbicpO1xuXHR9XG5cblx0dmFyIGl0ZXJhdG9yID0gbmV3IFJlZ0V4cFN0cmluZ0l0ZXJhdG9yKFIsIFMsIGdsb2JhbCwgZnVsbFVuaWNvZGUpO1xuXHRyZXR1cm4gaXRlcmF0b3I7XG59O1xuXG52YXIgc3VwcG9ydHNDb25zdHJ1Y3RpbmdXaXRoRmxhZ3MgPSAnZmxhZ3MnIGluIFJlZ0V4cC5wcm90b3R5cGU7XG5cbnZhciBjb25zdHJ1Y3RSZWdleFdpdGhGbGFncyA9IGZ1bmN0aW9uIGNvbnN0cnVjdFJlZ2V4KEMsIFIpIHtcblx0dmFyIG1hdGNoZXI7XG5cdC8vIHdvcmthcm91bmQgZm9yIG9sZGVyIGVuZ2luZXMgdGhhdCBsYWNrIFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3Ncblx0dmFyIGZsYWdzID0gJ2ZsYWdzJyBpbiBSID8gR2V0KFIsICdmbGFncycpIDogVG9TdHJpbmcoZmxhZ3NHZXR0ZXIoUikpO1xuXHRpZiAoc3VwcG9ydHNDb25zdHJ1Y3RpbmdXaXRoRmxhZ3MgJiYgdHlwZW9mIGZsYWdzID09PSAnc3RyaW5nJykge1xuXHRcdG1hdGNoZXIgPSBuZXcgQyhSLCBmbGFncyk7XG5cdH0gZWxzZSBpZiAoQyA9PT0gT3JpZ1JlZ0V4cCkge1xuXHRcdC8vIHdvcmthcm91bmQgZm9yIG9sZGVyIGVuZ2luZXMgdGhhdCBjYW4gbm90IGNvbnN0cnVjdCBhIFJlZ0V4cCB3aXRoIGZsYWdzXG5cdFx0bWF0Y2hlciA9IG5ldyBDKFIuc291cmNlLCBmbGFncyk7XG5cdH0gZWxzZSB7XG5cdFx0bWF0Y2hlciA9IG5ldyBDKFIsIGZsYWdzKTtcblx0fVxuXHRyZXR1cm4geyBmbGFnczogZmxhZ3MsIG1hdGNoZXI6IG1hdGNoZXIgfTtcbn07XG5cbnZhciByZWdleE1hdGNoQWxsID0gZnVuY3Rpb24gU3ltYm9sTWF0Y2hBbGwoc3RyaW5nKSB7XG5cdHZhciBSID0gdGhpcztcblx0aWYgKFR5cGUoUikgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignXCJ0aGlzXCIgdmFsdWUgbXVzdCBiZSBhbiBPYmplY3QnKTtcblx0fVxuXHR2YXIgUyA9IFRvU3RyaW5nKHN0cmluZyk7XG5cdHZhciBDID0gU3BlY2llc0NvbnN0cnVjdG9yKFIsIE9yaWdSZWdFeHApO1xuXG5cdHZhciB0bXAgPSBjb25zdHJ1Y3RSZWdleFdpdGhGbGFncyhDLCBSKTtcblx0Ly8gdmFyIGZsYWdzID0gVG9TdHJpbmcoR2V0KFIsICdmbGFncycpKTtcblx0dmFyIGZsYWdzID0gdG1wLmZsYWdzO1xuXHQvLyB2YXIgbWF0Y2hlciA9IENvbnN0cnVjdChDLCBbUiwgZmxhZ3NdKTtcblx0dmFyIG1hdGNoZXIgPSB0bXAubWF0Y2hlcjtcblxuXHR2YXIgbGFzdEluZGV4ID0gVG9MZW5ndGgoR2V0KFIsICdsYXN0SW5kZXgnKSk7XG5cdFNldChtYXRjaGVyLCAnbGFzdEluZGV4JywgbGFzdEluZGV4LCB0cnVlKTtcblx0dmFyIGdsb2JhbCA9IGZsYWdzLmluZGV4T2YoJ2cnKSA+IC0xO1xuXHR2YXIgZnVsbFVuaWNvZGUgPSBmbGFncy5pbmRleE9mKCd1JykgPiAtMTtcblx0cmV0dXJuIENyZWF0ZVJlZ0V4cFN0cmluZ0l0ZXJhdG9yKG1hdGNoZXIsIFMsIGdsb2JhbCwgZnVsbFVuaWNvZGUpO1xufTtcblxudmFyIGRlZmluZVAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmlmIChkZWZpbmVQICYmIGdPUEQpIHtcblx0dmFyIGRlc2MgPSBnT1BEKHJlZ2V4TWF0Y2hBbGwsICduYW1lJyk7XG5cdGlmIChkZXNjICYmIGRlc2MuY29uZmlndXJhYmxlKSB7XG5cdFx0ZGVmaW5lUChyZWdleE1hdGNoQWxsLCAnbmFtZScsIHsgdmFsdWU6ICdbU3ltYm9sLm1hdGNoQWxsXScgfSk7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZWdleE1hdGNoQWxsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJE1hcCA9IHR5cGVvZiBNYXAgPT09ICdmdW5jdGlvbicgJiYgTWFwLnByb3RvdHlwZSA/IE1hcCA6IG51bGw7XG52YXIgJFNldCA9IHR5cGVvZiBTZXQgPT09ICdmdW5jdGlvbicgJiYgU2V0LnByb3RvdHlwZSA/IFNldCA6IG51bGw7XG5cbnZhciBleHBvcnRlZDtcblxuaWYgKCEkTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuXHRleHBvcnRlZCA9IGZ1bmN0aW9uIGlzTWFwKHgpIHtcblx0XHQvLyBgTWFwYCBpcyBub3QgcHJlc2VudCBpbiB0aGlzIGVudmlyb25tZW50LlxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxudmFyICRtYXBIYXMgPSAkTWFwID8gTWFwLnByb3RvdHlwZS5oYXMgOiBudWxsO1xudmFyICRzZXRIYXMgPSAkU2V0ID8gU2V0LnByb3RvdHlwZS5oYXMgOiBudWxsO1xuaWYgKCFleHBvcnRlZCAmJiAhJG1hcEhhcykge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcblx0ZXhwb3J0ZWQgPSBmdW5jdGlvbiBpc01hcCh4KSB7XG5cdFx0Ly8gYE1hcGAgZG9lcyBub3QgaGF2ZSBhIGBoYXNgIG1ldGhvZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlZCB8fCBmdW5jdGlvbiBpc01hcCh4KSB7XG5cdGlmICgheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0dHJ5IHtcblx0XHQkbWFwSGFzLmNhbGwoeCk7XG5cdFx0aWYgKCRzZXRIYXMpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdCRzZXRIYXMuY2FsbCh4KTtcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB4IGluc3RhbmNlb2YgJE1hcDsgLy8gY29yZS1qcyB3b3JrYXJvdW5kLCBwcmUtdjIuNS4wXG5cdH0gY2F0Y2ggKGUpIHt9XG5cdHJldHVybiBmYWxzZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgaGFzU3ltYm9scyA9IHJlcXVpcmUoJ2hhcy1zeW1ib2xzJykoKTtcblxuaWYgKGhhc1N5bWJvbHMpIHtcblx0dmFyIHN5bVRvU3RyID0gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZztcblx0dmFyIHN5bVN0cmluZ1JlZ2V4ID0gL15TeW1ib2xcXCguKlxcKSQvO1xuXHR2YXIgaXNTeW1ib2xPYmplY3QgPSBmdW5jdGlvbiBpc1JlYWxTeW1ib2xPYmplY3QodmFsdWUpIHtcblx0XHRpZiAodHlwZW9mIHZhbHVlLnZhbHVlT2YoKSAhPT0gJ3N5bWJvbCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHN5bVN0cmluZ1JlZ2V4LnRlc3Qoc3ltVG9TdHIuY2FsbCh2YWx1ZSkpO1xuXHR9O1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcblx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJykge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdGlmICh0b1N0ci5jYWxsKHZhbHVlKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBpc1N5bWJvbE9iamVjdCh2YWx1ZSk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fTtcbn0gZWxzZSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuXHRcdC8vIHRoaXMgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCBTeW1ib2xzLlxuXHRcdHJldHVybiBmYWxzZSAmJiB2YWx1ZTtcblx0fTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbUVudHJpZXMoKSB7XG5cdHZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG5cdGRlZmluZShPYmplY3QsIHsgZnJvbUVudHJpZXM6IHBvbHlmaWxsIH0sIHtcblx0XHRmcm9tRW50cmllczogZnVuY3Rpb24gdGVzdEVudHJpZXMoKSB7XG5cdFx0XHRyZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzICE9PSBwb2x5ZmlsbDtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBPYmplY3QudmFsdWVzL09iamVjdC5lbnRyaWVzIGFyZSBzdGFnZSA0LCBpbiBFUzIwMTdcbnJlcXVpcmUoJ29iamVjdC52YWx1ZXMvc2hpbScpKCk7XG5yZXF1aXJlKCdvYmplY3QuZW50cmllcy9zaGltJykoKTtcblxuLy8gU3RyaW5nI3BhZFN0YXJ0L1N0cmluZyNwYWRFbmQgYXJlIHN0YWdlIDQsIGluIEVTMjAxN1xucmVxdWlyZSgnc3RyaW5nLnByb3RvdHlwZS5wYWRzdGFydC9zaGltJykoKTtcbnJlcXVpcmUoJ3N0cmluZy5wcm90b3R5cGUucGFkZW5kL3NoaW0nKSgpO1xuXG4vLyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyBpcyBzdGFnZSA0LCBpbiBFUzIwMTdcbnJlcXVpcmUoJ29iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzL3NoaW0nKSgpO1xuXG5yZXF1aXJlKCcuL2VzMjAxOCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgZ2xvYmFsLXJlcXVpcmU6IDAgKi9cblxuLy8gRml4ZXMgc3VwZXItY29uc3RydWN0b3IgY2FsbHMgaW4gSUU5LzEwXG5yZXF1aXJlKCdpbWEtYmFiZWw2LXBvbHlmaWxsJyk7XG5cbi8vIGRvY3VtZW50LmNvbnRhaW5zIHBvbHlmaWxsXG5yZXF1aXJlKCcuL2RvY3VtZW50LWNvbnRhaW5zJyk7XG5cbi8vIGNvbnNvbGUuKiBwb2x5ZmlsbCBmb3Igb2xkIGJyb3dzZXJzXG5yZXF1aXJlKCdjb25zb2xlLXBvbHlmaWxsJyk7XG5cbnJlcXVpcmUoJ3doYXR3Zy1mZXRjaCcpO1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgLy8gRWxlbWVudC5jbGFzc0xpc3QgcG9seWZpbGxcbiAgcmVxdWlyZSgnY2xhc3NsaXN0LXBvbHlmaWxsJyk7XG5cbiAgLy8gRWxlbWVudC5jbG9zZXN0IHBvbHlmaWxsXG4gIHJlcXVpcmUoJ2VsZW1lbnQtY2xvc2VzdCcpO1xuXG4gIC8vIFBvbHlmaWxsIGZvciBzbW9vdGggc2Nyb2xsaW5nIGJlaGF2aW9yXG4gIHJlcXVpcmUoJ3Ntb290aHNjcm9sbC1wb2x5ZmlsbCcpLnBvbHlmaWxsKCk7XG5cbiAgLy8gUG9seWZpbGwgd2luZG93Lm1hdGNoTWVkaWEgKHByaW1hcmlseSBmb3IgSUU5KVxuICByZXF1aXJlKCdtYXRjaG1lZGlhLXBvbHlmaWxsJyk7XG4gIHJlcXVpcmUoJ21hdGNobWVkaWEtcG9seWZpbGwvbWF0Y2hNZWRpYS5hZGRMaXN0ZW5lcicpO1xuXG4gIC8vIFBvbHlmaWxsIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gKGZvciBJRSA8IDExKVxuICByZXF1aXJlKCd3aW5kb3ctbG9jYXRpb24tb3JpZ2luJyk7XG5cbiAgLy8gZm9yIDw9IElFIDksIE9wZXJhIG1pbmlcbiAgcmVxdWlyZSgnaW5wdXQtcGxhY2Vob2xkZXItcG9seWZpbGwnKTtcblxuICByZXF1aXJlKCdpbnRlcnNlY3Rpb24tb2JzZXJ2ZXInKTtcblxuICAvLyBLZXlib2FyZEV2ZW50LmtleSBzaGltXG4gIHJlcXVpcmUoJ3NoaW0ta2V5Ym9hcmQtZXZlbnQta2V5Jyk7XG59XG5cbi8vIDpmb2N1cy12aXNpYmxlIHNoaW1cbnJlcXVpcmUoJ2ZvY3VzLXZpc2libGUnKTtcblxucmVxdWlyZSgncmFmL3BvbHlmaWxsJyk7XG5cbmdsb2JhbC5yZXF1ZXN0SWRsZUNhbGxiYWNrID0gcmVxdWlyZSgncmljLXNoaW0nKTtcblxuZ2xvYmFsLmNhbmNlbElkbGVDYWxsYmFjayA9IGdsb2JhbC5yZXF1ZXN0SWRsZUNhbGxiYWNrLmNhbmNlbElkbGVDYWxsYmFjaztcblxudmFyIGhhc1N5bWJvbHMgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5pdGVyYXRvcjtcblxuLyogZ2xvYmFscyBUb3VjaExpc3QgKi9cbmlmIChoYXNTeW1ib2xzICYmIHR5cGVvZiBUb3VjaExpc3QgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFRvdWNoTGlzdC5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSAhPT0gJ2Z1bmN0aW9uJykge1xuICBUb3VjaExpc3QucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBBcnJheS5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJE1hdGggPSBHZXRJbnRyaW5zaWMoJyVNYXRoJScpO1xuXG52YXIgVG9OdW1iZXIgPSByZXF1aXJlKCcuL1RvTnVtYmVyJyk7XG52YXIgJGlzTmFOID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc05hTicpO1xudmFyICRpc0Zpbml0ZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNGaW5pdGUnKTtcbnZhciAkc2lnbiA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvc2lnbicpO1xuXG52YXIgJGZsb29yID0gJE1hdGguZmxvb3I7XG52YXIgJGFicyA9ICRNYXRoLmFicztcblxuLy8gaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTkuNFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvSW50ZWdlcih2YWx1ZSkge1xuXHR2YXIgbnVtYmVyID0gVG9OdW1iZXIodmFsdWUpO1xuXHRpZiAoJGlzTmFOKG51bWJlcikpIHsgcmV0dXJuIDA7IH1cblx0aWYgKG51bWJlciA9PT0gMCB8fCAhJGlzRmluaXRlKG51bWJlcikpIHsgcmV0dXJuIG51bWJlcjsgfVxuXHRyZXR1cm4gJHNpZ24obnVtYmVyKSAqICRmbG9vcigkYWJzKG51bWJlcikpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcbnZhciAkTnVtYmVyID0gR2V0SW50cmluc2ljKCclTnVtYmVyJScpO1xudmFyICRSZWdFeHAgPSBHZXRJbnRyaW5zaWMoJyVSZWdFeHAlJyk7XG52YXIgJHBhcnNlSW50ZWdlciA9IEdldEludHJpbnNpYygnJXBhcnNlSW50JScpO1xuXG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnLi4vaGVscGVycy9jYWxsQm91bmQnKTtcbnZhciByZWdleFRlc3RlciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvcmVnZXhUZXN0ZXInKTtcbnZhciBpc1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNQcmltaXRpdmUnKTtcblxudmFyICRzdHJTbGljZSA9IGNhbGxCb3VuZCgnU3RyaW5nLnByb3RvdHlwZS5zbGljZScpO1xudmFyIGlzQmluYXJ5ID0gcmVnZXhUZXN0ZXIoL14wYlswMV0rJC9pKTtcbnZhciBpc09jdGFsID0gcmVnZXhUZXN0ZXIoL14wb1swLTddKyQvaSk7XG52YXIgaXNJbnZhbGlkSGV4TGl0ZXJhbCA9IHJlZ2V4VGVzdGVyKC9eWy0rXTB4WzAtOWEtZl0rJC9pKTtcbnZhciBub25XUyA9IFsnXFx1MDA4NScsICdcXHUyMDBiJywgJ1xcdWZmZmUnXS5qb2luKCcnKTtcbnZhciBub25XU3JlZ2V4ID0gbmV3ICRSZWdFeHAoJ1snICsgbm9uV1MgKyAnXScsICdnJyk7XG52YXIgaGFzTm9uV1MgPSByZWdleFRlc3Rlcihub25XU3JlZ2V4KTtcblxuLy8gd2hpdGVzcGFjZSBmcm9tOiBodHRwczovL2VzNS5naXRodWIuaW8vI3gxNS41LjQuMjBcbi8vIGltcGxlbWVudGF0aW9uIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2Jsb2IvdjMuNC4wL2VzNS1zaGltLmpzI0wxMzA0LUwxMzI0XG52YXIgd3MgPSBbXG5cdCdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycsXG5cdCdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOCcsXG5cdCdcXHUyMDI5XFx1RkVGRidcbl0uam9pbignJyk7XG52YXIgdHJpbVJlZ2V4ID0gbmV3IFJlZ0V4cCgnKF5bJyArIHdzICsgJ10rKXwoWycgKyB3cyArICddKyQpJywgJ2cnKTtcbnZhciAkcmVwbGFjZSA9IGNhbGxCb3VuZCgnU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlJyk7XG52YXIgJHRyaW0gPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0cmV0dXJuICRyZXBsYWNlKHZhbHVlLCB0cmltUmVnZXgsICcnKTtcbn07XG5cbnZhciBUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vVG9QcmltaXRpdmUnKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b251bWJlclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvTnVtYmVyKGFyZ3VtZW50KSB7XG5cdHZhciB2YWx1ZSA9IGlzUHJpbWl0aXZlKGFyZ3VtZW50KSA/IGFyZ3VtZW50IDogVG9QcmltaXRpdmUoYXJndW1lbnQsICROdW1iZXIpO1xuXHRpZiAodHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBhIFN5bWJvbCB2YWx1ZSB0byBhIG51bWJlcicpO1xuXHR9XG5cdGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG5cdFx0aWYgKGlzQmluYXJ5KHZhbHVlKSkge1xuXHRcdFx0cmV0dXJuIFRvTnVtYmVyKCRwYXJzZUludGVnZXIoJHN0clNsaWNlKHZhbHVlLCAyKSwgMikpO1xuXHRcdH0gZWxzZSBpZiAoaXNPY3RhbCh2YWx1ZSkpIHtcblx0XHRcdHJldHVybiBUb051bWJlcigkcGFyc2VJbnRlZ2VyKCRzdHJTbGljZSh2YWx1ZSwgMiksIDgpKTtcblx0XHR9IGVsc2UgaWYgKGhhc05vbldTKHZhbHVlKSB8fCBpc0ludmFsaWRIZXhMaXRlcmFsKHZhbHVlKSkge1xuXHRcdFx0cmV0dXJuIE5hTjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHRyaW1tZWQgPSAkdHJpbSh2YWx1ZSk7XG5cdFx0XHRpZiAodHJpbW1lZCAhPT0gdmFsdWUpIHtcblx0XHRcdFx0cmV0dXJuIFRvTnVtYmVyKHRyaW1tZWQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gJE51bWJlcih2YWx1ZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG5cdHZhciBzdHIgPSB0b1N0ci5jYWxsKHZhbHVlKTtcblx0dmFyIGlzQXJncyA9IHN0ciA9PT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cdGlmICghaXNBcmdzKSB7XG5cdFx0aXNBcmdzID0gc3RyICE9PSAnW29iamVjdCBBcnJheV0nICYmXG5cdFx0XHR2YWx1ZSAhPT0gbnVsbCAmJlxuXHRcdFx0dHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuXHRcdFx0dHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ251bWJlcicgJiZcblx0XHRcdHZhbHVlLmxlbmd0aCA+PSAwICYmXG5cdFx0XHR0b1N0ci5jYWxsKHZhbHVlLmNhbGxlZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cdH1cblx0cmV0dXJuIGlzQXJncztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRBcnJheSA9IEdldEludHJpbnNpYygnJUFycmF5JScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ2xvYmFsLXJlcXVpcmVcbnZhciB0b1N0ciA9ICEkQXJyYXkuaXNBcnJheSAmJiByZXF1aXJlKCcuLi9oZWxwZXJzL2NhbGxCb3VuZCcpKCdPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nJyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaXNhcnJheVxuXG5tb2R1bGUuZXhwb3J0cyA9ICRBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIElzQXJyYXkoYXJndW1lbnQpIHtcblx0cmV0dXJuIHRvU3RyKGFyZ3VtZW50KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBJc1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi9Jc1Byb3BlcnR5S2V5Jyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtc2V0LW8tcC12LXRocm93XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gU2V0KE8sIFAsIFYsIFRocm93KSB7XG5cdGlmIChUeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgT2AgbXVzdCBiZSBhbiBPYmplY3QnKTtcblx0fVxuXHRpZiAoIUlzUHJvcGVydHlLZXkoUCkpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogYFBgIG11c3QgYmUgYSBQcm9wZXJ0eSBLZXknKTtcblx0fVxuXHRpZiAoVHlwZShUaHJvdykgIT09ICdCb29sZWFuJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgVGhyb3dgIG11c3QgYmUgYSBCb29sZWFuJyk7XG5cdH1cblx0aWYgKFRocm93KSB7XG5cdFx0T1tQXSA9IFY7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBlbHNlIHtcblx0XHR0cnkge1xuXHRcdFx0T1tQXSA9IFY7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkTWF0aCA9IEdldEludHJpbnNpYygnJU1hdGglJyk7XG5cbnZhciAkZmxvb3IgPSAkTWF0aC5mbG9vcjtcbnZhciAkYWJzID0gJE1hdGguYWJzO1xuXG52YXIgJGlzTmFOID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc05hTicpO1xudmFyICRpc0Zpbml0ZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNGaW5pdGUnKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1pc2ludGVnZXJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBJc0ludGVnZXIoYXJndW1lbnQpIHtcblx0aWYgKHR5cGVvZiBhcmd1bWVudCAhPT0gJ251bWJlcicgfHwgJGlzTmFOKGFyZ3VtZW50KSB8fCAhJGlzRmluaXRlKGFyZ3VtZW50KSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHR2YXIgYWJzID0gJGFicyhhcmd1bWVudCk7XG5cdHJldHVybiAkZmxvb3IoYWJzKSA9PT0gYWJzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIGlzQXJncyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKTtcblxudmFyIG9yaWdLZXlzID0gT2JqZWN0LmtleXM7XG52YXIga2V5c1NoaW0gPSBvcmlnS2V5cyA/IGZ1bmN0aW9uIGtleXMobykgeyByZXR1cm4gb3JpZ0tleXMobyk7IH0gOiByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbnZhciBvcmlnaW5hbEtleXMgPSBPYmplY3Qua2V5cztcblxua2V5c1NoaW0uc2hpbSA9IGZ1bmN0aW9uIHNoaW1PYmplY3RLZXlzKCkge1xuXHRpZiAoT2JqZWN0LmtleXMpIHtcblx0XHR2YXIga2V5c1dvcmtzV2l0aEFyZ3VtZW50cyA9IChmdW5jdGlvbiAoKSB7XG5cdFx0XHQvLyBTYWZhcmkgNS4wIGJ1Z1xuXHRcdFx0dmFyIGFyZ3MgPSBPYmplY3Qua2V5cyhhcmd1bWVudHMpO1xuXHRcdFx0cmV0dXJuIGFyZ3MgJiYgYXJncy5sZW5ndGggPT09IGFyZ3VtZW50cy5sZW5ndGg7XG5cdFx0fSgxLCAyKSk7XG5cdFx0aWYgKCFrZXlzV29ya3NXaXRoQXJndW1lbnRzKSB7XG5cdFx0XHRPYmplY3Qua2V5cyA9IGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZnVuYy1uYW1lLW1hdGNoaW5nXG5cdFx0XHRcdGlmIChpc0FyZ3Mob2JqZWN0KSkge1xuXHRcdFx0XHRcdHJldHVybiBvcmlnaW5hbEtleXMoc2xpY2UuY2FsbChvYmplY3QpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gb3JpZ2luYWxLZXlzKG9iamVjdCk7XG5cdFx0XHR9O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRPYmplY3Qua2V5cyA9IGtleXNTaGltO1xuXHR9XG5cdHJldHVybiBPYmplY3Qua2V5cyB8fCBrZXlzU2hpbTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5c1NoaW07XG4iLCIvKiEgbWF0Y2hNZWRpYSgpIHBvbHlmaWxsIGFkZExpc3RlbmVyL3JlbW92ZUxpc3RlbmVyIGV4dGVuc2lvbi4gQXV0aG9yICYgY29weXJpZ2h0IChjKSAyMDEyOiBTY290dCBKZWhsLiBNSVQgbGljZW5zZSAqL1xuKGZ1bmN0aW9uKCl7XG4gICAgLy8gQmFpbCBvdXQgZm9yIGJyb3dzZXJzIHRoYXQgaGF2ZSBhZGRMaXN0ZW5lciBzdXBwb3J0XG4gICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhICYmIHdpbmRvdy5tYXRjaE1lZGlhKCdhbGwnKS5hZGRMaXN0ZW5lcikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxvY2FsTWF0Y2hNZWRpYSA9IHdpbmRvdy5tYXRjaE1lZGlhLFxuICAgICAgICBoYXNNZWRpYVF1ZXJpZXMgPSBsb2NhbE1hdGNoTWVkaWEoJ29ubHkgYWxsJykubWF0Y2hlcyxcbiAgICAgICAgaXNMaXN0ZW5pbmcgICAgID0gZmFsc2UsXG4gICAgICAgIHRpbWVvdXRJRCAgICAgICA9IDAsICAgIC8vIHNldFRpbWVvdXQgZm9yIGRlYm91bmNpbmcgJ2hhbmRsZUNoYW5nZSdcbiAgICAgICAgcXVlcmllcyAgICAgICAgID0gW10sICAgLy8gQ29udGFpbnMgZWFjaCAnbXFsJyBhbmQgYXNzb2NpYXRlZCAnbGlzdGVuZXJzJyBpZiAnYWRkTGlzdGVuZXInIGlzIHVzZWRcbiAgICAgICAgaGFuZGxlQ2hhbmdlICAgID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgICAvLyBEZWJvdW5jZVxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJRCk7XG5cbiAgICAgICAgICAgIHRpbWVvdXRJRCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gcXVlcmllcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtcWwgICAgICAgICA9IHF1ZXJpZXNbaV0ubXFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzICAgPSBxdWVyaWVzW2ldLmxpc3RlbmVycyB8fCBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMgICAgID0gbG9jYWxNYXRjaE1lZGlhKG1xbC5tZWRpYSkubWF0Y2hlcztcblxuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgbXFsLm1hdGNoZXMgdmFsdWUgYW5kIGNhbGwgbGlzdGVuZXJzXG4gICAgICAgICAgICAgICAgICAgIC8vIEZpcmUgbGlzdGVuZXJzIG9ubHkgaWYgdHJhbnNpdGlvbmluZyB0byBvciBmcm9tIG1hdGNoZWQgc3RhdGVcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoZXMgIT09IG1xbC5tYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtcWwubWF0Y2hlcyA9IG1hdGNoZXM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwLCBqbCA9IGxpc3RlbmVycy5sZW5ndGg7IGogPCBqbDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzW2pdLmNhbGwod2luZG93LCBtcWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgMzApO1xuICAgICAgICB9O1xuXG4gICAgd2luZG93Lm1hdGNoTWVkaWEgPSBmdW5jdGlvbihtZWRpYSkge1xuICAgICAgICB2YXIgbXFsICAgICAgICAgPSBsb2NhbE1hdGNoTWVkaWEobWVkaWEpLFxuICAgICAgICAgICAgbGlzdGVuZXJzICAgPSBbXSxcbiAgICAgICAgICAgIGluZGV4ICAgICAgID0gMDtcblxuICAgICAgICBtcWwuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbihsaXN0ZW5lcikge1xuICAgICAgICAgICAgLy8gQ2hhbmdlcyB3b3VsZCBub3Qgb2NjdXIgdG8gY3NzIG1lZGlhIHR5cGUgc28gcmV0dXJuIG5vdyAoQWZmZWN0cyBJRSA8PSA4KVxuICAgICAgICAgICAgaWYgKCFoYXNNZWRpYVF1ZXJpZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCB1cCAncmVzaXplJyBsaXN0ZW5lciBmb3IgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IENTUzMgbWVkaWEgcXVlcmllcyAoTm90IGZvciBJRSA8PSA4KVxuICAgICAgICAgICAgLy8gVGhlcmUgc2hvdWxkIG9ubHkgZXZlciBiZSAxIHJlc2l6ZSBsaXN0ZW5lciBydW5uaW5nIGZvciBwZXJmb3JtYW5jZVxuICAgICAgICAgICAgaWYgKCFpc0xpc3RlbmluZykge1xuICAgICAgICAgICAgICAgIGlzTGlzdGVuaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlQ2hhbmdlLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUHVzaCBvYmplY3Qgb25seSBpZiBpdCBoYXMgbm90IGJlZW4gcHVzaGVkIGFscmVhZHlcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gcXVlcmllcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbXFsICAgICAgICAgOiBtcWwsXG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVycyAgIDogbGlzdGVuZXJzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgfTtcblxuICAgICAgICBtcWwucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbihsaXN0ZW5lcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGlsOyBpKyspe1xuICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lcnNbaV0gPT09IGxpc3RlbmVyKXtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG1xbDtcbiAgICB9O1xufSgpKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLmZsYXQgfHwgaW1wbGVtZW50YXRpb247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgaW5zcGVjdCA9IHJlcXVpcmUoJ29iamVjdC1pbnNwZWN0Jyk7XG5cbnZhciBJc1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi9Jc1Byb3BlcnR5S2V5Jyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vKipcbiAqIDcuMy4xIEdldCAoTywgUCkgLSBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtZ2V0LW8tcFxuICogMS4gQXNzZXJ0OiBUeXBlKE8pIGlzIE9iamVjdC5cbiAqIDIuIEFzc2VydDogSXNQcm9wZXJ0eUtleShQKSBpcyB0cnVlLlxuICogMy4gUmV0dXJuIE8uW1tHZXRdXShQLCBPKS5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEdldChPLCBQKSB7XG5cdC8vIDcuMy4xLjFcblx0aWYgKFR5cGUoTykgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFR5cGUoTykgaXMgbm90IE9iamVjdCcpO1xuXHR9XG5cdC8vIDcuMy4xLjJcblx0aWYgKCFJc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IElzUHJvcGVydHlLZXkoUCkgaXMgbm90IHRydWUsIGdvdCAnICsgaW5zcGVjdChQKSk7XG5cdH1cblx0Ly8gNy4zLjEuM1xuXHRyZXR1cm4gT1tQXTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcbnZhciByZWdleEV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbnZhciB0cnlSZWdleEV4ZWNDYWxsID0gZnVuY3Rpb24gdHJ5UmVnZXhFeGVjKHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0dmFyIGxhc3RJbmRleCA9IHZhbHVlLmxhc3RJbmRleDtcblx0XHR2YWx1ZS5sYXN0SW5kZXggPSAwOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cblx0XHRyZWdleEV4ZWMuY2FsbCh2YWx1ZSk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0dmFsdWUubGFzdEluZGV4ID0gbGFzdEluZGV4OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cdH1cbn07XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIHJlZ2V4Q2xhc3MgPSAnW29iamVjdCBSZWdFeHBdJztcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNSZWdleCh2YWx1ZSkge1xuXHRpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKCFoYXNUb1N0cmluZ1RhZykge1xuXHRcdHJldHVybiB0b1N0ci5jYWxsKHZhbHVlKSA9PT0gcmVnZXhDbGFzcztcblx0fVxuXG5cdHZhciBkZXNjcmlwdG9yID0gZ09QRCh2YWx1ZSwgJ2xhc3RJbmRleCcpO1xuXHR2YXIgaGFzTGFzdEluZGV4RGF0YVByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBoYXMoZGVzY3JpcHRvciwgJ3ZhbHVlJyk7XG5cdGlmICghaGFzTGFzdEluZGV4RGF0YVByb3BlcnR5KSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHRyeVJlZ2V4RXhlY0NhbGwodmFsdWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnZXM1LXNoaW0nKTtcbnJlcXVpcmUoJ2VzNS1zaGltL2VzNS1zaGFtJyk7XG5cbnJlcXVpcmUoJy4vZXMyMDE1Jyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRTdHJpbmcgPSBHZXRJbnRyaW5zaWMoJyVTdHJpbmclJyk7XG5cbnZhciBUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vVG9QcmltaXRpdmUnKTtcbnZhciBUb1N0cmluZyA9IHJlcXVpcmUoJy4vVG9TdHJpbmcnKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b3Byb3BlcnR5a2V5XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVG9Qcm9wZXJ0eUtleShhcmd1bWVudCkge1xuXHR2YXIga2V5ID0gVG9QcmltaXRpdmUoYXJndW1lbnQsICRTdHJpbmcpO1xuXHRyZXR1cm4gdHlwZW9mIGtleSA9PT0gJ3N5bWJvbCcgPyBrZXkgOiBUb1N0cmluZyhrZXkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc1RvU3RyaW5nVGFnID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJztcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbnZhciBpc1N0YW5kYXJkQXJndW1lbnRzID0gZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcblx0aWYgKGhhc1RvU3RyaW5nVGFnICYmIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnIGluIHZhbHVlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHJldHVybiB0b1N0ci5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG59O1xuXG52YXIgaXNMZWdhY3lBcmd1bWVudHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuXHRpZiAoaXNTdGFuZGFyZEFyZ3VtZW50cyh2YWx1ZSkpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRyZXR1cm4gdmFsdWUgIT09IG51bGwgJiZcblx0XHR0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG5cdFx0dHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ251bWJlcicgJiZcblx0XHR2YWx1ZS5sZW5ndGggPj0gMCAmJlxuXHRcdHRvU3RyLmNhbGwodmFsdWUpICE9PSAnW29iamVjdCBBcnJheV0nICYmXG5cdFx0dG9TdHIuY2FsbCh2YWx1ZS5jYWxsZWUpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufTtcblxudmFyIHN1cHBvcnRzU3RhbmRhcmRBcmd1bWVudHMgPSAoZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gaXNTdGFuZGFyZEFyZ3VtZW50cyhhcmd1bWVudHMpO1xufSgpKTtcblxuaXNTdGFuZGFyZEFyZ3VtZW50cy5pc0xlZ2FjeUFyZ3VtZW50cyA9IGlzTGVnYWN5QXJndW1lbnRzOyAvLyBmb3IgdGVzdHNcblxubW9kdWxlLmV4cG9ydHMgPSBzdXBwb3J0c1N0YW5kYXJkQXJndW1lbnRzID8gaXNTdGFuZGFyZEFyZ3VtZW50cyA6IGlzTGVnYWN5QXJndW1lbnRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCdhcnJheS5wcm90b3R5cGUuZmxhdC9hdXRvJyk7XG5yZXF1aXJlKCdhcnJheS5wcm90b3R5cGUuZmxhdG1hcC9hdXRvJyk7XG5cbnJlcXVpcmUoJ3N5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb24vYXV0bycpO1xuXG5yZXF1aXJlKCdvYmplY3QuZnJvbWVudHJpZXMvYXV0bycpO1xuXG5yZXF1aXJlKCcuL2VzMjAyMCcpO1xuIiwiLy8gQ29uc29sZS1wb2x5ZmlsbC4gTUlUIGxpY2Vuc2UuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vcGF1bG1pbGxyL2NvbnNvbGUtcG9seWZpbGxcbi8vIE1ha2UgaXQgc2FmZSB0byBkbyBjb25zb2xlLmxvZygpIGFsd2F5cy5cbihmdW5jdGlvbihnbG9iYWwpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoIWdsb2JhbC5jb25zb2xlKSB7XG4gICAgZ2xvYmFsLmNvbnNvbGUgPSB7fTtcbiAgfVxuICB2YXIgY29uID0gZ2xvYmFsLmNvbnNvbGU7XG4gIHZhciBwcm9wLCBtZXRob2Q7XG4gIHZhciBkdW1teSA9IGZ1bmN0aW9uKCkge307XG4gIHZhciBwcm9wZXJ0aWVzID0gWydtZW1vcnknXTtcbiAgdmFyIG1ldGhvZHMgPSAoJ2Fzc2VydCxjbGVhcixjb3VudCxkZWJ1ZyxkaXIsZGlyeG1sLGVycm9yLGV4Y2VwdGlvbixncm91cCwnICtcbiAgICAgJ2dyb3VwQ29sbGFwc2VkLGdyb3VwRW5kLGluZm8sbG9nLG1hcmtUaW1lbGluZSxwcm9maWxlLHByb2ZpbGVzLHByb2ZpbGVFbmQsJyArXG4gICAgICdzaG93LHRhYmxlLHRpbWUsdGltZUVuZCx0aW1lbGluZSx0aW1lbGluZUVuZCx0aW1lU3RhbXAsdHJhY2Usd2FybicpLnNwbGl0KCcsJyk7XG4gIHdoaWxlIChwcm9wID0gcHJvcGVydGllcy5wb3AoKSkgaWYgKCFjb25bcHJvcF0pIGNvbltwcm9wXSA9IHt9O1xuICB3aGlsZSAobWV0aG9kID0gbWV0aG9kcy5wb3AoKSkgaWYgKCFjb25bbWV0aG9kXSkgY29uW21ldGhvZF0gPSBkdW1teTtcbiAgLy8gVXNpbmcgYHRoaXNgIGZvciB3ZWIgd29ya2VycyAmIHN1cHBvcnRzIEJyb3dzZXJpZnkgLyBXZWJwYWNrLlxufSkodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyB0aGlzIDogd2luZG93KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgY2FsbEJpbmQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9oZWxwZXJzL2NhbGxCaW5kJyk7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbnZhciBzaGltID0gcmVxdWlyZSgnLi9zaGltJyk7XG5cbnZhciBmbGFnc0JvdW5kID0gY2FsbEJpbmQoaW1wbGVtZW50YXRpb24pO1xuXG5kZWZpbmUoZmxhZ3NCb3VuZCwge1xuXHRnZXRQb2x5ZmlsbDogZ2V0UG9seWZpbGwsXG5cdGltcGxlbWVudGF0aW9uOiBpbXBsZW1lbnRhdGlvbixcblx0c2hpbTogc2hpbVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZmxhZ3NCb3VuZDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuXHRcdGlmIChkb2N1bWVudC5jb250YWlucykge1xuXHRcdFx0cmV0dXJuIGRvY3VtZW50LmNvbnRhaW5zO1xuXHRcdH1cblx0XHRpZiAoZG9jdW1lbnQuYm9keSAmJiBkb2N1bWVudC5ib2R5LmNvbnRhaW5zKSB7XG5cdFx0XHRyZXR1cm4gZG9jdW1lbnQuYm9keS5jb250YWlucztcblx0XHR9XG5cdH1cblx0cmV0dXJuIGltcGxlbWVudGF0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGluc3BlY3QgPSByZXF1aXJlKCdvYmplY3QtaW5zcGVjdCcpO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgQ2FsbCA9IHJlcXVpcmUoJy4vQ2FsbCcpO1xudmFyIEdldCA9IHJlcXVpcmUoJy4vR2V0Jyk7XG52YXIgR2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuL0dldEl0ZXJhdG9yJyk7XG52YXIgSXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4vSXNDYWxsYWJsZScpO1xudmFyIEl0ZXJhdG9yQ2xvc2UgPSByZXF1aXJlKCcuL0l0ZXJhdG9yQ2xvc2UnKTtcbnZhciBJdGVyYXRvclN0ZXAgPSByZXF1aXJlKCcuL0l0ZXJhdG9yU3RlcCcpO1xudmFyIEl0ZXJhdG9yVmFsdWUgPSByZXF1aXJlKCcuL0l0ZXJhdG9yVmFsdWUnKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYWRkLWVudHJpZXMtZnJvbS1pdGVyYWJsZVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEFkZEVudHJpZXNGcm9tSXRlcmFibGUodGFyZ2V0LCBpdGVyYWJsZSwgYWRkZXIpIHtcblx0aWYgKCFJc0NhbGxhYmxlKGFkZGVyKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgYWRkZXJgIGlzIG5vdCBjYWxsYWJsZScpO1xuXHR9XG5cdGlmIChpdGVyYWJsZSA9PSBudWxsKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGBpdGVyYWJsZWAgaXMgcHJlc2VudCwgYW5kIG5vdCBudWxsaXNoJyk7XG5cdH1cblx0dmFyIGl0ZXJhdG9yUmVjb3JkID0gR2V0SXRlcmF0b3IoaXRlcmFibGUpO1xuXHR3aGlsZSAodHJ1ZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxuXHRcdHZhciBuZXh0ID0gSXRlcmF0b3JTdGVwKGl0ZXJhdG9yUmVjb3JkKTtcblx0XHRpZiAoIW5leHQpIHtcblx0XHRcdHJldHVybiB0YXJnZXQ7XG5cdFx0fVxuXHRcdHZhciBuZXh0SXRlbSA9IEl0ZXJhdG9yVmFsdWUobmV4dCk7XG5cdFx0aWYgKFR5cGUobmV4dEl0ZW0pICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0dmFyIGVycm9yID0gbmV3ICRUeXBlRXJyb3IoJ2l0ZXJhdG9yIG5leHQgbXVzdCByZXR1cm4gYW4gT2JqZWN0LCBnb3QgJyArIGluc3BlY3QobmV4dEl0ZW0pKTtcblx0XHRcdHJldHVybiBJdGVyYXRvckNsb3NlKFxuXHRcdFx0XHRpdGVyYXRvclJlY29yZCxcblx0XHRcdFx0ZnVuY3Rpb24gKCkgeyB0aHJvdyBlcnJvcjsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWxvb3AtZnVuY1xuXHRcdFx0KTtcblx0XHR9XG5cdFx0dHJ5IHtcblx0XHRcdHZhciBrID0gR2V0KG5leHRJdGVtLCAnMCcpO1xuXHRcdFx0dmFyIHYgPSBHZXQobmV4dEl0ZW0sICcxJyk7XG5cdFx0XHRDYWxsKGFkZGVyLCB0YXJnZXQsIFtrLCB2XSk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0cmV0dXJuIEl0ZXJhdG9yQ2xvc2UoXG5cdFx0XHRcdGl0ZXJhdG9yUmVjb3JkLFxuXHRcdFx0XHRmdW5jdGlvbiAoKSB7IHRocm93IGU7IH1cblx0XHRcdCk7XG5cdFx0fVxuXHR9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBnbG9iYWxzXG5cdEF0b21pY3MsXG5cdFNoYXJlZEFycmF5QnVmZmVyLFxuKi9cblxudmFyIHVuZGVmaW5lZDtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbnZhciAkZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5pZiAoJGdPUEQpIHtcblx0dHJ5IHtcblx0XHQkZ09QRCh7fSwgJycpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0JGdPUEQgPSBudWxsOyAvLyB0aGlzIGlzIElFIDgsIHdoaWNoIGhhcyBhIGJyb2tlbiBnT1BEXG5cdH1cbn1cblxudmFyIHRocm93VHlwZUVycm9yID0gZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgJFR5cGVFcnJvcigpOyB9O1xudmFyIFRocm93VHlwZUVycm9yID0gJGdPUERcblx0PyAoZnVuY3Rpb24gKCkge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zLCBuby1jYWxsZXIsIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllc1xuXHRcdFx0YXJndW1lbnRzLmNhbGxlZTsgLy8gSUUgOCBkb2VzIG5vdCB0aHJvdyBoZXJlXG5cdFx0XHRyZXR1cm4gdGhyb3dUeXBlRXJyb3I7XG5cdFx0fSBjYXRjaCAoY2FsbGVlVGhyb3dzKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHQvLyBJRSA4IHRocm93cyBvbiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFyZ3VtZW50cywgJycpXG5cdFx0XHRcdHJldHVybiAkZ09QRChhcmd1bWVudHMsICdjYWxsZWUnKS5nZXQ7XG5cdFx0XHR9IGNhdGNoIChnT1BEdGhyb3dzKSB7XG5cdFx0XHRcdHJldHVybiB0aHJvd1R5cGVFcnJvcjtcblx0XHRcdH1cblx0XHR9XG5cdH0oKSlcblx0OiB0aHJvd1R5cGVFcnJvcjtcblxudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scycpKCk7XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5fX3Byb3RvX187IH07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG9cblxudmFyIGdlbmVyYXRvcjsgLy8gPSBmdW5jdGlvbiAqICgpIHt9O1xudmFyIGdlbmVyYXRvckZ1bmN0aW9uID0gZ2VuZXJhdG9yID8gZ2V0UHJvdG8oZ2VuZXJhdG9yKSA6IHVuZGVmaW5lZDtcbnZhciBhc3luY0ZuOyAvLyBhc3luYyBmdW5jdGlvbigpIHt9O1xudmFyIGFzeW5jRnVuY3Rpb24gPSBhc3luY0ZuID8gYXN5bmNGbi5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZDtcbnZhciBhc3luY0dlbjsgLy8gYXN5bmMgZnVuY3Rpb24gKiAoKSB7fTtcbnZhciBhc3luY0dlbkZ1bmN0aW9uID0gYXN5bmNHZW4gPyBnZXRQcm90byhhc3luY0dlbikgOiB1bmRlZmluZWQ7XG52YXIgYXN5bmNHZW5JdGVyYXRvciA9IGFzeW5jR2VuID8gYXN5bmNHZW4oKSA6IHVuZGVmaW5lZDtcblxudmFyIFR5cGVkQXJyYXkgPSB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBnZXRQcm90byhVaW50OEFycmF5KTtcblxudmFyIElOVFJJTlNJQ1MgPSB7XG5cdCclQXJyYXklJzogQXJyYXksXG5cdCclQXJyYXlCdWZmZXIlJzogdHlwZW9mIEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEFycmF5QnVmZmVyLFxuXHQnJUFycmF5QnVmZmVyUHJvdG90eXBlJSc6IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBcnJheUJ1ZmZlci5wcm90b3R5cGUsXG5cdCclQXJyYXlJdGVyYXRvclByb3RvdHlwZSUnOiBoYXNTeW1ib2xzID8gZ2V0UHJvdG8oW11bU3ltYm9sLml0ZXJhdG9yXSgpKSA6IHVuZGVmaW5lZCxcblx0JyVBcnJheVByb3RvdHlwZSUnOiBBcnJheS5wcm90b3R5cGUsXG5cdCclQXJyYXlQcm90b19lbnRyaWVzJSc6IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzLFxuXHQnJUFycmF5UHJvdG9fZm9yRWFjaCUnOiBBcnJheS5wcm90b3R5cGUuZm9yRWFjaCxcblx0JyVBcnJheVByb3RvX2tleXMlJzogQXJyYXkucHJvdG90eXBlLmtleXMsXG5cdCclQXJyYXlQcm90b192YWx1ZXMlJzogQXJyYXkucHJvdG90eXBlLnZhbHVlcyxcblx0JyVBc3luY0Zyb21TeW5jSXRlcmF0b3JQcm90b3R5cGUlJzogdW5kZWZpbmVkLFxuXHQnJUFzeW5jRnVuY3Rpb24lJzogYXN5bmNGdW5jdGlvbixcblx0JyVBc3luY0Z1bmN0aW9uUHJvdG90eXBlJSc6IGFzeW5jRnVuY3Rpb24gPyBhc3luY0Z1bmN0aW9uLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcblx0JyVBc3luY0dlbmVyYXRvciUnOiBhc3luY0dlbiA/IGdldFByb3RvKGFzeW5jR2VuSXRlcmF0b3IpIDogdW5kZWZpbmVkLFxuXHQnJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lJzogYXN5bmNHZW5GdW5jdGlvbixcblx0JyVBc3luY0dlbmVyYXRvclByb3RvdHlwZSUnOiBhc3luY0dlbkZ1bmN0aW9uID8gYXN5bmNHZW5GdW5jdGlvbi5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG5cdCclQXN5bmNJdGVyYXRvclByb3RvdHlwZSUnOiBhc3luY0dlbkl0ZXJhdG9yICYmIGhhc1N5bWJvbHMgJiYgU3ltYm9sLmFzeW5jSXRlcmF0b3IgPyBhc3luY0dlbkl0ZXJhdG9yW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIDogdW5kZWZpbmVkLFxuXHQnJUF0b21pY3MlJzogdHlwZW9mIEF0b21pY3MgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQXRvbWljcyxcblx0JyVCb29sZWFuJSc6IEJvb2xlYW4sXG5cdCclQm9vbGVhblByb3RvdHlwZSUnOiBCb29sZWFuLnByb3RvdHlwZSxcblx0JyVEYXRhVmlldyUnOiB0eXBlb2YgRGF0YVZpZXcgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRGF0YVZpZXcsXG5cdCclRGF0YVZpZXdQcm90b3R5cGUlJzogdHlwZW9mIERhdGFWaWV3ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IERhdGFWaWV3LnByb3RvdHlwZSxcblx0JyVEYXRlJSc6IERhdGUsXG5cdCclRGF0ZVByb3RvdHlwZSUnOiBEYXRlLnByb3RvdHlwZSxcblx0JyVkZWNvZGVVUkklJzogZGVjb2RlVVJJLFxuXHQnJWRlY29kZVVSSUNvbXBvbmVudCUnOiBkZWNvZGVVUklDb21wb25lbnQsXG5cdCclZW5jb2RlVVJJJSc6IGVuY29kZVVSSSxcblx0JyVlbmNvZGVVUklDb21wb25lbnQlJzogZW5jb2RlVVJJQ29tcG9uZW50LFxuXHQnJUVycm9yJSc6IEVycm9yLFxuXHQnJUVycm9yUHJvdG90eXBlJSc6IEVycm9yLnByb3RvdHlwZSxcblx0JyVldmFsJSc6IGV2YWwsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXZhbFxuXHQnJUV2YWxFcnJvciUnOiBFdmFsRXJyb3IsXG5cdCclRXZhbEVycm9yUHJvdG90eXBlJSc6IEV2YWxFcnJvci5wcm90b3R5cGUsXG5cdCclRmxvYXQzMkFycmF5JSc6IHR5cGVvZiBGbG9hdDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQzMkFycmF5LFxuXHQnJUZsb2F0MzJBcnJheVByb3RvdHlwZSUnOiB0eXBlb2YgRmxvYXQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZsb2F0MzJBcnJheS5wcm90b3R5cGUsXG5cdCclRmxvYXQ2NEFycmF5JSc6IHR5cGVvZiBGbG9hdDY0QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQ2NEFycmF5LFxuXHQnJUZsb2F0NjRBcnJheVByb3RvdHlwZSUnOiB0eXBlb2YgRmxvYXQ2NEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZsb2F0NjRBcnJheS5wcm90b3R5cGUsXG5cdCclRnVuY3Rpb24lJzogRnVuY3Rpb24sXG5cdCclRnVuY3Rpb25Qcm90b3R5cGUlJzogRnVuY3Rpb24ucHJvdG90eXBlLFxuXHQnJUdlbmVyYXRvciUnOiBnZW5lcmF0b3IgPyBnZXRQcm90byhnZW5lcmF0b3IoKSkgOiB1bmRlZmluZWQsXG5cdCclR2VuZXJhdG9yRnVuY3Rpb24lJzogZ2VuZXJhdG9yRnVuY3Rpb24sXG5cdCclR2VuZXJhdG9yUHJvdG90eXBlJSc6IGdlbmVyYXRvckZ1bmN0aW9uID8gZ2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuXHQnJUludDhBcnJheSUnOiB0eXBlb2YgSW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDhBcnJheSxcblx0JyVJbnQ4QXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIEludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQ4QXJyYXkucHJvdG90eXBlLFxuXHQnJUludDE2QXJyYXklJzogdHlwZW9mIEludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50MTZBcnJheSxcblx0JyVJbnQxNkFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBJbnQxNkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDhBcnJheS5wcm90b3R5cGUsXG5cdCclSW50MzJBcnJheSUnOiB0eXBlb2YgSW50MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQzMkFycmF5LFxuXHQnJUludDMyQXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIEludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50MzJBcnJheS5wcm90b3R5cGUsXG5cdCclaXNGaW5pdGUlJzogaXNGaW5pdGUsXG5cdCclaXNOYU4lJzogaXNOYU4sXG5cdCclSXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyA/IGdldFByb3RvKGdldFByb3RvKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSkpIDogdW5kZWZpbmVkLFxuXHQnJUpTT04lJzogdHlwZW9mIEpTT04gPT09ICdvYmplY3QnID8gSlNPTiA6IHVuZGVmaW5lZCxcblx0JyVKU09OUGFyc2UlJzogdHlwZW9mIEpTT04gPT09ICdvYmplY3QnID8gSlNPTi5wYXJzZSA6IHVuZGVmaW5lZCxcblx0JyVNYXAlJzogdHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBNYXAsXG5cdCclTWFwSXRlcmF0b3JQcm90b3R5cGUlJzogdHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc1N5bWJvbHMgPyB1bmRlZmluZWQgOiBnZXRQcm90byhuZXcgTWFwKClbU3ltYm9sLml0ZXJhdG9yXSgpKSxcblx0JyVNYXBQcm90b3R5cGUlJzogdHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBNYXAucHJvdG90eXBlLFxuXHQnJU1hdGglJzogTWF0aCxcblx0JyVOdW1iZXIlJzogTnVtYmVyLFxuXHQnJU51bWJlclByb3RvdHlwZSUnOiBOdW1iZXIucHJvdG90eXBlLFxuXHQnJU9iamVjdCUnOiBPYmplY3QsXG5cdCclT2JqZWN0UHJvdG90eXBlJSc6IE9iamVjdC5wcm90b3R5cGUsXG5cdCclT2JqUHJvdG9fdG9TdHJpbmclJzogT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxcblx0JyVPYmpQcm90b192YWx1ZU9mJSc6IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZixcblx0JyVwYXJzZUZsb2F0JSc6IHBhcnNlRmxvYXQsXG5cdCclcGFyc2VJbnQlJzogcGFyc2VJbnQsXG5cdCclUHJvbWlzZSUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLFxuXHQnJVByb21pc2VQcm90b3R5cGUlJzogdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJvbWlzZS5wcm90b3R5cGUsXG5cdCclUHJvbWlzZVByb3RvX3RoZW4lJzogdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJvbWlzZS5wcm90b3R5cGUudGhlbixcblx0JyVQcm9taXNlX2FsbCUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLmFsbCxcblx0JyVQcm9taXNlX3JlamVjdCUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLnJlamVjdCxcblx0JyVQcm9taXNlX3Jlc29sdmUlJzogdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJvbWlzZS5yZXNvbHZlLFxuXHQnJVByb3h5JSc6IHR5cGVvZiBQcm94eSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm94eSxcblx0JyVSYW5nZUVycm9yJSc6IFJhbmdlRXJyb3IsXG5cdCclUmFuZ2VFcnJvclByb3RvdHlwZSUnOiBSYW5nZUVycm9yLnByb3RvdHlwZSxcblx0JyVSZWZlcmVuY2VFcnJvciUnOiBSZWZlcmVuY2VFcnJvcixcblx0JyVSZWZlcmVuY2VFcnJvclByb3RvdHlwZSUnOiBSZWZlcmVuY2VFcnJvci5wcm90b3R5cGUsXG5cdCclUmVmbGVjdCUnOiB0eXBlb2YgUmVmbGVjdCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBSZWZsZWN0LFxuXHQnJVJlZ0V4cCUnOiBSZWdFeHAsXG5cdCclUmVnRXhwUHJvdG90eXBlJSc6IFJlZ0V4cC5wcm90b3R5cGUsXG5cdCclU2V0JSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogU2V0LFxuXHQnJVNldEl0ZXJhdG9yUHJvdG90eXBlJSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNTeW1ib2xzID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8obmV3IFNldCgpW1N5bWJvbC5pdGVyYXRvcl0oKSksXG5cdCclU2V0UHJvdG90eXBlJSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogU2V0LnByb3RvdHlwZSxcblx0JyVTaGFyZWRBcnJheUJ1ZmZlciUnOiB0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogU2hhcmVkQXJyYXlCdWZmZXIsXG5cdCclU2hhcmVkQXJyYXlCdWZmZXJQcm90b3R5cGUlJzogdHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFNoYXJlZEFycmF5QnVmZmVyLnByb3RvdHlwZSxcblx0JyVTdHJpbmclJzogU3RyaW5nLFxuXHQnJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgPyBnZXRQcm90bygnJ1tTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkLFxuXHQnJVN0cmluZ1Byb3RvdHlwZSUnOiBTdHJpbmcucHJvdG90eXBlLFxuXHQnJVN5bWJvbCUnOiBoYXNTeW1ib2xzID8gU3ltYm9sIDogdW5kZWZpbmVkLFxuXHQnJVN5bWJvbFByb3RvdHlwZSUnOiBoYXNTeW1ib2xzID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcblx0JyVTeW50YXhFcnJvciUnOiBTeW50YXhFcnJvcixcblx0JyVTeW50YXhFcnJvclByb3RvdHlwZSUnOiBTeW50YXhFcnJvci5wcm90b3R5cGUsXG5cdCclVGhyb3dUeXBlRXJyb3IlJzogVGhyb3dUeXBlRXJyb3IsXG5cdCclVHlwZWRBcnJheSUnOiBUeXBlZEFycmF5LFxuXHQnJVR5cGVkQXJyYXlQcm90b3R5cGUlJzogVHlwZWRBcnJheSA/IFR5cGVkQXJyYXkucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuXHQnJVR5cGVFcnJvciUnOiAkVHlwZUVycm9yLFxuXHQnJVR5cGVFcnJvclByb3RvdHlwZSUnOiAkVHlwZUVycm9yLnByb3RvdHlwZSxcblx0JyVVaW50OEFycmF5JSc6IHR5cGVvZiBVaW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4QXJyYXksXG5cdCclVWludDhBcnJheVByb3RvdHlwZSUnOiB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OEFycmF5LnByb3RvdHlwZSxcblx0JyVVaW50OENsYW1wZWRBcnJheSUnOiB0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDhDbGFtcGVkQXJyYXksXG5cdCclVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4Q2xhbXBlZEFycmF5LnByb3RvdHlwZSxcblx0JyVVaW50MTZBcnJheSUnOiB0eXBlb2YgVWludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDE2QXJyYXksXG5cdCclVWludDE2QXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIFVpbnQxNkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQxNkFycmF5LnByb3RvdHlwZSxcblx0JyVVaW50MzJBcnJheSUnOiB0eXBlb2YgVWludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDMyQXJyYXksXG5cdCclVWludDMyQXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIFVpbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQzMkFycmF5LnByb3RvdHlwZSxcblx0JyVVUklFcnJvciUnOiBVUklFcnJvcixcblx0JyVVUklFcnJvclByb3RvdHlwZSUnOiBVUklFcnJvci5wcm90b3R5cGUsXG5cdCclV2Vha01hcCUnOiB0eXBlb2YgV2Vha01hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrTWFwLFxuXHQnJVdlYWtNYXBQcm90b3R5cGUlJzogdHlwZW9mIFdlYWtNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha01hcC5wcm90b3R5cGUsXG5cdCclV2Vha1NldCUnOiB0eXBlb2YgV2Vha1NldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrU2V0LFxuXHQnJVdlYWtTZXRQcm90b3R5cGUlJzogdHlwZW9mIFdlYWtTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha1NldC5wcm90b3R5cGVcbn07XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xudmFyICRyZXBsYWNlID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSk7XG5cbi8qIGFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbG9kYXNoL2xvZGFzaC9ibG9iLzQuMTcuMTUvZGlzdC9sb2Rhc2guanMjTDY3MzUtTDY3NDQgKi9cbnZhciByZVByb3BOYW1lID0gL1teJS5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwlJCkpL2c7XG52YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7IC8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IGZ1bmN0aW9uIHN0cmluZ1RvUGF0aChzdHJpbmcpIHtcblx0dmFyIHJlc3VsdCA9IFtdO1xuXHQkcmVwbGFjZShzdHJpbmcsIHJlUHJvcE5hbWUsIGZ1bmN0aW9uIChtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG5cdFx0cmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gcXVvdGUgPyAkcmVwbGFjZShzdWJTdHJpbmcsIHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKTtcblx0fSk7XG5cdHJldHVybiByZXN1bHQ7XG59O1xuLyogZW5kIGFkYXB0YXRpb24gKi9cblxudmFyIGdldEJhc2VJbnRyaW5zaWMgPSBmdW5jdGlvbiBnZXRCYXNlSW50cmluc2ljKG5hbWUsIGFsbG93TWlzc2luZykge1xuXHRpZiAoIShuYW1lIGluIElOVFJJTlNJQ1MpKSB7XG5cdFx0dGhyb3cgbmV3IFN5bnRheEVycm9yKCdpbnRyaW5zaWMgJyArIG5hbWUgKyAnIGRvZXMgbm90IGV4aXN0IScpO1xuXHR9XG5cblx0Ly8gaXN0YW5idWwgaWdub3JlIGlmIC8vIGhvcGVmdWxseSB0aGlzIGlzIGltcG9zc2libGUgdG8gdGVzdCA6LSlcblx0aWYgKHR5cGVvZiBJTlRSSU5TSUNTW25hbWVdID09PSAndW5kZWZpbmVkJyAmJiAhYWxsb3dNaXNzaW5nKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2ludHJpbnNpYyAnICsgbmFtZSArICcgZXhpc3RzLCBidXQgaXMgbm90IGF2YWlsYWJsZS4gUGxlYXNlIGZpbGUgYW4gaXNzdWUhJyk7XG5cdH1cblxuXHRyZXR1cm4gSU5UUklOU0lDU1tuYW1lXTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gR2V0SW50cmluc2ljKG5hbWUsIGFsbG93TWlzc2luZykge1xuXHRpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8IG5hbWUubGVuZ3RoID09PSAwKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignaW50cmluc2ljIG5hbWUgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcnKTtcblx0fVxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIGFsbG93TWlzc2luZyAhPT0gJ2Jvb2xlYW4nKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignXCJhbGxvd01pc3NpbmdcIiBhcmd1bWVudCBtdXN0IGJlIGEgYm9vbGVhbicpO1xuXHR9XG5cblx0dmFyIHBhcnRzID0gc3RyaW5nVG9QYXRoKG5hbWUpO1xuXG5cdHZhciB2YWx1ZSA9IGdldEJhc2VJbnRyaW5zaWMoJyUnICsgKHBhcnRzLmxlbmd0aCA+IDAgPyBwYXJ0c1swXSA6ICcnKSArICclJywgYWxsb3dNaXNzaW5nKTtcblx0Zm9yICh2YXIgaSA9IDE7IGkgPCBwYXJ0cy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGlmICh2YWx1ZSAhPSBudWxsKSB7XG5cdFx0XHRpZiAoJGdPUEQgJiYgKGkgKyAxKSA+PSBwYXJ0cy5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGRlc2MgPSAkZ09QRCh2YWx1ZSwgcGFydHNbaV0pO1xuXHRcdFx0XHRpZiAoIWFsbG93TWlzc2luZyAmJiAhKHBhcnRzW2ldIGluIHZhbHVlKSkge1xuXHRcdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdiYXNlIGludHJpbnNpYyBmb3IgJyArIG5hbWUgKyAnIGV4aXN0cywgYnV0IHRoZSBwcm9wZXJ0eSBpcyBub3QgYXZhaWxhYmxlLicpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhbHVlID0gZGVzYyA/IChkZXNjLmdldCB8fCBkZXNjLnZhbHVlKSA6IHZhbHVlW3BhcnRzW2ldXTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbHVlID0gdmFsdWVbcGFydHNbaV1dO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQWRkRW50cmllc0Zyb21JdGVyYWJsZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvQWRkRW50cmllc0Zyb21JdGVyYWJsZScpO1xudmFyIENyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3cgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0NyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3cnKTtcbnZhciBHZXQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0dldCcpO1xudmFyIElzQXJyYXkgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0lzQXJyYXknKTtcbnZhciBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9SZXF1aXJlT2JqZWN0Q29lcmNpYmxlJyk7XG52YXIgVG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVG9Qcm9wZXJ0eUtleScpO1xudmFyIFR5cGUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1R5cGUnKTtcblxudmFyIGFkZGVyID0gZnVuY3Rpb24gYWRkRGF0YVByb3BlcnR5KGtleSwgdmFsdWUpIHtcblx0dmFyIE8gPSB0aGlzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWludmFsaWQtdGhpc1xuXHR2YXIgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KGtleSk7XG5cdENyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3coTywgcHJvcGVydHlLZXksIHZhbHVlKTtcbn07XG5cbnZhciBsZWdhY3lBc3NpZ24gPSBmdW5jdGlvbiBhc3NpZ24ob2JqLCBlbnRyaWVzKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZW50cmllcy5sZW5ndGg7ICsraSkge1xuXHRcdHZhciBlbnRyeSA9IGVudHJpZXNbaV07XG5cdFx0aWYgKFR5cGUoZW50cnkpICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignaXRlcmF0b3IgcmV0dXJuZWQgYSBub24tb2JqZWN0OyBlbnRyeSBleHBlY3RlZCcpO1xuXHRcdH1cblxuXHRcdHZhciBrZXkgPSBHZXQoZW50cnksICcwJyk7XG5cdFx0dmFyIHZhbHVlID0gR2V0KGVudHJ5LCAnMScpO1xuXHRcdHZhciBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkoa2V5KTtcblx0XHRDcmVhdGVEYXRhUHJvcGVydHlPclRocm93KG9iaiwgcHJvcGVydHlLZXksIHZhbHVlKTtcblx0fVxufTtcblxudmFyIGhhc1N5bWJvbHMgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2woJ2ZvbycpID09PSAnc3ltYm9sJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tRW50cmllcyhpdGVyYWJsZSkge1xuXHRSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGl0ZXJhYmxlKTtcblxuXHR2YXIgb2JqID0ge307XG5cblx0Ly8gdGhpcyBwYXJ0IGlzbid0IGluIHRoZSBzcGVjLCBpdCdzIGZvciBhIHJlYXNvbmFibGUgZmFsbGJhY2sgZm9yIHByZS1FUzYgZW52aXJvbm1lbnRzXG5cdGlmICghaGFzU3ltYm9scykge1xuXHRcdGlmICghSXNBcnJheShpdGVyYWJsZSkpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ3RoaXMgZW52aXJvbm1lbnQgbGFja3MgbmF0aXZlIFN5bWJvbHMsIGFuZCBjYW4gbm90IHN1cHBvcnQgbm9uLUFycmF5IGl0ZXJhYmxlcycpO1xuXHRcdH1cblx0XHRsZWdhY3lBc3NpZ24ob2JqLCBpdGVyYWJsZSk7XG5cdFx0cmV0dXJuIG9iajtcblx0fVxuXG5cdHJldHVybiBBZGRFbnRyaWVzRnJvbUl0ZXJhYmxlKG9iaiwgaXRlcmFibGUsIGFkZGVyKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRzcGVjaWVzID0gR2V0SW50cmluc2ljKCclU3ltYm9sLnNwZWNpZXMlJywgdHJ1ZSk7XG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIElzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL0lzQ29uc3RydWN0b3InKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1zcGVjaWVzY29uc3RydWN0b3JcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKSB7XG5cdGlmIChUeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKE8pIGlzIG5vdCBPYmplY3QnKTtcblx0fVxuXHR2YXIgQyA9IE8uY29uc3RydWN0b3I7XG5cdGlmICh0eXBlb2YgQyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gZGVmYXVsdENvbnN0cnVjdG9yO1xuXHR9XG5cdGlmIChUeXBlKEMpICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdPLmNvbnN0cnVjdG9yIGlzIG5vdCBhbiBPYmplY3QnKTtcblx0fVxuXHR2YXIgUyA9ICRzcGVjaWVzID8gQ1skc3BlY2llc10gOiB2b2lkIDA7XG5cdGlmIChTID09IG51bGwpIHtcblx0XHRyZXR1cm4gZGVmYXVsdENvbnN0cnVjdG9yO1xuXHR9XG5cdGlmIChJc0NvbnN0cnVjdG9yKFMpKSB7XG5cdFx0cmV0dXJuIFM7XG5cdH1cblx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ25vIGNvbnN0cnVjdG9yIGZvdW5kJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzZXJ0UmVjb3JkID0gcmVxdWlyZSgnLi4vaGVscGVycy9hc3NlcnRSZWNvcmQnKTtcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1mcm9tcHJvcGVydHlkZXNjcmlwdG9yXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gRnJvbVByb3BlcnR5RGVzY3JpcHRvcihEZXNjKSB7XG5cdGlmICh0eXBlb2YgRGVzYyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gRGVzYztcblx0fVxuXG5cdGFzc2VydFJlY29yZChUeXBlLCAnUHJvcGVydHkgRGVzY3JpcHRvcicsICdEZXNjJywgRGVzYyk7XG5cblx0dmFyIG9iaiA9IHt9O1xuXHRpZiAoJ1tbVmFsdWVdXScgaW4gRGVzYykge1xuXHRcdG9iai52YWx1ZSA9IERlc2NbJ1tbVmFsdWVdXSddO1xuXHR9XG5cdGlmICgnW1tXcml0YWJsZV1dJyBpbiBEZXNjKSB7XG5cdFx0b2JqLndyaXRhYmxlID0gRGVzY1snW1tXcml0YWJsZV1dJ107XG5cdH1cblx0aWYgKCdbW0dldF1dJyBpbiBEZXNjKSB7XG5cdFx0b2JqLmdldCA9IERlc2NbJ1tbR2V0XV0nXTtcblx0fVxuXHRpZiAoJ1tbU2V0XV0nIGluIERlc2MpIHtcblx0XHRvYmouc2V0ID0gRGVzY1snW1tTZXRdXSddO1xuXHR9XG5cdGlmICgnW1tFbnVtZXJhYmxlXV0nIGluIERlc2MpIHtcblx0XHRvYmouZW51bWVyYWJsZSA9IERlc2NbJ1tbRW51bWVyYWJsZV1dJ107XG5cdH1cblx0aWYgKCdbW0NvbmZpZ3VyYWJsZV1dJyBpbiBEZXNjKSB7XG5cdFx0b2JqLmNvbmZpZ3VyYWJsZSA9IERlc2NbJ1tbQ29uZmlndXJhYmxlXV0nXTtcblx0fVxuXHRyZXR1cm4gb2JqO1xufTtcbiIsIi8qXG4gKiBjbGFzc0xpc3QuanM6IENyb3NzLWJyb3dzZXIgZnVsbCBlbGVtZW50LmNsYXNzTGlzdCBpbXBsZW1lbnRhdGlvbi5cbiAqIDEuMS4yMDE3MDQyN1xuICpcbiAqIEJ5IEVsaSBHcmV5LCBodHRwOi8vZWxpZ3JleS5jb21cbiAqIExpY2Vuc2U6IERlZGljYXRlZCB0byB0aGUgcHVibGljIGRvbWFpbi5cbiAqICAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lbGlncmV5L2NsYXNzTGlzdC5qcy9ibG9iL21hc3Rlci9MSUNFTlNFLm1kXG4gKi9cblxuLypnbG9iYWwgc2VsZiwgZG9jdW1lbnQsIERPTUV4Y2VwdGlvbiAqL1xuXG4vKiEgQHNvdXJjZSBodHRwOi8vcHVybC5lbGlncmV5LmNvbS9naXRodWIvY2xhc3NMaXN0LmpzL2Jsb2IvbWFzdGVyL2NsYXNzTGlzdC5qcyAqL1xuXG5pZiAoXCJkb2N1bWVudFwiIGluIHdpbmRvdy5zZWxmKSB7XG5cbi8vIEZ1bGwgcG9seWZpbGwgZm9yIGJyb3dzZXJzIHdpdGggbm8gY2xhc3NMaXN0IHN1cHBvcnRcbi8vIEluY2x1ZGluZyBJRSA8IEVkZ2UgbWlzc2luZyBTVkdFbGVtZW50LmNsYXNzTGlzdFxuaWYgKCEoXCJjbGFzc0xpc3RcIiBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiX1wiKSkgXG5cdHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyAmJiAhKFwiY2xhc3NMaXN0XCIgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcImdcIikpKSB7XG5cbihmdW5jdGlvbiAodmlldykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuaWYgKCEoJ0VsZW1lbnQnIGluIHZpZXcpKSByZXR1cm47XG5cbnZhclxuXHQgIGNsYXNzTGlzdFByb3AgPSBcImNsYXNzTGlzdFwiXG5cdCwgcHJvdG9Qcm9wID0gXCJwcm90b3R5cGVcIlxuXHQsIGVsZW1DdHJQcm90byA9IHZpZXcuRWxlbWVudFtwcm90b1Byb3BdXG5cdCwgb2JqQ3RyID0gT2JqZWN0XG5cdCwgc3RyVHJpbSA9IFN0cmluZ1twcm90b1Byb3BdLnRyaW0gfHwgZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnJlcGxhY2UoL15cXHMrfFxccyskL2csIFwiXCIpO1xuXHR9XG5cdCwgYXJySW5kZXhPZiA9IEFycmF5W3Byb3RvUHJvcF0uaW5kZXhPZiB8fCBmdW5jdGlvbiAoaXRlbSkge1xuXHRcdHZhclxuXHRcdFx0ICBpID0gMFxuXHRcdFx0LCBsZW4gPSB0aGlzLmxlbmd0aFxuXHRcdDtcblx0XHRmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoaSBpbiB0aGlzICYmIHRoaXNbaV0gPT09IGl0ZW0pIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fVxuXHQvLyBWZW5kb3JzOiBwbGVhc2UgYWxsb3cgY29udGVudCBjb2RlIHRvIGluc3RhbnRpYXRlIERPTUV4Y2VwdGlvbnNcblx0LCBET01FeCA9IGZ1bmN0aW9uICh0eXBlLCBtZXNzYWdlKSB7XG5cdFx0dGhpcy5uYW1lID0gdHlwZTtcblx0XHR0aGlzLmNvZGUgPSBET01FeGNlcHRpb25bdHlwZV07XG5cdFx0dGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcblx0fVxuXHQsIGNoZWNrVG9rZW5BbmRHZXRJbmRleCA9IGZ1bmN0aW9uIChjbGFzc0xpc3QsIHRva2VuKSB7XG5cdFx0aWYgKHRva2VuID09PSBcIlwiKSB7XG5cdFx0XHR0aHJvdyBuZXcgRE9NRXgoXG5cdFx0XHRcdCAgXCJTWU5UQVhfRVJSXCJcblx0XHRcdFx0LCBcIkFuIGludmFsaWQgb3IgaWxsZWdhbCBzdHJpbmcgd2FzIHNwZWNpZmllZFwiXG5cdFx0XHQpO1xuXHRcdH1cblx0XHRpZiAoL1xccy8udGVzdCh0b2tlbikpIHtcblx0XHRcdHRocm93IG5ldyBET01FeChcblx0XHRcdFx0ICBcIklOVkFMSURfQ0hBUkFDVEVSX0VSUlwiXG5cdFx0XHRcdCwgXCJTdHJpbmcgY29udGFpbnMgYW4gaW52YWxpZCBjaGFyYWN0ZXJcIlxuXHRcdFx0KTtcblx0XHR9XG5cdFx0cmV0dXJuIGFyckluZGV4T2YuY2FsbChjbGFzc0xpc3QsIHRva2VuKTtcblx0fVxuXHQsIENsYXNzTGlzdCA9IGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0dmFyXG5cdFx0XHQgIHRyaW1tZWRDbGFzc2VzID0gc3RyVHJpbS5jYWxsKGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIilcblx0XHRcdCwgY2xhc3NlcyA9IHRyaW1tZWRDbGFzc2VzID8gdHJpbW1lZENsYXNzZXMuc3BsaXQoL1xccysvKSA6IFtdXG5cdFx0XHQsIGkgPSAwXG5cdFx0XHQsIGxlbiA9IGNsYXNzZXMubGVuZ3RoXG5cdFx0O1xuXHRcdGZvciAoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdHRoaXMucHVzaChjbGFzc2VzW2ldKTtcblx0XHR9XG5cdFx0dGhpcy5fdXBkYXRlQ2xhc3NOYW1lID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLnRvU3RyaW5nKCkpO1xuXHRcdH07XG5cdH1cblx0LCBjbGFzc0xpc3RQcm90byA9IENsYXNzTGlzdFtwcm90b1Byb3BdID0gW11cblx0LCBjbGFzc0xpc3RHZXR0ZXIgPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIG5ldyBDbGFzc0xpc3QodGhpcyk7XG5cdH1cbjtcbi8vIE1vc3QgRE9NRXhjZXB0aW9uIGltcGxlbWVudGF0aW9ucyBkb24ndCBhbGxvdyBjYWxsaW5nIERPTUV4Y2VwdGlvbidzIHRvU3RyaW5nKClcbi8vIG9uIG5vbi1ET01FeGNlcHRpb25zLiBFcnJvcidzIHRvU3RyaW5nKCkgaXMgc3VmZmljaWVudCBoZXJlLlxuRE9NRXhbcHJvdG9Qcm9wXSA9IEVycm9yW3Byb3RvUHJvcF07XG5jbGFzc0xpc3RQcm90by5pdGVtID0gZnVuY3Rpb24gKGkpIHtcblx0cmV0dXJuIHRoaXNbaV0gfHwgbnVsbDtcbn07XG5jbGFzc0xpc3RQcm90by5jb250YWlucyA9IGZ1bmN0aW9uICh0b2tlbikge1xuXHR0b2tlbiArPSBcIlwiO1xuXHRyZXR1cm4gY2hlY2tUb2tlbkFuZEdldEluZGV4KHRoaXMsIHRva2VuKSAhPT0gLTE7XG59O1xuY2xhc3NMaXN0UHJvdG8uYWRkID0gZnVuY3Rpb24gKCkge1xuXHR2YXJcblx0XHQgIHRva2VucyA9IGFyZ3VtZW50c1xuXHRcdCwgaSA9IDBcblx0XHQsIGwgPSB0b2tlbnMubGVuZ3RoXG5cdFx0LCB0b2tlblxuXHRcdCwgdXBkYXRlZCA9IGZhbHNlXG5cdDtcblx0ZG8ge1xuXHRcdHRva2VuID0gdG9rZW5zW2ldICsgXCJcIjtcblx0XHRpZiAoY2hlY2tUb2tlbkFuZEdldEluZGV4KHRoaXMsIHRva2VuKSA9PT0gLTEpIHtcblx0XHRcdHRoaXMucHVzaCh0b2tlbik7XG5cdFx0XHR1cGRhdGVkID0gdHJ1ZTtcblx0XHR9XG5cdH1cblx0d2hpbGUgKCsraSA8IGwpO1xuXG5cdGlmICh1cGRhdGVkKSB7XG5cdFx0dGhpcy5fdXBkYXRlQ2xhc3NOYW1lKCk7XG5cdH1cbn07XG5jbGFzc0xpc3RQcm90by5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdHZhclxuXHRcdCAgdG9rZW5zID0gYXJndW1lbnRzXG5cdFx0LCBpID0gMFxuXHRcdCwgbCA9IHRva2Vucy5sZW5ndGhcblx0XHQsIHRva2VuXG5cdFx0LCB1cGRhdGVkID0gZmFsc2Vcblx0XHQsIGluZGV4XG5cdDtcblx0ZG8ge1xuXHRcdHRva2VuID0gdG9rZW5zW2ldICsgXCJcIjtcblx0XHRpbmRleCA9IGNoZWNrVG9rZW5BbmRHZXRJbmRleCh0aGlzLCB0b2tlbik7XG5cdFx0d2hpbGUgKGluZGV4ICE9PSAtMSkge1xuXHRcdFx0dGhpcy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0dXBkYXRlZCA9IHRydWU7XG5cdFx0XHRpbmRleCA9IGNoZWNrVG9rZW5BbmRHZXRJbmRleCh0aGlzLCB0b2tlbik7XG5cdFx0fVxuXHR9XG5cdHdoaWxlICgrK2kgPCBsKTtcblxuXHRpZiAodXBkYXRlZCkge1xuXHRcdHRoaXMuX3VwZGF0ZUNsYXNzTmFtZSgpO1xuXHR9XG59O1xuY2xhc3NMaXN0UHJvdG8udG9nZ2xlID0gZnVuY3Rpb24gKHRva2VuLCBmb3JjZSkge1xuXHR0b2tlbiArPSBcIlwiO1xuXG5cdHZhclxuXHRcdCAgcmVzdWx0ID0gdGhpcy5jb250YWlucyh0b2tlbilcblx0XHQsIG1ldGhvZCA9IHJlc3VsdCA/XG5cdFx0XHRmb3JjZSAhPT0gdHJ1ZSAmJiBcInJlbW92ZVwiXG5cdFx0OlxuXHRcdFx0Zm9yY2UgIT09IGZhbHNlICYmIFwiYWRkXCJcblx0O1xuXG5cdGlmIChtZXRob2QpIHtcblx0XHR0aGlzW21ldGhvZF0odG9rZW4pO1xuXHR9XG5cblx0aWYgKGZvcmNlID09PSB0cnVlIHx8IGZvcmNlID09PSBmYWxzZSkge1xuXHRcdHJldHVybiBmb3JjZTtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gIXJlc3VsdDtcblx0fVxufTtcbmNsYXNzTGlzdFByb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gdGhpcy5qb2luKFwiIFwiKTtcbn07XG5cbmlmIChvYmpDdHIuZGVmaW5lUHJvcGVydHkpIHtcblx0dmFyIGNsYXNzTGlzdFByb3BEZXNjID0ge1xuXHRcdCAgZ2V0OiBjbGFzc0xpc3RHZXR0ZXJcblx0XHQsIGVudW1lcmFibGU6IHRydWVcblx0XHQsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHR9O1xuXHR0cnkge1xuXHRcdG9iakN0ci5kZWZpbmVQcm9wZXJ0eShlbGVtQ3RyUHJvdG8sIGNsYXNzTGlzdFByb3AsIGNsYXNzTGlzdFByb3BEZXNjKTtcblx0fSBjYXRjaCAoZXgpIHsgLy8gSUUgOCBkb2Vzbid0IHN1cHBvcnQgZW51bWVyYWJsZTp0cnVlXG5cdFx0Ly8gYWRkaW5nIHVuZGVmaW5lZCB0byBmaWdodCB0aGlzIGlzc3VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lbGlncmV5L2NsYXNzTGlzdC5qcy9pc3N1ZXMvMzZcblx0XHQvLyBtb2Rlcm5pZSBJRTgtTVNXNyBtYWNoaW5lIGhhcyBJRTggOC4wLjYwMDEuMTg3MDIgYW5kIGlzIGFmZmVjdGVkXG5cdFx0aWYgKGV4Lm51bWJlciA9PT0gdW5kZWZpbmVkIHx8IGV4Lm51bWJlciA9PT0gLTB4N0ZGNUVDNTQpIHtcblx0XHRcdGNsYXNzTGlzdFByb3BEZXNjLmVudW1lcmFibGUgPSBmYWxzZTtcblx0XHRcdG9iakN0ci5kZWZpbmVQcm9wZXJ0eShlbGVtQ3RyUHJvdG8sIGNsYXNzTGlzdFByb3AsIGNsYXNzTGlzdFByb3BEZXNjKTtcblx0XHR9XG5cdH1cbn0gZWxzZSBpZiAob2JqQ3RyW3Byb3RvUHJvcF0uX19kZWZpbmVHZXR0ZXJfXykge1xuXHRlbGVtQ3RyUHJvdG8uX19kZWZpbmVHZXR0ZXJfXyhjbGFzc0xpc3RQcm9wLCBjbGFzc0xpc3RHZXR0ZXIpO1xufVxuXG59KHdpbmRvdy5zZWxmKSk7XG5cbn1cblxuLy8gVGhlcmUgaXMgZnVsbCBvciBwYXJ0aWFsIG5hdGl2ZSBjbGFzc0xpc3Qgc3VwcG9ydCwgc28ganVzdCBjaGVjayBpZiB3ZSBuZWVkXG4vLyB0byBub3JtYWxpemUgdGhlIGFkZC9yZW1vdmUgYW5kIHRvZ2dsZSBBUElzLlxuXG4oZnVuY3Rpb24gKCkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgdGVzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiX1wiKTtcblxuXHR0ZXN0RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiYzFcIiwgXCJjMlwiKTtcblxuXHQvLyBQb2x5ZmlsbCBmb3IgSUUgMTAvMTEgYW5kIEZpcmVmb3ggPDI2LCB3aGVyZSBjbGFzc0xpc3QuYWRkIGFuZFxuXHQvLyBjbGFzc0xpc3QucmVtb3ZlIGV4aXN0IGJ1dCBzdXBwb3J0IG9ubHkgb25lIGFyZ3VtZW50IGF0IGEgdGltZS5cblx0aWYgKCF0ZXN0RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJjMlwiKSkge1xuXHRcdHZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbihtZXRob2QpIHtcblx0XHRcdHZhciBvcmlnaW5hbCA9IERPTVRva2VuTGlzdC5wcm90b3R5cGVbbWV0aG9kXTtcblxuXHRcdFx0RE9NVG9rZW5MaXN0LnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odG9rZW4pIHtcblx0XHRcdFx0dmFyIGksIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdFx0dG9rZW4gPSBhcmd1bWVudHNbaV07XG5cdFx0XHRcdFx0b3JpZ2luYWwuY2FsbCh0aGlzLCB0b2tlbik7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fTtcblx0XHRjcmVhdGVNZXRob2QoJ2FkZCcpO1xuXHRcdGNyZWF0ZU1ldGhvZCgncmVtb3ZlJyk7XG5cdH1cblxuXHR0ZXN0RWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKFwiYzNcIiwgZmFsc2UpO1xuXG5cdC8vIFBvbHlmaWxsIGZvciBJRSAxMCBhbmQgRmlyZWZveCA8MjQsIHdoZXJlIGNsYXNzTGlzdC50b2dnbGUgZG9lcyBub3Rcblx0Ly8gc3VwcG9ydCB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuXHRpZiAodGVzdEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiYzNcIikpIHtcblx0XHR2YXIgX3RvZ2dsZSA9IERPTVRva2VuTGlzdC5wcm90b3R5cGUudG9nZ2xlO1xuXG5cdFx0RE9NVG9rZW5MaXN0LnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbih0b2tlbiwgZm9yY2UpIHtcblx0XHRcdGlmICgxIGluIGFyZ3VtZW50cyAmJiAhdGhpcy5jb250YWlucyh0b2tlbikgPT09ICFmb3JjZSkge1xuXHRcdFx0XHRyZXR1cm4gZm9yY2U7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gX3RvZ2dsZS5jYWxsKHRoaXMsIHRva2VuKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdH1cblxuXHR0ZXN0RWxlbWVudCA9IG51bGw7XG59KCkpO1xuXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBnZXRJdGVyYXRvciA9IHJlcXVpcmUoJ2VzLWdldC1pdGVyYXRvcicpO1xudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJ2l0ZXJhdGUtaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpdGVyYXRlVmFsdWUoaXRlcmFibGUpIHtcblx0dmFyIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoaXRlcmFibGUpO1xuXHRpZiAoIWl0ZXJhdG9yKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ25vbi1pdGVyYWJsZSB2YWx1ZSBwcm92aWRlZCcpO1xuXHR9XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdHJldHVybiBpdGVyYXRlKGl0ZXJhdG9yLCBhcmd1bWVudHNbMV0pO1xuXHR9XG5cdHJldHVybiBpdGVyYXRlKGl0ZXJhdG9yKTtcbn07XG4iLCIvKiEgbWF0Y2hNZWRpYSgpIHBvbHlmaWxsIC0gVGVzdCBhIENTUyBtZWRpYSB0eXBlL3F1ZXJ5IGluIEpTLiBBdXRob3JzICYgY29weXJpZ2h0IChjKSAyMDEyOiBTY290dCBKZWhsLCBQYXVsIElyaXNoLCBOaWNob2xhcyBaYWthcywgRGF2aWQgS25pZ2h0LiBNSVQgbGljZW5zZSAqL1xuXG53aW5kb3cubWF0Y2hNZWRpYSB8fCAod2luZG93Lm1hdGNoTWVkaWEgPSBmdW5jdGlvbigpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIC8vIEZvciBicm93c2VycyB0aGF0IHN1cHBvcnQgbWF0Y2hNZWRpdW0gYXBpIHN1Y2ggYXMgSUUgOSBhbmQgd2Via2l0XG4gICAgdmFyIHN0eWxlTWVkaWEgPSAod2luZG93LnN0eWxlTWVkaWEgfHwgd2luZG93Lm1lZGlhKTtcblxuICAgIC8vIEZvciB0aG9zZSB0aGF0IGRvbid0IHN1cHBvcnQgbWF0Y2hNZWRpdW1cbiAgICBpZiAoIXN0eWxlTWVkaWEpIHtcbiAgICAgICAgdmFyIHN0eWxlICAgICAgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKSxcbiAgICAgICAgICAgIHNjcmlwdCAgICAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdLFxuICAgICAgICAgICAgaW5mbyAgICAgICAgPSBudWxsO1xuXG4gICAgICAgIHN0eWxlLnR5cGUgID0gJ3RleHQvY3NzJztcbiAgICAgICAgc3R5bGUuaWQgICAgPSAnbWF0Y2htZWRpYWpzLXRlc3QnO1xuXG4gICAgICAgIGlmICghc2NyaXB0KSB7XG4gICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2NyaXB0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHN0eWxlLCBzY3JpcHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gJ3N0eWxlLmN1cnJlbnRTdHlsZScgaXMgdXNlZCBieSBJRSA8PSA4IGFuZCAnd2luZG93LmdldENvbXB1dGVkU3R5bGUnIGZvciBhbGwgb3RoZXIgYnJvd3NlcnNcbiAgICAgICAgaW5mbyA9ICgnZ2V0Q29tcHV0ZWRTdHlsZScgaW4gd2luZG93KSAmJiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShzdHlsZSwgbnVsbCkgfHwgc3R5bGUuY3VycmVudFN0eWxlO1xuXG4gICAgICAgIHN0eWxlTWVkaWEgPSB7XG4gICAgICAgICAgICBtYXRjaE1lZGl1bTogZnVuY3Rpb24obWVkaWEpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGV4dCA9ICdAbWVkaWEgJyArIG1lZGlhICsgJ3sgI21hdGNobWVkaWFqcy10ZXN0IHsgd2lkdGg6IDFweDsgfSB9JztcblxuICAgICAgICAgICAgICAgIC8vICdzdHlsZS5zdHlsZVNoZWV0JyBpcyB1c2VkIGJ5IElFIDw9IDggYW5kICdzdHlsZS50ZXh0Q29udGVudCcgZm9yIGFsbCBvdGhlciBicm93c2Vyc1xuICAgICAgICAgICAgICAgIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHRleHQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFRlc3QgaWYgbWVkaWEgcXVlcnkgaXMgdHJ1ZSBvciBmYWxzZVxuICAgICAgICAgICAgICAgIHJldHVybiBpbmZvLndpZHRoID09PSAnMXB4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24obWVkaWEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1hdGNoZXM6IHN0eWxlTWVkaWEubWF0Y2hNZWRpdW0obWVkaWEgfHwgJ2FsbCcpLFxuICAgICAgICAgICAgbWVkaWE6IG1lZGlhIHx8ICdhbGwnXG4gICAgICAgIH07XG4gICAgfTtcbn0oKSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVxdWlyZVByb21pc2UoKSB7XG5cdGlmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2BQcm9taXNlLmFsbFNldHRsZWRgIHJlcXVpcmVzIGEgZ2xvYmFsIGBQcm9taXNlYCBiZSBhdmFpbGFibGUuJyk7XG5cdH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBrZXlzID0gcmVxdWlyZSgnb2JqZWN0LWtleXMnKTtcbnZhciBoYXNTeW1ib2xzID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sKCdmb28nKSA9PT0gJ3N5bWJvbCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgY29uY2F0ID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdDtcbnZhciBvcmlnRGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gKGZuKSB7XG5cdHJldHVybiB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgJiYgdG9TdHIuY2FsbChmbikgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xuXG52YXIgYXJlUHJvcGVydHlEZXNjcmlwdG9yc1N1cHBvcnRlZCA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIG9iaiA9IHt9O1xuXHR0cnkge1xuXHRcdG9yaWdEZWZpbmVQcm9wZXJ0eShvYmosICd4JywgeyBlbnVtZXJhYmxlOiBmYWxzZSwgdmFsdWU6IG9iaiB9KTtcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMsIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG5cdFx0Zm9yICh2YXIgXyBpbiBvYmopIHsgLy8ganNjczppZ25vcmUgZGlzYWxsb3dVbnVzZWRWYXJpYWJsZXNcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIG9iai54ID09PSBvYmo7XG5cdH0gY2F0Y2ggKGUpIHsgLyogdGhpcyBpcyBJRSA4LiAqL1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbnZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gb3JpZ0RlZmluZVByb3BlcnR5ICYmIGFyZVByb3BlcnR5RGVzY3JpcHRvcnNTdXBwb3J0ZWQoKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgdmFsdWUsIHByZWRpY2F0ZSkge1xuXHRpZiAobmFtZSBpbiBvYmplY3QgJiYgKCFpc0Z1bmN0aW9uKHByZWRpY2F0ZSkgfHwgIXByZWRpY2F0ZSgpKSkge1xuXHRcdHJldHVybjtcblx0fVxuXHRpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuXHRcdG9yaWdEZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0d3JpdGFibGU6IHRydWVcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHRvYmplY3RbbmFtZV0gPSB2YWx1ZTtcblx0fVxufTtcblxudmFyIGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiAob2JqZWN0LCBtYXApIHtcblx0dmFyIHByZWRpY2F0ZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXHR2YXIgcHJvcHMgPSBrZXlzKG1hcCk7XG5cdGlmIChoYXNTeW1ib2xzKSB7XG5cdFx0cHJvcHMgPSBjb25jYXQuY2FsbChwcm9wcywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhtYXApKTtcblx0fVxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0ZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wc1tpXSwgbWFwW3Byb3BzW2ldXSwgcHJlZGljYXRlc1twcm9wc1tpXV0pO1xuXHR9XG59O1xuXG5kZWZpbmVQcm9wZXJ0aWVzLnN1cHBvcnRzRGVzY3JpcHRvcnMgPSAhIXN1cHBvcnRzRGVzY3JpcHRvcnM7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lUHJvcGVydGllcztcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NhbGxCb3VuZCcpO1xuXG52YXIgJFByb21pc2VSZXNvbHZlID0gY2FsbEJvdW5kKCdQcm9taXNlLnJlc29sdmUnLCB0cnVlKTtcblxuLy8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzkuMC8jc2VjLXByb21pc2UtcmVzb2x2ZVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFByb21pc2VSZXNvbHZlKEMsIHgpIHtcblx0aWYgKCEkUHJvbWlzZVJlc29sdmUpIHtcblx0XHR0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ1RoaXMgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCBQcm9taXNlcy4nKTtcblx0fVxuXHRyZXR1cm4gJFByb21pc2VSZXNvbHZlKEMsIHgpO1xufTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJGlzTmFOID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc05hTicpO1xuXG4vLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtOS4xMlxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFNhbWVWYWx1ZSh4LCB5KSB7XG5cdGlmICh4ID09PSB5KSB7IC8vIDAgPT09IC0wLCBidXQgdGhleSBhcmUgbm90IGlkZW50aWNhbC5cblx0XHRpZiAoeCA9PT0gMCkgeyByZXR1cm4gMSAvIHggPT09IDEgLyB5OyB9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuICRpc05hTih4KSAmJiAkaXNOYU4oeSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCdkb2N1bWVudC5jb250YWlucy9hdXRvJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCB8fCBpbXBsZW1lbnRhdGlvbjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJHRlc3QgPSBHZXRJbnRyaW5zaWMoJ1JlZ0V4cC5wcm90b3R5cGUudGVzdCcpO1xuXG52YXIgY2FsbEJpbmQgPSByZXF1aXJlKCcuL2NhbGxCaW5kJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVnZXhUZXN0ZXIocmVnZXgpIHtcblx0cmV0dXJuIGNhbGxCaW5kKCR0ZXN0LCByZWdleCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0RGF5ID0gRGF0ZS5wcm90b3R5cGUuZ2V0RGF5O1xudmFyIHRyeURhdGVPYmplY3QgPSBmdW5jdGlvbiB0cnlEYXRlR2V0RGF5Q2FsbCh2YWx1ZSkge1xuXHR0cnkge1xuXHRcdGdldERheS5jYWxsKHZhbHVlKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBkYXRlQ2xhc3MgPSAnW29iamVjdCBEYXRlXSc7XG52YXIgaGFzVG9TdHJpbmdUYWcgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzRGF0ZU9iamVjdCh2YWx1ZSkge1xuXHRpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRyZXR1cm4gaGFzVG9TdHJpbmdUYWcgPyB0cnlEYXRlT2JqZWN0KHZhbHVlKSA6IHRvU3RyLmNhbGwodmFsdWUpID09PSBkYXRlQ2xhc3M7XG59O1xuIiwicmVxdWlyZSgnLi8nKS5wb2x5ZmlsbCgpXG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNQcmltaXRpdmUodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlID09PSBudWxsIHx8ICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdHJldHVybiBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXMgfHwgaW1wbGVtZW50YXRpb247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVxdWlyZVByb21pc2UgPSByZXF1aXJlKCcuL3JlcXVpcmVQcm9taXNlJyk7XG5cbnJlcXVpcmVQcm9taXNlKCk7XG5cbnZhciBQcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvUHJvbWlzZVJlc29sdmUnKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9UeXBlJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJ2l0ZXJhdGUtdmFsdWUnKTtcbnZhciBtYXAgPSByZXF1aXJlKCdhcnJheS5wcm90b3R5cGUubWFwJyk7XG52YXIgZ2V0SW50cmluc2ljID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvR2V0SW50cmluc2ljJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcblxudmFyIGFsbCA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBnZXRJbnRyaW5zaWMoJyVQcm9taXNlX2FsbCUnKSk7XG52YXIgcmVqZWN0ID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIGdldEludHJpbnNpYygnJVByb21pc2VfcmVqZWN0JScpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBhbGxTZXR0bGVkKGl0ZXJhYmxlKSB7XG5cdHZhciBDID0gdGhpcztcblx0aWYgKFR5cGUoQykgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignYHRoaXNgIHZhbHVlIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG5cdH1cblx0dmFyIHZhbHVlcyA9IGl0ZXJhdGUoaXRlcmFibGUpO1xuXHRyZXR1cm4gYWxsKEMsIG1hcCh2YWx1ZXMsIGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0dmFyIG9uRnVsZmlsbCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0cmV0dXJuIHsgc3RhdHVzOiAnZnVsZmlsbGVkJywgdmFsdWU6IHZhbHVlIH07XG5cdFx0fTtcblx0XHR2YXIgb25SZWplY3QgPSBmdW5jdGlvbiAocmVhc29uKSB7XG5cdFx0XHRyZXR1cm4geyBzdGF0dXM6ICdyZWplY3RlZCcsIHJlYXNvbjogcmVhc29uIH07XG5cdFx0fTtcblx0XHR2YXIgaXRlbVByb21pc2UgPSBQcm9taXNlUmVzb2x2ZShDLCBpdGVtKTtcblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuIGl0ZW1Qcm9taXNlLnRoZW4ob25GdWxmaWxsLCBvblJlamVjdCk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0cmV0dXJuIHJlamVjdChDLCBlKTtcblx0XHR9XG5cdH0pKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4vc2hpbScpKCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludCBjb21wbGV4aXR5OiBbMiwgMThdLCBtYXgtc3RhdGVtZW50czogWzIsIDMzXSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoYXNTeW1ib2xzKCkge1xuXHRpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdzeW1ib2wnKSB7IHJldHVybiB0cnVlOyB9XG5cblx0dmFyIG9iaiA9IHt9O1xuXHR2YXIgc3ltID0gU3ltYm9sKCd0ZXN0Jyk7XG5cdHZhciBzeW1PYmogPSBPYmplY3Qoc3ltKTtcblx0aWYgKHR5cGVvZiBzeW0gPT09ICdzdHJpbmcnKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltT2JqKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gdGVtcCBkaXNhYmxlZCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9vYmplY3QuYXNzaWduL2lzc3Vlcy8xN1xuXHQvLyBpZiAoc3ltIGluc3RhbmNlb2YgU3ltYm9sKSB7IHJldHVybiBmYWxzZTsgfVxuXHQvLyB0ZW1wIGRpc2FibGVkIHBlciBodHRwczovL2dpdGh1Yi5jb20vV2ViUmVmbGVjdGlvbi9nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMvaXNzdWVzLzRcblx0Ly8gaWYgKCEoc3ltT2JqIGluc3RhbmNlb2YgU3ltYm9sKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHQvLyBpZiAodHlwZW9mIFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdC8vIGlmIChTdHJpbmcoc3ltKSAhPT0gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0dmFyIHN5bVZhbCA9IDQyO1xuXHRvYmpbc3ltXSA9IHN5bVZhbDtcblx0Zm9yIChzeW0gaW4gb2JqKSB7IHJldHVybiBmYWxzZTsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG5cdGlmICh0eXBlb2YgT2JqZWN0LmtleXMgPT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggIT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyA9PT0gJ2Z1bmN0aW9uJyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmxlbmd0aCAhPT0gMCkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHR2YXIgc3ltcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqKTtcblx0aWYgKHN5bXMubGVuZ3RoICE9PSAxIHx8IHN5bXNbMF0gIT09IHN5bSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmosIHN5bSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwgc3ltKTtcblx0XHRpZiAoZGVzY3JpcHRvci52YWx1ZSAhPT0gc3ltVmFsIHx8IGRlc2NyaXB0b3IuZW51bWVyYWJsZSAhPT0gdHJ1ZSkgeyByZXR1cm4gZmFsc2U7IH1cblx0fVxuXG5cdHJldHVybiB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhcyA9IHJlcXVpcmUoJ2hhcycpO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xudmFyIFRvQm9vbGVhbiA9IHJlcXVpcmUoJy4vVG9Cb29sZWFuJyk7XG52YXIgSXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4vSXNDYWxsYWJsZScpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtOC4xMC41XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVG9Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqKSB7XG5cdGlmIChUeXBlKE9iaikgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1RvUHJvcGVydHlEZXNjcmlwdG9yIHJlcXVpcmVzIGFuIG9iamVjdCcpO1xuXHR9XG5cblx0dmFyIGRlc2MgPSB7fTtcblx0aWYgKGhhcyhPYmosICdlbnVtZXJhYmxlJykpIHtcblx0XHRkZXNjWydbW0VudW1lcmFibGVdXSddID0gVG9Cb29sZWFuKE9iai5lbnVtZXJhYmxlKTtcblx0fVxuXHRpZiAoaGFzKE9iaiwgJ2NvbmZpZ3VyYWJsZScpKSB7XG5cdFx0ZGVzY1snW1tDb25maWd1cmFibGVdXSddID0gVG9Cb29sZWFuKE9iai5jb25maWd1cmFibGUpO1xuXHR9XG5cdGlmIChoYXMoT2JqLCAndmFsdWUnKSkge1xuXHRcdGRlc2NbJ1tbVmFsdWVdXSddID0gT2JqLnZhbHVlO1xuXHR9XG5cdGlmIChoYXMoT2JqLCAnd3JpdGFibGUnKSkge1xuXHRcdGRlc2NbJ1tbV3JpdGFibGVdXSddID0gVG9Cb29sZWFuKE9iai53cml0YWJsZSk7XG5cdH1cblx0aWYgKGhhcyhPYmosICdnZXQnKSkge1xuXHRcdHZhciBnZXR0ZXIgPSBPYmouZ2V0O1xuXHRcdGlmICh0eXBlb2YgZ2V0dGVyICE9PSAndW5kZWZpbmVkJyAmJiAhSXNDYWxsYWJsZShnZXR0ZXIpKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdnZXR0ZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cdFx0fVxuXHRcdGRlc2NbJ1tbR2V0XV0nXSA9IGdldHRlcjtcblx0fVxuXHRpZiAoaGFzKE9iaiwgJ3NldCcpKSB7XG5cdFx0dmFyIHNldHRlciA9IE9iai5zZXQ7XG5cdFx0aWYgKHR5cGVvZiBzZXR0ZXIgIT09ICd1bmRlZmluZWQnICYmICFJc0NhbGxhYmxlKHNldHRlcikpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdzZXR0ZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cdFx0fVxuXHRcdGRlc2NbJ1tbU2V0XV0nXSA9IHNldHRlcjtcblx0fVxuXG5cdGlmICgoaGFzKGRlc2MsICdbW0dldF1dJykgfHwgaGFzKGRlc2MsICdbW1NldF1dJykpICYmIChoYXMoZGVzYywgJ1tbVmFsdWVdXScpIHx8IGhhcyhkZXNjLCAnW1tXcml0YWJsZV1dJykpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0ludmFsaWQgcHJvcGVydHkgZGVzY3JpcHRvci4gQ2Fubm90IGJvdGggc3BlY2lmeSBhY2Nlc3NvcnMgYW5kIGEgdmFsdWUgb3Igd3JpdGFibGUgYXR0cmlidXRlJyk7XG5cdH1cblx0cmV0dXJuIGRlc2M7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAodHlwZW9mIFByb21pc2UgPT09ICdmdW5jdGlvbicpIHtcbiAgcmVxdWlyZSgncHJvbWlzZS5wcm90b3R5cGUuZmluYWxseS9hdXRvJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZ2xvYmFsLXJlcXVpcmVcbn1cblxucmVxdWlyZSgnLi9lczIwMTknKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbUNvbnRhaW5zKCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuXHRcdGRlZmluZShcblx0XHRcdGRvY3VtZW50LFxuXHRcdFx0eyBjb250YWluczogcG9seWZpbGwgfSxcblx0XHRcdHsgY29udGFpbnM6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LmNvbnRhaW5zICE9PSBwb2x5ZmlsbDsgfSB9XG5cdFx0KTtcblx0XHRpZiAodHlwZW9mIEVsZW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRkZWZpbmUoXG5cdFx0XHRcdEVsZW1lbnQucHJvdG90eXBlLFxuXHRcdFx0XHR7IGNvbnRhaW5zOiBwb2x5ZmlsbCB9LFxuXHRcdFx0XHR7IGNvbnRhaW5zOiBmdW5jdGlvbiAoKSB7IHJldHVybiBFbGVtZW50LnByb3RvdHlwZS5jb250YWlucyAhPT0gcG9seWZpbGw7IH0gfVxuXHRcdFx0KTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRyZXR1cm4gdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID09PSAnZnVuY3Rpb24nID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgOiBpbXBsZW1lbnRhdGlvbjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKS5zdXBwb3J0c0Rlc2NyaXB0b3JzO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIFR5cGVFcnIgPSBUeXBlRXJyb3I7XG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgcmVnZXggPSAvYS87XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbUZsYWdzKCkge1xuXHRpZiAoIXN1cHBvcnRzRGVzY3JpcHRvcnMgfHwgIWdldFByb3RvKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnIoJ1JlZ0V4cC5wcm90b3R5cGUuZmxhZ3MgcmVxdWlyZXMgYSB0cnVlIEVTNSBlbnZpcm9ubWVudCB0aGF0IHN1cHBvcnRzIHByb3BlcnR5IGRlc2NyaXB0b3JzJyk7XG5cdH1cblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0dmFyIHByb3RvID0gZ2V0UHJvdG8ocmVnZXgpO1xuXHR2YXIgZGVzY3JpcHRvciA9IGdPUEQocHJvdG8sICdmbGFncycpO1xuXHRpZiAoIWRlc2NyaXB0b3IgfHwgZGVzY3JpcHRvci5nZXQgIT09IHBvbHlmaWxsKSB7XG5cdFx0ZGVmaW5lUHJvcGVydHkocHJvdG8sICdmbGFncycsIHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0Z2V0OiBwb2x5ZmlsbFxuXHRcdH0pO1xuXHR9XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBBcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0FycmF5U3BlY2llc0NyZWF0ZScpO1xudmFyIEZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0ZsYXR0ZW5JbnRvQXJyYXknKTtcbnZhciBHZXQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0dldCcpO1xudmFyIElzQ2FsbGFibGUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0lzQ2FsbGFibGUnKTtcbnZhciBUb0xlbmd0aCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVG9MZW5ndGgnKTtcbnZhciBUb09iamVjdCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVG9PYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmbGF0TWFwKG1hcHBlckZ1bmN0aW9uKSB7XG5cdHZhciBPID0gVG9PYmplY3QodGhpcyk7XG5cdHZhciBzb3VyY2VMZW4gPSBUb0xlbmd0aChHZXQoTywgJ2xlbmd0aCcpKTtcblxuXHRpZiAoIUlzQ2FsbGFibGUobWFwcGVyRnVuY3Rpb24pKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignbWFwcGVyRnVuY3Rpb24gbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cdH1cblxuXHR2YXIgVDtcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG5cdFx0VCA9IGFyZ3VtZW50c1sxXTtcblx0fVxuXG5cdHZhciBBID0gQXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuXHRGbGF0dGVuSW50b0FycmF5KEEsIE8sIHNvdXJjZUxlbiwgMCwgMSwgbWFwcGVyRnVuY3Rpb24sIFQpO1xuXHRyZXR1cm4gQTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRnT1BEID0gR2V0SW50cmluc2ljKCclT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciUnKTtcbmlmICgkZ09QRCkge1xuXHR0cnkge1xuXHRcdCRnT1BEKFtdLCAnbGVuZ3RoJyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBJRSA4IGhhcyBhIGJyb2tlbiBnT1BEXG5cdFx0JGdPUEQgPSBudWxsO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gJGdPUEQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1FbnRyaWVzKCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoT2JqZWN0LCB7IGVudHJpZXM6IHBvbHlmaWxsIH0sIHtcblx0XHRlbnRyaWVzOiBmdW5jdGlvbiB0ZXN0RW50cmllcygpIHtcblx0XHRcdHJldHVybiBPYmplY3QuZW50cmllcyAhPT0gcG9seWZpbGw7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIERlZmluZU93blByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaGVscGVycy9EZWZpbmVPd25Qcm9wZXJ0eScpO1xuXG52YXIgRnJvbVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vRnJvbVByb3BlcnR5RGVzY3JpcHRvcicpO1xudmFyIE9yZGluYXJ5R2V0T3duUHJvcGVydHkgPSByZXF1aXJlKCcuL09yZGluYXJ5R2V0T3duUHJvcGVydHknKTtcbnZhciBJc0RhdGFEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9Jc0RhdGFEZXNjcmlwdG9yJyk7XG52YXIgSXNFeHRlbnNpYmxlID0gcmVxdWlyZSgnLi9Jc0V4dGVuc2libGUnKTtcbnZhciBJc1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi9Jc1Byb3BlcnR5S2V5Jyk7XG52YXIgU2FtZVZhbHVlID0gcmVxdWlyZSgnLi9TYW1lVmFsdWUnKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtY3JlYXRlZGF0YXByb3BlcnR5XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQ3JlYXRlRGF0YVByb3BlcnR5KE8sIFAsIFYpIHtcblx0aWYgKFR5cGUoTykgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFR5cGUoTykgaXMgbm90IE9iamVjdCcpO1xuXHR9XG5cdGlmICghSXNQcm9wZXJ0eUtleShQKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBJc1Byb3BlcnR5S2V5KFApIGlzIG5vdCB0cnVlJyk7XG5cdH1cblx0dmFyIG9sZERlc2MgPSBPcmRpbmFyeUdldE93blByb3BlcnR5KE8sIFApO1xuXHR2YXIgZXh0ZW5zaWJsZSA9ICFvbGREZXNjIHx8IElzRXh0ZW5zaWJsZShPKTtcblx0dmFyIGltbXV0YWJsZSA9IG9sZERlc2MgJiYgKCFvbGREZXNjWydbW1dyaXRhYmxlXV0nXSB8fCAhb2xkRGVzY1snW1tDb25maWd1cmFibGVdXSddKTtcblx0aWYgKGltbXV0YWJsZSB8fCAhZXh0ZW5zaWJsZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRyZXR1cm4gRGVmaW5lT3duUHJvcGVydHkoXG5cdFx0SXNEYXRhRGVzY3JpcHRvcixcblx0XHRTYW1lVmFsdWUsXG5cdFx0RnJvbVByb3BlcnR5RGVzY3JpcHRvcixcblx0XHRPLFxuXHRcdFAsXG5cdFx0e1xuXHRcdFx0J1tbQ29uZmlndXJhYmxlXV0nOiB0cnVlLFxuXHRcdFx0J1tbRW51bWVyYWJsZV1dJzogdHJ1ZSxcblx0XHRcdCdbW1ZhbHVlXV0nOiBWLFxuXHRcdFx0J1tbV3JpdGFibGVdXSc6IHRydWVcblx0XHR9XG5cdCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuL3NoaW0nKSgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdHJldHVybiB0eXBlb2YgT2JqZWN0LmZyb21FbnRyaWVzID09PSAnZnVuY3Rpb24nID8gT2JqZWN0LmZyb21FbnRyaWVzIDogaW1wbGVtZW50YXRpb247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiBpc05hTihhKSB7XG5cdHJldHVybiBhICE9PSBhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGZuVG9TdHIgPSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmc7XG5cbnZhciBjb25zdHJ1Y3RvclJlZ2V4ID0gL15cXHMqY2xhc3NcXGIvO1xudmFyIGlzRVM2Q2xhc3NGbiA9IGZ1bmN0aW9uIGlzRVM2Q2xhc3NGdW5jdGlvbih2YWx1ZSkge1xuXHR0cnkge1xuXHRcdHZhciBmblN0ciA9IGZuVG9TdHIuY2FsbCh2YWx1ZSk7XG5cdFx0cmV0dXJuIGNvbnN0cnVjdG9yUmVnZXgudGVzdChmblN0cik7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7IC8vIG5vdCBhIGZ1bmN0aW9uXG5cdH1cbn07XG5cbnZhciB0cnlGdW5jdGlvbk9iamVjdCA9IGZ1bmN0aW9uIHRyeUZ1bmN0aW9uVG9TdHIodmFsdWUpIHtcblx0dHJ5IHtcblx0XHRpZiAoaXNFUzZDbGFzc0ZuKHZhbHVlKSkgeyByZXR1cm4gZmFsc2U7IH1cblx0XHRmblRvU3RyLmNhbGwodmFsdWUpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59O1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBmbkNsYXNzID0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbnZhciBnZW5DbGFzcyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXSc7XG52YXIgaGFzVG9TdHJpbmdUYWcgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FsbGFibGUodmFsdWUpIHtcblx0aWYgKCF2YWx1ZSkgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nICYmICF2YWx1ZS5wcm90b3R5cGUpIHsgcmV0dXJuIHRydWU7IH1cblx0aWYgKGhhc1RvU3RyaW5nVGFnKSB7IHJldHVybiB0cnlGdW5jdGlvbk9iamVjdCh2YWx1ZSk7IH1cblx0aWYgKGlzRVM2Q2xhc3NGbih2YWx1ZSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdHZhciBzdHJDbGFzcyA9IHRvU3RyLmNhbGwodmFsdWUpO1xuXHRyZXR1cm4gc3RyQ2xhc3MgPT09IGZuQ2xhc3MgfHwgc3RyQ2xhc3MgPT09IGdlbkNsYXNzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi81L0NoZWNrT2JqZWN0Q29lcmNpYmxlJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBmdW5jdGlvbnNIYXZlTmFtZXMgPSBmdW5jdGlvbiBmdW5jdGlvbnNIYXZlTmFtZXMoKSB7XG5cdHJldHVybiB0eXBlb2YgZnVuY3Rpb24gZigpIHt9Lm5hbWUgPT09ICdzdHJpbmcnO1xufTtcblxudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuaWYgKGdPUEQpIHtcblx0dHJ5IHtcblx0XHRnT1BEKFtdLCAnbGVuZ3RoJyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBJRSA4IGhhcyBhIGJyb2tlbiBnT1BEXG5cdFx0Z09QRCA9IG51bGw7XG5cdH1cbn1cblxuZnVuY3Rpb25zSGF2ZU5hbWVzLmZ1bmN0aW9uc0hhdmVDb25maWd1cmFibGVOYW1lcyA9IGZ1bmN0aW9uIGZ1bmN0aW9uc0hhdmVDb25maWd1cmFibGVOYW1lcygpIHtcblx0cmV0dXJuIGZ1bmN0aW9uc0hhdmVOYW1lcygpICYmIGdPUEQgJiYgISFnT1BEKGZ1bmN0aW9uICgpIHt9LCAnbmFtZScpLmNvbmZpZ3VyYWJsZTtcbn07XG5cbnZhciAkYmluZCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kO1xuXG5mdW5jdGlvbnNIYXZlTmFtZXMuYm91bmRGdW5jdGlvbnNIYXZlTmFtZXMgPSBmdW5jdGlvbiBib3VuZEZ1bmN0aW9uc0hhdmVOYW1lcygpIHtcblx0cmV0dXJuIGZ1bmN0aW9uc0hhdmVOYW1lcygpICYmIHR5cGVvZiAkYmluZCA9PT0gJ2Z1bmN0aW9uJyAmJiBmdW5jdGlvbiBmKCkge30uYmluZCgpLm5hbWUgIT09ICcnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbnNIYXZlTmFtZXM7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBDYWxsID0gcmVxdWlyZSgnLi9DYWxsJyk7XG52YXIgR2V0TWV0aG9kID0gcmVxdWlyZSgnLi9HZXRNZXRob2QnKTtcbnZhciBJc0NhbGxhYmxlID0gcmVxdWlyZSgnLi9Jc0NhbGxhYmxlJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaXRlcmF0b3JjbG9zZVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pIHtcblx0aWYgKFR5cGUoaXRlcmF0b3IpICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKGl0ZXJhdG9yKSBpcyBub3QgT2JqZWN0Jyk7XG5cdH1cblx0aWYgKCFJc0NhbGxhYmxlKGNvbXBsZXRpb24pKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGNvbXBsZXRpb24gaXMgbm90IGEgdGh1bmsgZm9yIGEgQ29tcGxldGlvbiBSZWNvcmQnKTtcblx0fVxuXHR2YXIgY29tcGxldGlvblRodW5rID0gY29tcGxldGlvbjtcblxuXHR2YXIgaXRlcmF0b3JSZXR1cm4gPSBHZXRNZXRob2QoaXRlcmF0b3IsICdyZXR1cm4nKTtcblxuXHRpZiAodHlwZW9mIGl0ZXJhdG9yUmV0dXJuID09PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybiBjb21wbGV0aW9uVGh1bmsoKTtcblx0fVxuXG5cdHZhciBjb21wbGV0aW9uUmVjb3JkO1xuXHR0cnkge1xuXHRcdHZhciBpbm5lclJlc3VsdCA9IENhbGwoaXRlcmF0b3JSZXR1cm4sIGl0ZXJhdG9yLCBbXSk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBpZiB3ZSBoaXQgaGVyZSwgdGhlbiBcImVcIiBpcyB0aGUgaW5uZXJSZXN1bHQgY29tcGxldGlvbiB0aGF0IG5lZWRzIHJlLXRocm93aW5nXG5cblx0XHQvLyBpZiB0aGUgY29tcGxldGlvbiBpcyBvZiB0eXBlIFwidGhyb3dcIiwgdGhpcyB3aWxsIHRocm93LlxuXHRcdGNvbXBsZXRpb25UaHVuaygpO1xuXHRcdGNvbXBsZXRpb25UaHVuayA9IG51bGw7IC8vIGVuc3VyZSBpdCdzIG5vdCBjYWxsZWQgdHdpY2UuXG5cblx0XHQvLyBpZiBub3QsIHRoZW4gcmV0dXJuIHRoZSBpbm5lclJlc3VsdCBjb21wbGV0aW9uXG5cdFx0dGhyb3cgZTtcblx0fVxuXHRjb21wbGV0aW9uUmVjb3JkID0gY29tcGxldGlvblRodW5rKCk7IC8vIGlmIGlubmVyUmVzdWx0IHdvcmtlZCwgdGhlbiB0aHJvdyBpZiB0aGUgY29tcGxldGlvbiBkb2VzXG5cdGNvbXBsZXRpb25UaHVuayA9IG51bGw7IC8vIGVuc3VyZSBpdCdzIG5vdCBjYWxsZWQgdHdpY2UuXG5cblx0aWYgKFR5cGUoaW5uZXJSZXN1bHQpICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpdGVyYXRvciAucmV0dXJuIG11c3QgcmV0dXJuIGFuIG9iamVjdCcpO1xuXHR9XG5cblx0cmV0dXJuIGNvbXBsZXRpb25SZWNvcmQ7XG59O1xuIiwidmFyIGhhc01hcCA9IHR5cGVvZiBNYXAgPT09ICdmdW5jdGlvbicgJiYgTWFwLnByb3RvdHlwZTtcbnZhciBtYXBTaXplRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgaGFzTWFwID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNYXAucHJvdG90eXBlLCAnc2l6ZScpIDogbnVsbDtcbnZhciBtYXBTaXplID0gaGFzTWFwICYmIG1hcFNpemVEZXNjcmlwdG9yICYmIHR5cGVvZiBtYXBTaXplRGVzY3JpcHRvci5nZXQgPT09ICdmdW5jdGlvbicgPyBtYXBTaXplRGVzY3JpcHRvci5nZXQgOiBudWxsO1xudmFyIG1hcEZvckVhY2ggPSBoYXNNYXAgJiYgTWFwLnByb3RvdHlwZS5mb3JFYWNoO1xudmFyIGhhc1NldCA9IHR5cGVvZiBTZXQgPT09ICdmdW5jdGlvbicgJiYgU2V0LnByb3RvdHlwZTtcbnZhciBzZXRTaXplRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgaGFzU2V0ID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihTZXQucHJvdG90eXBlLCAnc2l6ZScpIDogbnVsbDtcbnZhciBzZXRTaXplID0gaGFzU2V0ICYmIHNldFNpemVEZXNjcmlwdG9yICYmIHR5cGVvZiBzZXRTaXplRGVzY3JpcHRvci5nZXQgPT09ICdmdW5jdGlvbicgPyBzZXRTaXplRGVzY3JpcHRvci5nZXQgOiBudWxsO1xudmFyIHNldEZvckVhY2ggPSBoYXNTZXQgJiYgU2V0LnByb3RvdHlwZS5mb3JFYWNoO1xudmFyIGhhc1dlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyAmJiBXZWFrTWFwLnByb3RvdHlwZTtcbnZhciB3ZWFrTWFwSGFzID0gaGFzV2Vha01hcCA/IFdlYWtNYXAucHJvdG90eXBlLmhhcyA6IG51bGw7XG52YXIgaGFzV2Vha1NldCA9IHR5cGVvZiBXZWFrU2V0ID09PSAnZnVuY3Rpb24nICYmIFdlYWtTZXQucHJvdG90eXBlO1xudmFyIHdlYWtTZXRIYXMgPSBoYXNXZWFrU2V0ID8gV2Vha1NldC5wcm90b3R5cGUuaGFzIDogbnVsbDtcbnZhciBib29sZWFuVmFsdWVPZiA9IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2Y7XG52YXIgb2JqZWN0VG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIG1hdGNoID0gU3RyaW5nLnByb3RvdHlwZS5tYXRjaDtcbnZhciBiaWdJbnRWYWx1ZU9mID0gdHlwZW9mIEJpZ0ludCA9PT0gJ2Z1bmN0aW9uJyA/IEJpZ0ludC5wcm90b3R5cGUudmFsdWVPZiA6IG51bGw7XG5cbnZhciBpbnNwZWN0Q3VzdG9tID0gcmVxdWlyZSgnLi91dGlsLmluc3BlY3QnKS5jdXN0b207XG52YXIgaW5zcGVjdFN5bWJvbCA9IGluc3BlY3RDdXN0b20gJiYgaXNTeW1ib2woaW5zcGVjdEN1c3RvbSkgPyBpbnNwZWN0Q3VzdG9tIDogbnVsbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbnNwZWN0XyhvYmosIG9wdGlvbnMsIGRlcHRoLCBzZWVuKSB7XG4gICAgdmFyIG9wdHMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgaWYgKGhhcyhvcHRzLCAncXVvdGVTdHlsZScpICYmIChvcHRzLnF1b3RlU3R5bGUgIT09ICdzaW5nbGUnICYmIG9wdHMucXVvdGVTdHlsZSAhPT0gJ2RvdWJsZScpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBcInF1b3RlU3R5bGVcIiBtdXN0IGJlIFwic2luZ2xlXCIgb3IgXCJkb3VibGVcIicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gJ3VuZGVmaW5lZCc7XG4gICAgfVxuICAgIGlmIChvYmogPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICdudWxsJztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4gb2JqID8gJ3RydWUnIDogJ2ZhbHNlJztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGluc3BlY3RTdHJpbmcob2JqLCBvcHRzKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdudW1iZXInKSB7XG4gICAgICAgIGlmIChvYmogPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBJbmZpbml0eSAvIG9iaiA+IDAgPyAnMCcgOiAnLTAnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBTdHJpbmcob2JqKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdiaWdpbnQnKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgdmFsaWQtdHlwZW9mXG4gICAgICAgIHJldHVybiBTdHJpbmcob2JqKSArICduJztcbiAgICB9XG5cbiAgICB2YXIgbWF4RGVwdGggPSB0eXBlb2Ygb3B0cy5kZXB0aCA9PT0gJ3VuZGVmaW5lZCcgPyA1IDogb3B0cy5kZXB0aDtcbiAgICBpZiAodHlwZW9mIGRlcHRoID09PSAndW5kZWZpbmVkJykgeyBkZXB0aCA9IDA7IH1cbiAgICBpZiAoZGVwdGggPj0gbWF4RGVwdGggJiYgbWF4RGVwdGggPiAwICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiAnW09iamVjdF0nO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygc2VlbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2VlbiA9IFtdO1xuICAgIH0gZWxzZSBpZiAoaW5kZXhPZihzZWVuLCBvYmopID49IDApIHtcbiAgICAgICAgcmV0dXJuICdbQ2lyY3VsYXJdJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnNwZWN0KHZhbHVlLCBmcm9tKSB7XG4gICAgICAgIGlmIChmcm9tKSB7XG4gICAgICAgICAgICBzZWVuID0gc2Vlbi5zbGljZSgpO1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGZyb20pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnNwZWN0Xyh2YWx1ZSwgb3B0cywgZGVwdGggKyAxLCBzZWVuKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgbmFtZSA9IG5hbWVPZihvYmopO1xuICAgICAgICByZXR1cm4gJ1tGdW5jdGlvbicgKyAobmFtZSA/ICc6ICcgKyBuYW1lIDogJycpICsgJ10nO1xuICAgIH1cbiAgICBpZiAoaXNTeW1ib2wob2JqKSkge1xuICAgICAgICB2YXIgc3ltU3RyaW5nID0gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaik7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyA/IG1hcmtCb3hlZChzeW1TdHJpbmcpIDogc3ltU3RyaW5nO1xuICAgIH1cbiAgICBpZiAoaXNFbGVtZW50KG9iaikpIHtcbiAgICAgICAgdmFyIHMgPSAnPCcgKyBTdHJpbmcob2JqLm5vZGVOYW1lKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB2YXIgYXR0cnMgPSBvYmouYXR0cmlidXRlcyB8fCBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcyArPSAnICcgKyBhdHRyc1tpXS5uYW1lICsgJz0nICsgd3JhcFF1b3RlcyhxdW90ZShhdHRyc1tpXS52YWx1ZSksICdkb3VibGUnLCBvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBzICs9ICc+JztcbiAgICAgICAgaWYgKG9iai5jaGlsZE5vZGVzICYmIG9iai5jaGlsZE5vZGVzLmxlbmd0aCkgeyBzICs9ICcuLi4nOyB9XG4gICAgICAgIHMgKz0gJzwvJyArIFN0cmluZyhvYmoubm9kZU5hbWUpLnRvTG93ZXJDYXNlKCkgKyAnPic7XG4gICAgICAgIHJldHVybiBzO1xuICAgIH1cbiAgICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgICAgIGlmIChvYmoubGVuZ3RoID09PSAwKSB7IHJldHVybiAnW10nOyB9XG4gICAgICAgIHJldHVybiAnWyAnICsgYXJyT2JqS2V5cyhvYmosIGluc3BlY3QpLmpvaW4oJywgJykgKyAnIF0nO1xuICAgIH1cbiAgICBpZiAoaXNFcnJvcihvYmopKSB7XG4gICAgICAgIHZhciBwYXJ0cyA9IGFyck9iaktleXMob2JqLCBpbnNwZWN0KTtcbiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gJ1snICsgU3RyaW5nKG9iaikgKyAnXSc7IH1cbiAgICAgICAgcmV0dXJuICd7IFsnICsgU3RyaW5nKG9iaikgKyAnXSAnICsgcGFydHMuam9pbignLCAnKSArICcgfSc7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAoaW5zcGVjdFN5bWJvbCAmJiB0eXBlb2Ygb2JqW2luc3BlY3RTeW1ib2xdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqW2luc3BlY3RTeW1ib2xdKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iai5pbnNwZWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqLmluc3BlY3QoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNNYXAob2JqKSkge1xuICAgICAgICB2YXIgbWFwUGFydHMgPSBbXTtcbiAgICAgICAgbWFwRm9yRWFjaC5jYWxsKG9iaiwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgIG1hcFBhcnRzLnB1c2goaW5zcGVjdChrZXksIG9iaikgKyAnID0+ICcgKyBpbnNwZWN0KHZhbHVlLCBvYmopKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uT2YoJ01hcCcsIG1hcFNpemUuY2FsbChvYmopLCBtYXBQYXJ0cyk7XG4gICAgfVxuICAgIGlmIChpc1NldChvYmopKSB7XG4gICAgICAgIHZhciBzZXRQYXJ0cyA9IFtdO1xuICAgICAgICBzZXRGb3JFYWNoLmNhbGwob2JqLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHNldFBhcnRzLnB1c2goaW5zcGVjdCh2YWx1ZSwgb2JqKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbk9mKCdTZXQnLCBzZXRTaXplLmNhbGwob2JqKSwgc2V0UGFydHMpO1xuICAgIH1cbiAgICBpZiAoaXNXZWFrTWFwKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIHdlYWtDb2xsZWN0aW9uT2YoJ1dlYWtNYXAnKTtcbiAgICB9XG4gICAgaWYgKGlzV2Vha1NldChvYmopKSB7XG4gICAgICAgIHJldHVybiB3ZWFrQ29sbGVjdGlvbk9mKCdXZWFrU2V0Jyk7XG4gICAgfVxuICAgIGlmIChpc051bWJlcihvYmopKSB7XG4gICAgICAgIHJldHVybiBtYXJrQm94ZWQoaW5zcGVjdChOdW1iZXIob2JqKSkpO1xuICAgIH1cbiAgICBpZiAoaXNCaWdJbnQob2JqKSkge1xuICAgICAgICByZXR1cm4gbWFya0JveGVkKGluc3BlY3QoYmlnSW50VmFsdWVPZi5jYWxsKG9iaikpKTtcbiAgICB9XG4gICAgaWYgKGlzQm9vbGVhbihvYmopKSB7XG4gICAgICAgIHJldHVybiBtYXJrQm94ZWQoYm9vbGVhblZhbHVlT2YuY2FsbChvYmopKTtcbiAgICB9XG4gICAgaWYgKGlzU3RyaW5nKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG1hcmtCb3hlZChpbnNwZWN0KFN0cmluZyhvYmopKSk7XG4gICAgfVxuICAgIGlmICghaXNEYXRlKG9iaikgJiYgIWlzUmVnRXhwKG9iaikpIHtcbiAgICAgICAgdmFyIHhzID0gYXJyT2JqS2V5cyhvYmosIGluc3BlY3QpO1xuICAgICAgICBpZiAoeHMubGVuZ3RoID09PSAwKSB7IHJldHVybiAne30nOyB9XG4gICAgICAgIHJldHVybiAneyAnICsgeHMuam9pbignLCAnKSArICcgfSc7XG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcob2JqKTtcbn07XG5cbmZ1bmN0aW9uIHdyYXBRdW90ZXMocywgZGVmYXVsdFN0eWxlLCBvcHRzKSB7XG4gICAgdmFyIHF1b3RlQ2hhciA9IChvcHRzLnF1b3RlU3R5bGUgfHwgZGVmYXVsdFN0eWxlKSA9PT0gJ2RvdWJsZScgPyAnXCInIDogXCInXCI7XG4gICAgcmV0dXJuIHF1b3RlQ2hhciArIHMgKyBxdW90ZUNoYXI7XG59XG5cbmZ1bmN0aW9uIHF1b3RlKHMpIHtcbiAgICByZXR1cm4gU3RyaW5nKHMpLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn1cblxuZnVuY3Rpb24gaXNBcnJheShvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IEFycmF5XSc7IH1cbmZ1bmN0aW9uIGlzRGF0ZShvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IERhdGVdJzsgfVxuZnVuY3Rpb24gaXNSZWdFeHAob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBSZWdFeHBdJzsgfVxuZnVuY3Rpb24gaXNFcnJvcihvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IEVycm9yXSc7IH1cbmZ1bmN0aW9uIGlzU3ltYm9sKG9iaikgeyByZXR1cm4gdG9TdHIob2JqKSA9PT0gJ1tvYmplY3QgU3ltYm9sXSc7IH1cbmZ1bmN0aW9uIGlzU3RyaW5nKG9iaikgeyByZXR1cm4gdG9TdHIob2JqKSA9PT0gJ1tvYmplY3QgU3RyaW5nXSc7IH1cbmZ1bmN0aW9uIGlzTnVtYmVyKG9iaikgeyByZXR1cm4gdG9TdHIob2JqKSA9PT0gJ1tvYmplY3QgTnVtYmVyXSc7IH1cbmZ1bmN0aW9uIGlzQmlnSW50KG9iaikgeyByZXR1cm4gdG9TdHIob2JqKSA9PT0gJ1tvYmplY3QgQmlnSW50XSc7IH1cbmZ1bmN0aW9uIGlzQm9vbGVhbihvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IEJvb2xlYW5dJzsgfVxuXG52YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSB8fCBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBrZXkgaW4gdGhpczsgfTtcbmZ1bmN0aW9uIGhhcyhvYmosIGtleSkge1xuICAgIHJldHVybiBoYXNPd24uY2FsbChvYmosIGtleSk7XG59XG5cbmZ1bmN0aW9uIHRvU3RyKG9iaikge1xuICAgIHJldHVybiBvYmplY3RUb1N0cmluZy5jYWxsKG9iaik7XG59XG5cbmZ1bmN0aW9uIG5hbWVPZihmKSB7XG4gICAgaWYgKGYubmFtZSkgeyByZXR1cm4gZi5uYW1lOyB9XG4gICAgdmFyIG0gPSBtYXRjaC5jYWxsKGYsIC9eZnVuY3Rpb25cXHMqKFtcXHckXSspLyk7XG4gICAgaWYgKG0pIHsgcmV0dXJuIG1bMV07IH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gaW5kZXhPZih4cywgeCkge1xuICAgIGlmICh4cy5pbmRleE9mKSB7IHJldHVybiB4cy5pbmRleE9mKHgpOyB9XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaWYgKHhzW2ldID09PSB4KSB7IHJldHVybiBpOyB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gaXNNYXAoeCkge1xuICAgIGlmICghbWFwU2l6ZSB8fCAheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBtYXBTaXplLmNhbGwoeCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzZXRTaXplLmNhbGwoeCk7XG4gICAgICAgIH0gY2F0Y2ggKHMpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4IGluc3RhbmNlb2YgTWFwOyAvLyBjb3JlLWpzIHdvcmthcm91bmQsIHByZS12Mi41LjBcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNXZWFrTWFwKHgpIHtcbiAgICBpZiAoIXdlYWtNYXBIYXMgfHwgIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgd2Vha01hcEhhcy5jYWxsKHgsIHdlYWtNYXBIYXMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgd2Vha1NldEhhcy5jYWxsKHgsIHdlYWtTZXRIYXMpO1xuICAgICAgICB9IGNhdGNoIChzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geCBpbnN0YW5jZW9mIFdlYWtNYXA7IC8vIGNvcmUtanMgd29ya2Fyb3VuZCwgcHJlLXYyLjUuMFxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1NldCh4KSB7XG4gICAgaWYgKCFzZXRTaXplIHx8ICF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHNldFNpemUuY2FsbCh4KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG1hcFNpemUuY2FsbCh4KTtcbiAgICAgICAgfSBjYXRjaCAobSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBTZXQ7IC8vIGNvcmUtanMgd29ya2Fyb3VuZCwgcHJlLXYyLjUuMFxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1dlYWtTZXQoeCkge1xuICAgIGlmICghd2Vha1NldEhhcyB8fCAheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICB3ZWFrU2V0SGFzLmNhbGwoeCwgd2Vha1NldEhhcyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB3ZWFrTWFwSGFzLmNhbGwoeCwgd2Vha01hcEhhcyk7XG4gICAgICAgIH0gY2F0Y2ggKHMpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4IGluc3RhbmNlb2YgV2Vha1NldDsgLy8gY29yZS1qcyB3b3JrYXJvdW5kLCBwcmUtdjIuNS4wXG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzRWxlbWVudCh4KSB7XG4gICAgaWYgKCF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0JykgeyByZXR1cm4gZmFsc2U7IH1cbiAgICBpZiAodHlwZW9mIEhUTUxFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB4IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiB0eXBlb2YgeC5ub2RlTmFtZSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIHguZ2V0QXR0cmlidXRlID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBpbnNwZWN0U3RyaW5nKHN0ciwgb3B0cykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG4gICAgdmFyIHMgPSBzdHIucmVwbGFjZSgvKFsnXFxcXF0pL2csICdcXFxcJDEnKS5yZXBsYWNlKC9bXFx4MDAtXFx4MWZdL2csIGxvd2J5dGUpO1xuICAgIHJldHVybiB3cmFwUXVvdGVzKHMsICdzaW5nbGUnLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gbG93Ynl0ZShjKSB7XG4gICAgdmFyIG4gPSBjLmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIHggPSB7XG4gICAgICAgIDg6ICdiJywgOTogJ3QnLCAxMDogJ24nLCAxMjogJ2YnLCAxMzogJ3InXG4gICAgfVtuXTtcbiAgICBpZiAoeCkgeyByZXR1cm4gJ1xcXFwnICsgeDsgfVxuICAgIHJldHVybiAnXFxcXHgnICsgKG4gPCAweDEwID8gJzAnIDogJycpICsgbi50b1N0cmluZygxNik7XG59XG5cbmZ1bmN0aW9uIG1hcmtCb3hlZChzdHIpIHtcbiAgICByZXR1cm4gJ09iamVjdCgnICsgc3RyICsgJyknO1xufVxuXG5mdW5jdGlvbiB3ZWFrQ29sbGVjdGlvbk9mKHR5cGUpIHtcbiAgICByZXR1cm4gdHlwZSArICcgeyA/IH0nO1xufVxuXG5mdW5jdGlvbiBjb2xsZWN0aW9uT2YodHlwZSwgc2l6ZSwgZW50cmllcykge1xuICAgIHJldHVybiB0eXBlICsgJyAoJyArIHNpemUgKyAnKSB7JyArIGVudHJpZXMuam9pbignLCAnKSArICd9Jztcbn1cblxuZnVuY3Rpb24gYXJyT2JqS2V5cyhvYmosIGluc3BlY3QpIHtcbiAgICB2YXIgaXNBcnIgPSBpc0FycmF5KG9iaik7XG4gICAgdmFyIHhzID0gW107XG4gICAgaWYgKGlzQXJyKSB7XG4gICAgICAgIHhzLmxlbmd0aCA9IG9iai5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB4c1tpXSA9IGhhcyhvYmosIGkpID8gaW5zcGVjdChvYmpbaV0sIG9iaikgOiAnJztcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgaWYgKCFoYXMob2JqLCBrZXkpKSB7IGNvbnRpbnVlOyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXgsIG5vLWNvbnRpbnVlXG4gICAgICAgIGlmIChpc0FyciAmJiBTdHJpbmcoTnVtYmVyKGtleSkpID09PSBrZXkgJiYga2V5IDwgb2JqLmxlbmd0aCkgeyBjb250aW51ZTsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby1jb250aW51ZVxuICAgICAgICBpZiAoKC9bXlxcdyRdLykudGVzdChrZXkpKSB7XG4gICAgICAgICAgICB4cy5wdXNoKGluc3BlY3Qoa2V5LCBvYmopICsgJzogJyArIGluc3BlY3Qob2JqW2tleV0sIG9iaikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgeHMucHVzaChrZXkgKyAnOiAnICsgaW5zcGVjdChvYmpba2V5XSwgb2JqKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHhzO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLzUvQ2hlY2tPYmplY3RDb2VyY2libGUnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGdldFN5bWJvbERlc2NyaXB0aW9uID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvaGVscGVycy9nZXRTeW1ib2xEZXNjcmlwdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuXHRyZXR1cm4gZ2V0U3ltYm9sRGVzY3JpcHRpb24odGhpcyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciBjYWxsQmluZCA9IHJlcXVpcmUoJy4vY2FsbEJpbmQnKTtcblxudmFyICRpbmRleE9mID0gY2FsbEJpbmQoR2V0SW50cmluc2ljKCdTdHJpbmcucHJvdG90eXBlLmluZGV4T2YnKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY2FsbEJvdW5kSW50cmluc2ljKG5hbWUsIGFsbG93TWlzc2luZykge1xuXHR2YXIgaW50cmluc2ljID0gR2V0SW50cmluc2ljKG5hbWUsICEhYWxsb3dNaXNzaW5nKTtcblx0aWYgKHR5cGVvZiBpbnRyaW5zaWMgPT09ICdmdW5jdGlvbicgJiYgJGluZGV4T2YobmFtZSwgJy5wcm90b3R5cGUuJykpIHtcblx0XHRyZXR1cm4gY2FsbEJpbmQoaW50cmluc2ljKTtcblx0fVxuXHRyZXR1cm4gaW50cmluc2ljO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gR2V0SW50cmluc2ljKCclT2JqZWN0LmRlZmluZVByb3BlcnR5JScsIHRydWUpO1xuXG5pZiAoJGRlZmluZVByb3BlcnR5KSB7XG5cdHRyeSB7XG5cdFx0JGRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgdmFsdWU6IDEgfSk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBJRSA4IGhhcyBhIGJyb2tlbiBkZWZpbmVQcm9wZXJ0eVxuXHRcdCRkZWZpbmVQcm9wZXJ0eSA9IG51bGw7XG5cdH1cbn1cblxudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY2FsbEJvdW5kJyk7XG5cbnZhciAkaXNFbnVtZXJhYmxlID0gY2FsbEJvdW5kKCdPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtcGFyYW1zXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIERlZmluZU93blByb3BlcnR5KElzRGF0YURlc2NyaXB0b3IsIFNhbWVWYWx1ZSwgRnJvbVByb3BlcnR5RGVzY3JpcHRvciwgTywgUCwgZGVzYykge1xuXHRpZiAoISRkZWZpbmVQcm9wZXJ0eSkge1xuXHRcdGlmICghSXNEYXRhRGVzY3JpcHRvcihkZXNjKSkge1xuXHRcdFx0Ly8gRVMzIGRvZXMgbm90IHN1cHBvcnQgZ2V0dGVycy9zZXR0ZXJzXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGlmICghZGVzY1snW1tDb25maWd1cmFibGVdXSddIHx8ICFkZXNjWydbW1dyaXRhYmxlXV0nXSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGZhbGxiYWNrIGZvciBFUzNcblx0XHRpZiAoUCBpbiBPICYmICRpc0VudW1lcmFibGUoTywgUCkgIT09ICEhZGVzY1snW1tFbnVtZXJhYmxlXV0nXSkge1xuXHRcdFx0Ly8gYSBub24tZW51bWVyYWJsZSBleGlzdGluZyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIHByb3BlcnR5IGRvZXMgbm90IGV4aXN0IGF0IGFsbCwgb3IgZXhpc3RzIGJ1dCBpcyBlbnVtZXJhYmxlXG5cdFx0dmFyIFYgPSBkZXNjWydbW1ZhbHVlXV0nXTtcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblx0XHRPW1BdID0gVjsgLy8gd2lsbCB1c2UgW1tEZWZpbmVdXVxuXHRcdHJldHVybiBTYW1lVmFsdWUoT1tQXSwgVik7XG5cdH1cblx0JGRlZmluZVByb3BlcnR5KE8sIFAsIEZyb21Qcm9wZXJ0eURlc2NyaXB0b3IoZGVzYykpO1xuXHRyZXR1cm4gdHJ1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4vc2hpbScpKCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaXNjb25zdHJ1Y3RvclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIElzQ29uc3RydWN0b3IoYXJndW1lbnQpIHtcblx0cmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PT0gJ2Z1bmN0aW9uJyAmJiAhIWFyZ3VtZW50LnByb3RvdHlwZTsgLy8gdW5mb3J0dW5hdGVseSB0aGVyZSdzIG5vIHdheSB0byB0cnVseSBjaGVjayB0aGlzIHdpdGhvdXQgdHJ5L2NhdGNoIGBuZXcgYXJndW1lbnRgXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRVM1VG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vNS9Ub0ludGVnZXInKTtcblxudmFyIFRvTnVtYmVyID0gcmVxdWlyZSgnLi9Ub051bWJlcicpO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXRvaW50ZWdlclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvSW50ZWdlcih2YWx1ZSkge1xuXHR2YXIgbnVtYmVyID0gVG9OdW1iZXIodmFsdWUpO1xuXHRyZXR1cm4gRVM1VG9JbnRlZ2VyKG51bWJlcik7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJGlzTmFOID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc05hTicpO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXNhbWV2YWx1ZXplcm9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBTYW1lVmFsdWVaZXJvKHgsIHkpIHtcblx0cmV0dXJuICh4ID09PSB5KSB8fCAoJGlzTmFOKHgpICYmICRpc05hTih5KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3VwcG9ydHNEZXNjcmlwdG9ycyA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJykuc3VwcG9ydHNEZXNjcmlwdG9ycztcbnZhciBmdW5jdGlvbnNIYXZlTmFtZXMgPSByZXF1aXJlKCdmdW5jdGlvbnMtaGF2ZS1uYW1lcycpKCk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgVHlwZUVyciA9IFR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltTmFtZSgpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0aWYgKGZ1bmN0aW9uc0hhdmVOYW1lcykge1xuXHRcdHJldHVybiBwb2x5ZmlsbDtcblx0fVxuXHRpZiAoIXN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycignU2hpbW1pbmcgRnVuY3Rpb24ucHJvdG90eXBlLm5hbWUgc3VwcG9ydCByZXF1aXJlcyBFUzUgcHJvcGVydHkgZGVzY3JpcHRvciBzdXBwb3J0LicpO1xuXHR9XG5cdHZhciBmdW5jdGlvblByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXHRkZWZpbmVQcm9wZXJ0eShmdW5jdGlvblByb3RvLCAnbmFtZScsIHtcblx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgbmFtZSA9IHBvbHlmaWxsLmNhbGwodGhpcyk7XG5cdFx0XHRpZiAodGhpcyAhPT0gZnVuY3Rpb25Qcm90bykge1xuXHRcdFx0XHRkZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbmFtZScsIHtcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdFx0dmFsdWU6IG5hbWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IGZhbHNlXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi9zaGltJykoKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJE9iamVjdCA9IEdldEludHJpbnNpYygnJU9iamVjdCUnKTtcblxudmFyIGlzUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc1ByaW1pdGl2ZScpO1xuXG52YXIgJHByZXZlbnRFeHRlbnNpb25zID0gJE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcbnZhciAkaXNFeHRlbnNpYmxlID0gJE9iamVjdC5pc0V4dGVuc2libGU7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaXNleHRlbnNpYmxlLW9cblxubW9kdWxlLmV4cG9ydHMgPSAkcHJldmVudEV4dGVuc2lvbnNcblx0PyBmdW5jdGlvbiBJc0V4dGVuc2libGUob2JqKSB7XG5cdFx0cmV0dXJuICFpc1ByaW1pdGl2ZShvYmopICYmICRpc0V4dGVuc2libGUob2JqKTtcblx0fVxuXHQ6IGZ1bmN0aW9uIElzRXh0ZW5zaWJsZShvYmopIHtcblx0XHRyZXR1cm4gIWlzUHJpbWl0aXZlKG9iaik7XG5cdH07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludCBnbG9iYWwtcmVxdWlyZTogMCAqL1xuXG5yZXF1aXJlKCdhaXJibmItanMtc2hpbXMnKTtcblxucmVxdWlyZSgnLi9icm93c2VyLW9ubHknKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFRvTGVuZ3RoID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Ub0xlbmd0aCcpO1xudmFyIFRvU3RyaW5nID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Ub1N0cmluZycpO1xudmFyIFJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1JlcXVpcmVPYmplY3RDb2VyY2libGUnKTtcblxudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L2hlbHBlcnMvY2FsbEJvdW5kJyk7XG52YXIgJHNsaWNlID0gY2FsbEJvdW5kKCdTdHJpbmcucHJvdG90eXBlLnNsaWNlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoKSB7XG5cdHZhciBPID0gUmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcblx0dmFyIFMgPSBUb1N0cmluZyhPKTtcblx0dmFyIHN0cmluZ0xlbmd0aCA9IFRvTGVuZ3RoKFMubGVuZ3RoKTtcblx0dmFyIGZpbGxTdHJpbmc7XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdGZpbGxTdHJpbmcgPSBhcmd1bWVudHNbMV07XG5cdH1cblx0dmFyIGZpbGxlciA9IHR5cGVvZiBmaWxsU3RyaW5nID09PSAndW5kZWZpbmVkJyA/ICcnIDogVG9TdHJpbmcoZmlsbFN0cmluZyk7XG5cdGlmIChmaWxsZXIgPT09ICcnKSB7XG5cdFx0ZmlsbGVyID0gJyAnO1xuXHR9XG5cdHZhciBpbnRNYXhMZW5ndGggPSBUb0xlbmd0aChtYXhMZW5ndGgpO1xuXHRpZiAoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCkge1xuXHRcdHJldHVybiBTO1xuXHR9XG5cdHZhciBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoO1xuXHR3aGlsZSAoZmlsbGVyLmxlbmd0aCA8IGZpbGxMZW4pIHtcblx0XHR2YXIgZkxlbiA9IGZpbGxlci5sZW5ndGg7XG5cdFx0dmFyIHJlbWFpbmluZ0NvZGVVbml0cyA9IGZpbGxMZW4gLSBmTGVuO1xuXHRcdGZpbGxlciArPSBmTGVuID4gcmVtYWluaW5nQ29kZVVuaXRzID8gJHNsaWNlKGZpbGxlciwgMCwgcmVtYWluaW5nQ29kZVVuaXRzKSA6IGZpbGxlcjtcblx0fVxuXG5cdHZhciB0cnVuY2F0ZWRTdHJpbmdGaWxsZXIgPSBmaWxsZXIubGVuZ3RoID4gZmlsbExlbiA/ICRzbGljZShmaWxsZXIsIDAsIGZpbGxMZW4pIDogZmlsbGVyO1xuXHRyZXR1cm4gdHJ1bmNhdGVkU3RyaW5nRmlsbGVyICsgUztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBFUzVUeXBlID0gcmVxdWlyZSgnLi4vNS9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9zdHJpbmdcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUeXBlKHgpIHtcblx0aWYgKHR5cGVvZiB4ID09PSAnc3ltYm9sJykge1xuXHRcdHJldHVybiAnU3ltYm9sJztcblx0fVxuXHRyZXR1cm4gRVM1VHlwZSh4KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4vdGFyZ2V0L2VzNScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkbWF0Y2ggPSBHZXRJbnRyaW5zaWMoJyVTeW1ib2wubWF0Y2glJywgdHJ1ZSk7XG5cbnZhciBoYXNSZWdFeHBNYXRjaGVyID0gcmVxdWlyZSgnaXMtcmVnZXgnKTtcblxudmFyIFRvQm9vbGVhbiA9IHJlcXVpcmUoJy4vVG9Cb29sZWFuJyk7XG5cbi8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1pc3JlZ2V4cFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIElzUmVnRXhwKGFyZ3VtZW50KSB7XG5cdGlmICghYXJndW1lbnQgfHwgdHlwZW9mIGFyZ3VtZW50ICE9PSAnb2JqZWN0Jykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRpZiAoJG1hdGNoKSB7XG5cdFx0dmFyIGlzUmVnRXhwID0gYXJndW1lbnRbJG1hdGNoXTtcblx0XHRpZiAodHlwZW9mIGlzUmVnRXhwICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0cmV0dXJuIFRvQm9vbGVhbihpc1JlZ0V4cCk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBoYXNSZWdFeHBNYXRjaGVyKGFyZ3VtZW50KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRTdHJpbmcgPSBHZXRJbnRyaW5zaWMoJyVTdHJpbmclJyk7XG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b3N0cmluZ1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvU3RyaW5nKGFyZ3VtZW50KSB7XG5cdGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdzeW1ib2wnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGEgU3ltYm9sIHZhbHVlIHRvIGEgc3RyaW5nJyk7XG5cdH1cblx0cmV0dXJuICRTdHJpbmcoYXJndW1lbnQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEVTNVR5cGUgPSByZXF1aXJlKCcuLi81L1R5cGUnKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b3N0cmluZ1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFR5cGUoeCkge1xuXHRpZiAodHlwZW9mIHggPT09ICdzeW1ib2wnKSB7XG5cdFx0cmV0dXJuICdTeW1ib2wnO1xuXHR9XG5cdHJldHVybiBFUzVUeXBlKHgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIElzUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuL0lzUHJvcGVydHlLZXknKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1oYXNwcm9wZXJ0eVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEhhc1Byb3BlcnR5KE8sIFApIHtcblx0aWYgKFR5cGUoTykgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGBPYCBtdXN0IGJlIGFuIE9iamVjdCcpO1xuXHR9XG5cdGlmICghSXNQcm9wZXJ0eUtleShQKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgUGAgbXVzdCBiZSBhIFByb3BlcnR5IEtleScpO1xuXHR9XG5cdHJldHVybiBQIGluIE87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJEZ1bmN0aW9uID0gR2V0SW50cmluc2ljKCclRnVuY3Rpb24lJyk7XG52YXIgJGFwcGx5ID0gJEZ1bmN0aW9uLmFwcGx5O1xudmFyICRjYWxsID0gJEZ1bmN0aW9uLmNhbGw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY2FsbEJpbmQoKSB7XG5cdHJldHVybiBiaW5kLmFwcGx5KCRjYWxsLCBhcmd1bWVudHMpO1xufTtcblxubW9kdWxlLmV4cG9ydHMuYXBwbHkgPSBmdW5jdGlvbiBhcHBseUJpbmQoKSB7XG5cdHJldHVybiBiaW5kLmFwcGx5KCRhcHBseSwgYXJndW1lbnRzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRPYmplY3RDcmVhdGUgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QuY3JlYXRlJScsIHRydWUpO1xudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG52YXIgJFN5bnRheEVycm9yID0gR2V0SW50cmluc2ljKCclU3ludGF4RXJyb3IlJyk7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbnZhciBoYXNQcm90byA9ICEoeyBfX3Byb3RvX186IG51bGwgfSBpbnN0YW5jZW9mIE9iamVjdCk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtb2JqZWN0Y3JlYXRlXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gT2JqZWN0Q3JlYXRlKHByb3RvLCBpbnRlcm5hbFNsb3RzTGlzdCkge1xuXHRpZiAocHJvdG8gIT09IG51bGwgJiYgVHlwZShwcm90bykgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGBwcm90b2AgbXVzdCBiZSBudWxsIG9yIGFuIG9iamVjdCcpO1xuXHR9XG5cdHZhciBzbG90cyA9IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gW10gOiBpbnRlcm5hbFNsb3RzTGlzdDtcblx0aWYgKHNsb3RzLmxlbmd0aCA+IDApIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdlcy1hYnN0cmFjdCBkb2VzIG5vdCB5ZXQgc3VwcG9ydCBpbnRlcm5hbCBzbG90cycpO1xuXHR9XG5cblx0aWYgKCRPYmplY3RDcmVhdGUpIHtcblx0XHRyZXR1cm4gJE9iamVjdENyZWF0ZShwcm90byk7XG5cdH1cblx0aWYgKGhhc1Byb3RvKSB7XG5cdFx0cmV0dXJuIHsgX19wcm90b19fOiBwcm90byB9O1xuXHR9XG5cblx0aWYgKHByb3RvID09PSBudWxsKSB7XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignbmF0aXZlIE9iamVjdC5jcmVhdGUgc3VwcG9ydCBpcyByZXF1aXJlZCB0byBjcmVhdGUgbnVsbCBvYmplY3RzJyk7XG5cdH1cblx0dmFyIFQgPSBmdW5jdGlvbiBUKCkge307XG5cdFQucHJvdG90eXBlID0gcHJvdG87XG5cdHJldHVybiBuZXcgVCgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnLi9jYWxsQm91bmQnKTtcblxudmFyICRTeW50YXhFcnJvciA9IEdldEludHJpbnNpYygnJVN5bnRheEVycm9yJScpO1xudmFyIHN5bVRvU3RyID0gY2FsbEJvdW5kKCdTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nJywgdHJ1ZSk7XG5cbnZhciBnZXRJbmZlcnJlZE5hbWUgPSByZXF1aXJlKCcuL2dldEluZmVycmVkTmFtZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFN5bWJvbERlc2NyaXB0aW9uKHN5bWJvbCkge1xuXHRpZiAoIXN5bVRvU3RyKSB7XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignU3ltYm9scyBhcmUgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50Jyk7XG5cdH1cblx0dmFyIHN0ciA9IHN5bVRvU3RyKHN5bWJvbCk7IC8vIHdpbGwgdGhyb3cgaWYgbm90IGEgc3ltYm9sXG5cblx0aWYgKGdldEluZmVycmVkTmFtZSkge1xuXHRcdHZhciBuYW1lID0gZ2V0SW5mZXJyZWROYW1lKHN5bWJvbCk7XG5cdFx0aWYgKG5hbWUgPT09ICcnKSB7IHJldHVybjsgfVxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuXHRcdHJldHVybiBuYW1lLnNsaWNlKDEsIC0xKTsgLy8gbmFtZS5zbGljZSgnWycubGVuZ3RoLCAtJ10nLmxlbmd0aCk7XG5cdH1cblxuXHR2YXIgZGVzYyA9IHN0ci5zbGljZSg3LCAtMSk7IC8vIHN0ci5zbGljZSgnU3ltYm9sKCcubGVuZ3RoLCAtJyknLmxlbmd0aCk7XG5cdGlmIChkZXNjKSB7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG5cdFx0cmV0dXJuIGRlc2M7XG5cdH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRPYmplY3QgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QlJyk7XG5cbnZhciBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi9SZXF1aXJlT2JqZWN0Q29lcmNpYmxlJyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9vYmplY3RcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb09iamVjdCh2YWx1ZSkge1xuXHRSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHZhbHVlKTtcblx0cmV0dXJuICRPYmplY3QodmFsdWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxuLy8gaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTkuMTBcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBDaGVja09iamVjdENvZXJjaWJsZSh2YWx1ZSwgb3B0TWVzc2FnZSkge1xuXHRpZiAodmFsdWUgPT0gbnVsbCkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKG9wdE1lc3NhZ2UgfHwgKCdDYW5ub3QgY2FsbCBtZXRob2Qgb24gJyArIHZhbHVlKSk7XG5cdH1cblx0cmV0dXJuIHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1ByaW1pdGl2ZSh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXNTeW1ib2xzID0gcmVxdWlyZSgnaGFzLXN5bWJvbHMnKSgpO1xudmFyIHBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIGdldEluZmVycmVkTmFtZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L2hlbHBlcnMvZ2V0SW5mZXJyZWROYW1lJyk7XG5cbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBzZXRQcm90byA9IE9iamVjdC5zZXRQcm90b3R5cGVPZjtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uIGRlZmluZUdldHRlcihnZXR0ZXIpIHtcblx0ZFAoU3ltYm9sLnByb3RvdHlwZSwgJ2Rlc2NyaXB0aW9uJywge1xuXHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRnZXQ6IGdldHRlclxuXHR9KTtcbn07XG5cbnZhciBzaGltR2xvYmFsID0gZnVuY3Rpb24gc2hpbUdsb2JhbFN5bWJvbChnZXR0ZXIpIHtcblx0dmFyIG9yaWdTeW0gPSBGdW5jdGlvbi5hcHBseS5iaW5kKFN5bWJvbCk7XG5cdHZhciBlbXB0eVN0cmluZ3MgPSBPYmplY3QuY3JlYXRlID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IHt9O1xuXHR2YXIgU3ltTmV3ID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuXHRcdHZhciBzeW0gPSBvcmlnU3ltKHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSA9PT0gJycpIHtcblx0XHRcdGVtcHR5U3RyaW5nc1tzeW1dID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIHN5bTtcblx0fTtcblx0U3ltTmV3LnByb3RvdHlwZSA9IFN5bWJvbC5wcm90b3R5cGU7XG5cdHNldFByb3RvKFN5bU5ldywgU3ltYm9sKTtcblx0U3ltYm9sID0gU3ltTmV3OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5hdGl2ZS1yZWFzc2lnbiwgbm8tZ2xvYmFsLWFzc2lnblxuXG5cdHZhciBib3VuZEdldHRlciA9IEZ1bmN0aW9uLmNhbGwuYmluZChnZXR0ZXIpO1xuXHR2YXIgd3JhcHBlZEdldHRlciA9IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuXHRcdC8qIGVzbGludCBuby1pbnZhbGlkLXRoaXM6IDAgKi9cblx0XHR2YXIgc3ltYm9sRGVzY3JpcHRpb24gPSBib3VuZEdldHRlcih0aGlzKTtcblx0XHRpZiAoZW1wdHlTdHJpbmdzW3RoaXNdKSB7XG5cdFx0XHRyZXR1cm4gJyc7XG5cdFx0fVxuXHRcdHJldHVybiBzeW1ib2xEZXNjcmlwdGlvbjtcblx0fTtcblx0ZGVmaW5lKHdyYXBwZWRHZXR0ZXIpO1xuXHRyZXR1cm4gd3JhcHBlZEdldHRlcjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbVN5bWJvbERlc2NyaXB0aW9uKCkge1xuXHRpZiAoIWhhc1N5bWJvbHMpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0dmFyIGRlc2MgPSBnT1BEKFN5bWJvbC5wcm90b3R5cGUsICdkZXNjcmlwdGlvbicpO1xuXHR2YXIgZ2V0dGVyID0gcG9seWZpbGwoKTtcblx0dmFyIGlzTWlzc2luZyA9ICFkZXNjIHx8IHR5cGVvZiBkZXNjLmdldCAhPT0gJ2Z1bmN0aW9uJztcblx0dmFyIGlzQnJva2VuID0gIWlzTWlzc2luZyAmJiAodHlwZW9mIFN5bWJvbCgpLmRlc2NyaXB0aW9uICE9PSAndW5kZWZpbmVkJyB8fCBTeW1ib2woJycpLmRlc2NyaXB0aW9uICE9PSAnJyk7XG5cdGlmIChpc01pc3NpbmcgfHwgaXNCcm9rZW4pIHtcblx0XHRpZiAoIWdldEluZmVycmVkTmFtZSkge1xuXHRcdFx0cmV0dXJuIHNoaW1HbG9iYWwoZ2V0dGVyKTtcblx0XHR9XG5cdFx0ZGVmaW5lKGdldHRlcik7XG5cdH1cblx0cmV0dXJuIGdldHRlcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBDcmVhdGVEYXRhUHJvcGVydHkgPSByZXF1aXJlKCcuL0NyZWF0ZURhdGFQcm9wZXJ0eScpO1xudmFyIElzUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuL0lzUHJvcGVydHlLZXknKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIC8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1jcmVhdGVkYXRhcHJvcGVydHlvcnRocm93XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQ3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdyhPLCBQLCBWKSB7XG5cdGlmIChUeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKE8pIGlzIG5vdCBPYmplY3QnKTtcblx0fVxuXHRpZiAoIUlzUHJvcGVydHlLZXkoUCkpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogSXNQcm9wZXJ0eUtleShQKSBpcyBub3QgdHJ1ZScpO1xuXHR9XG5cdHZhciBzdWNjZXNzID0gQ3JlYXRlRGF0YVByb3BlcnR5KE8sIFAsIFYpO1xuXHRpZiAoIXN1Y2Nlc3MpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcigndW5hYmxlIHRvIGNyZWF0ZSBkYXRhIHByb3BlcnR5Jyk7XG5cdH1cblx0cmV0dXJuIHN1Y2Nlc3M7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvbWF4U2FmZUludGVnZXInKTtcblxudmFyIFRvSW50ZWdlciA9IHJlcXVpcmUoJy4vVG9JbnRlZ2VyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVG9MZW5ndGgoYXJndW1lbnQpIHtcblx0dmFyIGxlbiA9IFRvSW50ZWdlcihhcmd1bWVudCk7XG5cdGlmIChsZW4gPD0gMCkgeyByZXR1cm4gMDsgfSAvLyBpbmNsdWRlcyBjb252ZXJ0aW5nIC0wIHRvICswXG5cdGlmIChsZW4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7IHJldHVybiBNQVhfU0FGRV9JTlRFR0VSOyB9XG5cdHJldHVybiBsZW47XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXJyYXlNZXRob2RCb3hlc1Byb3Blcmx5ID0gcmVxdWlyZSgnZXMtYXJyYXktbWV0aG9kLWJveGVzLXByb3Blcmx5Jyk7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0dmFyIG1ldGhvZCA9IEFycmF5LnByb3RvdHlwZS5tYXA7XG5cdHJldHVybiBhcnJheU1ldGhvZEJveGVzUHJvcGVybHkobWV0aG9kKSA/IG1ldGhvZCA6IGltcGxlbWVudGF0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIG9yaWdTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIGhhc1N5bWJvbFNoYW0gPSByZXF1aXJlKCcuL3NoYW1zJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzTmF0aXZlU3ltYm9scygpIHtcblx0aWYgKHR5cGVvZiBvcmlnU3ltYm9sICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBvcmlnU3ltYm9sKCdmb28nKSAhPT0gJ3N5bWJvbCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sKCdiYXInKSAhPT0gJ3N5bWJvbCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0cmV0dXJuIGhhc1N5bWJvbFNoYW0oKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtOFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFR5cGUoeCkge1xuXHRpZiAoeCA9PT0gbnVsbCkge1xuXHRcdHJldHVybiAnTnVsbCc7XG5cdH1cblx0aWYgKHR5cGVvZiB4ID09PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybiAnVW5kZWZpbmVkJztcblx0fVxuXHRpZiAodHlwZW9mIHggPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHggPT09ICdvYmplY3QnKSB7XG5cdFx0cmV0dXJuICdPYmplY3QnO1xuXHR9XG5cdGlmICh0eXBlb2YgeCA9PT0gJ251bWJlcicpIHtcblx0XHRyZXR1cm4gJ051bWJlcic7XG5cdH1cblx0aWYgKHR5cGVvZiB4ID09PSAnYm9vbGVhbicpIHtcblx0XHRyZXR1cm4gJ0Jvb2xlYW4nO1xuXHR9XG5cdGlmICh0eXBlb2YgeCA9PT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm4gJ1N0cmluZyc7XG5cdH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1jcmVhdGVpdGVycmVzdWx0b2JqZWN0XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQ3JlYXRlSXRlclJlc3VsdE9iamVjdCh2YWx1ZSwgZG9uZSkge1xuXHRpZiAoVHlwZShkb25lKSAhPT0gJ0Jvb2xlYW4nKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFR5cGUoZG9uZSkgaXMgbm90IEJvb2xlYW4nKTtcblx0fVxuXHRyZXR1cm4ge1xuXHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRkb25lOiBkb25lXG5cdH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVxdWlyZVByb21pc2UgPSByZXF1aXJlKCcuL3JlcXVpcmVQcm9taXNlJyk7XG5cbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1Qcm9taXNlRmluYWxseSgpIHtcblx0cmVxdWlyZVByb21pc2UoKTtcblxuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoUHJvbWlzZS5wcm90b3R5cGUsIHsgJ2ZpbmFsbHknOiBwb2x5ZmlsbCB9LCB7XG5cdFx0J2ZpbmFsbHknOiBmdW5jdGlvbiB0ZXN0RmluYWxseSgpIHtcblx0XHRcdHJldHVybiBQcm9taXNlLnByb3RvdHlwZVsnZmluYWxseSddICE9PSBwb2x5ZmlsbDtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzU3ltYm9scyA9IHJlcXVpcmUoJ2hhcy1zeW1ib2xzJykoKTtcbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCcuL2NhbGxCb3VuZCcpO1xuXG52YXIgJGl0ZXJhdG9yID0gR2V0SW50cmluc2ljKCclU3ltYm9sLml0ZXJhdG9yJScsIHRydWUpO1xudmFyICRzdHJpbmdTbGljZSA9IGNhbGxCb3VuZCgnU3RyaW5nLnByb3RvdHlwZS5zbGljZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldEl0ZXJhdG9yTWV0aG9kKEVTLCBpdGVyYWJsZSkge1xuXHR2YXIgdXNpbmdJdGVyYXRvcjtcblx0aWYgKGhhc1N5bWJvbHMpIHtcblx0XHR1c2luZ0l0ZXJhdG9yID0gRVMuR2V0TWV0aG9kKGl0ZXJhYmxlLCAkaXRlcmF0b3IpO1xuXHR9IGVsc2UgaWYgKEVTLklzQXJyYXkoaXRlcmFibGUpKSB7XG5cdFx0dXNpbmdJdGVyYXRvciA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHZhciBpID0gLTE7XG5cdFx0XHR2YXIgYXJyID0gdGhpczsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1pbnZhbGlkLXRoaXNcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdG5leHQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRpICs9IDE7XG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdGRvbmU6IGkgPj0gYXJyLmxlbmd0aCxcblx0XHRcdFx0XHRcdHZhbHVlOiBhcnJbaV1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH07XG5cdH0gZWxzZSBpZiAoRVMuVHlwZShpdGVyYWJsZSkgPT09ICdTdHJpbmcnKSB7XG5cdFx0dXNpbmdJdGVyYXRvciA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdG5leHQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHR2YXIgbmV4dEluZGV4ID0gRVMuQWR2YW5jZVN0cmluZ0luZGV4KGl0ZXJhYmxlLCBpLCB0cnVlKTtcblx0XHRcdFx0XHR2YXIgdmFsdWUgPSAkc3RyaW5nU2xpY2UoaXRlcmFibGUsIGksIG5leHRJbmRleCk7XG5cdFx0XHRcdFx0aSA9IG5leHRJbmRleDtcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0ZG9uZTogbmV4dEluZGV4ID4gaXRlcmFibGUubGVuZ3RoLFxuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9O1xuXHR9XG5cdHJldHVybiB1c2luZ0l0ZXJhdG9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG52YXIgc3VwcG9ydHNEZXNjcmlwdG9ycyA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJykuc3VwcG9ydHNEZXNjcmlwdG9ycztcbnZhciAkZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0aWYgKCFzdXBwb3J0c0Rlc2NyaXB0b3JzKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1JlZ0V4cC5wcm90b3R5cGUuZmxhZ3MgcmVxdWlyZXMgYSB0cnVlIEVTNSBlbnZpcm9ubWVudCB0aGF0IHN1cHBvcnRzIHByb3BlcnR5IGRlc2NyaXB0b3JzJyk7XG5cdH1cblx0aWYgKCgvYS9taWcpLmZsYWdzID09PSAnZ2ltJykge1xuXHRcdHZhciBkZXNjcmlwdG9yID0gJGdPUEQoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJyk7XG5cdFx0aWYgKGRlc2NyaXB0b3IgJiYgdHlwZW9mIGRlc2NyaXB0b3IuZ2V0ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiAoL2EvKS5kb3RBbGwgPT09ICdib29sZWFuJykge1xuXHRcdFx0cmV0dXJuIGRlc2NyaXB0b3IuZ2V0O1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gaW1wbGVtZW50YXRpb247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCdlczYtc2hpbScpO1xuXG5yZXF1aXJlKCdmdW5jdGlvbi5wcm90b3R5cGUubmFtZS9zaGltJykoKTtcblxucmVxdWlyZSgnLi9lczIwMTYnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L0dldEludHJpbnNpYycpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L2hlbHBlcnMvY2FsbEJvdW5kJyk7XG52YXIgaW5zcGVjdCA9IHJlcXVpcmUoJ29iamVjdC1pbnNwZWN0Jyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xudmFyICRXZWFrTWFwID0gR2V0SW50cmluc2ljKCclV2Vha01hcCUnLCB0cnVlKTtcbnZhciAkTWFwID0gR2V0SW50cmluc2ljKCclTWFwJScsIHRydWUpO1xudmFyICRwdXNoID0gY2FsbEJvdW5kKCdBcnJheS5wcm90b3R5cGUucHVzaCcpO1xuXG52YXIgJHdlYWtNYXBHZXQgPSBjYWxsQm91bmQoJ1dlYWtNYXAucHJvdG90eXBlLmdldCcsIHRydWUpO1xudmFyICR3ZWFrTWFwU2V0ID0gY2FsbEJvdW5kKCdXZWFrTWFwLnByb3RvdHlwZS5zZXQnLCB0cnVlKTtcbnZhciAkd2Vha01hcEhhcyA9IGNhbGxCb3VuZCgnV2Vha01hcC5wcm90b3R5cGUuaGFzJywgdHJ1ZSk7XG52YXIgJG1hcEdldCA9IGNhbGxCb3VuZCgnTWFwLnByb3RvdHlwZS5nZXQnLCB0cnVlKTtcbnZhciAkbWFwU2V0ID0gY2FsbEJvdW5kKCdNYXAucHJvdG90eXBlLnNldCcsIHRydWUpO1xudmFyICRtYXBIYXMgPSBjYWxsQm91bmQoJ01hcC5wcm90b3R5cGUuaGFzJywgdHJ1ZSk7XG52YXIgb2JqZWN0R2V0ID0gZnVuY3Rpb24gKG9iamVjdHMsIGtleSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0cy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGlmIChvYmplY3RzW2ldLmtleSA9PT0ga2V5KSB7XG5cdFx0XHRyZXR1cm4gb2JqZWN0c1tpXS52YWx1ZTtcblx0XHR9XG5cdH1cbn07XG52YXIgb2JqZWN0U2V0ID0gZnVuY3Rpb24gKG9iamVjdHMsIGtleSwgdmFsdWUpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBvYmplY3RzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0aWYgKG9iamVjdHNbaV0ua2V5ID09PSBrZXkpIHtcblx0XHRcdG9iamVjdHNbaV0udmFsdWUgPSB2YWx1ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0fVxuXHQkcHVzaChvYmplY3RzLCB7XG5cdFx0a2V5OiBrZXksXG5cdFx0dmFsdWU6IHZhbHVlXG5cdH0pO1xufTtcbnZhciBvYmplY3RIYXMgPSBmdW5jdGlvbiAob2JqZWN0cywga2V5KSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0cy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGlmIChvYmplY3RzW2ldLmtleSA9PT0ga2V5KSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRTaWRlQ2hhbm5lbCgpIHtcblx0dmFyICR3bTtcblx0dmFyICRtO1xuXHR2YXIgJG87XG5cdHZhciBjaGFubmVsID0ge1xuXHRcdGFzc2VydDogZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0aWYgKCFjaGFubmVsLmhhcyhrZXkpKSB7XG5cdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdTaWRlIGNoYW5uZWwgZG9lcyBub3QgY29udGFpbiAnICsgaW5zcGVjdChrZXkpKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGdldDogZnVuY3Rpb24gKGtleSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG5cdFx0XHRpZiAoJFdlYWtNYXAgJiYga2V5ICYmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0JyB8fCB0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSkge1xuXHRcdFx0XHRpZiAoJHdtKSB7XG5cdFx0XHRcdFx0cmV0dXJuICR3ZWFrTWFwR2V0KCR3bSwga2V5KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmICgkTWFwKSB7XG5cdFx0XHRcdGlmICgkbSkge1xuXHRcdFx0XHRcdHJldHVybiAkbWFwR2V0KCRtLCBrZXkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoJG8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1sb25lbHktaWZcblx0XHRcdFx0XHRyZXR1cm4gb2JqZWN0R2V0KCRvLCBrZXkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRoYXM6IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdGlmICgkV2Vha01hcCAmJiBrZXkgJiYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicpKSB7XG5cdFx0XHRcdGlmICgkd20pIHtcblx0XHRcdFx0XHRyZXR1cm4gJHdlYWtNYXBIYXMoJHdtLCBrZXkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKCRNYXApIHtcblx0XHRcdFx0aWYgKCRtKSB7XG5cdFx0XHRcdFx0cmV0dXJuICRtYXBIYXMoJG0sIGtleSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICgkbykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWxvbmVseS1pZlxuXHRcdFx0XHRcdHJldHVybiBvYmplY3RIYXMoJG8sIGtleSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcblx0XHRcdGlmICgkV2Vha01hcCAmJiBrZXkgJiYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicpKSB7XG5cdFx0XHRcdGlmICghJHdtKSB7XG5cdFx0XHRcdFx0JHdtID0gbmV3ICRXZWFrTWFwKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0JHdlYWtNYXBTZXQoJHdtLCBrZXksIHZhbHVlKTtcblx0XHRcdH0gZWxzZSBpZiAoJE1hcCkge1xuXHRcdFx0XHRpZiAoISRtKSB7XG5cdFx0XHRcdFx0JG0gPSBuZXcgJE1hcCgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdCRtYXBTZXQoJG0sIGtleSwgdmFsdWUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKCEkbykge1xuXHRcdFx0XHRcdCRvID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0b2JqZWN0U2V0KCRvLCBrZXksIHZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBjaGFubmVsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHN0clZhbHVlID0gU3RyaW5nLnByb3RvdHlwZS52YWx1ZU9mO1xudmFyIHRyeVN0cmluZ09iamVjdCA9IGZ1bmN0aW9uIHRyeVN0cmluZ09iamVjdCh2YWx1ZSkge1xuXHR0cnkge1xuXHRcdHN0clZhbHVlLmNhbGwodmFsdWUpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59O1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBzdHJDbGFzcyA9ICdbb2JqZWN0IFN0cmluZ10nO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuXHRpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHJldHVybiBoYXNUb1N0cmluZ1RhZyA/IHRyeVN0cmluZ09iamVjdCh2YWx1ZSkgOiB0b1N0ci5jYWxsKHZhbHVlKSA9PT0gc3RyQ2xhc3M7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJE9iamVjdCA9IE9iamVjdDtcbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZsYWdzKCkge1xuXHRpZiAodGhpcyAhPSBudWxsICYmIHRoaXMgIT09ICRPYmplY3QodGhpcykpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignUmVnRXhwLnByb3RvdHlwZS5mbGFncyBnZXR0ZXIgY2FsbGVkIG9uIG5vbi1vYmplY3QnKTtcblx0fVxuXHR2YXIgcmVzdWx0ID0gJyc7XG5cdGlmICh0aGlzLmdsb2JhbCkge1xuXHRcdHJlc3VsdCArPSAnZyc7XG5cdH1cblx0aWYgKHRoaXMuaWdub3JlQ2FzZSkge1xuXHRcdHJlc3VsdCArPSAnaSc7XG5cdH1cblx0aWYgKHRoaXMubXVsdGlsaW5lKSB7XG5cdFx0cmVzdWx0ICs9ICdtJztcblx0fVxuXHRpZiAodGhpcy5kb3RBbGwpIHtcblx0XHRyZXN1bHQgKz0gJ3MnO1xuXHR9XG5cdGlmICh0aGlzLnVuaWNvZGUpIHtcblx0XHRyZXN1bHQgKz0gJ3UnO1xuXHR9XG5cdGlmICh0aGlzLnN0aWNreSkge1xuXHRcdHJlc3VsdCArPSAneSc7XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2lnbihudW1iZXIpIHtcblx0cmV0dXJuIG51bWJlciA+PSAwID8gMSA6IC0xO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc1N5bWJvbHMgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdzeW1ib2wnO1xuXG52YXIgaXNQcmltaXRpdmUgPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNQcmltaXRpdmUnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnaXMtY2FsbGFibGUnKTtcbnZhciBpc0RhdGUgPSByZXF1aXJlKCdpcy1kYXRlLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnaXMtc3ltYm9sJyk7XG5cbnZhciBvcmRpbmFyeVRvUHJpbWl0aXZlID0gZnVuY3Rpb24gT3JkaW5hcnlUb1ByaW1pdGl2ZShPLCBoaW50KSB7XG5cdGlmICh0eXBlb2YgTyA9PT0gJ3VuZGVmaW5lZCcgfHwgTyA9PT0gbnVsbCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIG1ldGhvZCBvbiAnICsgTyk7XG5cdH1cblx0aWYgKHR5cGVvZiBoaW50ICE9PSAnc3RyaW5nJyB8fCAoaGludCAhPT0gJ251bWJlcicgJiYgaGludCAhPT0gJ3N0cmluZycpKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignaGludCBtdXN0IGJlIFwic3RyaW5nXCIgb3IgXCJudW1iZXJcIicpO1xuXHR9XG5cdHZhciBtZXRob2ROYW1lcyA9IGhpbnQgPT09ICdzdHJpbmcnID8gWyd0b1N0cmluZycsICd2YWx1ZU9mJ10gOiBbJ3ZhbHVlT2YnLCAndG9TdHJpbmcnXTtcblx0dmFyIG1ldGhvZCwgcmVzdWx0LCBpO1xuXHRmb3IgKGkgPSAwOyBpIDwgbWV0aG9kTmFtZXMubGVuZ3RoOyArK2kpIHtcblx0XHRtZXRob2QgPSBPW21ldGhvZE5hbWVzW2ldXTtcblx0XHRpZiAoaXNDYWxsYWJsZShtZXRob2QpKSB7XG5cdFx0XHRyZXN1bHQgPSBtZXRob2QuY2FsbChPKTtcblx0XHRcdGlmIChpc1ByaW1pdGl2ZShyZXN1bHQpKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHRocm93IG5ldyBUeXBlRXJyb3IoJ05vIGRlZmF1bHQgdmFsdWUnKTtcbn07XG5cbnZhciBHZXRNZXRob2QgPSBmdW5jdGlvbiBHZXRNZXRob2QoTywgUCkge1xuXHR2YXIgZnVuYyA9IE9bUF07XG5cdGlmIChmdW5jICE9PSBudWxsICYmIHR5cGVvZiBmdW5jICE9PSAndW5kZWZpbmVkJykge1xuXHRcdGlmICghaXNDYWxsYWJsZShmdW5jKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihmdW5jICsgJyByZXR1cm5lZCBmb3IgcHJvcGVydHkgJyArIFAgKyAnIG9mIG9iamVjdCAnICsgTyArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZ1bmM7XG5cdH1cblx0cmV0dXJuIHZvaWQgMDtcbn07XG5cbi8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb1ByaW1pdGl2ZShpbnB1dCkge1xuXHRpZiAoaXNQcmltaXRpdmUoaW5wdXQpKSB7XG5cdFx0cmV0dXJuIGlucHV0O1xuXHR9XG5cdHZhciBoaW50ID0gJ2RlZmF1bHQnO1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRpZiAoYXJndW1lbnRzWzFdID09PSBTdHJpbmcpIHtcblx0XHRcdGhpbnQgPSAnc3RyaW5nJztcblx0XHR9IGVsc2UgaWYgKGFyZ3VtZW50c1sxXSA9PT0gTnVtYmVyKSB7XG5cdFx0XHRoaW50ID0gJ251bWJlcic7XG5cdFx0fVxuXHR9XG5cblx0dmFyIGV4b3RpY1RvUHJpbTtcblx0aWYgKGhhc1N5bWJvbHMpIHtcblx0XHRpZiAoU3ltYm9sLnRvUHJpbWl0aXZlKSB7XG5cdFx0XHRleG90aWNUb1ByaW0gPSBHZXRNZXRob2QoaW5wdXQsIFN5bWJvbC50b1ByaW1pdGl2ZSk7XG5cdFx0fSBlbHNlIGlmIChpc1N5bWJvbChpbnB1dCkpIHtcblx0XHRcdGV4b3RpY1RvUHJpbSA9IFN5bWJvbC5wcm90b3R5cGUudmFsdWVPZjtcblx0XHR9XG5cdH1cblx0aWYgKHR5cGVvZiBleG90aWNUb1ByaW0gIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0dmFyIHJlc3VsdCA9IGV4b3RpY1RvUHJpbS5jYWxsKGlucHV0LCBoaW50KTtcblx0XHRpZiAoaXNQcmltaXRpdmUocmVzdWx0KSkge1xuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcigndW5hYmxlIHRvIGNvbnZlcnQgZXhvdGljIG9iamVjdCB0byBwcmltaXRpdmUnKTtcblx0fVxuXHRpZiAoaGludCA9PT0gJ2RlZmF1bHQnICYmIChpc0RhdGUoaW5wdXQpIHx8IGlzU3ltYm9sKGlucHV0KSkpIHtcblx0XHRoaW50ID0gJ3N0cmluZyc7XG5cdH1cblx0cmV0dXJuIG9yZGluYXJ5VG9QcmltaXRpdmUoaW5wdXQsIGhpbnQgPT09ICdkZWZhdWx0JyA/ICdudW1iZXInIDogaGludCk7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBXM0MgU09GVFdBUkUgQU5EIERPQ1VNRU5UIE5PVElDRSBBTkQgTElDRU5TRS5cbiAqXG4gKiAgaHR0cHM6Ly93d3cudzMub3JnL0NvbnNvcnRpdW0vTGVnYWwvMjAxNS9jb3B5cmlnaHQtc29mdHdhcmUtYW5kLWRvY3VtZW50XG4gKlxuICovXG5cbihmdW5jdGlvbih3aW5kb3csIGRvY3VtZW50KSB7XG4ndXNlIHN0cmljdCc7XG5cblxuLy8gRXhpdHMgZWFybHkgaWYgYWxsIEludGVyc2VjdGlvbk9ic2VydmVyIGFuZCBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5XG4vLyBmZWF0dXJlcyBhcmUgbmF0aXZlbHkgc3VwcG9ydGVkLlxuaWYgKCdJbnRlcnNlY3Rpb25PYnNlcnZlcicgaW4gd2luZG93ICYmXG4gICAgJ0ludGVyc2VjdGlvbk9ic2VydmVyRW50cnknIGluIHdpbmRvdyAmJlxuICAgICdpbnRlcnNlY3Rpb25SYXRpbycgaW4gd2luZG93LkludGVyc2VjdGlvbk9ic2VydmVyRW50cnkucHJvdG90eXBlKSB7XG5cbiAgLy8gTWluaW1hbCBwb2x5ZmlsbCBmb3IgRWRnZSAxNSdzIGxhY2sgb2YgYGlzSW50ZXJzZWN0aW5nYFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS93M2MvSW50ZXJzZWN0aW9uT2JzZXJ2ZXIvaXNzdWVzLzIxMVxuICBpZiAoISgnaXNJbnRlcnNlY3RpbmcnIGluIHdpbmRvdy5JbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5LnByb3RvdHlwZSkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LkludGVyc2VjdGlvbk9ic2VydmVyRW50cnkucHJvdG90eXBlLFxuICAgICAgJ2lzSW50ZXJzZWN0aW5nJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVyc2VjdGlvblJhdGlvID4gMDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm47XG59XG5cblxuLyoqXG4gKiBBbiBJbnRlcnNlY3Rpb25PYnNlcnZlciByZWdpc3RyeS4gVGhpcyByZWdpc3RyeSBleGlzdHMgdG8gaG9sZCBhIHN0cm9uZ1xuICogcmVmZXJlbmNlIHRvIEludGVyc2VjdGlvbk9ic2VydmVyIGluc3RhbmNlcyBjdXJyZW50bHkgb2JzZXJ2aW5nIGEgdGFyZ2V0XG4gKiBlbGVtZW50LiBXaXRob3V0IHRoaXMgcmVnaXN0cnksIGluc3RhbmNlcyB3aXRob3V0IGFub3RoZXIgcmVmZXJlbmNlIG1heSBiZVxuICogZ2FyYmFnZSBjb2xsZWN0ZWQuXG4gKi9cbnZhciByZWdpc3RyeSA9IFtdO1xuXG5cbi8qKlxuICogQ3JlYXRlcyB0aGUgZ2xvYmFsIEludGVyc2VjdGlvbk9ic2VydmVyRW50cnkgY29uc3RydWN0b3IuXG4gKiBodHRwczovL3czYy5naXRodWIuaW8vSW50ZXJzZWN0aW9uT2JzZXJ2ZXIvI2ludGVyc2VjdGlvbi1vYnNlcnZlci1lbnRyeVxuICogQHBhcmFtIHtPYmplY3R9IGVudHJ5IEEgZGljdGlvbmFyeSBvZiBpbnN0YW5jZSBwcm9wZXJ0aWVzLlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEludGVyc2VjdGlvbk9ic2VydmVyRW50cnkoZW50cnkpIHtcbiAgdGhpcy50aW1lID0gZW50cnkudGltZTtcbiAgdGhpcy50YXJnZXQgPSBlbnRyeS50YXJnZXQ7XG4gIHRoaXMucm9vdEJvdW5kcyA9IGVudHJ5LnJvb3RCb3VuZHM7XG4gIHRoaXMuYm91bmRpbmdDbGllbnRSZWN0ID0gZW50cnkuYm91bmRpbmdDbGllbnRSZWN0O1xuICB0aGlzLmludGVyc2VjdGlvblJlY3QgPSBlbnRyeS5pbnRlcnNlY3Rpb25SZWN0IHx8IGdldEVtcHR5UmVjdCgpO1xuICB0aGlzLmlzSW50ZXJzZWN0aW5nID0gISFlbnRyeS5pbnRlcnNlY3Rpb25SZWN0O1xuXG4gIC8vIENhbGN1bGF0ZXMgdGhlIGludGVyc2VjdGlvbiByYXRpby5cbiAgdmFyIHRhcmdldFJlY3QgPSB0aGlzLmJvdW5kaW5nQ2xpZW50UmVjdDtcbiAgdmFyIHRhcmdldEFyZWEgPSB0YXJnZXRSZWN0LndpZHRoICogdGFyZ2V0UmVjdC5oZWlnaHQ7XG4gIHZhciBpbnRlcnNlY3Rpb25SZWN0ID0gdGhpcy5pbnRlcnNlY3Rpb25SZWN0O1xuICB2YXIgaW50ZXJzZWN0aW9uQXJlYSA9IGludGVyc2VjdGlvblJlY3Qud2lkdGggKiBpbnRlcnNlY3Rpb25SZWN0LmhlaWdodDtcblxuICAvLyBTZXRzIGludGVyc2VjdGlvbiByYXRpby5cbiAgaWYgKHRhcmdldEFyZWEpIHtcbiAgICAvLyBSb3VuZCB0aGUgaW50ZXJzZWN0aW9uIHJhdGlvIHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IG1hdGggaXNzdWVzOlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93M2MvSW50ZXJzZWN0aW9uT2JzZXJ2ZXIvaXNzdWVzLzMyNFxuICAgIHRoaXMuaW50ZXJzZWN0aW9uUmF0aW8gPSBOdW1iZXIoKGludGVyc2VjdGlvbkFyZWEgLyB0YXJnZXRBcmVhKS50b0ZpeGVkKDQpKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBJZiBhcmVhIGlzIHplcm8gYW5kIGlzIGludGVyc2VjdGluZywgc2V0cyB0byAxLCBvdGhlcndpc2UgdG8gMFxuICAgIHRoaXMuaW50ZXJzZWN0aW9uUmF0aW8gPSB0aGlzLmlzSW50ZXJzZWN0aW5nID8gMSA6IDA7XG4gIH1cbn1cblxuXG4vKipcbiAqIENyZWF0ZXMgdGhlIGdsb2JhbCBJbnRlcnNlY3Rpb25PYnNlcnZlciBjb25zdHJ1Y3Rvci5cbiAqIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby9JbnRlcnNlY3Rpb25PYnNlcnZlci8jaW50ZXJzZWN0aW9uLW9ic2VydmVyLWludGVyZmFjZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGJlIGludm9rZWQgYWZ0ZXIgaW50ZXJzZWN0aW9uXG4gKiAgICAgY2hhbmdlcyBoYXZlIHF1ZXVlZC4gVGhlIGZ1bmN0aW9uIGlzIG5vdCBpbnZva2VkIGlmIHRoZSBxdWV1ZSBoYXNcbiAqICAgICBiZWVuIGVtcHRpZWQgYnkgY2FsbGluZyB0aGUgYHRha2VSZWNvcmRzYCBtZXRob2QuXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9vcHRpb25zIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb3B0aW9ucy5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBJbnRlcnNlY3Rpb25PYnNlcnZlcihjYWxsYmFjaywgb3B0X29wdGlvbnMpIHtcblxuICB2YXIgb3B0aW9ucyA9IG9wdF9vcHRpb25zIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgY2FsbGJhY2sgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5yb290ICYmIG9wdGlvbnMucm9vdC5ub2RlVHlwZSAhPSAxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdyb290IG11c3QgYmUgYW4gRWxlbWVudCcpO1xuICB9XG5cbiAgLy8gQmluZHMgYW5kIHRocm90dGxlcyBgdGhpcy5fY2hlY2tGb3JJbnRlcnNlY3Rpb25zYC5cbiAgdGhpcy5fY2hlY2tGb3JJbnRlcnNlY3Rpb25zID0gdGhyb3R0bGUoXG4gICAgICB0aGlzLl9jaGVja0ZvckludGVyc2VjdGlvbnMuYmluZCh0aGlzKSwgdGhpcy5USFJPVFRMRV9USU1FT1VUKTtcblxuICAvLyBQcml2YXRlIHByb3BlcnRpZXMuXG4gIHRoaXMuX2NhbGxiYWNrID0gY2FsbGJhY2s7XG4gIHRoaXMuX29ic2VydmF0aW9uVGFyZ2V0cyA9IFtdO1xuICB0aGlzLl9xdWV1ZWRFbnRyaWVzID0gW107XG4gIHRoaXMuX3Jvb3RNYXJnaW5WYWx1ZXMgPSB0aGlzLl9wYXJzZVJvb3RNYXJnaW4ob3B0aW9ucy5yb290TWFyZ2luKTtcblxuICAvLyBQdWJsaWMgcHJvcGVydGllcy5cbiAgdGhpcy50aHJlc2hvbGRzID0gdGhpcy5faW5pdFRocmVzaG9sZHMob3B0aW9ucy50aHJlc2hvbGQpO1xuICB0aGlzLnJvb3QgPSBvcHRpb25zLnJvb3QgfHwgbnVsbDtcbiAgdGhpcy5yb290TWFyZ2luID0gdGhpcy5fcm9vdE1hcmdpblZhbHVlcy5tYXAoZnVuY3Rpb24obWFyZ2luKSB7XG4gICAgcmV0dXJuIG1hcmdpbi52YWx1ZSArIG1hcmdpbi51bml0O1xuICB9KS5qb2luKCcgJyk7XG59XG5cblxuLyoqXG4gKiBUaGUgbWluaW11bSBpbnRlcnZhbCB3aXRoaW4gd2hpY2ggdGhlIGRvY3VtZW50IHdpbGwgYmUgY2hlY2tlZCBmb3JcbiAqIGludGVyc2VjdGlvbiBjaGFuZ2VzLlxuICovXG5JbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuVEhST1RUTEVfVElNRU9VVCA9IDEwMDtcblxuXG4vKipcbiAqIFRoZSBmcmVxdWVuY3kgaW4gd2hpY2ggdGhlIHBvbHlmaWxsIHBvbGxzIGZvciBpbnRlcnNlY3Rpb24gY2hhbmdlcy5cbiAqIHRoaXMgY2FuIGJlIHVwZGF0ZWQgb24gYSBwZXIgaW5zdGFuY2UgYmFzaXMgYW5kIG11c3QgYmUgc2V0IHByaW9yIHRvXG4gKiBjYWxsaW5nIGBvYnNlcnZlYCBvbiB0aGUgZmlyc3QgdGFyZ2V0LlxuICovXG5JbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuUE9MTF9JTlRFUlZBTCA9IG51bGw7XG5cbi8qKlxuICogVXNlIGEgbXV0YXRpb24gb2JzZXJ2ZXIgb24gdGhlIHJvb3QgZWxlbWVudFxuICogdG8gZGV0ZWN0IGludGVyc2VjdGlvbiBjaGFuZ2VzLlxuICovXG5JbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuVVNFX01VVEFUSU9OX09CU0VSVkVSID0gdHJ1ZTtcblxuXG4vKipcbiAqIFN0YXJ0cyBvYnNlcnZpbmcgYSB0YXJnZXQgZWxlbWVudCBmb3IgaW50ZXJzZWN0aW9uIGNoYW5nZXMgYmFzZWQgb25cbiAqIHRoZSB0aHJlc2hvbGRzIHZhbHVlcy5cbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IFRoZSBET00gZWxlbWVudCB0byBvYnNlcnZlLlxuICovXG5JbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uKHRhcmdldCkge1xuICB2YXIgaXNUYXJnZXRBbHJlYWR5T2JzZXJ2ZWQgPSB0aGlzLl9vYnNlcnZhdGlvblRhcmdldHMuc29tZShmdW5jdGlvbihpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW0uZWxlbWVudCA9PSB0YXJnZXQ7XG4gIH0pO1xuXG4gIGlmIChpc1RhcmdldEFscmVhZHlPYnNlcnZlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghKHRhcmdldCAmJiB0YXJnZXQubm9kZVR5cGUgPT0gMSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3RhcmdldCBtdXN0IGJlIGFuIEVsZW1lbnQnKTtcbiAgfVxuXG4gIHRoaXMuX3JlZ2lzdGVySW5zdGFuY2UoKTtcbiAgdGhpcy5fb2JzZXJ2YXRpb25UYXJnZXRzLnB1c2goe2VsZW1lbnQ6IHRhcmdldCwgZW50cnk6IG51bGx9KTtcbiAgdGhpcy5fbW9uaXRvckludGVyc2VjdGlvbnMoKTtcbiAgdGhpcy5fY2hlY2tGb3JJbnRlcnNlY3Rpb25zKCk7XG59O1xuXG5cbi8qKlxuICogU3RvcHMgb2JzZXJ2aW5nIGEgdGFyZ2V0IGVsZW1lbnQgZm9yIGludGVyc2VjdGlvbiBjaGFuZ2VzLlxuICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgVGhlIERPTSBlbGVtZW50IHRvIG9ic2VydmUuXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS51bm9ic2VydmUgPSBmdW5jdGlvbih0YXJnZXQpIHtcbiAgdGhpcy5fb2JzZXJ2YXRpb25UYXJnZXRzID1cbiAgICAgIHRoaXMuX29ic2VydmF0aW9uVGFyZ2V0cy5maWx0ZXIoZnVuY3Rpb24oaXRlbSkge1xuXG4gICAgcmV0dXJuIGl0ZW0uZWxlbWVudCAhPSB0YXJnZXQ7XG4gIH0pO1xuICBpZiAoIXRoaXMuX29ic2VydmF0aW9uVGFyZ2V0cy5sZW5ndGgpIHtcbiAgICB0aGlzLl91bm1vbml0b3JJbnRlcnNlY3Rpb25zKCk7XG4gICAgdGhpcy5fdW5yZWdpc3Rlckluc3RhbmNlKCk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBTdG9wcyBvYnNlcnZpbmcgYWxsIHRhcmdldCBlbGVtZW50cyBmb3IgaW50ZXJzZWN0aW9uIGNoYW5nZXMuXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX29ic2VydmF0aW9uVGFyZ2V0cyA9IFtdO1xuICB0aGlzLl91bm1vbml0b3JJbnRlcnNlY3Rpb25zKCk7XG4gIHRoaXMuX3VucmVnaXN0ZXJJbnN0YW5jZSgpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgYW55IHF1ZXVlIGVudHJpZXMgdGhhdCBoYXZlIG5vdCB5ZXQgYmVlbiByZXBvcnRlZCB0byB0aGVcbiAqIGNhbGxiYWNrIGFuZCBjbGVhcnMgdGhlIHF1ZXVlLiBUaGlzIGNhbiBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlXG4gKiBjYWxsYmFjayB0byBvYnRhaW4gdGhlIGFic29sdXRlIG1vc3QgdXAtdG8tZGF0ZSBpbnRlcnNlY3Rpb24gaW5mb3JtYXRpb24uXG4gKiBAcmV0dXJuIHtBcnJheX0gVGhlIGN1cnJlbnRseSBxdWV1ZWQgZW50cmllcy5cbiAqL1xuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLnRha2VSZWNvcmRzID0gZnVuY3Rpb24oKSB7XG4gIHZhciByZWNvcmRzID0gdGhpcy5fcXVldWVkRW50cmllcy5zbGljZSgpO1xuICB0aGlzLl9xdWV1ZWRFbnRyaWVzID0gW107XG4gIHJldHVybiByZWNvcmRzO1xufTtcblxuXG4vKipcbiAqIEFjY2VwdHMgdGhlIHRocmVzaG9sZCB2YWx1ZSBmcm9tIHRoZSB1c2VyIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGFuZFxuICogcmV0dXJucyBhIHNvcnRlZCBhcnJheSBvZiB1bmlxdWUgdGhyZXNob2xkIHZhbHVlcy4gSWYgYSB2YWx1ZSBpcyBub3RcbiAqIGJldHdlZW4gMCBhbmQgMSBhbmQgZXJyb3IgaXMgdGhyb3duLlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8bnVtYmVyPX0gb3B0X3RocmVzaG9sZCBBbiBvcHRpb25hbCB0aHJlc2hvbGQgdmFsdWUgb3JcbiAqICAgICBhIGxpc3Qgb2YgdGhyZXNob2xkIHZhbHVlcywgZGVmYXVsdGluZyB0byBbMF0uXG4gKiBAcmV0dXJuIHtBcnJheX0gQSBzb3J0ZWQgbGlzdCBvZiB1bmlxdWUgYW5kIHZhbGlkIHRocmVzaG9sZCB2YWx1ZXMuXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5faW5pdFRocmVzaG9sZHMgPSBmdW5jdGlvbihvcHRfdGhyZXNob2xkKSB7XG4gIHZhciB0aHJlc2hvbGQgPSBvcHRfdGhyZXNob2xkIHx8IFswXTtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHRocmVzaG9sZCkpIHRocmVzaG9sZCA9IFt0aHJlc2hvbGRdO1xuXG4gIHJldHVybiB0aHJlc2hvbGQuc29ydCgpLmZpbHRlcihmdW5jdGlvbih0LCBpLCBhKSB7XG4gICAgaWYgKHR5cGVvZiB0ICE9ICdudW1iZXInIHx8IGlzTmFOKHQpIHx8IHQgPCAwIHx8IHQgPiAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3RocmVzaG9sZCBtdXN0IGJlIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMSBpbmNsdXNpdmVseScpO1xuICAgIH1cbiAgICByZXR1cm4gdCAhPT0gYVtpIC0gMV07XG4gIH0pO1xufTtcblxuXG4vKipcbiAqIEFjY2VwdHMgdGhlIHJvb3RNYXJnaW4gdmFsdWUgZnJvbSB0aGUgdXNlciBjb25maWd1cmF0aW9uIG9iamVjdFxuICogYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlIGZvdXIgbWFyZ2luIHZhbHVlcyBhcyBhbiBvYmplY3QgY29udGFpbmluZ1xuICogdGhlIHZhbHVlIGFuZCB1bml0IHByb3BlcnRpZXMuIElmIGFueSBvZiB0aGUgdmFsdWVzIGFyZSBub3QgcHJvcGVybHlcbiAqIGZvcm1hdHRlZCBvciB1c2UgYSB1bml0IG90aGVyIHRoYW4gcHggb3IgJSwgYW5kIGVycm9yIGlzIHRocm93bi5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdF9yb290TWFyZ2luIEFuIG9wdGlvbmFsIHJvb3RNYXJnaW4gdmFsdWUsXG4gKiAgICAgZGVmYXVsdGluZyB0byAnMHB4Jy5cbiAqIEByZXR1cm4ge0FycmF5PE9iamVjdD59IEFuIGFycmF5IG9mIG1hcmdpbiBvYmplY3RzIHdpdGggdGhlIGtleXNcbiAqICAgICB2YWx1ZSBhbmQgdW5pdC5cbiAqL1xuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLl9wYXJzZVJvb3RNYXJnaW4gPSBmdW5jdGlvbihvcHRfcm9vdE1hcmdpbikge1xuICB2YXIgbWFyZ2luU3RyaW5nID0gb3B0X3Jvb3RNYXJnaW4gfHwgJzBweCc7XG4gIHZhciBtYXJnaW5zID0gbWFyZ2luU3RyaW5nLnNwbGl0KC9cXHMrLykubWFwKGZ1bmN0aW9uKG1hcmdpbikge1xuICAgIHZhciBwYXJ0cyA9IC9eKC0/XFxkKlxcLj9cXGQrKShweHwlKSQvLmV4ZWMobWFyZ2luKTtcbiAgICBpZiAoIXBhcnRzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Jvb3RNYXJnaW4gbXVzdCBiZSBzcGVjaWZpZWQgaW4gcGl4ZWxzIG9yIHBlcmNlbnQnKTtcbiAgICB9XG4gICAgcmV0dXJuIHt2YWx1ZTogcGFyc2VGbG9hdChwYXJ0c1sxXSksIHVuaXQ6IHBhcnRzWzJdfTtcbiAgfSk7XG5cbiAgLy8gSGFuZGxlcyBzaG9ydGhhbmQuXG4gIG1hcmdpbnNbMV0gPSBtYXJnaW5zWzFdIHx8IG1hcmdpbnNbMF07XG4gIG1hcmdpbnNbMl0gPSBtYXJnaW5zWzJdIHx8IG1hcmdpbnNbMF07XG4gIG1hcmdpbnNbM10gPSBtYXJnaW5zWzNdIHx8IG1hcmdpbnNbMV07XG5cbiAgcmV0dXJuIG1hcmdpbnM7XG59O1xuXG5cbi8qKlxuICogU3RhcnRzIHBvbGxpbmcgZm9yIGludGVyc2VjdGlvbiBjaGFuZ2VzIGlmIHRoZSBwb2xsaW5nIGlzIG5vdCBhbHJlYWR5XG4gKiBoYXBwZW5pbmcsIGFuZCBpZiB0aGUgcGFnZSdzIHZpc2liaWxpdHkgc3RhdGUgaXMgdmlzaWJsZS5cbiAqIEBwcml2YXRlXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5fbW9uaXRvckludGVyc2VjdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLl9tb25pdG9yaW5nSW50ZXJzZWN0aW9ucykge1xuICAgIHRoaXMuX21vbml0b3JpbmdJbnRlcnNlY3Rpb25zID0gdHJ1ZTtcblxuICAgIC8vIElmIGEgcG9sbCBpbnRlcnZhbCBpcyBzZXQsIHVzZSBwb2xsaW5nIGluc3RlYWQgb2YgbGlzdGVuaW5nIHRvXG4gICAgLy8gcmVzaXplIGFuZCBzY3JvbGwgZXZlbnRzIG9yIERPTSBtdXRhdGlvbnMuXG4gICAgaWYgKHRoaXMuUE9MTF9JTlRFUlZBTCkge1xuICAgICAgdGhpcy5fbW9uaXRvcmluZ0ludGVydmFsID0gc2V0SW50ZXJ2YWwoXG4gICAgICAgICAgdGhpcy5fY2hlY2tGb3JJbnRlcnNlY3Rpb25zLCB0aGlzLlBPTExfSU5URVJWQUwpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGFkZEV2ZW50KHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMuX2NoZWNrRm9ySW50ZXJzZWN0aW9ucywgdHJ1ZSk7XG4gICAgICBhZGRFdmVudChkb2N1bWVudCwgJ3Njcm9sbCcsIHRoaXMuX2NoZWNrRm9ySW50ZXJzZWN0aW9ucywgdHJ1ZSk7XG5cbiAgICAgIGlmICh0aGlzLlVTRV9NVVRBVElPTl9PQlNFUlZFUiAmJiAnTXV0YXRpb25PYnNlcnZlcicgaW4gd2luZG93KSB7XG4gICAgICAgIHRoaXMuX2RvbU9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIodGhpcy5fY2hlY2tGb3JJbnRlcnNlY3Rpb25zKTtcbiAgICAgICAgdGhpcy5fZG9tT2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudCwge1xuICAgICAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICAgIGNoYXJhY3RlckRhdGE6IHRydWUsXG4gICAgICAgICAgc3VidHJlZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cblxuLyoqXG4gKiBTdG9wcyBwb2xsaW5nIGZvciBpbnRlcnNlY3Rpb24gY2hhbmdlcy5cbiAqIEBwcml2YXRlXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5fdW5tb25pdG9ySW50ZXJzZWN0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5fbW9uaXRvcmluZ0ludGVyc2VjdGlvbnMpIHtcbiAgICB0aGlzLl9tb25pdG9yaW5nSW50ZXJzZWN0aW9ucyA9IGZhbHNlO1xuXG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9tb25pdG9yaW5nSW50ZXJ2YWwpO1xuICAgIHRoaXMuX21vbml0b3JpbmdJbnRlcnZhbCA9IG51bGw7XG5cbiAgICByZW1vdmVFdmVudCh3aW5kb3csICdyZXNpemUnLCB0aGlzLl9jaGVja0ZvckludGVyc2VjdGlvbnMsIHRydWUpO1xuICAgIHJlbW92ZUV2ZW50KGRvY3VtZW50LCAnc2Nyb2xsJywgdGhpcy5fY2hlY2tGb3JJbnRlcnNlY3Rpb25zLCB0cnVlKTtcblxuICAgIGlmICh0aGlzLl9kb21PYnNlcnZlcikge1xuICAgICAgdGhpcy5fZG9tT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgdGhpcy5fZG9tT2JzZXJ2ZXIgPSBudWxsO1xuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqIFNjYW5zIGVhY2ggb2JzZXJ2YXRpb24gdGFyZ2V0IGZvciBpbnRlcnNlY3Rpb24gY2hhbmdlcyBhbmQgYWRkcyB0aGVtXG4gKiB0byB0aGUgaW50ZXJuYWwgZW50cmllcyBxdWV1ZS4gSWYgbmV3IGVudHJpZXMgYXJlIGZvdW5kLCBpdFxuICogc2NoZWR1bGVzIHRoZSBjYWxsYmFjayB0byBiZSBpbnZva2VkLlxuICogQHByaXZhdGVcbiAqL1xuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLl9jaGVja0ZvckludGVyc2VjdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJvb3RJc0luRG9tID0gdGhpcy5fcm9vdElzSW5Eb20oKTtcbiAgdmFyIHJvb3RSZWN0ID0gcm9vdElzSW5Eb20gPyB0aGlzLl9nZXRSb290UmVjdCgpIDogZ2V0RW1wdHlSZWN0KCk7XG5cbiAgdGhpcy5fb2JzZXJ2YXRpb25UYXJnZXRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgIHZhciB0YXJnZXQgPSBpdGVtLmVsZW1lbnQ7XG4gICAgdmFyIHRhcmdldFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QodGFyZ2V0KTtcbiAgICB2YXIgcm9vdENvbnRhaW5zVGFyZ2V0ID0gdGhpcy5fcm9vdENvbnRhaW5zVGFyZ2V0KHRhcmdldCk7XG4gICAgdmFyIG9sZEVudHJ5ID0gaXRlbS5lbnRyeTtcbiAgICB2YXIgaW50ZXJzZWN0aW9uUmVjdCA9IHJvb3RJc0luRG9tICYmIHJvb3RDb250YWluc1RhcmdldCAmJlxuICAgICAgICB0aGlzLl9jb21wdXRlVGFyZ2V0QW5kUm9vdEludGVyc2VjdGlvbih0YXJnZXQsIHJvb3RSZWN0KTtcblxuICAgIHZhciBuZXdFbnRyeSA9IGl0ZW0uZW50cnkgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeSh7XG4gICAgICB0aW1lOiBub3coKSxcbiAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgYm91bmRpbmdDbGllbnRSZWN0OiB0YXJnZXRSZWN0LFxuICAgICAgcm9vdEJvdW5kczogcm9vdFJlY3QsXG4gICAgICBpbnRlcnNlY3Rpb25SZWN0OiBpbnRlcnNlY3Rpb25SZWN0XG4gICAgfSk7XG5cbiAgICBpZiAoIW9sZEVudHJ5KSB7XG4gICAgICB0aGlzLl9xdWV1ZWRFbnRyaWVzLnB1c2gobmV3RW50cnkpO1xuICAgIH0gZWxzZSBpZiAocm9vdElzSW5Eb20gJiYgcm9vdENvbnRhaW5zVGFyZ2V0KSB7XG4gICAgICAvLyBJZiB0aGUgbmV3IGVudHJ5IGludGVyc2VjdGlvbiByYXRpbyBoYXMgY3Jvc3NlZCBhbnkgb2YgdGhlXG4gICAgICAvLyB0aHJlc2hvbGRzLCBhZGQgYSBuZXcgZW50cnkuXG4gICAgICBpZiAodGhpcy5faGFzQ3Jvc3NlZFRocmVzaG9sZChvbGRFbnRyeSwgbmV3RW50cnkpKSB7XG4gICAgICAgIHRoaXMuX3F1ZXVlZEVudHJpZXMucHVzaChuZXdFbnRyeSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIHRoZSByb290IGlzIG5vdCBpbiB0aGUgRE9NIG9yIHRhcmdldCBpcyBub3QgY29udGFpbmVkIHdpdGhpblxuICAgICAgLy8gcm9vdCBidXQgdGhlIHByZXZpb3VzIGVudHJ5IGZvciB0aGlzIHRhcmdldCBoYWQgYW4gaW50ZXJzZWN0aW9uLFxuICAgICAgLy8gYWRkIGEgbmV3IHJlY29yZCBpbmRpY2F0aW5nIHJlbW92YWwuXG4gICAgICBpZiAob2xkRW50cnkgJiYgb2xkRW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgdGhpcy5fcXVldWVkRW50cmllcy5wdXNoKG5ld0VudHJ5KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHRoaXMpO1xuXG4gIGlmICh0aGlzLl9xdWV1ZWRFbnRyaWVzLmxlbmd0aCkge1xuICAgIHRoaXMuX2NhbGxiYWNrKHRoaXMudGFrZVJlY29yZHMoKSwgdGhpcyk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBBY2NlcHRzIGEgdGFyZ2V0IGFuZCByb290IHJlY3QgY29tcHV0ZXMgdGhlIGludGVyc2VjdGlvbiBiZXR3ZWVuIHRoZW5cbiAqIGZvbGxvd2luZyB0aGUgYWxnb3JpdGhtIGluIHRoZSBzcGVjLlxuICogVE9ETyhwaGlsaXB3YWx0b24pOiBhdCB0aGlzIHRpbWUgY2xpcC1wYXRoIGlzIG5vdCBjb25zaWRlcmVkLlxuICogaHR0cHM6Ly93M2MuZ2l0aHViLmlvL0ludGVyc2VjdGlvbk9ic2VydmVyLyNjYWxjdWxhdGUtaW50ZXJzZWN0aW9uLXJlY3QtYWxnb1xuICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgVGhlIHRhcmdldCBET00gZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IHJvb3RSZWN0IFRoZSBib3VuZGluZyByZWN0IG9mIHRoZSByb290IGFmdGVyIGJlaW5nXG4gKiAgICAgZXhwYW5kZWQgYnkgdGhlIHJvb3RNYXJnaW4gdmFsdWUuXG4gKiBAcmV0dXJuIHs/T2JqZWN0fSBUaGUgZmluYWwgaW50ZXJzZWN0aW9uIHJlY3Qgb2JqZWN0IG9yIHVuZGVmaW5lZCBpZiBub1xuICogICAgIGludGVyc2VjdGlvbiBpcyBmb3VuZC5cbiAqIEBwcml2YXRlXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5fY29tcHV0ZVRhcmdldEFuZFJvb3RJbnRlcnNlY3Rpb24gPVxuICAgIGZ1bmN0aW9uKHRhcmdldCwgcm9vdFJlY3QpIHtcblxuICAvLyBJZiB0aGUgZWxlbWVudCBpc24ndCBkaXNwbGF5ZWQsIGFuIGludGVyc2VjdGlvbiBjYW4ndCBoYXBwZW4uXG4gIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLmRpc3BsYXkgPT0gJ25vbmUnKSByZXR1cm47XG5cbiAgdmFyIHRhcmdldFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QodGFyZ2V0KTtcbiAgdmFyIGludGVyc2VjdGlvblJlY3QgPSB0YXJnZXRSZWN0O1xuICB2YXIgcGFyZW50ID0gZ2V0UGFyZW50Tm9kZSh0YXJnZXQpO1xuICB2YXIgYXRSb290ID0gZmFsc2U7XG5cbiAgd2hpbGUgKCFhdFJvb3QpIHtcbiAgICB2YXIgcGFyZW50UmVjdCA9IG51bGw7XG4gICAgdmFyIHBhcmVudENvbXB1dGVkU3R5bGUgPSBwYXJlbnQubm9kZVR5cGUgPT0gMSA/XG4gICAgICAgIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHBhcmVudCkgOiB7fTtcblxuICAgIC8vIElmIHRoZSBwYXJlbnQgaXNuJ3QgZGlzcGxheWVkLCBhbiBpbnRlcnNlY3Rpb24gY2FuJ3QgaGFwcGVuLlxuICAgIGlmIChwYXJlbnRDb21wdXRlZFN0eWxlLmRpc3BsYXkgPT0gJ25vbmUnKSByZXR1cm47XG5cbiAgICBpZiAocGFyZW50ID09IHRoaXMucm9vdCB8fCBwYXJlbnQgPT0gZG9jdW1lbnQpIHtcbiAgICAgIGF0Um9vdCA9IHRydWU7XG4gICAgICBwYXJlbnRSZWN0ID0gcm9vdFJlY3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIG5vbi12aXNpYmxlIG92ZXJmbG93LCBhbmQgaXQncyBub3QgdGhlIDxib2R5PlxuICAgICAgLy8gb3IgPGh0bWw+IGVsZW1lbnQsIHVwZGF0ZSB0aGUgaW50ZXJzZWN0aW9uIHJlY3QuXG4gICAgICAvLyBOb3RlOiA8Ym9keT4gYW5kIDxodG1sPiBjYW5ub3QgYmUgY2xpcHBlZCB0byBhIHJlY3QgdGhhdCdzIG5vdCBhbHNvXG4gICAgICAvLyB0aGUgZG9jdW1lbnQgcmVjdCwgc28gbm8gbmVlZCB0byBjb21wdXRlIGEgbmV3IGludGVyc2VjdGlvbi5cbiAgICAgIGlmIChwYXJlbnQgIT0gZG9jdW1lbnQuYm9keSAmJlxuICAgICAgICAgIHBhcmVudCAhPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiZcbiAgICAgICAgICBwYXJlbnRDb21wdXRlZFN0eWxlLm92ZXJmbG93ICE9ICd2aXNpYmxlJykge1xuICAgICAgICBwYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHBhcmVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgZWl0aGVyIG9mIHRoZSBhYm92ZSBjb25kaXRpb25hbHMgc2V0IGEgbmV3IHBhcmVudFJlY3QsXG4gICAgLy8gY2FsY3VsYXRlIG5ldyBpbnRlcnNlY3Rpb24gZGF0YS5cbiAgICBpZiAocGFyZW50UmVjdCkge1xuICAgICAgaW50ZXJzZWN0aW9uUmVjdCA9IGNvbXB1dGVSZWN0SW50ZXJzZWN0aW9uKHBhcmVudFJlY3QsIGludGVyc2VjdGlvblJlY3QpO1xuXG4gICAgICBpZiAoIWludGVyc2VjdGlvblJlY3QpIGJyZWFrO1xuICAgIH1cbiAgICBwYXJlbnQgPSBnZXRQYXJlbnROb2RlKHBhcmVudCk7XG4gIH1cbiAgcmV0dXJuIGludGVyc2VjdGlvblJlY3Q7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgcm9vdCByZWN0IGFmdGVyIGJlaW5nIGV4cGFuZGVkIGJ5IHRoZSByb290TWFyZ2luIHZhbHVlLlxuICogQHJldHVybiB7T2JqZWN0fSBUaGUgZXhwYW5kZWQgcm9vdCByZWN0LlxuICogQHByaXZhdGVcbiAqL1xuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLl9nZXRSb290UmVjdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcm9vdFJlY3Q7XG4gIGlmICh0aGlzLnJvb3QpIHtcbiAgICByb290UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdCh0aGlzLnJvb3QpO1xuICB9IGVsc2Uge1xuICAgIC8vIFVzZSA8aHRtbD4vPGJvZHk+IGluc3RlYWQgb2Ygd2luZG93IHNpbmNlIHNjcm9sbCBiYXJzIGFmZmVjdCBzaXplLlxuICAgIHZhciBodG1sID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgICByb290UmVjdCA9IHtcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICByaWdodDogaHRtbC5jbGllbnRXaWR0aCB8fCBib2R5LmNsaWVudFdpZHRoLFxuICAgICAgd2lkdGg6IGh0bWwuY2xpZW50V2lkdGggfHwgYm9keS5jbGllbnRXaWR0aCxcbiAgICAgIGJvdHRvbTogaHRtbC5jbGllbnRIZWlnaHQgfHwgYm9keS5jbGllbnRIZWlnaHQsXG4gICAgICBoZWlnaHQ6IGh0bWwuY2xpZW50SGVpZ2h0IHx8IGJvZHkuY2xpZW50SGVpZ2h0XG4gICAgfTtcbiAgfVxuICByZXR1cm4gdGhpcy5fZXhwYW5kUmVjdEJ5Um9vdE1hcmdpbihyb290UmVjdCk7XG59O1xuXG5cbi8qKlxuICogQWNjZXB0cyBhIHJlY3QgYW5kIGV4cGFuZHMgaXQgYnkgdGhlIHJvb3RNYXJnaW4gdmFsdWUuXG4gKiBAcGFyYW0ge09iamVjdH0gcmVjdCBUaGUgcmVjdCBvYmplY3QgdG8gZXhwYW5kLlxuICogQHJldHVybiB7T2JqZWN0fSBUaGUgZXhwYW5kZWQgcmVjdC5cbiAqIEBwcml2YXRlXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5fZXhwYW5kUmVjdEJ5Um9vdE1hcmdpbiA9IGZ1bmN0aW9uKHJlY3QpIHtcbiAgdmFyIG1hcmdpbnMgPSB0aGlzLl9yb290TWFyZ2luVmFsdWVzLm1hcChmdW5jdGlvbihtYXJnaW4sIGkpIHtcbiAgICByZXR1cm4gbWFyZ2luLnVuaXQgPT0gJ3B4JyA/IG1hcmdpbi52YWx1ZSA6XG4gICAgICAgIG1hcmdpbi52YWx1ZSAqIChpICUgMiA/IHJlY3Qud2lkdGggOiByZWN0LmhlaWdodCkgLyAxMDA7XG4gIH0pO1xuICB2YXIgbmV3UmVjdCA9IHtcbiAgICB0b3A6IHJlY3QudG9wIC0gbWFyZ2luc1swXSxcbiAgICByaWdodDogcmVjdC5yaWdodCArIG1hcmdpbnNbMV0sXG4gICAgYm90dG9tOiByZWN0LmJvdHRvbSArIG1hcmdpbnNbMl0sXG4gICAgbGVmdDogcmVjdC5sZWZ0IC0gbWFyZ2luc1szXVxuICB9O1xuICBuZXdSZWN0LndpZHRoID0gbmV3UmVjdC5yaWdodCAtIG5ld1JlY3QubGVmdDtcbiAgbmV3UmVjdC5oZWlnaHQgPSBuZXdSZWN0LmJvdHRvbSAtIG5ld1JlY3QudG9wO1xuXG4gIHJldHVybiBuZXdSZWN0O1xufTtcblxuXG4vKipcbiAqIEFjY2VwdHMgYW4gb2xkIGFuZCBuZXcgZW50cnkgYW5kIHJldHVybnMgdHJ1ZSBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlXG4gKiB0aHJlc2hvbGQgdmFsdWVzIGhhcyBiZWVuIGNyb3NzZWQuXG4gKiBAcGFyYW0gez9JbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5fSBvbGRFbnRyeSBUaGUgcHJldmlvdXMgZW50cnkgZm9yIGFcbiAqICAgIHBhcnRpY3VsYXIgdGFyZ2V0IGVsZW1lbnQgb3IgbnVsbCBpZiBubyBwcmV2aW91cyBlbnRyeSBleGlzdHMuXG4gKiBAcGFyYW0ge0ludGVyc2VjdGlvbk9ic2VydmVyRW50cnl9IG5ld0VudHJ5IFRoZSBjdXJyZW50IGVudHJ5IGZvciBhXG4gKiAgICBwYXJ0aWN1bGFyIHRhcmdldCBlbGVtZW50LlxuICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGEgYW55IHRocmVzaG9sZCBoYXMgYmVlbiBjcm9zc2VkLlxuICogQHByaXZhdGVcbiAqL1xuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLl9oYXNDcm9zc2VkVGhyZXNob2xkID1cbiAgICBmdW5jdGlvbihvbGRFbnRyeSwgbmV3RW50cnkpIHtcblxuICAvLyBUbyBtYWtlIGNvbXBhcmluZyBlYXNpZXIsIGFuIGVudHJ5IHRoYXQgaGFzIGEgcmF0aW8gb2YgMFxuICAvLyBidXQgZG9lcyBub3QgYWN0dWFsbHkgaW50ZXJzZWN0IGlzIGdpdmVuIGEgdmFsdWUgb2YgLTFcbiAgdmFyIG9sZFJhdGlvID0gb2xkRW50cnkgJiYgb2xkRW50cnkuaXNJbnRlcnNlY3RpbmcgP1xuICAgICAgb2xkRW50cnkuaW50ZXJzZWN0aW9uUmF0aW8gfHwgMCA6IC0xO1xuICB2YXIgbmV3UmF0aW8gPSBuZXdFbnRyeS5pc0ludGVyc2VjdGluZyA/XG4gICAgICBuZXdFbnRyeS5pbnRlcnNlY3Rpb25SYXRpbyB8fCAwIDogLTE7XG5cbiAgLy8gSWdub3JlIHVuY2hhbmdlZCByYXRpb3NcbiAgaWYgKG9sZFJhdGlvID09PSBuZXdSYXRpbykgcmV0dXJuO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50aHJlc2hvbGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRocmVzaG9sZCA9IHRoaXMudGhyZXNob2xkc1tpXTtcblxuICAgIC8vIFJldHVybiB0cnVlIGlmIGFuIGVudHJ5IG1hdGNoZXMgYSB0aHJlc2hvbGQgb3IgaWYgdGhlIG5ldyByYXRpb1xuICAgIC8vIGFuZCB0aGUgb2xkIHJhdGlvIGFyZSBvbiB0aGUgb3Bwb3NpdGUgc2lkZXMgb2YgYSB0aHJlc2hvbGQuXG4gICAgaWYgKHRocmVzaG9sZCA9PSBvbGRSYXRpbyB8fCB0aHJlc2hvbGQgPT0gbmV3UmF0aW8gfHxcbiAgICAgICAgdGhyZXNob2xkIDwgb2xkUmF0aW8gIT09IHRocmVzaG9sZCA8IG5ld1JhdGlvKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSByb290IGVsZW1lbnQgaXMgYW4gZWxlbWVudCBhbmQgaXMgaW4gdGhlIERPTS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHJvb3QgZWxlbWVudCBpcyBhbiBlbGVtZW50IGFuZCBpcyBpbiB0aGUgRE9NLlxuICogQHByaXZhdGVcbiAqL1xuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLl9yb290SXNJbkRvbSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gIXRoaXMucm9vdCB8fCBjb250YWluc0RlZXAoZG9jdW1lbnQsIHRoaXMucm9vdCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdGFyZ2V0IGVsZW1lbnQgaXMgYSBjaGlsZCBvZiByb290LlxuICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgVGhlIHRhcmdldCBlbGVtZW50IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdGFyZ2V0IGVsZW1lbnQgaXMgYSBjaGlsZCBvZiByb290LlxuICogQHByaXZhdGVcbiAqL1xuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLl9yb290Q29udGFpbnNUYXJnZXQgPSBmdW5jdGlvbih0YXJnZXQpIHtcbiAgcmV0dXJuIGNvbnRhaW5zRGVlcCh0aGlzLnJvb3QgfHwgZG9jdW1lbnQsIHRhcmdldCk7XG59O1xuXG5cbi8qKlxuICogQWRkcyB0aGUgaW5zdGFuY2UgdG8gdGhlIGdsb2JhbCBJbnRlcnNlY3Rpb25PYnNlcnZlciByZWdpc3RyeSBpZiBpdCBpc24ndFxuICogYWxyZWFkeSBwcmVzZW50LlxuICogQHByaXZhdGVcbiAqL1xuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLl9yZWdpc3Rlckluc3RhbmNlID0gZnVuY3Rpb24oKSB7XG4gIGlmIChyZWdpc3RyeS5pbmRleE9mKHRoaXMpIDwgMCkge1xuICAgIHJlZ2lzdHJ5LnB1c2godGhpcyk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBpbnN0YW5jZSBmcm9tIHRoZSBnbG9iYWwgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgcmVnaXN0cnkuXG4gKiBAcHJpdmF0ZVxuICovXG5JbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuX3VucmVnaXN0ZXJJbnN0YW5jZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaW5kZXggPSByZWdpc3RyeS5pbmRleE9mKHRoaXMpO1xuICBpZiAoaW5kZXggIT0gLTEpIHJlZ2lzdHJ5LnNwbGljZShpbmRleCwgMSk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBwZXJmb3JtYW5jZS5ub3coKSBtZXRob2Qgb3IgbnVsbCBpbiBicm93c2Vyc1xuICogdGhhdCBkb24ndCBzdXBwb3J0IHRoZSBBUEkuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBlbGFwc2VkIHRpbWUgc2luY2UgdGhlIHBhZ2Ugd2FzIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gbm93KCkge1xuICByZXR1cm4gd2luZG93LnBlcmZvcm1hbmNlICYmIHBlcmZvcm1hbmNlLm5vdyAmJiBwZXJmb3JtYW5jZS5ub3coKTtcbn1cblxuXG4vKipcbiAqIFRocm90dGxlcyBhIGZ1bmN0aW9uIGFuZCBkZWxheXMgaXRzIGV4ZWN1dGlvbiwgc28gaXQncyBvbmx5IGNhbGxlZCBhdCBtb3N0XG4gKiBvbmNlIHdpdGhpbiBhIGdpdmVuIHRpbWUgcGVyaW9kLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXQgVGhlIGFtb3VudCBvZiB0aW1lIHRoYXQgbXVzdCBwYXNzIGJlZm9yZSB0aGVcbiAqICAgICBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIGFnYWluLlxuICogQHJldHVybiB7RnVuY3Rpb259IFRoZSB0aHJvdHRsZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRocm90dGxlKGZuLCB0aW1lb3V0KSB7XG4gIHZhciB0aW1lciA9IG51bGw7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aW1lcikge1xuICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBmbigpO1xuICAgICAgICB0aW1lciA9IG51bGw7XG4gICAgICB9LCB0aW1lb3V0KTtcbiAgICB9XG4gIH07XG59XG5cblxuLyoqXG4gKiBBZGRzIGFuIGV2ZW50IGhhbmRsZXIgdG8gYSBET00gbm9kZSBlbnN1cmluZyBjcm9zcy1icm93c2VyIGNvbXBhdGliaWxpdHkuXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgVGhlIERPTSBub2RlIHRvIGFkZCB0aGUgZXZlbnQgaGFuZGxlciB0by5cbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBldmVudCBoYW5kbGVyIHRvIGFkZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0X3VzZUNhcHR1cmUgT3B0aW9uYWxseSBhZGRzIHRoZSBldmVuIHRvIHRoZSBjYXB0dXJlXG4gKiAgICAgcGhhc2UuIE5vdGU6IHRoaXMgb25seSB3b3JrcyBpbiBtb2Rlcm4gYnJvd3NlcnMuXG4gKi9cbmZ1bmN0aW9uIGFkZEV2ZW50KG5vZGUsIGV2ZW50LCBmbiwgb3B0X3VzZUNhcHR1cmUpIHtcbiAgaWYgKHR5cGVvZiBub2RlLmFkZEV2ZW50TGlzdGVuZXIgPT0gJ2Z1bmN0aW9uJykge1xuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgZm4sIG9wdF91c2VDYXB0dXJlIHx8IGZhbHNlKTtcbiAgfVxuICBlbHNlIGlmICh0eXBlb2Ygbm9kZS5hdHRhY2hFdmVudCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgbm9kZS5hdHRhY2hFdmVudCgnb24nICsgZXZlbnQsIGZuKTtcbiAgfVxufVxuXG5cbi8qKlxuICogUmVtb3ZlcyBhIHByZXZpb3VzbHkgYWRkZWQgZXZlbnQgaGFuZGxlciBmcm9tIGEgRE9NIG5vZGUuXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgVGhlIERPTSBub2RlIHRvIHJlbW92ZSB0aGUgZXZlbnQgaGFuZGxlciBmcm9tLlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGV2ZW50IGhhbmRsZXIgdG8gcmVtb3ZlLlxuICogQHBhcmFtIHtib29sZWFufSBvcHRfdXNlQ2FwdHVyZSBJZiB0aGUgZXZlbnQgaGFuZGxlciB3YXMgYWRkZWQgd2l0aCB0aGlzXG4gKiAgICAgZmxhZyBzZXQgdG8gdHJ1ZSwgaXQgc2hvdWxkIGJlIHNldCB0byB0cnVlIGhlcmUgaW4gb3JkZXIgdG8gcmVtb3ZlIGl0LlxuICovXG5mdW5jdGlvbiByZW1vdmVFdmVudChub2RlLCBldmVudCwgZm4sIG9wdF91c2VDYXB0dXJlKSB7XG4gIGlmICh0eXBlb2Ygbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyID09ICdmdW5jdGlvbicpIHtcbiAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGZuLCBvcHRfdXNlQ2FwdHVyZSB8fCBmYWxzZSk7XG4gIH1cbiAgZWxzZSBpZiAodHlwZW9mIG5vZGUuZGV0YXRjaEV2ZW50ID09ICdmdW5jdGlvbicpIHtcbiAgICBub2RlLmRldGF0Y2hFdmVudCgnb24nICsgZXZlbnQsIGZuKTtcbiAgfVxufVxuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgaW50ZXJzZWN0aW9uIGJldHdlZW4gdHdvIHJlY3Qgb2JqZWN0cy5cbiAqIEBwYXJhbSB7T2JqZWN0fSByZWN0MSBUaGUgZmlyc3QgcmVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSByZWN0MiBUaGUgc2Vjb25kIHJlY3QuXG4gKiBAcmV0dXJuIHs/T2JqZWN0fSBUaGUgaW50ZXJzZWN0aW9uIHJlY3Qgb3IgdW5kZWZpbmVkIGlmIG5vIGludGVyc2VjdGlvblxuICogICAgIGlzIGZvdW5kLlxuICovXG5mdW5jdGlvbiBjb21wdXRlUmVjdEludGVyc2VjdGlvbihyZWN0MSwgcmVjdDIpIHtcbiAgdmFyIHRvcCA9IE1hdGgubWF4KHJlY3QxLnRvcCwgcmVjdDIudG9wKTtcbiAgdmFyIGJvdHRvbSA9IE1hdGgubWluKHJlY3QxLmJvdHRvbSwgcmVjdDIuYm90dG9tKTtcbiAgdmFyIGxlZnQgPSBNYXRoLm1heChyZWN0MS5sZWZ0LCByZWN0Mi5sZWZ0KTtcbiAgdmFyIHJpZ2h0ID0gTWF0aC5taW4ocmVjdDEucmlnaHQsIHJlY3QyLnJpZ2h0KTtcbiAgdmFyIHdpZHRoID0gcmlnaHQgLSBsZWZ0O1xuICB2YXIgaGVpZ2h0ID0gYm90dG9tIC0gdG9wO1xuXG4gIHJldHVybiAod2lkdGggPj0gMCAmJiBoZWlnaHQgPj0gMCkgJiYge1xuICAgIHRvcDogdG9wLFxuICAgIGJvdHRvbTogYm90dG9tLFxuICAgIGxlZnQ6IGxlZnQsXG4gICAgcmlnaHQ6IHJpZ2h0LFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodFxuICB9O1xufVxuXG5cbi8qKlxuICogU2hpbXMgdGhlIG5hdGl2ZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBvbGRlciBJRS5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWwgVGhlIGVsZW1lbnQgd2hvc2UgYm91bmRpbmcgcmVjdCB0byBnZXQuXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSAocG9zc2libHkgc2hpbW1lZCkgcmVjdCBvZiB0aGUgZWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsKSB7XG4gIHZhciByZWN0O1xuXG4gIHRyeSB7XG4gICAgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBJZ25vcmUgV2luZG93cyA3IElFMTEgXCJVbnNwZWNpZmllZCBlcnJvclwiXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3czYy9JbnRlcnNlY3Rpb25PYnNlcnZlci9wdWxsLzIwNVxuICB9XG5cbiAgaWYgKCFyZWN0KSByZXR1cm4gZ2V0RW1wdHlSZWN0KCk7XG5cbiAgLy8gT2xkZXIgSUVcbiAgaWYgKCEocmVjdC53aWR0aCAmJiByZWN0LmhlaWdodCkpIHtcbiAgICByZWN0ID0ge1xuICAgICAgdG9wOiByZWN0LnRvcCxcbiAgICAgIHJpZ2h0OiByZWN0LnJpZ2h0LFxuICAgICAgYm90dG9tOiByZWN0LmJvdHRvbSxcbiAgICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICAgIHdpZHRoOiByZWN0LnJpZ2h0IC0gcmVjdC5sZWZ0LFxuICAgICAgaGVpZ2h0OiByZWN0LmJvdHRvbSAtIHJlY3QudG9wXG4gICAgfTtcbiAgfVxuICByZXR1cm4gcmVjdDtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgYW4gZW1wdHkgcmVjdCBvYmplY3QuIEFuIGVtcHR5IHJlY3QgaXMgcmV0dXJuZWQgd2hlbiBhbiBlbGVtZW50XG4gKiBpcyBub3QgaW4gdGhlIERPTS5cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIGVtcHR5IHJlY3QuXG4gKi9cbmZ1bmN0aW9uIGdldEVtcHR5UmVjdCgpIHtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgd2lkdGg6IDAsXG4gICAgaGVpZ2h0OiAwXG4gIH07XG59XG5cbi8qKlxuICogQ2hlY2tzIHRvIHNlZSBpZiBhIHBhcmVudCBlbGVtZW50IGNvbnRhaW5zIGEgY2hpbGQgZWxlbWVudCAoaW5jbHVkaW5nIGluc2lkZVxuICogc2hhZG93IERPTSkuXG4gKiBAcGFyYW0ge05vZGV9IHBhcmVudCBUaGUgcGFyZW50IGVsZW1lbnQuXG4gKiBAcGFyYW0ge05vZGV9IGNoaWxkIFRoZSBjaGlsZCBlbGVtZW50LlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGFyZW50IG5vZGUgY29udGFpbnMgdGhlIGNoaWxkIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5zRGVlcChwYXJlbnQsIGNoaWxkKSB7XG4gIHZhciBub2RlID0gY2hpbGQ7XG4gIHdoaWxlIChub2RlKSB7XG4gICAgaWYgKG5vZGUgPT0gcGFyZW50KSByZXR1cm4gdHJ1ZTtcblxuICAgIG5vZGUgPSBnZXRQYXJlbnROb2RlKG5vZGUpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuXG4vKipcbiAqIEdldHMgdGhlIHBhcmVudCBub2RlIG9mIGFuIGVsZW1lbnQgb3IgaXRzIGhvc3QgZWxlbWVudCBpZiB0aGUgcGFyZW50IG5vZGVcbiAqIGlzIGEgc2hhZG93IHJvb3QuXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgVGhlIG5vZGUgd2hvc2UgcGFyZW50IHRvIGdldC5cbiAqIEByZXR1cm4ge05vZGV8bnVsbH0gVGhlIHBhcmVudCBub2RlIG9yIG51bGwgaWYgbm8gcGFyZW50IGV4aXN0cy5cbiAqL1xuZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZShub2RlKSB7XG4gIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG5cbiAgaWYgKHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgPT0gMTEgJiYgcGFyZW50Lmhvc3QpIHtcbiAgICAvLyBJZiB0aGUgcGFyZW50IGlzIGEgc2hhZG93IHJvb3QsIHJldHVybiB0aGUgaG9zdCBlbGVtZW50LlxuICAgIHJldHVybiBwYXJlbnQuaG9zdDtcbiAgfVxuICByZXR1cm4gcGFyZW50O1xufVxuXG5cbi8vIEV4cG9zZXMgdGhlIGNvbnN0cnVjdG9ycyBnbG9iYWxseS5cbndpbmRvdy5JbnRlcnNlY3Rpb25PYnNlcnZlciA9IEludGVyc2VjdGlvbk9ic2VydmVyO1xud2luZG93LkludGVyc2VjdGlvbk9ic2VydmVyRW50cnkgPSBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5O1xuXG59KHdpbmRvdywgZG9jdW1lbnQpKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIEdldFYgPSByZXF1aXJlKCcuL0dldFYnKTtcbnZhciBJc0NhbGxhYmxlID0gcmVxdWlyZSgnLi9Jc0NhbGxhYmxlJyk7XG52YXIgSXNQcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4vSXNQcm9wZXJ0eUtleScpO1xuXG4vKipcbiAqIDcuMy45IC0gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWdldG1ldGhvZFxuICogMS4gQXNzZXJ0OiBJc1Byb3BlcnR5S2V5KFApIGlzIHRydWUuXG4gKiAyLiBMZXQgZnVuYyBiZSBHZXRWKE8sIFApLlxuICogMy4gUmV0dXJuSWZBYnJ1cHQoZnVuYykuXG4gKiA0LiBJZiBmdW5jIGlzIGVpdGhlciB1bmRlZmluZWQgb3IgbnVsbCwgcmV0dXJuIHVuZGVmaW5lZC5cbiAqIDUuIElmIElzQ2FsbGFibGUoZnVuYykgaXMgZmFsc2UsIHRocm93IGEgVHlwZUVycm9yIGV4Y2VwdGlvbi5cbiAqIDYuIFJldHVybiBmdW5jLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gR2V0TWV0aG9kKE8sIFApIHtcblx0Ly8gNy4zLjkuMVxuXHRpZiAoIUlzUHJvcGVydHlLZXkoUCkpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogSXNQcm9wZXJ0eUtleShQKSBpcyBub3QgdHJ1ZScpO1xuXHR9XG5cblx0Ly8gNy4zLjkuMlxuXHR2YXIgZnVuYyA9IEdldFYoTywgUCk7XG5cblx0Ly8gNy4zLjkuNFxuXHRpZiAoZnVuYyA9PSBudWxsKSB7XG5cdFx0cmV0dXJuIHZvaWQgMDtcblx0fVxuXG5cdC8vIDcuMy45LjVcblx0aWYgKCFJc0NhbGxhYmxlKGZ1bmMpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoUCArICdpcyBub3QgYSBmdW5jdGlvbicpO1xuXHR9XG5cblx0Ly8gNy4zLjkuNlxuXHRyZXR1cm4gZnVuYztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0cmV0dXJuIHR5cGVvZiBTdHJpbmcucHJvdG90eXBlLnBhZEVuZCA9PT0gJ2Z1bmN0aW9uJyA/IFN0cmluZy5wcm90b3R5cGUucGFkRW5kIDogaW1wbGVtZW50YXRpb247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtOS4yXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVG9Cb29sZWFuKHZhbHVlKSB7IHJldHVybiAhIXZhbHVlOyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVG9OdW1iZXIgPSByZXF1aXJlKCcuL1RvTnVtYmVyJyk7XG5cbi8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy05LjZcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb1VpbnQzMih4KSB7XG5cdHJldHVybiBUb051bWJlcih4KSA+Pj4gMDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9HZXRJbnRyaW5zaWMnKTtcbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcbnZhciBjaGFubmVsID0gcmVxdWlyZSgnc2lkZS1jaGFubmVsJykoKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBTTE9UID0ge1xuXHRhc3NlcnQ6IGZ1bmN0aW9uIChPLCBzbG90KSB7XG5cdFx0aWYgKCFPIHx8ICh0eXBlb2YgTyAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIE8gIT09ICdmdW5jdGlvbicpKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYE9gIGlzIG5vdCBhbiBvYmplY3QnKTtcblx0XHR9XG5cdFx0aWYgKHR5cGVvZiBzbG90ICE9PSAnc3RyaW5nJykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2BzbG90YCBtdXN0IGJlIGEgc3RyaW5nJyk7XG5cdFx0fVxuXHRcdGNoYW5uZWwuYXNzZXJ0KE8pO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uIChPLCBzbG90KSB7XG5cdFx0aWYgKCFPIHx8ICh0eXBlb2YgTyAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIE8gIT09ICdmdW5jdGlvbicpKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYE9gIGlzIG5vdCBhbiBvYmplY3QnKTtcblx0XHR9XG5cdFx0aWYgKHR5cGVvZiBzbG90ICE9PSAnc3RyaW5nJykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2BzbG90YCBtdXN0IGJlIGEgc3RyaW5nJyk7XG5cdFx0fVxuXHRcdHZhciBzbG90cyA9IGNoYW5uZWwuZ2V0KE8pO1xuXHRcdHJldHVybiBzbG90cyAmJiBzbG90c1snJCcgKyBzbG90XTtcblx0fSxcblx0aGFzOiBmdW5jdGlvbiAoTywgc2xvdCkge1xuXHRcdGlmICghTyB8fCAodHlwZW9mIE8gIT09ICdvYmplY3QnICYmIHR5cGVvZiBPICE9PSAnZnVuY3Rpb24nKSkge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2BPYCBpcyBub3QgYW4gb2JqZWN0Jyk7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2Ygc2xvdCAhPT0gJ3N0cmluZycpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgc2xvdGAgbXVzdCBiZSBhIHN0cmluZycpO1xuXHRcdH1cblx0XHR2YXIgc2xvdHMgPSBjaGFubmVsLmdldChPKTtcblx0XHRyZXR1cm4gISFzbG90cyAmJiBoYXMoc2xvdHMsICckJyArIHNsb3QpO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uIChPLCBzbG90LCBWKSB7XG5cdFx0aWYgKCFPIHx8ICh0eXBlb2YgTyAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIE8gIT09ICdmdW5jdGlvbicpKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYE9gIGlzIG5vdCBhbiBvYmplY3QnKTtcblx0XHR9XG5cdFx0aWYgKHR5cGVvZiBzbG90ICE9PSAnc3RyaW5nJykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2BzbG90YCBtdXN0IGJlIGEgc3RyaW5nJyk7XG5cdFx0fVxuXHRcdHZhciBzbG90cyA9IGNoYW5uZWwuZ2V0KE8pO1xuXHRcdGlmICghc2xvdHMpIHtcblx0XHRcdHNsb3RzID0ge307XG5cdFx0XHRjaGFubmVsLnNldChPLCBzbG90cyk7XG5cdFx0fVxuXHRcdHNsb3RzWyckJyArIHNsb3RdID0gVjtcblx0fVxufTtcblxuaWYgKE9iamVjdC5mcmVlemUpIHtcblx0T2JqZWN0LmZyZWV6ZShTTE9UKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTTE9UO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBBZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0FkdmFuY2VTdHJpbmdJbmRleCcpO1xudmFyIENyZWF0ZUl0ZXJSZXN1bHRPYmplY3QgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0NyZWF0ZUl0ZXJSZXN1bHRPYmplY3QnKTtcbnZhciBHZXQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0dldCcpO1xudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L0dldEludHJpbnNpYycpO1xudmFyIE9iamVjdENyZWF0ZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvT2JqZWN0Q3JlYXRlJyk7XG52YXIgUmVnRXhwRXhlYyA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvUmVnRXhwRXhlYycpO1xudmFyIFNldCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvU2V0Jyk7XG52YXIgVG9MZW5ndGggPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1RvTGVuZ3RoJyk7XG52YXIgVG9TdHJpbmcgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1RvU3RyaW5nJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVHlwZScpO1xudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scycpKCk7XG5cbnZhciBTTE9UID0gcmVxdWlyZSgnaW50ZXJuYWwtc2xvdCcpO1xudmFyIHVuZGVmaW5lZDtcblxudmFyIFJlZ0V4cFN0cmluZ0l0ZXJhdG9yID0gZnVuY3Rpb24gUmVnRXhwU3RyaW5nSXRlcmF0b3IoUiwgUywgZ2xvYmFsLCBmdWxsVW5pY29kZSkge1xuXHRpZiAoVHlwZShTKSAhPT0gJ1N0cmluZycpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdTIG11c3QgYmUgYSBzdHJpbmcnKTtcblx0fVxuXHRpZiAoVHlwZShnbG9iYWwpICE9PSAnQm9vbGVhbicpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdnbG9iYWwgbXVzdCBiZSBhIGJvb2xlYW4nKTtcblx0fVxuXHRpZiAoVHlwZShmdWxsVW5pY29kZSkgIT09ICdCb29sZWFuJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2Z1bGxVbmljb2RlIG11c3QgYmUgYSBib29sZWFuJyk7XG5cdH1cblx0U0xPVC5zZXQodGhpcywgJ1tbSXRlcmF0aW5nUmVnRXhwXV0nLCBSKTtcblx0U0xPVC5zZXQodGhpcywgJ1tbSXRlcmF0ZWRTdHJpbmddXScsIFMpO1xuXHRTTE9ULnNldCh0aGlzLCAnW1tHbG9iYWxdXScsIGdsb2JhbCk7XG5cdFNMT1Quc2V0KHRoaXMsICdbW1VuaWNvZGVdXScsIGZ1bGxVbmljb2RlKTtcblx0U0xPVC5zZXQodGhpcywgJ1tbRG9uZV1dJywgZmFsc2UpO1xufTtcblxudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gR2V0SW50cmluc2ljKCclSXRlcmF0b3JQcm90b3R5cGUlJywgdHJ1ZSk7XG5pZiAoSXRlcmF0b3JQcm90b3R5cGUpIHtcblx0UmVnRXhwU3RyaW5nSXRlcmF0b3IucHJvdG90eXBlID0gT2JqZWN0Q3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbn1cblxuZGVmaW5lKFJlZ0V4cFN0cmluZ0l0ZXJhdG9yLnByb3RvdHlwZSwge1xuXHRuZXh0OiBmdW5jdGlvbiBuZXh0KCkge1xuXHRcdHZhciBPID0gdGhpcztcblx0XHRpZiAoVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ3JlY2VpdmVyIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG5cdFx0fVxuXHRcdGlmIChcblx0XHRcdCEoTyBpbnN0YW5jZW9mIFJlZ0V4cFN0cmluZ0l0ZXJhdG9yKVxuXHRcdFx0fHwgIVNMT1QuaGFzKE8sICdbW0l0ZXJhdGluZ1JlZ0V4cF1dJylcblx0XHRcdHx8ICFTTE9ULmhhcyhPLCAnW1tJdGVyYXRlZFN0cmluZ11dJylcblx0XHRcdHx8ICFTTE9ULmhhcyhPLCAnW1tHbG9iYWxdXScpXG5cdFx0XHR8fCAhU0xPVC5oYXMoTywgJ1tbVW5pY29kZV1dJylcblx0XHRcdHx8ICFTTE9ULmhhcyhPLCAnW1tEb25lXV0nKVxuXHRcdCkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignXCJ0aGlzXCIgdmFsdWUgbXVzdCBiZSBhIFJlZ0V4cFN0cmluZ0l0ZXJhdG9yIGluc3RhbmNlJyk7XG5cdFx0fVxuXHRcdGlmIChTTE9ULmdldChPLCAnW1tEb25lXV0nKSkge1xuXHRcdFx0cmV0dXJuIENyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodW5kZWZpbmVkLCB0cnVlKTtcblx0XHR9XG5cdFx0dmFyIFIgPSBTTE9ULmdldChPLCAnW1tJdGVyYXRpbmdSZWdFeHBdXScpO1xuXHRcdHZhciBTID0gU0xPVC5nZXQoTywgJ1tbSXRlcmF0ZWRTdHJpbmddXScpO1xuXHRcdHZhciBnbG9iYWwgPSBTTE9ULmdldChPLCAnW1tHbG9iYWxdXScpO1xuXHRcdHZhciBmdWxsVW5pY29kZSA9IFNMT1QuZ2V0KE8sICdbW1VuaWNvZGVdXScpO1xuXHRcdHZhciBtYXRjaCA9IFJlZ0V4cEV4ZWMoUiwgUyk7XG5cdFx0aWYgKG1hdGNoID09PSBudWxsKSB7XG5cdFx0XHRTTE9ULnNldChPLCAnW1tEb25lXV0nLCB0cnVlKTtcblx0XHRcdHJldHVybiBDcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHVuZGVmaW5lZCwgdHJ1ZSk7XG5cdFx0fVxuXHRcdGlmIChnbG9iYWwpIHtcblx0XHRcdHZhciBtYXRjaFN0ciA9IFRvU3RyaW5nKEdldChtYXRjaCwgJzAnKSk7XG5cdFx0XHRpZiAobWF0Y2hTdHIgPT09ICcnKSB7XG5cdFx0XHRcdHZhciB0aGlzSW5kZXggPSBUb0xlbmd0aChHZXQoUiwgJ2xhc3RJbmRleCcpKTtcblx0XHRcdFx0dmFyIG5leHRJbmRleCA9IEFkdmFuY2VTdHJpbmdJbmRleChTLCB0aGlzSW5kZXgsIGZ1bGxVbmljb2RlKTtcblx0XHRcdFx0U2V0KFIsICdsYXN0SW5kZXgnLCBuZXh0SW5kZXgsIHRydWUpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIENyZWF0ZUl0ZXJSZXN1bHRPYmplY3QobWF0Y2gsIGZhbHNlKTtcblx0XHR9XG5cdFx0U0xPVC5zZXQoTywgJ1tbRG9uZV1dJywgdHJ1ZSk7XG5cdFx0cmV0dXJuIENyZWF0ZUl0ZXJSZXN1bHRPYmplY3QobWF0Y2gsIGZhbHNlKTtcblx0fVxufSk7XG5pZiAoaGFzU3ltYm9scykge1xuXHR2YXIgZGVmaW5lUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblx0aWYgKFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdGlmIChkZWZpbmVQKSB7XG5cdFx0XHRkZWZpbmVQKFJlZ0V4cFN0cmluZ0l0ZXJhdG9yLnByb3RvdHlwZSwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7XG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdHZhbHVlOiAnUmVnRXhwIFN0cmluZyBJdGVyYXRvcicsXG5cdFx0XHRcdHdyaXRhYmxlOiBmYWxzZVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFJlZ0V4cFN0cmluZ0l0ZXJhdG9yLnByb3RvdHlwZVtTeW1ib2wudG9TdHJpbmdUYWddID0gJ1JlZ0V4cCBTdHJpbmcgSXRlcmF0b3InO1xuXHRcdH1cblx0fVxuXG5cdGlmICghSXRlcmF0b3JQcm90b3R5cGUgJiYgU3ltYm9sLml0ZXJhdG9yKSB7XG5cdFx0dmFyIGZ1bmMgPSB7fTtcblx0XHRmdW5jW1N5bWJvbC5pdGVyYXRvcl0gPSBSZWdFeHBTdHJpbmdJdGVyYXRvci5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSB8fCBmdW5jdGlvbiBTeW1ib2xJdGVyYXRvcigpIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cdFx0dmFyIHByZWRpY2F0ZSA9IHt9O1xuXHRcdHByZWRpY2F0ZVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIFJlZ0V4cFN0cmluZ0l0ZXJhdG9yLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdICE9PSBmdW5jW1N5bWJvbC5pdGVyYXRvcl07XG5cdFx0fTtcblx0XHRkZWZpbmUoUmVnRXhwU3RyaW5nSXRlcmF0b3IucHJvdG90eXBlLCBmdW5jLCBwcmVkaWNhdGUpO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVnRXhwU3RyaW5nSXRlcmF0b3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXRlcmF0ZUl0ZXJhdG9yKGl0ZXJhdG9yKSB7XG5cdGlmICghaXRlcmF0b3IgfHwgdHlwZW9mIGl0ZXJhdG9yLm5leHQgIT09ICdmdW5jdGlvbicpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignaXRlcmF0b3IgbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCBhIGBuZXh0YCBtZXRob2QnKTtcblx0fVxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHNbMV07XG5cdFx0aWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2BjYWxsYmFja2AsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblx0XHR9XG5cdH1cblx0dmFyIHZhbHVlcyA9IGNhbGxiYWNrIHx8IFtdO1xuXHR2YXIgcmVzdWx0O1xuXHR3aGlsZSAoKHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKSkgJiYgIXJlc3VsdC5kb25lKSB7XG5cdFx0aWYgKGNhbGxiYWNrKSB7XG5cdFx0XHRjYWxsYmFjayhyZXN1bHQudmFsdWUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbGxiYWNrLXJldHVyblxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YWx1ZXMucHVzaChyZXN1bHQudmFsdWUpO1xuXHRcdH1cblx0fVxuXHRpZiAoIWNhbGxiYWNrKSB7XG5cdFx0cmV0dXJuIHZhbHVlcztcblx0fVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogZXNsaW50IG5vLWludmFsaWQtdGhpczogMSAqL1xuXG52YXIgRVJST1JfTUVTU0FHRSA9ICdGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBjYWxsZWQgb24gaW5jb21wYXRpYmxlICc7XG52YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGZ1bmNUeXBlID0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKHRoYXQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gJ2Z1bmN0aW9uJyB8fCB0b1N0ci5jYWxsKHRhcmdldCkgIT09IGZ1bmNUeXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRVJST1JfTUVTU0FHRSArIHRhcmdldCk7XG4gICAgfVxuICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXG4gICAgdmFyIGJvdW5kO1xuICAgIHZhciBiaW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgYm91bmQpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKE9iamVjdChyZXN1bHQpID09PSByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgICAgIHRoYXQsXG4gICAgICAgICAgICAgICAgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgYm91bmRMZW5ndGggPSBNYXRoLm1heCgwLCB0YXJnZXQubGVuZ3RoIC0gYXJncy5sZW5ndGgpO1xuICAgIHZhciBib3VuZEFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvdW5kTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYm91bmRBcmdzLnB1c2goJyQnICsgaSk7XG4gICAgfVxuXG4gICAgYm91bmQgPSBGdW5jdGlvbignYmluZGVyJywgJ3JldHVybiBmdW5jdGlvbiAoJyArIGJvdW5kQXJncy5qb2luKCcsJykgKyAnKXsgcmV0dXJuIGJpbmRlci5hcHBseSh0aGlzLGFyZ3VtZW50cyk7IH0nKShiaW5kZXIpO1xuXG4gICAgaWYgKHRhcmdldC5wcm90b3R5cGUpIHtcbiAgICAgICAgdmFyIEVtcHR5ID0gZnVuY3Rpb24gRW1wdHkoKSB7fTtcbiAgICAgICAgRW1wdHkucHJvdG90eXBlID0gdGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgYm91bmQucHJvdG90eXBlID0gbmV3IEVtcHR5KCk7XG4gICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJvdW5kO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1JlcXVpcmVPYmplY3RDb2VyY2libGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9oZWxwZXJzL2NhbGxCb3VuZCcpO1xudmFyICRpc0VudW1lcmFibGUgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbnRyaWVzKE8pIHtcblx0dmFyIG9iaiA9IFJlcXVpcmVPYmplY3RDb2VyY2libGUoTyk7XG5cdHZhciBlbnRyeXMgPSBbXTtcblx0Zm9yICh2YXIga2V5IGluIG9iaikge1xuXHRcdGlmIChoYXMob2JqLCBrZXkpICYmICRpc0VudW1lcmFibGUob2JqLCBrZXkpKSB7XG5cdFx0XHRlbnRyeXMucHVzaChba2V5LCBvYmpba2V5XV0pO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZW50cnlzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlcXVpcmVQcm9taXNlID0gcmVxdWlyZSgnLi9yZXF1aXJlUHJvbWlzZScpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdHJlcXVpcmVQcm9taXNlKCk7XG5cdHJldHVybiB0eXBlb2YgUHJvbWlzZS5hbGxTZXR0bGVkID09PSAnZnVuY3Rpb24nID8gUHJvbWlzZS5hbGxTZXR0bGVkIDogaW1wbGVtZW50YXRpb247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgaW5zcGVjdCA9IHJlcXVpcmUoJ29iamVjdC1pbnNwZWN0Jyk7XG5cbnZhciBJc0NhbGxhYmxlID0gcmVxdWlyZSgnLi9Jc0NhbGxhYmxlJyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtY2FsbFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIENhbGwoRiwgVikge1xuXHR2YXIgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogW107XG5cdGlmICghSXNDYWxsYWJsZShGKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKGluc3BlY3QoRikgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG5cdH1cblx0cmV0dXJuIEYuYXBwbHkoViwgYXJncyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuL3NoaW0nKSgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltR2xvYmFsKCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRpZiAoZGVmaW5lLnN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcblx0XHR2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocG9seWZpbGwsICdnbG9iYWxUaGlzJyk7XG5cdFx0aWYgKCFkZXNjcmlwdG9yIHx8IChkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSAmJiAoZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGRlc2NyaXB0b3Iud3JpdGFibGUgfHwgZ2xvYmFsVGhpcyAhPT0gcG9seWZpbGwpKSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG1heC1sZW5cblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwb2x5ZmlsbCwgJ2dsb2JhbFRoaXMnLCB7XG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdHZhbHVlOiBwb2x5ZmlsbCxcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlXG5cdFx0XHR9KTtcblx0XHR9XG5cdH0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICdvYmplY3QnIHx8IGdsb2JhbFRoaXMgIT09IHBvbHlmaWxsKSB7XG5cdFx0cG9seWZpbGwuZ2xvYmFsVGhpcyA9IHBvbHlmaWxsO1xuXHR9XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJ3N0cmluZy5wcm90b3R5cGUubWF0Y2hhbGwvYXV0bycpO1xuXG5yZXF1aXJlKCdnbG9iYWx0aGlzL2F1dG8nKTtcblxucmVxdWlyZSgncHJvbWlzZS5hbGxzZXR0bGVkL2F1dG8nKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgSXNJbnRlZ2VyID0gcmVxdWlyZSgnLi9Jc0ludGVnZXInKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gcmVxdWlyZSgnLi4vaGVscGVycy9tYXhTYWZlSW50ZWdlcicpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyICRjaGFyQ29kZUF0ID0gcmVxdWlyZSgnLi4vaGVscGVycy9jYWxsQm91bmQnKSgnU3RyaW5nLnByb3RvdHlwZS5jaGFyQ29kZUF0Jyk7XG5cbi8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBBZHZhbmNlU3RyaW5nSW5kZXgoUywgaW5kZXgsIHVuaWNvZGUpIHtcblx0aWYgKFR5cGUoUykgIT09ICdTdHJpbmcnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGBTYCBtdXN0IGJlIGEgU3RyaW5nJyk7XG5cdH1cblx0aWYgKCFJc0ludGVnZXIoaW5kZXgpIHx8IGluZGV4IDwgMCB8fCBpbmRleCA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogYGxlbmd0aGAgbXVzdCBiZSBhbiBpbnRlZ2VyID49IDAgYW5kIDw9IDIqKjUzJyk7XG5cdH1cblx0aWYgKFR5cGUodW5pY29kZSkgIT09ICdCb29sZWFuJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgdW5pY29kZWAgbXVzdCBiZSBhIEJvb2xlYW4nKTtcblx0fVxuXHRpZiAoIXVuaWNvZGUpIHtcblx0XHRyZXR1cm4gaW5kZXggKyAxO1xuXHR9XG5cdHZhciBsZW5ndGggPSBTLmxlbmd0aDtcblx0aWYgKChpbmRleCArIDEpID49IGxlbmd0aCkge1xuXHRcdHJldHVybiBpbmRleCArIDE7XG5cdH1cblxuXHR2YXIgZmlyc3QgPSAkY2hhckNvZGVBdChTLCBpbmRleCk7XG5cdGlmIChmaXJzdCA8IDB4RDgwMCB8fCBmaXJzdCA+IDB4REJGRikge1xuXHRcdHJldHVybiBpbmRleCArIDE7XG5cdH1cblxuXHR2YXIgc2Vjb25kID0gJGNoYXJDb2RlQXQoUywgaW5kZXggKyAxKTtcblx0aWYgKHNlY29uZCA8IDB4REMwMCB8fCBzZWNvbmQgPiAweERGRkYpIHtcblx0XHRyZXR1cm4gaW5kZXggKyAxO1xuXHR9XG5cblx0cmV0dXJuIGluZGV4ICsgMjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXNTeW1ib2xzID0gcmVxdWlyZSgnaGFzLXN5bWJvbHMnKSgpO1xudmFyIHJlZ2V4cE1hdGNoQWxsID0gcmVxdWlyZSgnLi9yZWdleHAtbWF0Y2hhbGwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRSZWdFeHBNYXRjaEFsbFBvbHlmaWxsKCkge1xuXHRpZiAoIWhhc1N5bWJvbHMgfHwgdHlwZW9mIFN5bWJvbC5tYXRjaEFsbCAhPT0gJ3N5bWJvbCcgfHwgdHlwZW9mIFJlZ0V4cC5wcm90b3R5cGVbU3ltYm9sLm1hdGNoQWxsXSAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHJldHVybiByZWdleHBNYXRjaEFsbDtcblx0fVxuXHRyZXR1cm4gUmVnRXhwLnByb3RvdHlwZVtTeW1ib2wubWF0Y2hBbGxdO1xufTtcbiIsIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi4yXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBnZXROYW5vU2Vjb25kcywgaHJ0aW1lLCBsb2FkVGltZSwgbW9kdWxlTG9hZFRpbWUsIG5vZGVMb2FkVGltZSwgdXBUaW1lO1xuXG4gIGlmICgodHlwZW9mIHBlcmZvcm1hbmNlICE9PSBcInVuZGVmaW5lZFwiICYmIHBlcmZvcm1hbmNlICE9PSBudWxsKSAmJiBwZXJmb3JtYW5jZS5ub3cpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIH07XG4gIH0gZWxzZSBpZiAoKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmIHByb2Nlc3MgIT09IG51bGwpICYmIHByb2Nlc3MuaHJ0aW1lKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAoZ2V0TmFub1NlY29uZHMoKSAtIG5vZGVMb2FkVGltZSkgLyAxZTY7XG4gICAgfTtcbiAgICBocnRpbWUgPSBwcm9jZXNzLmhydGltZTtcbiAgICBnZXROYW5vU2Vjb25kcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGhyO1xuICAgICAgaHIgPSBocnRpbWUoKTtcbiAgICAgIHJldHVybiBoclswXSAqIDFlOSArIGhyWzFdO1xuICAgIH07XG4gICAgbW9kdWxlTG9hZFRpbWUgPSBnZXROYW5vU2Vjb25kcygpO1xuICAgIHVwVGltZSA9IHByb2Nlc3MudXB0aW1lKCkgKiAxZTk7XG4gICAgbm9kZUxvYWRUaW1lID0gbW9kdWxlTG9hZFRpbWUgLSB1cFRpbWU7XG4gIH0gZWxzZSBpZiAoRGF0ZS5ub3cpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIERhdGUubm93KCkgLSBsb2FkVGltZTtcbiAgICB9O1xuICAgIGxvYWRUaW1lID0gRGF0ZS5ub3coKTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gbG9hZFRpbWU7XG4gICAgfTtcbiAgICBsb2FkVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICB9XG5cbn0pLmNhbGwodGhpcyk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBlcmZvcm1hbmNlLW5vdy5qcy5tYXBcbiIsIihmdW5jdGlvbihzZWxmKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoc2VsZi5mZXRjaCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplTmFtZShuYW1lKSB7XG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgbmFtZSA9IFN0cmluZyhuYW1lKVxuICAgIH1cbiAgICBpZiAoL1teYS16MC05XFwtIyQlJicqKy5cXF5fYHx+XS9pLnRlc3QobmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBmaWVsZCBuYW1lJylcbiAgICB9XG4gICAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKVxuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpXG4gICAgfVxuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgZnVuY3Rpb24gSGVhZGVycyhoZWFkZXJzKSB7XG4gICAgdGhpcy5tYXAgPSB7fVxuXG4gICAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgdmFsdWUpXG4gICAgICB9LCB0aGlzKVxuXG4gICAgfSBlbHNlIGlmIChoZWFkZXJzKSB7XG4gICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgaGVhZGVyc1tuYW1lXSlcbiAgICAgIH0sIHRoaXMpXG4gICAgfVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICAgIHZhbHVlID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG4gICAgdmFyIGxpc3QgPSB0aGlzLm1hcFtuYW1lXVxuICAgIGlmICghbGlzdCkge1xuICAgICAgbGlzdCA9IFtdXG4gICAgICB0aGlzLm1hcFtuYW1lXSA9IGxpc3RcbiAgICB9XG4gICAgbGlzdC5wdXNoKHZhbHVlKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24obmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciB2YWx1ZXMgPSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxuICAgIHJldHVybiB2YWx1ZXMgPyB2YWx1ZXNbMF0gOiBudWxsXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5nZXRBbGwgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldIHx8IFtdXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldID0gW25vcm1hbGl6ZVZhbHVlKHZhbHVlKV1cbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaywgdGhpc0FyZykge1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMubWFwKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHRoaXMubWFwW25hbWVdLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB2YWx1ZSwgbmFtZSwgdGhpcylcbiAgICAgIH0sIHRoaXMpXG4gICAgfSwgdGhpcylcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN1bWVkKGJvZHkpIHtcbiAgICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpKVxuICAgIH1cbiAgICBib2R5LmJvZHlVc2VkID0gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gZmlsZVJlYWRlclJlYWR5KHJlYWRlcikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0KVxuICAgICAgfVxuICAgICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KHJlYWRlci5lcnJvcilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKVxuICAgIHJldHVybiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gICAgcmVhZGVyLnJlYWRBc1RleHQoYmxvYilcbiAgICByZXR1cm4gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgfVxuXG4gIHZhciBzdXBwb3J0ID0ge1xuICAgIGJsb2I6ICdGaWxlUmVhZGVyJyBpbiBzZWxmICYmICdCbG9iJyBpbiBzZWxmICYmIChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ldyBCbG9iKClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9KSgpLFxuICAgIGZvcm1EYXRhOiAnRm9ybURhdGEnIGluIHNlbGYsXG4gICAgYXJyYXlCdWZmZXI6ICdBcnJheUJ1ZmZlcicgaW4gc2VsZlxuICB9XG5cbiAgZnVuY3Rpb24gQm9keSgpIHtcbiAgICB0aGlzLmJvZHlVc2VkID0gZmFsc2VcblxuXG4gICAgdGhpcy5faW5pdEJvZHkgPSBmdW5jdGlvbihib2R5KSB7XG4gICAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHlcbiAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYmxvYiAmJiBCbG9iLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlCbG9iID0gYm9keVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmZvcm1EYXRhICYmIEZvcm1EYXRhLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHlcbiAgICAgIH0gZWxzZSBpZiAoIWJvZHkpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSAnJ1xuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIEFycmF5QnVmZmVyLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIC8vIE9ubHkgc3VwcG9ydCBBcnJheUJ1ZmZlcnMgZm9yIFBPU1QgbWV0aG9kLlxuICAgICAgICAvLyBSZWNlaXZpbmcgQXJyYXlCdWZmZXJzIGhhcHBlbnMgdmlhIEJsb2JzLCBpbnN0ZWFkLlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnN1cHBvcnRlZCBCb2R5SW5pdCB0eXBlJylcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkge1xuICAgICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUJsb2IgJiYgdGhpcy5fYm9keUJsb2IudHlwZSkge1xuICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsIHRoaXMuX2JvZHlCbG9iLnR5cGUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydC5ibG9iKSB7XG4gICAgICB0aGlzLmJsb2IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlCbG9iKVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyBibG9iJylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5VGV4dF0pKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYXJyYXlCdWZmZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmxvYigpLnRoZW4ocmVhZEJsb2JBc0FycmF5QnVmZmVyKVxuICAgICAgfVxuXG4gICAgICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgICByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIHRleHQnKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICAgIHJldHVybiByZWplY3RlZCA/IHJlamVjdGVkIDogUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlUZXh0KVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdXBwb3J0LmZvcm1EYXRhKSB7XG4gICAgICB0aGlzLmZvcm1EYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKGRlY29kZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmpzb24gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKEpTT04ucGFyc2UpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8vIEhUVFAgbWV0aG9kcyB3aG9zZSBjYXBpdGFsaXphdGlvbiBzaG91bGQgYmUgbm9ybWFsaXplZFxuICB2YXIgbWV0aG9kcyA9IFsnREVMRVRFJywgJ0dFVCcsICdIRUFEJywgJ09QVElPTlMnLCAnUE9TVCcsICdQVVQnXVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZU1ldGhvZChtZXRob2QpIHtcbiAgICB2YXIgdXBjYXNlZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpXG4gICAgcmV0dXJuIChtZXRob2RzLmluZGV4T2YodXBjYXNlZCkgPiAtMSkgPyB1cGNhc2VkIDogbWV0aG9kXG4gIH1cblxuICBmdW5jdGlvbiBSZXF1ZXN0KGlucHV0LCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keVxuICAgIGlmIChSZXF1ZXN0LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGlucHV0KSkge1xuICAgICAgaWYgKGlucHV0LmJvZHlVc2VkKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpXG4gICAgICB9XG4gICAgICB0aGlzLnVybCA9IGlucHV0LnVybFxuICAgICAgdGhpcy5jcmVkZW50aWFscyA9IGlucHV0LmNyZWRlbnRpYWxzXG4gICAgICBpZiAoIW9wdGlvbnMuaGVhZGVycykge1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbnB1dC5oZWFkZXJzKVxuICAgICAgfVxuICAgICAgdGhpcy5tZXRob2QgPSBpbnB1dC5tZXRob2RcbiAgICAgIHRoaXMubW9kZSA9IGlucHV0Lm1vZGVcbiAgICAgIGlmICghYm9keSkge1xuICAgICAgICBib2R5ID0gaW5wdXQuX2JvZHlJbml0XG4gICAgICAgIGlucHV0LmJvZHlVc2VkID0gdHJ1ZVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVybCA9IGlucHV0XG4gICAgfVxuXG4gICAgdGhpcy5jcmVkZW50aWFscyA9IG9wdGlvbnMuY3JlZGVudGlhbHMgfHwgdGhpcy5jcmVkZW50aWFscyB8fCAnb21pdCdcbiAgICBpZiAob3B0aW9ucy5oZWFkZXJzIHx8ICF0aGlzLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgICB9XG4gICAgdGhpcy5tZXRob2QgPSBub3JtYWxpemVNZXRob2Qob3B0aW9ucy5tZXRob2QgfHwgdGhpcy5tZXRob2QgfHwgJ0dFVCcpXG4gICAgdGhpcy5tb2RlID0gb3B0aW9ucy5tb2RlIHx8IHRoaXMubW9kZSB8fCBudWxsXG4gICAgdGhpcy5yZWZlcnJlciA9IG51bGxcblxuICAgIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIGJvZHkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JvZHkgbm90IGFsbG93ZWQgZm9yIEdFVCBvciBIRUFEIHJlcXVlc3RzJylcbiAgICB9XG4gICAgdGhpcy5faW5pdEJvZHkoYm9keSlcbiAgfVxuXG4gIFJlcXVlc3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMpXG4gIH1cblxuICBmdW5jdGlvbiBkZWNvZGUoYm9keSkge1xuICAgIHZhciBmb3JtID0gbmV3IEZvcm1EYXRhKClcbiAgICBib2R5LnRyaW0oKS5zcGxpdCgnJicpLmZvckVhY2goZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGlmIChieXRlcykge1xuICAgICAgICB2YXIgc3BsaXQgPSBieXRlcy5zcGxpdCgnPScpXG4gICAgICAgIHZhciBuYW1lID0gc3BsaXQuc2hpZnQoKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICB2YXIgdmFsdWUgPSBzcGxpdC5qb2luKCc9JykucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgZm9ybS5hcHBlbmQoZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpLCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIGZvcm1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhlYWRlcnMoeGhyKSB7XG4gICAgdmFyIGhlYWQgPSBuZXcgSGVhZGVycygpXG4gICAgdmFyIHBhaXJzID0gKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSB8fCAnJykudHJpbSgpLnNwbGl0KCdcXG4nKVxuICAgIHBhaXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICB2YXIgc3BsaXQgPSBoZWFkZXIudHJpbSgpLnNwbGl0KCc6JylcbiAgICAgIHZhciBrZXkgPSBzcGxpdC5zaGlmdCgpLnRyaW0oKVxuICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignOicpLnRyaW0oKVxuICAgICAgaGVhZC5hcHBlbmQoa2V5LCB2YWx1ZSlcbiAgICB9KVxuICAgIHJldHVybiBoZWFkXG4gIH1cblxuICBCb2R5LmNhbGwoUmVxdWVzdC5wcm90b3R5cGUpXG5cbiAgZnVuY3Rpb24gUmVzcG9uc2UoYm9keUluaXQsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSB7fVxuICAgIH1cblxuICAgIHRoaXMudHlwZSA9ICdkZWZhdWx0J1xuICAgIHRoaXMuc3RhdHVzID0gb3B0aW9ucy5zdGF0dXNcbiAgICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwXG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gb3B0aW9ucy5zdGF0dXNUZXh0XG4gICAgdGhpcy5oZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycyA/IG9wdGlvbnMuaGVhZGVycyA6IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgICB0aGlzLnVybCA9IG9wdGlvbnMudXJsIHx8ICcnXG4gICAgdGhpcy5faW5pdEJvZHkoYm9keUluaXQpXG4gIH1cblxuICBCb2R5LmNhbGwoUmVzcG9uc2UucHJvdG90eXBlKVxuXG4gIFJlc3BvbnNlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgUmVzcG9uc2UodGhpcy5fYm9keUluaXQsIHtcbiAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgICBzdGF0dXNUZXh0OiB0aGlzLnN0YXR1c1RleHQsXG4gICAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh0aGlzLmhlYWRlcnMpLFxuICAgICAgdXJsOiB0aGlzLnVybFxuICAgIH0pXG4gIH1cblxuICBSZXNwb25zZS5lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXNwb25zZSA9IG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiAwLCBzdGF0dXNUZXh0OiAnJ30pXG4gICAgcmVzcG9uc2UudHlwZSA9ICdlcnJvcidcbiAgICByZXR1cm4gcmVzcG9uc2VcbiAgfVxuXG4gIHZhciByZWRpcmVjdFN0YXR1c2VzID0gWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XVxuXG4gIFJlc3BvbnNlLnJlZGlyZWN0ID0gZnVuY3Rpb24odXJsLCBzdGF0dXMpIHtcbiAgICBpZiAocmVkaXJlY3RTdGF0dXNlcy5pbmRleE9mKHN0YXR1cykgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCBzdGF0dXMgY29kZScpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiBzdGF0dXMsIGhlYWRlcnM6IHtsb2NhdGlvbjogdXJsfX0pXG4gIH1cblxuICBzZWxmLkhlYWRlcnMgPSBIZWFkZXJzXG4gIHNlbGYuUmVxdWVzdCA9IFJlcXVlc3RcbiAgc2VsZi5SZXNwb25zZSA9IFJlc3BvbnNlXG5cbiAgc2VsZi5mZXRjaCA9IGZ1bmN0aW9uKGlucHV0LCBpbml0KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlcXVlc3RcbiAgICAgIGlmIChSZXF1ZXN0LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGlucHV0KSAmJiAhaW5pdCkge1xuICAgICAgICByZXF1ZXN0ID0gaW5wdXRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChpbnB1dCwgaW5pdClcbiAgICAgIH1cblxuICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXG5cbiAgICAgIGZ1bmN0aW9uIHJlc3BvbnNlVVJMKCkge1xuICAgICAgICBpZiAoJ3Jlc3BvbnNlVVJMJyBpbiB4aHIpIHtcbiAgICAgICAgICByZXR1cm4geGhyLnJlc3BvbnNlVVJMXG4gICAgICAgIH1cblxuICAgICAgICAvLyBBdm9pZCBzZWN1cml0eSB3YXJuaW5ncyBvbiBnZXRSZXNwb25zZUhlYWRlciB3aGVuIG5vdCBhbGxvd2VkIGJ5IENPUlNcbiAgICAgICAgaWYgKC9eWC1SZXF1ZXN0LVVSTDovbS50ZXN0KHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkpIHtcbiAgICAgICAgICByZXR1cm4geGhyLmdldFJlc3BvbnNlSGVhZGVyKCdYLVJlcXVlc3QtVVJMJylcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzdGF0dXMgPSAoeGhyLnN0YXR1cyA9PT0gMTIyMykgPyAyMDQgOiB4aHIuc3RhdHVzXG4gICAgICAgIGlmIChzdGF0dXMgPCAxMDAgfHwgc3RhdHVzID4gNTk5KSB7XG4gICAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICBzdGF0dXM6IHN0YXR1cyxcbiAgICAgICAgICBzdGF0dXNUZXh0OiB4aHIuc3RhdHVzVGV4dCxcbiAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKHhociksXG4gICAgICAgICAgdXJsOiByZXNwb25zZVVSTCgpXG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHRcbiAgICAgICAgcmVzb2x2ZShuZXcgUmVzcG9uc2UoYm9keSwgb3B0aW9ucykpXG4gICAgICB9XG5cbiAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgICB9XG5cbiAgICAgIHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgIH1cblxuICAgICAgeGhyLm9wZW4ocmVxdWVzdC5tZXRob2QsIHJlcXVlc3QudXJsLCB0cnVlKVxuXG4gICAgICBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ2luY2x1ZGUnKSB7XG4gICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlXG4gICAgICB9XG5cbiAgICAgIGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIgJiYgc3VwcG9ydC5ibG9iKSB7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYmxvYidcbiAgICAgIH1cblxuICAgICAgcmVxdWVzdC5oZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgdmFsdWUpXG4gICAgICB9KVxuXG4gICAgICB4aHIuc2VuZCh0eXBlb2YgcmVxdWVzdC5fYm9keUluaXQgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHJlcXVlc3QuX2JvZHlJbml0KVxuICAgIH0pXG4gIH1cbiAgc2VsZi5mZXRjaC5wb2x5ZmlsbCA9IHRydWVcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbVBhZFN0YXJ0KCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgeyBwYWRTdGFydDogcG9seWZpbGwgfSwge1xuXHRcdHBhZFN0YXJ0OiBmdW5jdGlvbiB0ZXN0UGFkU3RhcnQoKSB7XG5cdFx0XHRyZXR1cm4gU3RyaW5nLnByb3RvdHlwZS5wYWRTdGFydCAhPT0gcG9seWZpbGw7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJE9iamVjdCA9IEdldEludHJpbnNpYygnJU9iamVjdCUnKTtcblxudmFyIFJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuL1JlcXVpcmVPYmplY3RDb2VyY2libGUnKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b29iamVjdFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvT2JqZWN0KHZhbHVlKSB7XG5cdFJlcXVpcmVPYmplY3RDb2VyY2libGUodmFsdWUpO1xuXHRyZXR1cm4gJE9iamVjdCh2YWx1ZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvbWF4U2FmZUludGVnZXInKTtcblxudmFyIFRvSW50ZWdlciA9IHJlcXVpcmUoJy4vVG9JbnRlZ2VyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVG9MZW5ndGgoYXJndW1lbnQpIHtcblx0dmFyIGxlbiA9IFRvSW50ZWdlcihhcmd1bWVudCk7XG5cdGlmIChsZW4gPD0gMCkgeyByZXR1cm4gMDsgfSAvLyBpbmNsdWRlcyBjb252ZXJ0aW5nIC0wIHRvICswXG5cdGlmIChsZW4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7IHJldHVybiBNQVhfU0FGRV9JTlRFR0VSOyB9XG5cdHJldHVybiBsZW47XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltR2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycygpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKFxuXHRcdE9iamVjdCxcblx0XHR7IGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IHBvbHlmaWxsIH0sXG5cdFx0eyBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiAoKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyAhPT0gcG9seWZpbGw7IH0gfVxuXHQpO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwiLypcbiAqIHNtb290aHNjcm9sbCBwb2x5ZmlsbCAtIHYwLjMuNVxuICogaHR0cHM6Ly9pYW1kdXN0YW4uZ2l0aHViLmlvL3Ntb290aHNjcm9sbFxuICogMjAxNiAoYykgRHVzdGFuIEthc3RlbiwgSmVyZW1pYXMgTWVuaWNoZWxsaSAtIE1JVCBMaWNlbnNlXG4gKi9cblxuKGZ1bmN0aW9uKHcsIGQsIHVuZGVmaW5lZCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLypcbiAgICogYWxpYXNlc1xuICAgKiB3OiB3aW5kb3cgZ2xvYmFsIG9iamVjdFxuICAgKiBkOiBkb2N1bWVudFxuICAgKiB1bmRlZmluZWQ6IHVuZGVmaW5lZFxuICAgKi9cblxuICAvLyBwb2x5ZmlsbFxuICBmdW5jdGlvbiBwb2x5ZmlsbCgpIHtcbiAgICAvLyByZXR1cm4gd2hlbiBzY3JvbGxCZWhhdmlvciBpbnRlcmZhY2UgaXMgc3VwcG9ydGVkXG4gICAgaWYgKCdzY3JvbGxCZWhhdmlvcicgaW4gZC5kb2N1bWVudEVsZW1lbnQuc3R5bGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIGdsb2JhbHNcbiAgICAgKi9cbiAgICB2YXIgRWxlbWVudCA9IHcuSFRNTEVsZW1lbnQgfHwgdy5FbGVtZW50O1xuICAgIHZhciBTQ1JPTExfVElNRSA9IDQ2ODtcblxuICAgIC8qXG4gICAgICogb2JqZWN0IGdhdGhlcmluZyBvcmlnaW5hbCBzY3JvbGwgbWV0aG9kc1xuICAgICAqL1xuICAgIHZhciBvcmlnaW5hbCA9IHtcbiAgICAgIHNjcm9sbDogdy5zY3JvbGwgfHwgdy5zY3JvbGxUbyxcbiAgICAgIHNjcm9sbEJ5OiB3LnNjcm9sbEJ5LFxuICAgICAgZWxTY3JvbGw6IEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbCB8fCBzY3JvbGxFbGVtZW50LFxuICAgICAgc2Nyb2xsSW50b1ZpZXc6IEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEludG9WaWV3XG4gICAgfTtcblxuICAgIC8qXG4gICAgICogZGVmaW5lIHRpbWluZyBtZXRob2RcbiAgICAgKi9cbiAgICB2YXIgbm93ID0gdy5wZXJmb3JtYW5jZSAmJiB3LnBlcmZvcm1hbmNlLm5vd1xuICAgICAgPyB3LnBlcmZvcm1hbmNlLm5vdy5iaW5kKHcucGVyZm9ybWFuY2UpIDogRGF0ZS5ub3c7XG5cbiAgICAvKipcbiAgICAgKiBjaGFuZ2VzIHNjcm9sbCBwb3NpdGlvbiBpbnNpZGUgYW4gZWxlbWVudFxuICAgICAqIEBtZXRob2Qgc2Nyb2xsRWxlbWVudFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzY3JvbGxFbGVtZW50KHgsIHkpIHtcbiAgICAgIHRoaXMuc2Nyb2xsTGVmdCA9IHg7XG4gICAgICB0aGlzLnNjcm9sbFRvcCA9IHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcmV0dXJucyByZXN1bHQgb2YgYXBwbHlpbmcgZWFzZSBtYXRoIGZ1bmN0aW9uIHRvIGEgbnVtYmVyXG4gICAgICogQG1ldGhvZCBlYXNlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGtcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVhc2Uoaykge1xuICAgICAgcmV0dXJuIDAuNSAqICgxIC0gTWF0aC5jb3MoTWF0aC5QSSAqIGspKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpbmRpY2F0ZXMgaWYgYSBzbW9vdGggYmVoYXZpb3Igc2hvdWxkIGJlIGFwcGxpZWRcbiAgICAgKiBAbWV0aG9kIHNob3VsZEJhaWxPdXRcbiAgICAgKiBAcGFyYW0ge051bWJlcnxPYmplY3R9IHhcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaG91bGRCYWlsT3V0KHgpIHtcbiAgICAgIGlmICh0eXBlb2YgeCAhPT0gJ29iamVjdCdcbiAgICAgICAgICAgIHx8IHggPT09IG51bGxcbiAgICAgICAgICAgIHx8IHguYmVoYXZpb3IgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgfHwgeC5iZWhhdmlvciA9PT0gJ2F1dG8nXG4gICAgICAgICAgICB8fCB4LmJlaGF2aW9yID09PSAnaW5zdGFudCcpIHtcbiAgICAgICAgLy8gZmlyc3QgYXJnIG5vdCBhbiBvYmplY3QvbnVsbFxuICAgICAgICAvLyBvciBiZWhhdmlvciBpcyBhdXRvLCBpbnN0YW50IG9yIHVuZGVmaW5lZFxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB4ID09PSAnb2JqZWN0J1xuICAgICAgICAgICAgJiYgeC5iZWhhdmlvciA9PT0gJ3Ntb290aCcpIHtcbiAgICAgICAgLy8gZmlyc3QgYXJndW1lbnQgaXMgYW4gb2JqZWN0IGFuZCBiZWhhdmlvciBpcyBzbW9vdGhcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyB0aHJvdyBlcnJvciB3aGVuIGJlaGF2aW9yIGlzIG5vdCBzdXBwb3J0ZWRcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2JlaGF2aW9yIG5vdCB2YWxpZCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGZpbmRzIHNjcm9sbGFibGUgcGFyZW50IG9mIGFuIGVsZW1lbnRcbiAgICAgKiBAbWV0aG9kIGZpbmRTY3JvbGxhYmxlUGFyZW50XG4gICAgICogQHBhcmFtIHtOb2RlfSBlbFxuICAgICAqIEByZXR1cm5zIHtOb2RlfSBlbFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRTY3JvbGxhYmxlUGFyZW50KGVsKSB7XG4gICAgICB2YXIgaXNCb2R5O1xuICAgICAgdmFyIGhhc1Njcm9sbGFibGVTcGFjZTtcbiAgICAgIHZhciBoYXNWaXNpYmxlT3ZlcmZsb3c7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgZWwgPSBlbC5wYXJlbnROb2RlO1xuXG4gICAgICAgIC8vIHNldCBjb25kaXRpb24gdmFyaWFibGVzXG4gICAgICAgIGlzQm9keSA9IGVsID09PSBkLmJvZHk7XG4gICAgICAgIGhhc1Njcm9sbGFibGVTcGFjZSA9XG4gICAgICAgICAgZWwuY2xpZW50SGVpZ2h0IDwgZWwuc2Nyb2xsSGVpZ2h0IHx8XG4gICAgICAgICAgZWwuY2xpZW50V2lkdGggPCBlbC5zY3JvbGxXaWR0aDtcbiAgICAgICAgaGFzVmlzaWJsZU92ZXJmbG93ID1cbiAgICAgICAgICB3LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLm92ZXJmbG93ID09PSAndmlzaWJsZSc7XG4gICAgICB9IHdoaWxlICghaXNCb2R5ICYmICEoaGFzU2Nyb2xsYWJsZVNwYWNlICYmICFoYXNWaXNpYmxlT3ZlcmZsb3cpKTtcblxuICAgICAgaXNCb2R5ID0gaGFzU2Nyb2xsYWJsZVNwYWNlID0gaGFzVmlzaWJsZU92ZXJmbG93ID0gbnVsbDtcblxuICAgICAgcmV0dXJuIGVsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNlbGYgaW52b2tlZCBmdW5jdGlvbiB0aGF0LCBnaXZlbiBhIGNvbnRleHQsIHN0ZXBzIHRocm91Z2ggc2Nyb2xsaW5nXG4gICAgICogQG1ldGhvZCBzdGVwXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGVwKGNvbnRleHQpIHtcbiAgICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB2YXIgY3VycmVudFg7XG4gICAgICB2YXIgY3VycmVudFk7XG4gICAgICB2YXIgZWxhcHNlZCA9ICh0aW1lIC0gY29udGV4dC5zdGFydFRpbWUpIC8gU0NST0xMX1RJTUU7XG5cbiAgICAgIC8vIGF2b2lkIGVsYXBzZWQgdGltZXMgaGlnaGVyIHRoYW4gb25lXG4gICAgICBlbGFwc2VkID0gZWxhcHNlZCA+IDEgPyAxIDogZWxhcHNlZDtcblxuICAgICAgLy8gYXBwbHkgZWFzaW5nIHRvIGVsYXBzZWQgdGltZVxuICAgICAgdmFsdWUgPSBlYXNlKGVsYXBzZWQpO1xuXG4gICAgICBjdXJyZW50WCA9IGNvbnRleHQuc3RhcnRYICsgKGNvbnRleHQueCAtIGNvbnRleHQuc3RhcnRYKSAqIHZhbHVlO1xuICAgICAgY3VycmVudFkgPSBjb250ZXh0LnN0YXJ0WSArIChjb250ZXh0LnkgLSBjb250ZXh0LnN0YXJ0WSkgKiB2YWx1ZTtcblxuICAgICAgY29udGV4dC5tZXRob2QuY2FsbChjb250ZXh0LnNjcm9sbGFibGUsIGN1cnJlbnRYLCBjdXJyZW50WSk7XG5cbiAgICAgIC8vIHNjcm9sbCBtb3JlIGlmIHdlIGhhdmUgbm90IHJlYWNoZWQgb3VyIGRlc3RpbmF0aW9uXG4gICAgICBpZiAoY3VycmVudFggIT09IGNvbnRleHQueCB8fCBjdXJyZW50WSAhPT0gY29udGV4dC55KSB7XG4gICAgICAgIHcucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXAuYmluZCh3LCBjb250ZXh0KSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2Nyb2xscyB3aW5kb3cgd2l0aCBhIHNtb290aCBiZWhhdmlvclxuICAgICAqIEBtZXRob2Qgc21vb3RoU2Nyb2xsXG4gICAgICogQHBhcmFtIHtPYmplY3R8Tm9kZX0gZWxcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAgICovXG4gICAgZnVuY3Rpb24gc21vb3RoU2Nyb2xsKGVsLCB4LCB5KSB7XG4gICAgICB2YXIgc2Nyb2xsYWJsZTtcbiAgICAgIHZhciBzdGFydFg7XG4gICAgICB2YXIgc3RhcnRZO1xuICAgICAgdmFyIG1ldGhvZDtcbiAgICAgIHZhciBzdGFydFRpbWUgPSBub3coKTtcblxuICAgICAgLy8gZGVmaW5lIHNjcm9sbCBjb250ZXh0XG4gICAgICBpZiAoZWwgPT09IGQuYm9keSkge1xuICAgICAgICBzY3JvbGxhYmxlID0gdztcbiAgICAgICAgc3RhcnRYID0gdy5zY3JvbGxYIHx8IHcucGFnZVhPZmZzZXQ7XG4gICAgICAgIHN0YXJ0WSA9IHcuc2Nyb2xsWSB8fCB3LnBhZ2VZT2Zmc2V0O1xuICAgICAgICBtZXRob2QgPSBvcmlnaW5hbC5zY3JvbGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzY3JvbGxhYmxlID0gZWw7XG4gICAgICAgIHN0YXJ0WCA9IGVsLnNjcm9sbExlZnQ7XG4gICAgICAgIHN0YXJ0WSA9IGVsLnNjcm9sbFRvcDtcbiAgICAgICAgbWV0aG9kID0gc2Nyb2xsRWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgLy8gc2Nyb2xsIGxvb3Bpbmcgb3ZlciBhIGZyYW1lXG4gICAgICBzdGVwKHtcbiAgICAgICAgc2Nyb2xsYWJsZTogc2Nyb2xsYWJsZSxcbiAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgIHN0YXJ0VGltZTogc3RhcnRUaW1lLFxuICAgICAgICBzdGFydFg6IHN0YXJ0WCxcbiAgICAgICAgc3RhcnRZOiBzdGFydFksXG4gICAgICAgIHg6IHgsXG4gICAgICAgIHk6IHlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qXG4gICAgICogT1JJR0lOQUwgTUVUSE9EUyBPVkVSUklERVNcbiAgICAgKi9cblxuICAgIC8vIHcuc2Nyb2xsIGFuZCB3LnNjcm9sbFRvXG4gICAgdy5zY3JvbGwgPSB3LnNjcm9sbFRvID0gZnVuY3Rpb24oKSB7XG4gICAgICAvLyBhdm9pZCBzbW9vdGggYmVoYXZpb3IgaWYgbm90IHJlcXVpcmVkXG4gICAgICBpZiAoc2hvdWxkQmFpbE91dChhcmd1bWVudHNbMF0pKSB7XG4gICAgICAgIG9yaWdpbmFsLnNjcm9sbC5jYWxsKFxuICAgICAgICAgIHcsXG4gICAgICAgICAgYXJndW1lbnRzWzBdLmxlZnQgfHwgYXJndW1lbnRzWzBdLFxuICAgICAgICAgIGFyZ3VtZW50c1swXS50b3AgfHwgYXJndW1lbnRzWzFdXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gTEVUIFRIRSBTTU9PVEhORVNTIEJFR0lOIVxuICAgICAgc21vb3RoU2Nyb2xsLmNhbGwoXG4gICAgICAgIHcsXG4gICAgICAgIGQuYm9keSxcbiAgICAgICAgfn5hcmd1bWVudHNbMF0ubGVmdCxcbiAgICAgICAgfn5hcmd1bWVudHNbMF0udG9wXG4gICAgICApO1xuICAgIH07XG5cbiAgICAvLyB3LnNjcm9sbEJ5XG4gICAgdy5zY3JvbGxCeSA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gYXZvaWQgc21vb3RoIGJlaGF2aW9yIGlmIG5vdCByZXF1aXJlZFxuICAgICAgaWYgKHNob3VsZEJhaWxPdXQoYXJndW1lbnRzWzBdKSkge1xuICAgICAgICBvcmlnaW5hbC5zY3JvbGxCeS5jYWxsKFxuICAgICAgICAgIHcsXG4gICAgICAgICAgYXJndW1lbnRzWzBdLmxlZnQgfHwgYXJndW1lbnRzWzBdLFxuICAgICAgICAgIGFyZ3VtZW50c1swXS50b3AgfHwgYXJndW1lbnRzWzFdXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gTEVUIFRIRSBTTU9PVEhORVNTIEJFR0lOIVxuICAgICAgc21vb3RoU2Nyb2xsLmNhbGwoXG4gICAgICAgIHcsXG4gICAgICAgIGQuYm9keSxcbiAgICAgICAgfn5hcmd1bWVudHNbMF0ubGVmdCArICh3LnNjcm9sbFggfHwgdy5wYWdlWE9mZnNldCksXG4gICAgICAgIH5+YXJndW1lbnRzWzBdLnRvcCArICh3LnNjcm9sbFkgfHwgdy5wYWdlWU9mZnNldClcbiAgICAgICk7XG4gICAgfTtcblxuICAgIC8vIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbCBhbmQgRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsVG9cbiAgICBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGwgPSBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxUbyA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gYXZvaWQgc21vb3RoIGJlaGF2aW9yIGlmIG5vdCByZXF1aXJlZFxuICAgICAgaWYgKHNob3VsZEJhaWxPdXQoYXJndW1lbnRzWzBdKSkge1xuICAgICAgICBvcmlnaW5hbC5lbFNjcm9sbC5jYWxsKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIGFyZ3VtZW50c1swXS5sZWZ0IHx8IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICAgIGFyZ3VtZW50c1swXS50b3AgfHwgYXJndW1lbnRzWzFdXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGxlZnQgPSBhcmd1bWVudHNbMF0ubGVmdDtcbiAgICAgIHZhciB0b3AgPSBhcmd1bWVudHNbMF0udG9wO1xuXG4gICAgICAvLyBMRVQgVEhFIFNNT09USE5FU1MgQkVHSU4hXG4gICAgICBzbW9vdGhTY3JvbGwuY2FsbChcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgdHlwZW9mIGxlZnQgPT09ICdudW1iZXInID8gbGVmdCA6IHRoaXMuc2Nyb2xsTGVmdCxcbiAgICAgICAgICB0eXBlb2YgdG9wID09PSAnbnVtYmVyJyA/IHRvcCA6IHRoaXMuc2Nyb2xsVG9wXG4gICAgICApO1xuICAgIH07XG5cbiAgICAvLyBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxCeVxuICAgIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEJ5ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXJnMCA9IGFyZ3VtZW50c1swXTtcblxuICAgICAgaWYgKHR5cGVvZiBhcmcwID09PSAnb2JqZWN0Jykge1xuICAgICAgICB0aGlzLnNjcm9sbCh7XG4gICAgICAgICAgbGVmdDogYXJnMC5sZWZ0ICsgdGhpcy5zY3JvbGxMZWZ0LFxuICAgICAgICAgIHRvcDogYXJnMC50b3AgKyB0aGlzLnNjcm9sbFRvcCxcbiAgICAgICAgICBiZWhhdmlvcjogYXJnMC5iZWhhdmlvclxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsKFxuICAgICAgICAgIHRoaXMuc2Nyb2xsTGVmdCArIGFyZzAsXG4gICAgICAgICAgdGhpcy5zY3JvbGxUb3AgKyBhcmd1bWVudHNbMV1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsSW50b1ZpZXdcbiAgICBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxJbnRvVmlldyA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gYXZvaWQgc21vb3RoIGJlaGF2aW9yIGlmIG5vdCByZXF1aXJlZFxuICAgICAgaWYgKHNob3VsZEJhaWxPdXQoYXJndW1lbnRzWzBdKSkge1xuICAgICAgICBvcmlnaW5hbC5zY3JvbGxJbnRvVmlldy5jYWxsKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB0cnVlIDogYXJndW1lbnRzWzBdXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gTEVUIFRIRSBTTU9PVEhORVNTIEJFR0lOIVxuICAgICAgdmFyIHNjcm9sbGFibGVQYXJlbnQgPSBmaW5kU2Nyb2xsYWJsZVBhcmVudCh0aGlzKTtcbiAgICAgIHZhciBwYXJlbnRSZWN0cyA9IHNjcm9sbGFibGVQYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB2YXIgY2xpZW50UmVjdHMgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICBpZiAoc2Nyb2xsYWJsZVBhcmVudCAhPT0gZC5ib2R5KSB7XG4gICAgICAgIC8vIHJldmVhbCBlbGVtZW50IGluc2lkZSBwYXJlbnRcbiAgICAgICAgc21vb3RoU2Nyb2xsLmNhbGwoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICBzY3JvbGxhYmxlUGFyZW50LFxuICAgICAgICAgIHNjcm9sbGFibGVQYXJlbnQuc2Nyb2xsTGVmdCArIGNsaWVudFJlY3RzLmxlZnQgLSBwYXJlbnRSZWN0cy5sZWZ0LFxuICAgICAgICAgIHNjcm9sbGFibGVQYXJlbnQuc2Nyb2xsVG9wICsgY2xpZW50UmVjdHMudG9wIC0gcGFyZW50UmVjdHMudG9wXG4gICAgICAgICk7XG4gICAgICAgIC8vIHJldmVhbCBwYXJlbnQgaW4gdmlld3BvcnRcbiAgICAgICAgdy5zY3JvbGxCeSh7XG4gICAgICAgICAgbGVmdDogcGFyZW50UmVjdHMubGVmdCxcbiAgICAgICAgICB0b3A6IHBhcmVudFJlY3RzLnRvcCxcbiAgICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByZXZlYWwgZWxlbWVudCBpbiB2aWV3cG9ydFxuICAgICAgICB3LnNjcm9sbEJ5KHtcbiAgICAgICAgICBsZWZ0OiBjbGllbnRSZWN0cy5sZWZ0LFxuICAgICAgICAgIHRvcDogY2xpZW50UmVjdHMudG9wLFxuICAgICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIC8vIGNvbW1vbmpzXG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7IHBvbHlmaWxsOiBwb2x5ZmlsbCB9O1xuICB9IGVsc2Uge1xuICAgIC8vIGdsb2JhbFxuICAgIHBvbHlmaWxsKCk7XG4gIH1cbn0pKHdpbmRvdywgZG9jdW1lbnQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBBcnJheSNpbmNsdWRlcyBpcyBzdGFnZSA0LCBpbiBFUzcvRVMyMDE2XG5yZXF1aXJlKCdhcnJheS1pbmNsdWRlcy9zaGltJykoKTtcblxucmVxdWlyZSgnLi9lczIwMTcnKTtcbiIsImZ1bmN0aW9uIGhpZGVQbGFjZWhvbGRlck9uRm9jdXMoYSl7dGFyZ2V0PWEuY3VycmVudFRhcmdldD9hLmN1cnJlbnRUYXJnZXQ6YS5zcmNFbGVtZW50LHRhcmdldC52YWx1ZT09dGFyZ2V0LmdldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIpJiYodGFyZ2V0LnZhbHVlPVwiXCIpfWZ1bmN0aW9uIHVuZm9jdXNPbkFuRWxlbWVudChhKXt0YXJnZXQ9YS5jdXJyZW50VGFyZ2V0P2EuY3VycmVudFRhcmdldDphLnNyY0VsZW1lbnQsXCJcIj09dGFyZ2V0LnZhbHVlJiYodGFyZ2V0LnZhbHVlPXRhcmdldC5nZXRBdHRyaWJ1dGUoXCJwbGFjZWhvbGRlclwiKSl9aWYoIShcInBsYWNlaG9sZGVyXCJpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIikpKWZvcih2YXIgaW5wdXRzPWRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaW5wdXRcIiksaT0wO2k8aW5wdXRzLmxlbmd0aDtpKyspaW5wdXRzW2ldLnZhbHVlfHwoaW5wdXRzW2ldLnZhbHVlPWlucHV0c1tpXS5nZXRBdHRyaWJ1dGUoXCJwbGFjZWhvbGRlclwiKSksaW5wdXRzW2ldLmFkZEV2ZW50TGlzdGVuZXI/KGlucHV0c1tpXS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIixoaWRlUGxhY2Vob2xkZXJPbkZvY3VzLCExKSxpbnB1dHNbaV0uYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIix1bmZvY3VzT25BbkVsZW1lbnQsITEpKTppbnB1dHNbaV0uYXR0YWNoRXZlbnQmJihpbnB1dHNbaV0uYXR0YWNoRXZlbnQoXCJvbmNsaWNrXCIsaGlkZVBsYWNlaG9sZGVyT25Gb2N1cyksaW5wdXRzW2ldLmF0dGFjaEV2ZW50KFwib25ibHVyXCIsdW5mb2N1c09uQW5FbGVtZW50KSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVxdWlyZVByb21pc2UgPSByZXF1aXJlKCcuL3JlcXVpcmVQcm9taXNlJyk7XG5cbnJlcXVpcmVQcm9taXNlKCk7XG5cbnZhciBJc0NhbGxhYmxlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOC9Jc0NhbGxhYmxlJyk7XG52YXIgU3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOC9TcGVjaWVzQ29uc3RydWN0b3InKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOC9UeXBlJyk7XG5cbnZhciBwcm9taXNlUmVzb2x2ZSA9IGZ1bmN0aW9uIFByb21pc2VSZXNvbHZlKEMsIHZhbHVlKSB7XG5cdHJldHVybiBuZXcgQyhmdW5jdGlvbiAocmVzb2x2ZSkge1xuXHRcdHJlc29sdmUodmFsdWUpO1xuXHR9KTtcbn07XG5cbnZhciBPcmlnaW5hbFByb21pc2UgPSBQcm9taXNlO1xuXG52YXIgY3JlYXRlVGhlbkZpbmFsbHkgPSBmdW5jdGlvbiBDcmVhdGVUaGVuRmluYWxseShDLCBvbkZpbmFsbHkpIHtcblx0cmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdHZhciByZXN1bHQgPSBvbkZpbmFsbHkoKTtcblx0XHR2YXIgcHJvbWlzZSA9IHByb21pc2VSZXNvbHZlKEMsIHJlc3VsdCk7XG5cdFx0dmFyIHZhbHVlVGh1bmsgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fTtcblx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKHZhbHVlVGh1bmspO1xuXHR9O1xufTtcblxudmFyIGNyZWF0ZUNhdGNoRmluYWxseSA9IGZ1bmN0aW9uIENyZWF0ZUNhdGNoRmluYWxseShDLCBvbkZpbmFsbHkpIHtcblx0cmV0dXJuIGZ1bmN0aW9uIChyZWFzb24pIHtcblx0XHR2YXIgcmVzdWx0ID0gb25GaW5hbGx5KCk7XG5cdFx0dmFyIHByb21pc2UgPSBwcm9taXNlUmVzb2x2ZShDLCByZXN1bHQpO1xuXHRcdHZhciB0aHJvd2VyID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhyb3cgcmVhc29uO1xuXHRcdH07XG5cdFx0cmV0dXJuIHByb21pc2UudGhlbih0aHJvd2VyKTtcblx0fTtcbn07XG5cbnZhciBwcm9taXNlRmluYWxseSA9IGZ1bmN0aW9uIGZpbmFsbHlfKG9uRmluYWxseSkge1xuXHQvKiBlc2xpbnQgbm8taW52YWxpZC10aGlzOiAwICovXG5cblx0dmFyIHByb21pc2UgPSB0aGlzO1xuXG5cdGlmIChUeXBlKHByb21pc2UpICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ3JlY2VpdmVyIGlzIG5vdCBhbiBPYmplY3QnKTtcblx0fVxuXG5cdHZhciBDID0gU3BlY2llc0NvbnN0cnVjdG9yKHByb21pc2UsIE9yaWdpbmFsUHJvbWlzZSk7IC8vIG1heSB0aHJvd1xuXG5cdHZhciB0aGVuRmluYWxseSA9IG9uRmluYWxseTtcblx0dmFyIGNhdGNoRmluYWxseSA9IG9uRmluYWxseTtcblx0aWYgKElzQ2FsbGFibGUob25GaW5hbGx5KSkge1xuXHRcdHRoZW5GaW5hbGx5ID0gY3JlYXRlVGhlbkZpbmFsbHkoQywgb25GaW5hbGx5KTtcblx0XHRjYXRjaEZpbmFsbHkgPSBjcmVhdGVDYXRjaEZpbmFsbHkoQywgb25GaW5hbGx5KTtcblx0fVxuXG5cdHJldHVybiBwcm9taXNlLnRoZW4odGhlbkZpbmFsbHksIGNhdGNoRmluYWxseSk7XG59O1xuXG5pZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcikge1xuXHR2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJvbWlzZUZpbmFsbHksICduYW1lJyk7XG5cdGlmIChkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2VGaW5hbGx5LCAnbmFtZScsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogJ2ZpbmFsbHknIH0pO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcHJvbWlzZUZpbmFsbHk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy05LjExXG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnaXMtY2FsbGFibGUnKTtcbiIsIi8qIVxuICogaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltXG4gKiBAbGljZW5zZSBlczUtc2hpbSBDb3B5cmlnaHQgMjAwOS0yMDIwIGJ5IGNvbnRyaWJ1dG9ycywgTUlUIExpY2Vuc2VcbiAqIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5cbi8vIHZpbTogdHM9NCBzdHM9NCBzdz00IGV4cGFuZHRhYlxuXG4vLyBBZGQgc2VtaWNvbG9uIHRvIHByZXZlbnQgSUlGRSBmcm9tIGJlaW5nIHBhc3NlZCBhcyBhcmd1bWVudCB0byBjb25jYXRlbmF0ZWQgY29kZS5cbjtcblxuLy8gVU1EIChVbml2ZXJzYWwgTW9kdWxlIERlZmluaXRpb24pXG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3VtZGpzL3VtZC9ibG9iL21hc3Rlci90ZW1wbGF0ZXMvcmV0dXJuRXhwb3J0cy5qc1xuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLyogZ2xvYmFsIGRlZmluZSAqL1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgICAgICBkZWZpbmUoZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gTm9kZS4gRG9lcyBub3Qgd29yayB3aXRoIHN0cmljdCBDb21tb25KUywgYnV0XG4gICAgICAgIC8vIG9ubHkgQ29tbW9uSlMtbGlrZSBlbnZpcm9tZW50cyB0aGF0IHN1cHBvcnQgbW9kdWxlLmV4cG9ydHMsXG4gICAgICAgIC8vIGxpa2UgTm9kZS5cbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzIChyb290IGlzIHdpbmRvdylcbiAgICAgICAgcm9vdC5yZXR1cm5FeHBvcnRzID0gZmFjdG9yeSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgfVxufSh0aGlzLCBmdW5jdGlvbiAoKSB7XG5cbiAgICB2YXIgY2FsbCA9IEZ1bmN0aW9uLmNhbGw7XG4gICAgdmFyIHByb3RvdHlwZU9mT2JqZWN0ID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgICB2YXIgb3ducyA9IGNhbGwuYmluZChwcm90b3R5cGVPZk9iamVjdC5oYXNPd25Qcm9wZXJ0eSk7XG4gICAgdmFyIGlzRW51bWVyYWJsZSA9IGNhbGwuYmluZChwcm90b3R5cGVPZk9iamVjdC5wcm9wZXJ0eUlzRW51bWVyYWJsZSk7XG4gICAgdmFyIHRvU3RyID0gY2FsbC5iaW5kKHByb3RvdHlwZU9mT2JqZWN0LnRvU3RyaW5nKTtcblxuICAgIC8vIElmIEpTIGVuZ2luZSBzdXBwb3J0cyBhY2Nlc3NvcnMgY3JlYXRpbmcgc2hvcnRjdXRzLlxuICAgIHZhciBkZWZpbmVHZXR0ZXI7XG4gICAgdmFyIGRlZmluZVNldHRlcjtcbiAgICB2YXIgbG9va3VwR2V0dGVyO1xuICAgIHZhciBsb29rdXBTZXR0ZXI7XG4gICAgdmFyIHN1cHBvcnRzQWNjZXNzb3JzID0gb3ducyhwcm90b3R5cGVPZk9iamVjdCwgJ19fZGVmaW5lR2V0dGVyX18nKTtcbiAgICBpZiAoc3VwcG9ydHNBY2Nlc3NvcnMpIHtcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUsIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllcyAqL1xuICAgICAgICBkZWZpbmVHZXR0ZXIgPSBjYWxsLmJpbmQocHJvdG90eXBlT2ZPYmplY3QuX19kZWZpbmVHZXR0ZXJfXyk7XG4gICAgICAgIGRlZmluZVNldHRlciA9IGNhbGwuYmluZChwcm90b3R5cGVPZk9iamVjdC5fX2RlZmluZVNldHRlcl9fKTtcbiAgICAgICAgbG9va3VwR2V0dGVyID0gY2FsbC5iaW5kKHByb3RvdHlwZU9mT2JqZWN0Ll9fbG9va3VwR2V0dGVyX18pO1xuICAgICAgICBsb29rdXBTZXR0ZXIgPSBjYWxsLmJpbmQocHJvdG90eXBlT2ZPYmplY3QuX19sb29rdXBTZXR0ZXJfXyk7XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUsIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllcyAqL1xuICAgIH1cblxuICAgIHZhciBpc1ByaW1pdGl2ZSA9IGZ1bmN0aW9uIGlzUHJpbWl0aXZlKG8pIHtcbiAgICAgICAgcmV0dXJuIG8gPT0gbnVsbCB8fCAodHlwZW9mIG8gIT09ICdvYmplY3QnICYmIHR5cGVvZiBvICE9PSAnZnVuY3Rpb24nKTtcbiAgICB9O1xuXG4gICAgLy8gRVM1IDE1LjIuMy4yXG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMi4zLjJcbiAgICBpZiAoIU9iamVjdC5nZXRQcm90b3R5cGVPZikge1xuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzI2lzc3VlLzJcbiAgICAgICAgLy8gaHR0cDovL2Vqb2huLm9yZy9ibG9nL29iamVjdGdldHByb3RvdHlwZW9mL1xuICAgICAgICAvLyByZWNvbW1lbmRlZCBieSBmc2NoYWVmZXIgb24gZ2l0aHViXG4gICAgICAgIC8vXG4gICAgICAgIC8vIHN1cmUsIGFuZCB3ZWJyZWZsZWN0aW9uIHNheXMgXl9eXG4gICAgICAgIC8vIC4uLiB0aGlzIHdpbGwgbmVyZXZlciBwb3NzaWJseSByZXR1cm4gbnVsbFxuICAgICAgICAvLyAuLi4gT3BlcmEgTWluaSBicmVha3MgaGVyZSB3aXRoIGluZmluaXRlIGxvb3BzXG4gICAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZiA9IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKG9iamVjdCkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvXG4gICAgICAgICAgICB2YXIgcHJvdG8gPSBvYmplY3QuX19wcm90b19fO1xuICAgICAgICAgICAgaWYgKHByb3RvIHx8IHByb3RvID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3RvO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0b1N0cihvYmplY3QuY29uc3RydWN0b3IpID09PSAnW29iamVjdCBGdW5jdGlvbl0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdC5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9iamVjdCBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcm90b3R5cGVPZk9iamVjdDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQ29ycmVjdGx5IHJldHVybiBudWxsIGZvciBPYmplY3RzIGNyZWF0ZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZShudWxsKWBcbiAgICAgICAgICAgICAgICAvLyAoc2hhbW1lZCBvciBuYXRpdmUpIG9yIGB7IF9fcHJvdG9fXzogbnVsbH1gLiAgQWxzbyByZXR1cm5zIG51bGwgZm9yXG4gICAgICAgICAgICAgICAgLy8gY3Jvc3MtcmVhbG0gb2JqZWN0cyBvbiBicm93c2VycyB0aGF0IGxhY2sgYF9fcHJvdG9fX2Agc3VwcG9ydCAobGlrZVxuICAgICAgICAgICAgICAgIC8vIElFIDwxMSksIGJ1dCB0aGF0J3MgdGhlIGJlc3Qgd2UgY2FuIGRvLlxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIEVTNSAxNS4yLjMuM1xuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjIuMy4zXG5cbiAgICAvLyBjaGVjayB3aGV0aGVyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciB3b3JrcyBpZiBpdCdzIGdpdmVuLiBPdGhlcndpc2UsIHNoaW0gcGFydGlhbGx5LlxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgdmFyIGRvZXNHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JXb3JrID0gZnVuY3Rpb24gZG9lc0dldE93blByb3BlcnR5RGVzY3JpcHRvcldvcmsob2JqZWN0KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG9iamVjdC5zZW50aW5lbCA9IDA7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsICdzZW50aW5lbCcpLnZhbHVlID09PSAwO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yV29ya3NPbk9iamVjdCA9IGRvZXNHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JXb3JrKHt9KTtcbiAgICAgICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvcldvcmtzT25Eb20gPSB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICB8fCBkb2VzR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yV29yayhkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSk7XG4gICAgICAgIGlmICghZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yV29ya3NPbkRvbSB8fCAhZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yV29ya3NPbk9iamVjdCkge1xuICAgICAgICAgICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvckZhbGxiYWNrID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciB8fCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JGYWxsYmFjaykge1xuICAgICAgICB2YXIgRVJSX05PTl9PQkpFQ1QgPSAnT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciBjYWxsZWQgb24gYSBub24tb2JqZWN0OiAnO1xuXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG4gICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSkge1xuICAgICAgICAgICAgaWYgKGlzUHJpbWl0aXZlKG9iamVjdCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEVSUl9OT05fT0JKRUNUICsgb2JqZWN0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gbWFrZSBhIHZhbGlhbnQgYXR0ZW1wdCB0byB1c2UgdGhlIHJlYWwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXG4gICAgICAgICAgICAvLyBmb3IgSTgncyBET00gZWxlbWVudHMuXG4gICAgICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yRmFsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yRmFsbGJhY2suY2FsbChPYmplY3QsIG9iamVjdCwgcHJvcGVydHkpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAvLyB0cnkgdGhlIHNoaW0gaWYgdGhlIHJlYWwgb25lIGRvZXNuJ3Qgd29ya1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3I7XG5cbiAgICAgICAgICAgIC8vIElmIG9iamVjdCBkb2VzIG5vdCBvd25zIHByb3BlcnR5IHJldHVybiB1bmRlZmluZWQgaW1tZWRpYXRlbHkuXG4gICAgICAgICAgICBpZiAoIW93bnMob2JqZWN0LCBwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVzY3JpcHRvcjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgb2JqZWN0IGhhcyBhIHByb3BlcnR5IHRoZW4gaXQncyBmb3Igc3VyZSBgY29uZmlndXJhYmxlYCwgYW5kXG4gICAgICAgICAgICAvLyBwcm9iYWJseSBgZW51bWVyYWJsZWAuIERldGVjdCBlbnVtZXJhYmlsaXR5IHRob3VnaC5cbiAgICAgICAgICAgIGRlc2NyaXB0b3IgPSB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogaXNFbnVtZXJhYmxlKG9iamVjdCwgcHJvcGVydHkpLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gSWYgSlMgZW5naW5lIHN1cHBvcnRzIGFjY2Vzc29yIHByb3BlcnRpZXMgdGhlbiBwcm9wZXJ0eSBtYXkgYmUgYVxuICAgICAgICAgICAgLy8gZ2V0dGVyIG9yIHNldHRlci5cbiAgICAgICAgICAgIGlmIChzdXBwb3J0c0FjY2Vzc29ycykge1xuICAgICAgICAgICAgICAgIC8vIFVuZm9ydHVuYXRlbHkgYF9fbG9va3VwR2V0dGVyX19gIHdpbGwgcmV0dXJuIGEgZ2V0dGVyIGV2ZW5cbiAgICAgICAgICAgICAgICAvLyBpZiBvYmplY3QgaGFzIG93biBub24gZ2V0dGVyIHByb3BlcnR5IGFsb25nIHdpdGggYSBzYW1lIG5hbWVkXG4gICAgICAgICAgICAgICAgLy8gaW5oZXJpdGVkIGdldHRlci4gVG8gYXZvaWQgbWlzYmVoYXZpb3Igd2UgdGVtcG9yYXJ5IHJlbW92ZVxuICAgICAgICAgICAgICAgIC8vIGBfX3Byb3RvX19gIHNvIHRoYXQgYF9fbG9va3VwR2V0dGVyX19gIHdpbGwgcmV0dXJuIGdldHRlciBvbmx5XG4gICAgICAgICAgICAgICAgLy8gaWYgaXQncyBvd25lZCBieSBhbiBvYmplY3QuXG4gICAgICAgICAgICAgICAgdmFyIHByb3RvdHlwZSA9IG9iamVjdC5fX3Byb3RvX187XG4gICAgICAgICAgICAgICAgdmFyIG5vdFByb3RvdHlwZU9mT2JqZWN0ID0gb2JqZWN0ICE9PSBwcm90b3R5cGVPZk9iamVjdDtcbiAgICAgICAgICAgICAgICAvLyBhdm9pZCByZWN1cnNpb24gcHJvYmxlbSwgYnJlYWtpbmcgaW4gT3BlcmEgTWluaSB3aGVuXG4gICAgICAgICAgICAgICAgLy8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnKVxuICAgICAgICAgICAgICAgIC8vIG9yIGFueSBvdGhlciBPYmplY3QucHJvdG90eXBlIGFjY2Vzc29yXG4gICAgICAgICAgICAgICAgaWYgKG5vdFByb3RvdHlwZU9mT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5fX3Byb3RvX18gPSBwcm90b3R5cGVPZk9iamVjdDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBnZXR0ZXIgPSBsb29rdXBHZXR0ZXIob2JqZWN0LCBwcm9wZXJ0eSk7XG4gICAgICAgICAgICAgICAgdmFyIHNldHRlciA9IGxvb2t1cFNldHRlcihvYmplY3QsIHByb3BlcnR5KTtcblxuICAgICAgICAgICAgICAgIGlmIChub3RQcm90b3R5cGVPZk9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBPbmNlIHdlIGhhdmUgZ2V0dGVyIGFuZCBzZXR0ZXIgd2UgY2FuIHB1dCB2YWx1ZXMgYmFjay5cbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0Ll9fcHJvdG9fXyA9IHByb3RvdHlwZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChnZXR0ZXIgfHwgc2V0dGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnZXR0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IuZ2V0ID0gZ2V0dGVyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXR0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0b3Iuc2V0ID0gc2V0dGVyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGl0IHdhcyBhY2Nlc3NvciBwcm9wZXJ0eSB3ZSdyZSBkb25lIGFuZCByZXR1cm4gaGVyZVxuICAgICAgICAgICAgICAgICAgICAvLyBpbiBvcmRlciB0byBhdm9pZCBhZGRpbmcgYHZhbHVlYCB0byB0aGUgZGVzY3JpcHRvci5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB3ZSBnb3QgdGhpcyBmYXIgd2Uga25vdyB0aGF0IG9iamVjdCBoYXMgYW4gb3duIHByb3BlcnR5IHRoYXQgaXNcbiAgICAgICAgICAgIC8vIG5vdCBhbiBhY2Nlc3NvciBzbyB3ZSBzZXQgaXQgYXMgYSB2YWx1ZSBhbmQgcmV0dXJuIGRlc2NyaXB0b3IuXG4gICAgICAgICAgICBkZXNjcmlwdG9yLnZhbHVlID0gb2JqZWN0W3Byb3BlcnR5XTtcbiAgICAgICAgICAgIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gICAgICAgIH07XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tcHJvdG8gKi9cbiAgICB9XG5cbiAgICAvLyBFUzUgMTUuMi4zLjRcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4yLjMuNFxuICAgIGlmICghT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMpIHtcbiAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKG9iamVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iamVjdCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRVM1IDE1LjIuMy41XG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMi4zLjVcbiAgICBpZiAoIU9iamVjdC5jcmVhdGUpIHtcblxuICAgICAgICAvLyBDb250cmlidXRlZCBieSBCcmFuZG9uIEJlbnZpZSwgT2N0b2JlciwgMjAxMlxuICAgICAgICB2YXIgY3JlYXRlRW1wdHk7XG4gICAgICAgIHZhciBzdXBwb3J0c1Byb3RvID0gISh7IF9fcHJvdG9fXzogbnVsbCB9IGluc3RhbmNlb2YgT2JqZWN0KTtcbiAgICAgICAgLy8gdGhlIGZvbGxvd2luZyBwcm9kdWNlcyBmYWxzZSBwb3NpdGl2ZXNcbiAgICAgICAgLy8gaW4gT3BlcmEgTWluaSA9PiBub3QgYSByZWxpYWJsZSBjaGVja1xuICAgICAgICAvLyBPYmplY3QucHJvdG90eXBlLl9fcHJvdG9fXyA9PT0gbnVsbFxuXG4gICAgICAgIC8vIENoZWNrIGZvciBkb2N1bWVudC5kb21haW4gYW5kIGFjdGl2ZSB4IHN1cHBvcnRcbiAgICAgICAgLy8gTm8gbmVlZCB0byB1c2UgYWN0aXZlIHggYXBwcm9hY2ggd2hlbiBkb2N1bWVudC5kb21haW4gaXMgbm90IHNldFxuICAgICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbiAgICAgICAgLy8gdmFyaWF0aW9uIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9raXRjYW1icmlkZ2UvZXM1LXNoaW0vY29tbWl0LzRmNzM4YWMwNjYzNDZcbiAgICAgICAgLyogZ2xvYmFsIEFjdGl2ZVhPYmplY3QgKi9cbiAgICAgICAgdmFyIHNob3VsZFVzZUFjdGl2ZVggPSBmdW5jdGlvbiBzaG91bGRVc2VBY3RpdmVYKCkge1xuICAgICAgICAgICAgLy8gcmV0dXJuIGVhcmx5IGlmIGRvY3VtZW50LmRvbWFpbiBub3Qgc2V0XG4gICAgICAgICAgICBpZiAoIWRvY3VtZW50LmRvbWFpbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gISFuZXcgQWN0aXZlWE9iamVjdCgnaHRtbGZpbGUnKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBUaGlzIHN1cHBvcnRzIElFOCB3aGVuIGRvY3VtZW50LmRvbWFpbiBpcyB1c2VkXG4gICAgICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzLzE1MFxuICAgICAgICAvLyB2YXJpYXRpb24gb2YgaHR0cHM6Ly9naXRodWIuY29tL2tpdGNhbWJyaWRnZS9lczUtc2hpbS9jb21taXQvNGY3MzhhYzA2NjM0NlxuICAgICAgICB2YXIgZ2V0RW1wdHlWaWFBY3RpdmVYID0gZnVuY3Rpb24gZ2V0RW1wdHlWaWFBY3RpdmVYKCkge1xuICAgICAgICAgICAgdmFyIGVtcHR5O1xuICAgICAgICAgICAgdmFyIHhEb2M7XG5cbiAgICAgICAgICAgIHhEb2MgPSBuZXcgQWN0aXZlWE9iamVjdCgnaHRtbGZpbGUnKTtcblxuICAgICAgICAgICAgdmFyIHNjcmlwdCA9ICdzY3JpcHQnO1xuICAgICAgICAgICAgeERvYy53cml0ZSgnPCcgKyBzY3JpcHQgKyAnPjwvJyArIHNjcmlwdCArICc+Jyk7XG4gICAgICAgICAgICB4RG9jLmNsb3NlKCk7XG5cbiAgICAgICAgICAgIGVtcHR5ID0geERvYy5wYXJlbnRXaW5kb3cuT2JqZWN0LnByb3RvdHlwZTtcbiAgICAgICAgICAgIHhEb2MgPSBudWxsO1xuXG4gICAgICAgICAgICByZXR1cm4gZW1wdHk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gVGhlIG9yaWdpbmFsIGltcGxlbWVudGF0aW9uIHVzaW5nIGFuIGlmcmFtZVxuICAgICAgICAvLyBiZWZvcmUgdGhlIGFjdGl2ZXggYXBwcm9hY2ggd2FzIGFkZGVkXG4gICAgICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzLzE1MFxuICAgICAgICB2YXIgZ2V0RW1wdHlWaWFJRnJhbWUgPSBmdW5jdGlvbiBnZXRFbXB0eVZpYUlGcmFtZSgpIHtcbiAgICAgICAgICAgIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBkb2N1bWVudC5ib2R5IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgICAgIHZhciBlbXB0eTtcblxuICAgICAgICAgICAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zY3JpcHQtdXJsXG4gICAgICAgICAgICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JztcblxuICAgICAgICAgICAgZW1wdHkgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3QucHJvdG90eXBlO1xuICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gICAgICAgICAgICBpZnJhbWUgPSBudWxsO1xuXG4gICAgICAgICAgICByZXR1cm4gZW1wdHk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyogZ2xvYmFsIGRvY3VtZW50ICovXG4gICAgICAgIGlmIChzdXBwb3J0c1Byb3RvIHx8IHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGNyZWF0ZUVtcHR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IF9fcHJvdG9fXzogbnVsbCB9O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEluIG9sZCBJRSBfX3Byb3RvX18gY2FuJ3QgYmUgdXNlZCB0byBtYW51YWxseSBzZXQgYG51bGxgLCBub3IgZG9lc1xuICAgICAgICAgICAgLy8gYW55IG90aGVyIG1ldGhvZCBleGlzdCB0byBtYWtlIGFuIG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gbm90aGluZyxcbiAgICAgICAgICAgIC8vIGFzaWRlIGZyb20gT2JqZWN0LnByb3RvdHlwZSBpdHNlbGYuIEluc3RlYWQsIGNyZWF0ZSBhIG5ldyBnbG9iYWxcbiAgICAgICAgICAgIC8vIG9iamVjdCBhbmQgKnN0ZWFsKiBpdHMgT2JqZWN0LnByb3RvdHlwZSBhbmQgc3RyaXAgaXQgYmFyZS4gVGhpcyBpc1xuICAgICAgICAgICAgLy8gdXNlZCBhcyB0aGUgcHJvdG90eXBlIHRvIGNyZWF0ZSBudWxsYXJ5IG9iamVjdHMuXG4gICAgICAgICAgICBjcmVhdGVFbXB0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyBEZXRlcm1pbmUgd2hpY2ggYXBwcm9hY2ggdG8gdXNlXG4gICAgICAgICAgICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMTUwXG4gICAgICAgICAgICAgICAgdmFyIGVtcHR5ID0gc2hvdWxkVXNlQWN0aXZlWCgpID8gZ2V0RW1wdHlWaWFBY3RpdmVYKCkgOiBnZXRFbXB0eVZpYUlGcmFtZSgpO1xuXG4gICAgICAgICAgICAgICAgZGVsZXRlIGVtcHR5LmNvbnN0cnVjdG9yO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBlbXB0eS5oYXNPd25Qcm9wZXJ0eTtcbiAgICAgICAgICAgICAgICBkZWxldGUgZW1wdHkucHJvcGVydHlJc0VudW1lcmFibGU7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGVtcHR5LmlzUHJvdG90eXBlT2Y7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGVtcHR5LnRvTG9jYWxlU3RyaW5nO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBlbXB0eS50b1N0cmluZztcbiAgICAgICAgICAgICAgICBkZWxldGUgZW1wdHkudmFsdWVPZjtcblxuICAgICAgICAgICAgICAgIHZhciBFbXB0eSA9IGZ1bmN0aW9uIEVtcHR5KCkge307XG4gICAgICAgICAgICAgICAgRW1wdHkucHJvdG90eXBlID0gZW1wdHk7XG4gICAgICAgICAgICAgICAgLy8gc2hvcnQtY2lyY3VpdCBmdXR1cmUgY2FsbHNcbiAgICAgICAgICAgICAgICBjcmVhdGVFbXB0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFbXB0eSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFbXB0eSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIE9iamVjdC5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUocHJvdG90eXBlLCBwcm9wZXJ0aWVzKSB7XG5cbiAgICAgICAgICAgIHZhciBvYmplY3Q7XG4gICAgICAgICAgICB2YXIgVHlwZSA9IGZ1bmN0aW9uIFR5cGUoKSB7fTsgLy8gQW4gZW1wdHkgY29uc3RydWN0b3IuXG5cbiAgICAgICAgICAgIGlmIChwcm90b3R5cGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBvYmplY3QgPSBjcmVhdGVFbXB0eSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZShwcm90b3R5cGUpKSB7XG4gICAgICAgICAgICAgICAgLy8gSW4gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiBgcGFyZW50YCBjYW4gYmUgYG51bGxgXG4gICAgICAgICAgICAgICAgLy8gT1IgKmFueSogYGluc3RhbmNlb2YgT2JqZWN0YCAgKE9iamVjdHxGdW5jdGlvbnxBcnJheXxSZWdFeHB8ZXRjKVxuICAgICAgICAgICAgICAgIC8vIFVzZSBgdHlwZW9mYCB0aG8sIGIvYyBpbiBvbGQgSUUsIERPTSBlbGVtZW50cyBhcmUgbm90IGBpbnN0YW5jZW9mIE9iamVjdGBcbiAgICAgICAgICAgICAgICAvLyBsaWtlIHRoZXkgYXJlIGluIG1vZGVybiBicm93c2Vycy4gVXNpbmcgYE9iamVjdC5jcmVhdGVgIG9uIERPTSBlbGVtZW50c1xuICAgICAgICAgICAgICAgIC8vIGlzLi4uZXJyLi4ucHJvYmFibHkgaW5hcHByb3ByaWF0ZSwgYnV0IHRoZSBuYXRpdmUgdmVyc2lvbiBhbGxvd3MgZm9yIGl0LlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdCBwcm90b3R5cGUgbWF5IG9ubHkgYmUgYW4gT2JqZWN0IG9yIG51bGwnKTsgLy8gc2FtZSBtc2cgYXMgQ2hyb21lXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIFR5cGUucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICAgICAgICAgICAgICAgIG9iamVjdCA9IG5ldyBUeXBlKCk7XG4gICAgICAgICAgICAgICAgLy8gSUUgaGFzIG5vIGJ1aWx0LWluIGltcGxlbWVudGF0aW9uIG9mIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgXG4gICAgICAgICAgICAgICAgLy8gbmVpdGhlciBgX19wcm90b19fYCwgYnV0IHRoaXMgbWFudWFsbHkgc2V0dGluZyBgX19wcm90b19fYCB3aWxsXG4gICAgICAgICAgICAgICAgLy8gZ3VhcmFudGVlIHRoYXQgYE9iamVjdC5nZXRQcm90b3R5cGVPZmAgd2lsbCB3b3JrIGFzIGV4cGVjdGVkIHdpdGhcbiAgICAgICAgICAgICAgICAvLyBvYmplY3RzIGNyZWF0ZWQgdXNpbmcgYE9iamVjdC5jcmVhdGVgXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvXG4gICAgICAgICAgICAgICAgb2JqZWN0Ll9fcHJvdG9fXyA9IHByb3RvdHlwZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iamVjdCwgcHJvcGVydGllcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRVM1IDE1LjIuMy42XG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMi4zLjZcblxuICAgIC8vIFBhdGNoIGZvciBXZWJLaXQgYW5kIElFOCBzdGFuZGFyZCBtb2RlXG4gICAgLy8gRGVzaWduZWQgYnkgaGF4IDxoYXguZ2l0aHViLmNvbT5cbiAgICAvLyByZWxhdGVkIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzI2lzc3VlLzVcbiAgICAvLyBJRTggUmVmZXJlbmNlOlxuICAgIC8vICAgICBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvZGQyODI5MDAuYXNweFxuICAgIC8vICAgICBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvZGQyMjk5MTYuYXNweFxuICAgIC8vIFdlYktpdCBCdWdzOlxuICAgIC8vICAgICBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MzY0MjNcblxuICAgIHZhciBkb2VzRGVmaW5lUHJvcGVydHlXb3JrID0gZnVuY3Rpb24gZG9lc0RlZmluZVByb3BlcnR5V29yayhvYmplY3QpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsICdzZW50aW5lbCcsIHt9KTtcbiAgICAgICAgICAgIHJldHVybiAnc2VudGluZWwnIGluIG9iamVjdDtcbiAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gY2hlY2sgd2hldGhlciBkZWZpbmVQcm9wZXJ0eSB3b3JrcyBpZiBpdCdzIGdpdmVuLiBPdGhlcndpc2UsXG4gICAgLy8gc2hpbSBwYXJ0aWFsbHkuXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICB2YXIgZGVmaW5lUHJvcGVydHlXb3Jrc09uT2JqZWN0ID0gZG9lc0RlZmluZVByb3BlcnR5V29yayh7fSk7XG4gICAgICAgIHZhciBkZWZpbmVQcm9wZXJ0eVdvcmtzT25Eb20gPSB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICB8fCBkb2VzRGVmaW5lUHJvcGVydHlXb3JrKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKTtcbiAgICAgICAgaWYgKCFkZWZpbmVQcm9wZXJ0eVdvcmtzT25PYmplY3QgfHwgIWRlZmluZVByb3BlcnR5V29ya3NPbkRvbSkge1xuICAgICAgICAgICAgdmFyIGRlZmluZVByb3BlcnR5RmFsbGJhY2sgPSBPYmplY3QuZGVmaW5lUHJvcGVydHksXG4gICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydGllc0ZhbGxiYWNrID0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIU9iamVjdC5kZWZpbmVQcm9wZXJ0eSB8fCBkZWZpbmVQcm9wZXJ0eUZhbGxiYWNrKSB7XG4gICAgICAgIHZhciBFUlJfTk9OX09CSkVDVF9ERVNDUklQVE9SID0gJ1Byb3BlcnR5IGRlc2NyaXB0aW9uIG11c3QgYmUgYW4gb2JqZWN0OiAnO1xuICAgICAgICB2YXIgRVJSX05PTl9PQkpFQ1RfVEFSR0VUID0gJ09iamVjdC5kZWZpbmVQcm9wZXJ0eSBjYWxsZWQgb24gbm9uLW9iamVjdDogJztcbiAgICAgICAgdmFyIEVSUl9BQ0NFU1NPUlNfTk9UX1NVUFBPUlRFRCA9ICdnZXR0ZXJzICYgc2V0dGVycyBjYW4gbm90IGJlIGRlZmluZWQgb24gdGhpcyBqYXZhc2NyaXB0IGVuZ2luZSc7XG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvcikge1xuICAgICAgICAgICAgaWYgKGlzUHJpbWl0aXZlKG9iamVjdCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEVSUl9OT05fT0JKRUNUX1RBUkdFVCArIG9iamVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNQcmltaXRpdmUoZGVzY3JpcHRvcikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEVSUl9OT05fT0JKRUNUX0RFU0NSSVBUT1IgKyBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG1ha2UgYSB2YWxpYW50IGF0dGVtcHQgdG8gdXNlIHRoZSByZWFsIGRlZmluZVByb3BlcnR5XG4gICAgICAgICAgICAvLyBmb3IgSTgncyBET00gZWxlbWVudHMuXG4gICAgICAgICAgICBpZiAoZGVmaW5lUHJvcGVydHlGYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eUZhbGxiYWNrLmNhbGwoT2JqZWN0LCBvYmplY3QsIHByb3BlcnR5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdHJ5IHRoZSBzaGltIGlmIHRoZSByZWFsIG9uZSBkb2Vzbid0IHdvcmtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIGl0J3MgYSBkYXRhIHByb3BlcnR5LlxuICAgICAgICAgICAgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikge1xuICAgICAgICAgICAgICAgIC8vIGZhaWwgc2lsZW50bHkgaWYgJ3dyaXRhYmxlJywgJ2VudW1lcmFibGUnLCBvciAnY29uZmlndXJhYmxlJ1xuICAgICAgICAgICAgICAgIC8vIGFyZSByZXF1ZXN0ZWQgYnV0IG5vdCBzdXBwb3J0ZWRcbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgIC8vIGFsdGVybmF0ZSBhcHByb2FjaDpcbiAgICAgICAgICAgICAgICBpZiAoIC8vIGNhbid0IGltcGxlbWVudCB0aGVzZSBmZWF0dXJlczsgYWxsb3cgZmFsc2UgYnV0IG5vdCB0cnVlXG4gICAgICAgICAgICAgICAgICAgICgnd3JpdGFibGUnIGluIGRlc2NyaXB0b3IgJiYgIWRlc2NyaXB0b3Iud3JpdGFibGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICgnZW51bWVyYWJsZScgaW4gZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci5lbnVtZXJhYmxlKSB8fFxuICAgICAgICAgICAgICAgICAgICAoJ2NvbmZpZ3VyYWJsZScgaW4gZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci5jb25maWd1cmFibGUpXG4gICAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAnVGhpcyBpbXBsZW1lbnRhdGlvbiBvZiBPYmplY3QuZGVmaW5lUHJvcGVydHkgZG9lcyBub3Qgc3VwcG9ydCBjb25maWd1cmFibGUsIGVudW1lcmFibGUsIG9yIHdyaXRhYmxlLidcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgaWYgKHN1cHBvcnRzQWNjZXNzb3JzICYmIChsb29rdXBHZXR0ZXIob2JqZWN0LCBwcm9wZXJ0eSkgfHwgbG9va3VwU2V0dGVyKG9iamVjdCwgcHJvcGVydHkpKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBBcyBhY2Nlc3NvcnMgYXJlIHN1cHBvcnRlZCBvbmx5IG9uIGVuZ2luZXMgaW1wbGVtZW50aW5nXG4gICAgICAgICAgICAgICAgICAgIC8vIGBfX3Byb3RvX19gIHdlIGNhbiBzYWZlbHkgb3ZlcnJpZGUgYF9fcHJvdG9fX2Agd2hpbGUgZGVmaW5pbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gYSBwcm9wZXJ0eSB0byBtYWtlIHN1cmUgdGhhdCB3ZSBkb24ndCBoaXQgYW4gaW5oZXJpdGVkXG4gICAgICAgICAgICAgICAgICAgIC8vIGFjY2Vzc29yLlxuICAgICAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90bywgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb3RvdHlwZSA9IG9iamVjdC5fX3Byb3RvX187XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5fX3Byb3RvX18gPSBwcm90b3R5cGVPZk9iamVjdDtcbiAgICAgICAgICAgICAgICAgICAgLy8gRGVsZXRpbmcgYSBwcm9wZXJ0eSBhbnl3YXkgc2luY2UgZ2V0dGVyIC8gc2V0dGVyIG1heSBiZVxuICAgICAgICAgICAgICAgICAgICAvLyBkZWZpbmVkIG9uIG9iamVjdCBpdHNlbGYuXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvYmplY3RbcHJvcGVydHldO1xuICAgICAgICAgICAgICAgICAgICBvYmplY3RbcHJvcGVydHldID0gZGVzY3JpcHRvci52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0dGluZyBvcmlnaW5hbCBgX19wcm90b19fYCBiYWNrIG5vdy5cbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0Ll9fcHJvdG9fXyA9IHByb3RvdHlwZTtcbiAgICAgICAgICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1wcm90bywgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvYmplY3RbcHJvcGVydHldID0gZGVzY3JpcHRvci52YWx1ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIGhhc0dldHRlciA9ICdnZXQnIGluIGRlc2NyaXB0b3I7XG4gICAgICAgICAgICAgICAgdmFyIGhhc1NldHRlciA9ICdzZXQnIGluIGRlc2NyaXB0b3I7XG4gICAgICAgICAgICAgICAgaWYgKCFzdXBwb3J0c0FjY2Vzc29ycyAmJiAoaGFzR2V0dGVyIHx8IGhhc1NldHRlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihFUlJfQUNDRVNTT1JTX05PVF9TVVBQT1JURUQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSBnb3QgdGhhdCBmYXIgdGhlbiBnZXR0ZXJzIGFuZCBzZXR0ZXJzIGNhbiBiZSBkZWZpbmVkICEhXG4gICAgICAgICAgICAgICAgaWYgKGhhc0dldHRlcikge1xuICAgICAgICAgICAgICAgICAgICBkZWZpbmVHZXR0ZXIob2JqZWN0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvci5nZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaGFzU2V0dGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmluZVNldHRlcihvYmplY3QsIHByb3BlcnR5LCBkZXNjcmlwdG9yLnNldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBFUzUgMTUuMi4zLjdcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4yLjMuN1xuICAgIGlmICghT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgfHwgZGVmaW5lUHJvcGVydGllc0ZhbGxiYWNrKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhvYmplY3QsIHByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIC8vIG1ha2UgYSB2YWxpYW50IGF0dGVtcHQgdG8gdXNlIHRoZSByZWFsIGRlZmluZVByb3BlcnRpZXNcbiAgICAgICAgICAgIGlmIChkZWZpbmVQcm9wZXJ0aWVzRmFsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVmaW5lUHJvcGVydGllc0ZhbGxiYWNrLmNhbGwoT2JqZWN0LCBvYmplY3QsIHByb3BlcnRpZXMpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAvLyB0cnkgdGhlIHNoaW0gaWYgdGhlIHJlYWwgb25lIGRvZXNuJ3Qgd29ya1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgT2JqZWN0LmtleXMocHJvcGVydGllcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydHkgIT09ICdfX3Byb3RvX18nKSB7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIHByb3BlcnR5LCBwcm9wZXJ0aWVzW3Byb3BlcnR5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIEVTNSAxNS4yLjMuOFxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjIuMy44XG4gICAgaWYgKCFPYmplY3Quc2VhbCkge1xuICAgICAgICBPYmplY3Quc2VhbCA9IGZ1bmN0aW9uIHNlYWwob2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0KG9iamVjdCkgIT09IG9iamVjdCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5zZWFsIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBPYmplY3RzLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGhpcyBpcyBtaXNsZWFkaW5nIGFuZCBicmVha3MgZmVhdHVyZS1kZXRlY3Rpb24sIGJ1dFxuICAgICAgICAgICAgLy8gYWxsb3dzIFwic2VjdXJhYmxlXCIgY29kZSB0byBcImdyYWNlZnVsbHlcIiBkZWdyYWRlIHRvIHdvcmtpbmdcbiAgICAgICAgICAgIC8vIGJ1dCBpbnNlY3VyZSBjb2RlLlxuICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBFUzUgMTUuMi4zLjlcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4yLjMuOVxuICAgIGlmICghT2JqZWN0LmZyZWV6ZSkge1xuICAgICAgICBPYmplY3QuZnJlZXplID0gZnVuY3Rpb24gZnJlZXplKG9iamVjdCkge1xuICAgICAgICAgICAgaWYgKE9iamVjdChvYmplY3QpICE9PSBvYmplY3QpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuZnJlZXplIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBPYmplY3RzLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGhpcyBpcyBtaXNsZWFkaW5nIGFuZCBicmVha3MgZmVhdHVyZS1kZXRlY3Rpb24sIGJ1dFxuICAgICAgICAgICAgLy8gYWxsb3dzIFwic2VjdXJhYmxlXCIgY29kZSB0byBcImdyYWNlZnVsbHlcIiBkZWdyYWRlIHRvIHdvcmtpbmdcbiAgICAgICAgICAgIC8vIGJ1dCBpbnNlY3VyZSBjb2RlLlxuICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBkZXRlY3QgYSBSaGlubyBidWcgYW5kIHBhdGNoIGl0XG4gICAgdHJ5IHtcbiAgICAgICAgT2JqZWN0LmZyZWV6ZShmdW5jdGlvbiAoKSB7fSk7XG4gICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgIE9iamVjdC5mcmVlemUgPSAoZnVuY3Rpb24gKGZyZWV6ZU9iamVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGZyZWV6ZShvYmplY3QpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9iamVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmcmVlemVPYmplY3Qob2JqZWN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KE9iamVjdC5mcmVlemUpKTtcbiAgICB9XG5cbiAgICAvLyBFUzUgMTUuMi4zLjEwXG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMi4zLjEwXG4gICAgaWYgKCFPYmplY3QucHJldmVudEV4dGVuc2lvbnMpIHtcbiAgICAgICAgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zID0gZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMob2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0KG9iamVjdCkgIT09IG9iamVjdCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyBjYW4gb25seSBiZSBjYWxsZWQgb24gT2JqZWN0cy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRoaXMgaXMgbWlzbGVhZGluZyBhbmQgYnJlYWtzIGZlYXR1cmUtZGV0ZWN0aW9uLCBidXRcbiAgICAgICAgICAgIC8vIGFsbG93cyBcInNlY3VyYWJsZVwiIGNvZGUgdG8gXCJncmFjZWZ1bGx5XCIgZGVncmFkZSB0byB3b3JraW5nXG4gICAgICAgICAgICAvLyBidXQgaW5zZWN1cmUgY29kZS5cbiAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRVM1IDE1LjIuMy4xMVxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjIuMy4xMVxuICAgIGlmICghT2JqZWN0LmlzU2VhbGVkKSB7XG4gICAgICAgIE9iamVjdC5pc1NlYWxlZCA9IGZ1bmN0aW9uIGlzU2VhbGVkKG9iamVjdCkge1xuICAgICAgICAgICAgaWYgKE9iamVjdChvYmplY3QpICE9PSBvYmplY3QpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuaXNTZWFsZWQgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIE9iamVjdHMuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRVM1IDE1LjIuMy4xMlxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjIuMy4xMlxuICAgIGlmICghT2JqZWN0LmlzRnJvemVuKSB7XG4gICAgICAgIE9iamVjdC5pc0Zyb3plbiA9IGZ1bmN0aW9uIGlzRnJvemVuKG9iamVjdCkge1xuICAgICAgICAgICAgaWYgKE9iamVjdChvYmplY3QpICE9PSBvYmplY3QpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuaXNGcm96ZW4gY2FuIG9ubHkgYmUgY2FsbGVkIG9uIE9iamVjdHMuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRVM1IDE1LjIuMy4xM1xuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjIuMy4xM1xuICAgIGlmICghT2JqZWN0LmlzRXh0ZW5zaWJsZSkge1xuICAgICAgICBPYmplY3QuaXNFeHRlbnNpYmxlID0gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKG9iamVjdCkge1xuICAgICAgICAgICAgLy8gMS4gSWYgVHlwZShPKSBpcyBub3QgT2JqZWN0IHRocm93IGEgVHlwZUVycm9yIGV4Y2VwdGlvbi5cbiAgICAgICAgICAgIGlmIChPYmplY3Qob2JqZWN0KSAhPT0gb2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmlzRXh0ZW5zaWJsZSBjYW4gb25seSBiZSBjYWxsZWQgb24gT2JqZWN0cy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIDIuIFJldHVybiB0aGUgQm9vbGVhbiB2YWx1ZSBvZiB0aGUgW1tFeHRlbnNpYmxlXV0gaW50ZXJuYWwgcHJvcGVydHkgb2YgTy5cbiAgICAgICAgICAgIHZhciBuYW1lID0gJyc7XG4gICAgICAgICAgICB3aGlsZSAob3ducyhvYmplY3QsIG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgbmFtZSArPSAnPyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvYmplY3RbbmFtZV0gPSB0cnVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICB2YXIgcmV0dXJuVmFsdWUgPSBvd25zKG9iamVjdCwgbmFtZSk7XG4gICAgICAgICAgICBkZWxldGUgb2JqZWN0W25hbWVdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gICAgICAgIH07XG4gICAgfVxuXG59KSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRnT1BEID0gcmVxdWlyZSgnLi4vaGVscGVycy9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InKTtcbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnLi4vaGVscGVycy9jYWxsQm91bmQnKTtcblxudmFyICRpc0VudW1lcmFibGUgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUnKTtcblxudmFyIGhhcyA9IHJlcXVpcmUoJ2hhcycpO1xuXG52YXIgSXNBcnJheSA9IHJlcXVpcmUoJy4vSXNBcnJheScpO1xudmFyIElzUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuL0lzUHJvcGVydHlLZXknKTtcbnZhciBJc1JlZ0V4cCA9IHJlcXVpcmUoJy4vSXNSZWdFeHAnKTtcbnZhciBUb1Byb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vVG9Qcm9wZXJ0eURlc2NyaXB0b3InKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtb3JkaW5hcnlnZXRvd25wcm9wZXJ0eVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIE9yZGluYXJ5R2V0T3duUHJvcGVydHkoTywgUCkge1xuXHRpZiAoVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogTyBtdXN0IGJlIGFuIE9iamVjdCcpO1xuXHR9XG5cdGlmICghSXNQcm9wZXJ0eUtleShQKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBQIG11c3QgYmUgYSBQcm9wZXJ0eSBLZXknKTtcblx0fVxuXHRpZiAoIWhhcyhPLCBQKSkge1xuXHRcdHJldHVybiB2b2lkIDA7XG5cdH1cblx0aWYgKCEkZ09QRCkge1xuXHRcdC8vIEVTMyAvIElFIDggZmFsbGJhY2tcblx0XHR2YXIgYXJyYXlMZW5ndGggPSBJc0FycmF5KE8pICYmIFAgPT09ICdsZW5ndGgnO1xuXHRcdHZhciByZWdleExhc3RJbmRleCA9IElzUmVnRXhwKE8pICYmIFAgPT09ICdsYXN0SW5kZXgnO1xuXHRcdHJldHVybiB7XG5cdFx0XHQnW1tDb25maWd1cmFibGVdXSc6ICEoYXJyYXlMZW5ndGggfHwgcmVnZXhMYXN0SW5kZXgpLFxuXHRcdFx0J1tbRW51bWVyYWJsZV1dJzogJGlzRW51bWVyYWJsZShPLCBQKSxcblx0XHRcdCdbW1ZhbHVlXV0nOiBPW1BdLFxuXHRcdFx0J1tbV3JpdGFibGVdXSc6IHRydWVcblx0XHR9O1xuXHR9XG5cdHJldHVybiBUb1Byb3BlcnR5RGVzY3JpcHRvcigkZ09QRChPLCBQKSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdHJldHVybiBpbXBsZW1lbnRhdGlvbjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRzcGVjaWVzID0gR2V0SW50cmluc2ljKCclU3ltYm9sLnNwZWNpZXMlJywgdHJ1ZSk7XG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIElzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL0lzQ29uc3RydWN0b3InKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1zcGVjaWVzY29uc3RydWN0b3JcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKSB7XG5cdGlmIChUeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKE8pIGlzIG5vdCBPYmplY3QnKTtcblx0fVxuXHR2YXIgQyA9IE8uY29uc3RydWN0b3I7XG5cdGlmICh0eXBlb2YgQyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gZGVmYXVsdENvbnN0cnVjdG9yO1xuXHR9XG5cdGlmIChUeXBlKEMpICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdPLmNvbnN0cnVjdG9yIGlzIG5vdCBhbiBPYmplY3QnKTtcblx0fVxuXHR2YXIgUyA9ICRzcGVjaWVzID8gQ1skc3BlY2llc10gOiB2b2lkIDA7XG5cdGlmIChTID09IG51bGwpIHtcblx0XHRyZXR1cm4gZGVmYXVsdENvbnN0cnVjdG9yO1xuXHR9XG5cdGlmIChJc0NvbnN0cnVjdG9yKFMpKSB7XG5cdFx0cmV0dXJuIFM7XG5cdH1cblx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ25vIGNvbnN0cnVjdG9yIGZvdW5kJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xudmFyICROdW1iZXIgPSBHZXRJbnRyaW5zaWMoJyVOdW1iZXIlJyk7XG52YXIgJFJlZ0V4cCA9IEdldEludHJpbnNpYygnJVJlZ0V4cCUnKTtcbnZhciAkcGFyc2VJbnRlZ2VyID0gR2V0SW50cmluc2ljKCclcGFyc2VJbnQlJyk7XG5cbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NhbGxCb3VuZCcpO1xudmFyIHJlZ2V4VGVzdGVyID0gcmVxdWlyZSgnLi4vaGVscGVycy9yZWdleFRlc3RlcicpO1xudmFyIGlzUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc1ByaW1pdGl2ZScpO1xuXG52YXIgJHN0clNsaWNlID0gY2FsbEJvdW5kKCdTdHJpbmcucHJvdG90eXBlLnNsaWNlJyk7XG52YXIgaXNCaW5hcnkgPSByZWdleFRlc3RlcigvXjBiWzAxXSskL2kpO1xudmFyIGlzT2N0YWwgPSByZWdleFRlc3RlcigvXjBvWzAtN10rJC9pKTtcbnZhciBpc0ludmFsaWRIZXhMaXRlcmFsID0gcmVnZXhUZXN0ZXIoL15bLStdMHhbMC05YS1mXSskL2kpO1xudmFyIG5vbldTID0gWydcXHUwMDg1JywgJ1xcdTIwMGInLCAnXFx1ZmZmZSddLmpvaW4oJycpO1xudmFyIG5vbldTcmVnZXggPSBuZXcgJFJlZ0V4cCgnWycgKyBub25XUyArICddJywgJ2cnKTtcbnZhciBoYXNOb25XUyA9IHJlZ2V4VGVzdGVyKG5vbldTcmVnZXgpO1xuXG4vLyB3aGl0ZXNwYWNlIGZyb206IGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjUuNC4yMFxuLy8gaW1wbGVtZW50YXRpb24gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vYmxvYi92My40LjAvZXM1LXNoaW0uanMjTDEzMDQtTDEzMjRcbnZhciB3cyA9IFtcblx0J1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJyxcblx0J1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4Jyxcblx0J1xcdTIwMjlcXHVGRUZGJ1xuXS5qb2luKCcnKTtcbnZhciB0cmltUmVnZXggPSBuZXcgUmVnRXhwKCcoXlsnICsgd3MgKyAnXSspfChbJyArIHdzICsgJ10rJCknLCAnZycpO1xudmFyICRyZXBsYWNlID0gY2FsbEJvdW5kKCdTdHJpbmcucHJvdG90eXBlLnJlcGxhY2UnKTtcbnZhciAkdHJpbSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRyZXR1cm4gJHJlcGxhY2UodmFsdWUsIHRyaW1SZWdleCwgJycpO1xufTtcblxudmFyIFRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9Ub1ByaW1pdGl2ZScpO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXRvbnVtYmVyXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVG9OdW1iZXIoYXJndW1lbnQpIHtcblx0dmFyIHZhbHVlID0gaXNQcmltaXRpdmUoYXJndW1lbnQpID8gYXJndW1lbnQgOiBUb1ByaW1pdGl2ZShhcmd1bWVudCwgJE51bWJlcik7XG5cdGlmICh0eXBlb2YgdmFsdWUgPT09ICdzeW1ib2wnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGEgU3ltYm9sIHZhbHVlIHRvIGEgbnVtYmVyJyk7XG5cdH1cblx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcblx0XHRpZiAoaXNCaW5hcnkodmFsdWUpKSB7XG5cdFx0XHRyZXR1cm4gVG9OdW1iZXIoJHBhcnNlSW50ZWdlcigkc3RyU2xpY2UodmFsdWUsIDIpLCAyKSk7XG5cdFx0fSBlbHNlIGlmIChpc09jdGFsKHZhbHVlKSkge1xuXHRcdFx0cmV0dXJuIFRvTnVtYmVyKCRwYXJzZUludGVnZXIoJHN0clNsaWNlKHZhbHVlLCAyKSwgOCkpO1xuXHRcdH0gZWxzZSBpZiAoaGFzTm9uV1ModmFsdWUpIHx8IGlzSW52YWxpZEhleExpdGVyYWwodmFsdWUpKSB7XG5cdFx0XHRyZXR1cm4gTmFOO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgdHJpbW1lZCA9ICR0cmltKHZhbHVlKTtcblx0XHRcdGlmICh0cmltbWVkICE9PSB2YWx1ZSkge1xuXHRcdFx0XHRyZXR1cm4gVG9OdW1iZXIodHJpbW1lZCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiAkTnVtYmVyKHZhbHVlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBnZXRJbmZlcnJlZE5hbWU7XG50cnkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcblx0Z2V0SW5mZXJyZWROYW1lID0gRnVuY3Rpb24oJ3MnLCAncmV0dXJuIHsgW3NdKCkge30gfVtzXS5uYW1lOycpO1xufSBjYXRjaCAoZSkge31cblxudmFyIGluZmVycmVkID0gZnVuY3Rpb24gKCkge307XG5tb2R1bGUuZXhwb3J0cyA9IGdldEluZmVycmVkTmFtZSAmJiBpbmZlcnJlZC5uYW1lID09PSAnaW5mZXJyZWQnID8gZ2V0SW5mZXJyZWROYW1lIDogbnVsbDtcbiIsIi8qIGVzbGludCBuby1uZWdhdGVkLWNvbmRpdGlvbjogMCwgbm8tbmV3LWZ1bmM6IDAgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG5cdG1vZHVsZS5leHBvcnRzID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0bW9kdWxlLmV4cG9ydHMgPSB3aW5kb3c7XG59IGVsc2Uge1xuXHRtb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG59XG4iLCIvLyBlbGVtZW50LWNsb3Nlc3QgfCBDQzAtMS4wIHwgZ2l0aHViLmNvbS9qb25hdGhhbnRuZWFsL2Nsb3Nlc3RcblxuKGZ1bmN0aW9uIChFbGVtZW50UHJvdG8pIHtcblx0aWYgKHR5cGVvZiBFbGVtZW50UHJvdG8ubWF0Y2hlcyAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdEVsZW1lbnRQcm90by5tYXRjaGVzID0gRWxlbWVudFByb3RvLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IEVsZW1lbnRQcm90by5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgRWxlbWVudFByb3RvLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fCBmdW5jdGlvbiBtYXRjaGVzKHNlbGVjdG9yKSB7XG5cdFx0XHR2YXIgZWxlbWVudCA9IHRoaXM7XG5cdFx0XHR2YXIgZWxlbWVudHMgPSAoZWxlbWVudC5kb2N1bWVudCB8fCBlbGVtZW50Lm93bmVyRG9jdW1lbnQpLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuXHRcdFx0dmFyIGluZGV4ID0gMDtcblxuXHRcdFx0d2hpbGUgKGVsZW1lbnRzW2luZGV4XSAmJiBlbGVtZW50c1tpbmRleF0gIT09IGVsZW1lbnQpIHtcblx0XHRcdFx0KytpbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIEJvb2xlYW4oZWxlbWVudHNbaW5kZXhdKTtcblx0XHR9O1xuXHR9XG5cblx0aWYgKHR5cGVvZiBFbGVtZW50UHJvdG8uY2xvc2VzdCAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdEVsZW1lbnRQcm90by5jbG9zZXN0ID0gZnVuY3Rpb24gY2xvc2VzdChzZWxlY3Rvcikge1xuXHRcdFx0dmFyIGVsZW1lbnQgPSB0aGlzO1xuXG5cdFx0XHR3aGlsZSAoZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlID09PSAxKSB7XG5cdFx0XHRcdGlmIChlbGVtZW50Lm1hdGNoZXMoc2VsZWN0b3IpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW1lbnQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9O1xuXHR9XG59KSh3aW5kb3cuRWxlbWVudC5wcm90b3R5cGUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgJGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NhbGxCb3VuZCcpKCdBcnJheS5wcm90b3R5cGUuc2xpY2UnKTtcblxudmFyIENhbGwgPSByZXF1aXJlKCcuL0NhbGwnKTtcbnZhciBHZXRWID0gcmVxdWlyZSgnLi9HZXRWJyk7XG52YXIgSXNQcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4vSXNQcm9wZXJ0eUtleScpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaW52b2tlXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSW52b2tlKE8sIFApIHtcblx0aWYgKCFJc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1AgbXVzdCBiZSBhIFByb3BlcnR5IEtleScpO1xuXHR9XG5cdHZhciBhcmd1bWVudHNMaXN0ID0gJGFycmF5U2xpY2UoYXJndW1lbnRzLCAyKTtcblx0dmFyIGZ1bmMgPSBHZXRWKE8sIFApO1xuXHRyZXR1cm4gQ2FsbChmdW5jLCBPLCBhcmd1bWVudHNMaXN0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcblxudmFyIGFzc2VydFJlY29yZCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYXNzZXJ0UmVjb3JkJyk7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaXNkYXRhZGVzY3JpcHRvclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIElzRGF0YURlc2NyaXB0b3IoRGVzYykge1xuXHRpZiAodHlwZW9mIERlc2MgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0YXNzZXJ0UmVjb3JkKFR5cGUsICdQcm9wZXJ0eSBEZXNjcmlwdG9yJywgJ0Rlc2MnLCBEZXNjKTtcblxuXHRpZiAoIWhhcyhEZXNjLCAnW1tWYWx1ZV1dJykgJiYgIWhhcyhEZXNjLCAnW1tXcml0YWJsZV1dJykpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy05LjExXG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnaXMtY2FsbGFibGUnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbUFycmF5UHJvdG90eXBlSW5jbHVkZXMoKSB7XG5cdHZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG5cdGRlZmluZShcblx0XHRBcnJheS5wcm90b3R5cGUsXG5cdFx0eyBpbmNsdWRlczogcG9seWZpbGwgfSxcblx0XHR7IGluY2x1ZGVzOiBmdW5jdGlvbiAoKSB7IHJldHVybiBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXMgIT09IHBvbHlmaWxsOyB9IH1cblx0KTtcblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlcXVpcmVQcm9taXNlID0gcmVxdWlyZSgnLi9yZXF1aXJlUHJvbWlzZScpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdHJlcXVpcmVQcm9taXNlKCk7XG5cdHJldHVybiB0eXBlb2YgUHJvbWlzZS5wcm90b3R5cGVbJ2ZpbmFsbHknXSA9PT0gJ2Z1bmN0aW9uJyA/IFByb21pc2UucHJvdG90eXBlWydmaW5hbGx5J10gOiBpbXBsZW1lbnRhdGlvbjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1WYWx1ZXMoKSB7XG5cdHZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG5cdGRlZmluZShPYmplY3QsIHsgdmFsdWVzOiBwb2x5ZmlsbCB9LCB7XG5cdFx0dmFsdWVzOiBmdW5jdGlvbiB0ZXN0VmFsdWVzKCkge1xuXHRcdFx0cmV0dXJuIE9iamVjdC52YWx1ZXMgIT09IHBvbHlmaWxsO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4vc2hpbScpKCk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHByb3Blcmx5Qm94ZWQobWV0aG9kKSB7XG5cdC8vIENoZWNrIG5vZGUgMC42LjIxIGJ1ZyB3aGVyZSB0aGlyZCBwYXJhbWV0ZXIgaXMgbm90IGJveGVkXG5cdHZhciBwcm9wZXJseUJveGVzTm9uU3RyaWN0ID0gdHJ1ZTtcblx0dmFyIHByb3Blcmx5Qm94ZXNTdHJpY3QgPSB0cnVlO1xuXHR2YXIgdGhyZXdFeGNlcHRpb24gPSBmYWxzZTtcblx0aWYgKHR5cGVvZiBtZXRob2QgPT09ICdmdW5jdGlvbicpIHtcblx0XHR0cnkge1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1wYXJhbXNcblx0XHRcdG1ldGhvZC5jYWxsKCdmJywgZnVuY3Rpb24gKF8sIF9fLCBPKSB7XG5cdFx0XHRcdGlmICh0eXBlb2YgTyAhPT0gJ29iamVjdCcpIHtcblx0XHRcdFx0XHRwcm9wZXJseUJveGVzTm9uU3RyaWN0ID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRtZXRob2QuY2FsbChcblx0XHRcdFx0W251bGxdLFxuXHRcdFx0XHRmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0J3VzZSBzdHJpY3QnO1xuXG5cdFx0XHRcdFx0cHJvcGVybHlCb3hlc1N0cmljdCA9IHR5cGVvZiB0aGlzID09PSAnc3RyaW5nJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1pbnZhbGlkLXRoaXNcblx0XHRcdFx0fSxcblx0XHRcdFx0J3gnXG5cdFx0XHQpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHRocmV3RXhjZXB0aW9uID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuICF0aHJld0V4Y2VwdGlvbiAmJiBwcm9wZXJseUJveGVzTm9uU3RyaWN0ICYmIHByb3Blcmx5Qm94ZXNTdHJpY3Q7XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLmZsYXRNYXAgfHwgaW1wbGVtZW50YXRpb247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgSXNDYWxsYWJsZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvSXNDYWxsYWJsZScpO1xudmFyIGZ1bmN0aW9uc0hhdmVOYW1lcyA9IHJlcXVpcmUoJ2Z1bmN0aW9ucy1oYXZlLW5hbWVzJykoKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9oZWxwZXJzL2NhbGxCb3VuZCcpO1xudmFyICRmdW5jdGlvblRvU3RyaW5nID0gY2FsbEJvdW5kKCdGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcnKTtcbnZhciAkc3RyaW5nTWF0Y2ggPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUubWF0Y2gnKTtcblxudmFyIGNsYXNzUmVnZXggPSAvXmNsYXNzIC87XG5cbnZhciBpc0NsYXNzID0gZnVuY3Rpb24gaXNDbGFzc0NvbnN0cnVjdG9yKGZuKSB7XG5cdGlmIChJc0NhbGxhYmxlKGZuKSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHRyeSB7XG5cdFx0dmFyIG1hdGNoID0gJHN0cmluZ01hdGNoKCRmdW5jdGlvblRvU3RyaW5nKGZuKSwgY2xhc3NSZWdleCk7XG5cdFx0cmV0dXJuICEhbWF0Y2g7XG5cdH0gY2F0Y2ggKGUpIHt9XG5cdHJldHVybiBmYWxzZTtcbn07XG5cbnZhciByZWdleCA9IC9cXHMqZnVuY3Rpb25cXHMrKFteKFxcc10qKVxccyovO1xuXG52YXIgZnVuY3Rpb25Qcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXROYW1lKCkge1xuXHRpZiAoIWlzQ2xhc3ModGhpcykgJiYgIUlzQ2FsbGFibGUodGhpcykpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdGdW5jdGlvbi5wcm90b3R5cGUubmFtZSBzaGFtIGdldHRlciBjYWxsZWQgb24gbm9uLWZ1bmN0aW9uJyk7XG5cdH1cblx0aWYgKGZ1bmN0aW9uc0hhdmVOYW1lcykge1xuXHRcdHJldHVybiB0aGlzLm5hbWU7XG5cdH1cblx0aWYgKHRoaXMgPT09IGZ1bmN0aW9uUHJvdG8pIHtcblx0XHRyZXR1cm4gJyc7XG5cdH1cblx0dmFyIHN0ciA9ICRmdW5jdGlvblRvU3RyaW5nKHRoaXMpO1xuXHR2YXIgbWF0Y2ggPSAkc3RyaW5nTWF0Y2goc3RyLCByZWdleCk7XG5cdHZhciBuYW1lID0gbWF0Y2ggJiYgbWF0Y2hbMV07XG5cdHJldHVybiBuYW1lO1xufTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoKSA6XG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gIChmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgdGhlIDpmb2N1cy12aXNpYmxlIHBvbHlmaWxsIGF0IHRoZSBnaXZlbiBzY29wZS5cbiAgICogQSBzY29wZSBpbiB0aGlzIGNhc2UgaXMgZWl0aGVyIHRoZSB0b3AtbGV2ZWwgRG9jdW1lbnQgb3IgYSBTaGFkb3cgUm9vdC5cbiAgICpcbiAgICogQHBhcmFtIHsoRG9jdW1lbnR8U2hhZG93Um9vdCl9IHNjb3BlXG4gICAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZVxuICAgKi9cbiAgZnVuY3Rpb24gYXBwbHlGb2N1c1Zpc2libGVQb2x5ZmlsbChzY29wZSkge1xuICAgIHZhciBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbiAgICB2YXIgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSBmYWxzZTtcbiAgICB2YXIgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0ID0gbnVsbDtcblxuICAgIHZhciBpbnB1dFR5cGVzV2hpdGVsaXN0ID0ge1xuICAgICAgdGV4dDogdHJ1ZSxcbiAgICAgIHNlYXJjaDogdHJ1ZSxcbiAgICAgIHVybDogdHJ1ZSxcbiAgICAgIHRlbDogdHJ1ZSxcbiAgICAgIGVtYWlsOiB0cnVlLFxuICAgICAgcGFzc3dvcmQ6IHRydWUsXG4gICAgICBudW1iZXI6IHRydWUsXG4gICAgICBkYXRlOiB0cnVlLFxuICAgICAgbW9udGg6IHRydWUsXG4gICAgICB3ZWVrOiB0cnVlLFxuICAgICAgdGltZTogdHJ1ZSxcbiAgICAgIGRhdGV0aW1lOiB0cnVlLFxuICAgICAgJ2RhdGV0aW1lLWxvY2FsJzogdHJ1ZVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBIZWxwZXIgZnVuY3Rpb24gZm9yIGxlZ2FjeSBicm93c2VycyBhbmQgaWZyYW1lcyB3aGljaCBzb21ldGltZXMgZm9jdXNcbiAgICAgKiBlbGVtZW50cyBsaWtlIGRvY3VtZW50LCBib2R5LCBhbmQgbm9uLWludGVyYWN0aXZlIFNWRy5cbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNWYWxpZEZvY3VzVGFyZ2V0KGVsKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGVsICYmXG4gICAgICAgIGVsICE9PSBkb2N1bWVudCAmJlxuICAgICAgICBlbC5ub2RlTmFtZSAhPT0gJ0hUTUwnICYmXG4gICAgICAgIGVsLm5vZGVOYW1lICE9PSAnQk9EWScgJiZcbiAgICAgICAgJ2NsYXNzTGlzdCcgaW4gZWwgJiZcbiAgICAgICAgJ2NvbnRhaW5zJyBpbiBlbC5jbGFzc0xpc3RcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB3aGV0aGVyIHRoZSBnaXZlbiBlbGVtZW50IHNob3VsZCBhdXRvbWF0aWNhbGx5IHRyaWdnZXIgdGhlXG4gICAgICogYGZvY3VzLXZpc2libGVgIGNsYXNzIGJlaW5nIGFkZGVkLCBpLmUuIHdoZXRoZXIgaXQgc2hvdWxkIGFsd2F5cyBtYXRjaFxuICAgICAqIGA6Zm9jdXMtdmlzaWJsZWAgd2hlbiBmb2N1c2VkLlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvY3VzVHJpZ2dlcnNLZXlib2FyZE1vZGFsaXR5KGVsKSB7XG4gICAgICB2YXIgdHlwZSA9IGVsLnR5cGU7XG4gICAgICB2YXIgdGFnTmFtZSA9IGVsLnRhZ05hbWU7XG5cbiAgICAgIGlmICh0YWdOYW1lID09PSAnSU5QVVQnICYmIGlucHV0VHlwZXNXaGl0ZWxpc3RbdHlwZV0gJiYgIWVsLnJlYWRPbmx5KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJiAhZWwucmVhZE9ubHkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbC5pc0NvbnRlbnRFZGl0YWJsZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCB0aGUgYGZvY3VzLXZpc2libGVgIGNsYXNzIHRvIHRoZSBnaXZlbiBlbGVtZW50IGlmIGl0IHdhcyBub3QgYWRkZWQgYnlcbiAgICAgKiB0aGUgYXV0aG9yLlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGRGb2N1c1Zpc2libGVDbGFzcyhlbCkge1xuICAgICAgaWYgKGVsLmNsYXNzTGlzdC5jb250YWlucygnZm9jdXMtdmlzaWJsZScpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2ZvY3VzLXZpc2libGUnKTtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnZGF0YS1mb2N1cy12aXNpYmxlLWFkZGVkJywgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGUgYGZvY3VzLXZpc2libGVgIGNsYXNzIGZyb20gdGhlIGdpdmVuIGVsZW1lbnQgaWYgaXQgd2FzIG5vdFxuICAgICAqIG9yaWdpbmFsbHkgYWRkZWQgYnkgdGhlIGF1dGhvci5cbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlRm9jdXNWaXNpYmxlQ2xhc3MoZWwpIHtcbiAgICAgIGlmICghZWwuaGFzQXR0cmlidXRlKCdkYXRhLWZvY3VzLXZpc2libGUtYWRkZWQnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdmb2N1cy12aXNpYmxlJyk7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtZm9jdXMtdmlzaWJsZS1hZGRlZCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElmIHRoZSBtb3N0IHJlY2VudCB1c2VyIGludGVyYWN0aW9uIHdhcyB2aWEgdGhlIGtleWJvYXJkO1xuICAgICAqIGFuZCB0aGUga2V5IHByZXNzIGRpZCBub3QgaW5jbHVkZSBhIG1ldGEsIGFsdC9vcHRpb24sIG9yIGNvbnRyb2wga2V5O1xuICAgICAqIHRoZW4gdGhlIG1vZGFsaXR5IGlzIGtleWJvYXJkLiBPdGhlcndpc2UsIHRoZSBtb2RhbGl0eSBpcyBub3Qga2V5Ym9hcmQuXG4gICAgICogQXBwbHkgYGZvY3VzLXZpc2libGVgIHRvIGFueSBjdXJyZW50IGFjdGl2ZSBlbGVtZW50IGFuZCBrZWVwIHRyYWNrXG4gICAgICogb2Ygb3VyIGtleWJvYXJkIG1vZGFsaXR5IHN0YXRlIHdpdGggYGhhZEtleWJvYXJkRXZlbnRgLlxuICAgICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uS2V5RG93bihlKSB7XG4gICAgICBpZiAoZS5tZXRhS2V5IHx8IGUuYWx0S2V5IHx8IGUuY3RybEtleSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1ZhbGlkRm9jdXNUYXJnZXQoc2NvcGUuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgYWRkRm9jdXNWaXNpYmxlQ2xhc3Moc2NvcGUuYWN0aXZlRWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElmIGF0IGFueSBwb2ludCBhIHVzZXIgY2xpY2tzIHdpdGggYSBwb2ludGluZyBkZXZpY2UsIGVuc3VyZSB0aGF0IHdlIGNoYW5nZVxuICAgICAqIHRoZSBtb2RhbGl0eSBhd2F5IGZyb20ga2V5Ym9hcmQuXG4gICAgICogVGhpcyBhdm9pZHMgdGhlIHNpdHVhdGlvbiB3aGVyZSBhIHVzZXIgcHJlc3NlcyBhIGtleSBvbiBhbiBhbHJlYWR5IGZvY3VzZWRcbiAgICAgKiBlbGVtZW50LCBhbmQgdGhlbiBjbGlja3Mgb24gYSBkaWZmZXJlbnQgZWxlbWVudCwgZm9jdXNpbmcgaXQgd2l0aCBhXG4gICAgICogcG9pbnRpbmcgZGV2aWNlLCB3aGlsZSB3ZSBzdGlsbCB0aGluayB3ZSdyZSBpbiBrZXlib2FyZCBtb2RhbGl0eS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25Qb2ludGVyRG93bihlKSB7XG4gICAgICBoYWRLZXlib2FyZEV2ZW50ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT24gYGZvY3VzYCwgYWRkIHRoZSBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgdG8gdGhlIHRhcmdldCBpZjpcbiAgICAgKiAtIHRoZSB0YXJnZXQgcmVjZWl2ZWQgZm9jdXMgYXMgYSByZXN1bHQgb2Yga2V5Ym9hcmQgbmF2aWdhdGlvbiwgb3JcbiAgICAgKiAtIHRoZSBldmVudCB0YXJnZXQgaXMgYW4gZWxlbWVudCB0aGF0IHdpbGwgbGlrZWx5IHJlcXVpcmUgaW50ZXJhY3Rpb25cbiAgICAgKiAgIHZpYSB0aGUga2V5Ym9hcmQgKGUuZy4gYSB0ZXh0IGJveClcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25Gb2N1cyhlKSB7XG4gICAgICAvLyBQcmV2ZW50IElFIGZyb20gZm9jdXNpbmcgdGhlIGRvY3VtZW50IG9yIEhUTUwgZWxlbWVudC5cbiAgICAgIGlmICghaXNWYWxpZEZvY3VzVGFyZ2V0KGUudGFyZ2V0KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChoYWRLZXlib2FyZEV2ZW50IHx8IGZvY3VzVHJpZ2dlcnNLZXlib2FyZE1vZGFsaXR5KGUudGFyZ2V0KSkge1xuICAgICAgICBhZGRGb2N1c1Zpc2libGVDbGFzcyhlLnRhcmdldCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT24gYGJsdXJgLCByZW1vdmUgdGhlIGBmb2N1cy12aXNpYmxlYCBjbGFzcyBmcm9tIHRoZSB0YXJnZXQuXG4gICAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uQmx1cihlKSB7XG4gICAgICBpZiAoIWlzVmFsaWRGb2N1c1RhcmdldChlLnRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnZm9jdXMtdmlzaWJsZScpIHx8XG4gICAgICAgIGUudGFyZ2V0Lmhhc0F0dHJpYnV0ZSgnZGF0YS1mb2N1cy12aXNpYmxlLWFkZGVkJylcbiAgICAgICkge1xuICAgICAgICAvLyBUbyBkZXRlY3QgYSB0YWIvd2luZG93IHN3aXRjaCwgd2UgbG9vayBmb3IgYSBibHVyIGV2ZW50IGZvbGxvd2VkXG4gICAgICAgIC8vIHJhcGlkbHkgYnkgYSB2aXNpYmlsaXR5IGNoYW5nZS5cbiAgICAgICAgLy8gSWYgd2UgZG9uJ3Qgc2VlIGEgdmlzaWJpbGl0eSBjaGFuZ2Ugd2l0aGluIDEwMG1zLCBpdCdzIHByb2JhYmx5IGFcbiAgICAgICAgLy8gcmVndWxhciBmb2N1cyBjaGFuZ2UuXG4gICAgICAgIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gdHJ1ZTtcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQpO1xuICAgICAgICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IGZhbHNlO1xuICAgICAgICB9LCAxMDApO1xuICAgICAgICByZW1vdmVGb2N1c1Zpc2libGVDbGFzcyhlLnRhcmdldCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSWYgdGhlIHVzZXIgY2hhbmdlcyB0YWJzLCBrZWVwIHRyYWNrIG9mIHdoZXRoZXIgb3Igbm90IHRoZSBwcmV2aW91c2x5XG4gICAgICogZm9jdXNlZCBlbGVtZW50IGhhZCAuZm9jdXMtdmlzaWJsZS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25WaXNpYmlsaXR5Q2hhbmdlKGUpIHtcbiAgICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09ICdoaWRkZW4nKSB7XG4gICAgICAgIC8vIElmIHRoZSB0YWIgYmVjb21lcyBhY3RpdmUgYWdhaW4sIHRoZSBicm93c2VyIHdpbGwgaGFuZGxlIGNhbGxpbmcgZm9jdXNcbiAgICAgICAgLy8gb24gdGhlIGVsZW1lbnQgKFNhZmFyaSBhY3R1YWxseSBjYWxscyBpdCB0d2ljZSkuXG4gICAgICAgIC8vIElmIHRoaXMgdGFiIGNoYW5nZSBjYXVzZWQgYSBibHVyIG9uIGFuIGVsZW1lbnQgd2l0aCBmb2N1cy12aXNpYmxlLFxuICAgICAgICAvLyByZS1hcHBseSB0aGUgY2xhc3Mgd2hlbiB0aGUgdXNlciBzd2l0Y2hlcyBiYWNrIHRvIHRoZSB0YWIuXG4gICAgICAgIGlmIChoYWRGb2N1c1Zpc2libGVSZWNlbnRseSkge1xuICAgICAgICAgIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGFkZEluaXRpYWxQb2ludGVyTW92ZUxpc3RlbmVycygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGdyb3VwIG9mIGxpc3RlbmVycyB0byBkZXRlY3QgdXNhZ2Ugb2YgYW55IHBvaW50aW5nIGRldmljZXMuXG4gICAgICogVGhlc2UgbGlzdGVuZXJzIHdpbGwgYmUgYWRkZWQgd2hlbiB0aGUgcG9seWZpbGwgZmlyc3QgbG9hZHMsIGFuZCBhbnl0aW1lXG4gICAgICogdGhlIHdpbmRvdyBpcyBibHVycmVkLCBzbyB0aGF0IHRoZXkgYXJlIGFjdGl2ZSB3aGVuIHRoZSB3aW5kb3cgcmVnYWluc1xuICAgICAqIGZvY3VzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZEluaXRpYWxQb2ludGVyTW92ZUxpc3RlbmVycygpIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcnVwJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUluaXRpYWxQb2ludGVyTW92ZUxpc3RlbmVycygpIHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcnVwJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIHBvbGZ5aWxsIGZpcnN0IGxvYWRzLCBhc3N1bWUgdGhlIHVzZXIgaXMgaW4ga2V5Ym9hcmQgbW9kYWxpdHkuXG4gICAgICogSWYgYW55IGV2ZW50IGlzIHJlY2VpdmVkIGZyb20gYSBwb2ludGluZyBkZXZpY2UgKGUuZy4gbW91c2UsIHBvaW50ZXIsXG4gICAgICogdG91Y2gpLCB0dXJuIG9mZiBrZXlib2FyZCBtb2RhbGl0eS5cbiAgICAgKiBUaGlzIGFjY291bnRzIGZvciBzaXR1YXRpb25zIHdoZXJlIGZvY3VzIGVudGVycyB0aGUgcGFnZSBmcm9tIHRoZSBVUkwgYmFyLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbkluaXRpYWxQb2ludGVyTW92ZShlKSB7XG4gICAgICAvLyBXb3JrIGFyb3VuZCBhIFNhZmFyaSBxdWlyayB0aGF0IGZpcmVzIGEgbW91c2Vtb3ZlIG9uIDxodG1sPiB3aGVuZXZlciB0aGVcbiAgICAgIC8vIHdpbmRvdyBibHVycywgZXZlbiBpZiB5b3UncmUgdGFiYmluZyBvdXQgb2YgdGhlIHBhZ2UuIMKvXFxfKOODhClfL8KvXG4gICAgICBpZiAoZS50YXJnZXQubm9kZU5hbWUgJiYgZS50YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2h0bWwnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaGFkS2V5Ym9hcmRFdmVudCA9IGZhbHNlO1xuICAgICAgcmVtb3ZlSW5pdGlhbFBvaW50ZXJNb3ZlTGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgLy8gRm9yIHNvbWUga2luZHMgb2Ygc3RhdGUsIHdlIGFyZSBpbnRlcmVzdGVkIGluIGNoYW5nZXMgYXQgdGhlIGdsb2JhbCBzY29wZVxuICAgIC8vIG9ubHkuIEZvciBleGFtcGxlLCBnbG9iYWwgcG9pbnRlciBpbnB1dCwgZ2xvYmFsIGtleSBwcmVzc2VzIGFuZCBnbG9iYWxcbiAgICAvLyB2aXNpYmlsaXR5IGNoYW5nZSBzaG91bGQgYWZmZWN0IHRoZSBzdGF0ZSBhdCBldmVyeSBzY29wZTpcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25LZXlEb3duLCB0cnVlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvblBvaW50ZXJEb3duLCB0cnVlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIG9uUG9pbnRlckRvd24sIHRydWUpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvblBvaW50ZXJEb3duLCB0cnVlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgb25WaXNpYmlsaXR5Q2hhbmdlLCB0cnVlKTtcblxuICAgIGFkZEluaXRpYWxQb2ludGVyTW92ZUxpc3RlbmVycygpO1xuXG4gICAgLy8gRm9yIGZvY3VzIGFuZCBibHVyLCB3ZSBzcGVjaWZpY2FsbHkgY2FyZSBhYm91dCBzdGF0ZSBjaGFuZ2VzIGluIHRoZSBsb2NhbFxuICAgIC8vIHNjb3BlLiBUaGlzIGlzIGJlY2F1c2UgZm9jdXMgLyBibHVyIGV2ZW50cyB0aGF0IG9yaWdpbmF0ZSBmcm9tIHdpdGhpbiBhXG4gICAgLy8gc2hhZG93IHJvb3QgYXJlIG5vdCByZS1kaXNwYXRjaGVkIGZyb20gdGhlIGhvc3QgZWxlbWVudCBpZiBpdCB3YXMgYWxyZWFkeVxuICAgIC8vIHRoZSBhY3RpdmUgZWxlbWVudCBpbiBpdHMgb3duIHNjb3BlOlxuICAgIHNjb3BlLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgb25Gb2N1cywgdHJ1ZSk7XG4gICAgc2NvcGUuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIG9uQmx1ciwgdHJ1ZSk7XG5cbiAgICAvLyBXZSBkZXRlY3QgdGhhdCBhIG5vZGUgaXMgYSBTaGFkb3dSb290IGJ5IGVuc3VyaW5nIHRoYXQgaXQgaXMgYVxuICAgIC8vIERvY3VtZW50RnJhZ21lbnQgYW5kIGFsc28gaGFzIGEgaG9zdCBwcm9wZXJ0eS4gVGhpcyBjaGVjayBjb3ZlcnMgbmF0aXZlXG4gICAgLy8gaW1wbGVtZW50YXRpb24gYW5kIHBvbHlmaWxsIGltcGxlbWVudGF0aW9uIHRyYW5zcGFyZW50bHkuIElmIHdlIG9ubHkgY2FyZWRcbiAgICAvLyBhYm91dCB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLCB3ZSBjb3VsZCBqdXN0IGNoZWNrIGlmIHRoZSBzY29wZSB3YXNcbiAgICAvLyBhbiBpbnN0YW5jZSBvZiBhIFNoYWRvd1Jvb3QuXG4gICAgaWYgKHNjb3BlLm5vZGVUeXBlID09PSBOb2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUgJiYgc2NvcGUuaG9zdCkge1xuICAgICAgLy8gU2luY2UgYSBTaGFkb3dSb290IGlzIGEgc3BlY2lhbCBraW5kIG9mIERvY3VtZW50RnJhZ21lbnQsIGl0IGRvZXMgbm90XG4gICAgICAvLyBoYXZlIGEgcm9vdCBlbGVtZW50IHRvIGFkZCBhIGNsYXNzIHRvLiBTbywgd2UgYWRkIHRoaXMgYXR0cmlidXRlIHRvIHRoZVxuICAgICAgLy8gaG9zdCBlbGVtZW50IGluc3RlYWQ6XG4gICAgICBzY29wZS5ob3N0LnNldEF0dHJpYnV0ZSgnZGF0YS1qcy1mb2N1cy12aXNpYmxlJywgJycpO1xuICAgIH0gZWxzZSBpZiAoc2NvcGUubm9kZVR5cGUgPT09IE5vZGUuRE9DVU1FTlRfTk9ERSkge1xuICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2pzLWZvY3VzLXZpc2libGUnKTtcbiAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtanMtZm9jdXMtdmlzaWJsZScsICcnKTtcbiAgICB9XG4gIH1cblxuICAvLyBJdCBpcyBpbXBvcnRhbnQgdG8gd3JhcCBhbGwgcmVmZXJlbmNlcyB0byBnbG9iYWwgd2luZG93IGFuZCBkb2N1bWVudCBpblxuICAvLyB0aGVzZSBjaGVja3MgdG8gc3VwcG9ydCBzZXJ2ZXItc2lkZSByZW5kZXJpbmcgdXNlIGNhc2VzXG4gIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZS9pc3N1ZXMvMTk5XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gTWFrZSB0aGUgcG9seWZpbGwgaGVscGVyIGdsb2JhbGx5IGF2YWlsYWJsZS4gVGhpcyBjYW4gYmUgdXNlZCBhcyBhIHNpZ25hbFxuICAgIC8vIHRvIGludGVyZXN0ZWQgbGlicmFyaWVzIHRoYXQgd2lzaCB0byBjb29yZGluYXRlIHdpdGggdGhlIHBvbHlmaWxsIGZvciBlLmcuLFxuICAgIC8vIGFwcGx5aW5nIHRoZSBwb2x5ZmlsbCB0byBhIHNoYWRvdyByb290OlxuICAgIHdpbmRvdy5hcHBseUZvY3VzVmlzaWJsZVBvbHlmaWxsID0gYXBwbHlGb2N1c1Zpc2libGVQb2x5ZmlsbDtcblxuICAgIC8vIE5vdGlmeSBpbnRlcmVzdGVkIGxpYnJhcmllcyBvZiB0aGUgcG9seWZpbGwncyBwcmVzZW5jZSwgaW4gY2FzZSB0aGVcbiAgICAvLyBwb2x5ZmlsbCB3YXMgbG9hZGVkIGxhemlseTpcbiAgICB2YXIgZXZlbnQ7XG5cbiAgICB0cnkge1xuICAgICAgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ2ZvY3VzLXZpc2libGUtcG9seWZpbGwtcmVhZHknKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gSUUxMSBkb2VzIG5vdCBzdXBwb3J0IHVzaW5nIEN1c3RvbUV2ZW50IGFzIGEgY29uc3RydWN0b3IgZGlyZWN0bHk6XG4gICAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICAgICAgZXZlbnQuaW5pdEN1c3RvbUV2ZW50KCdmb2N1cy12aXNpYmxlLXBvbHlmaWxsLXJlYWR5JywgZmFsc2UsIGZhbHNlLCB7fSk7XG4gICAgfVxuXG4gICAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBBcHBseSB0aGUgcG9seWZpbGwgdG8gdGhlIGdsb2JhbCBkb2N1bWVudCwgc28gdGhhdCBubyBKYXZhU2NyaXB0XG4gICAgLy8gY29vcmRpbmF0aW9uIGlzIHJlcXVpcmVkIHRvIHVzZSB0aGUgcG9seWZpbGwgaW4gdGhlIHRvcC1sZXZlbCBkb2N1bWVudDpcbiAgICBhcHBseUZvY3VzVmlzaWJsZVBvbHlmaWxsKGRvY3VtZW50KTtcbiAgfVxuXG59KSkpO1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIoZnVuY3Rpb24oKSB7XG4gIFwidXNlIHN0cmljdFwiXG5cbiAgaWYgKCFzZWxmLmRvY3VtZW50KSByZXR1cm5cblxuICB2YXIgZXZlbnQgPSBLZXlib2FyZEV2ZW50LnByb3RvdHlwZVxuICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZXZlbnQsIFwia2V5XCIpXG4gIGlmICghZGVzYykgcmV0dXJuXG5cbiAgdmFyIGtleXMgPSB7XG4gICAgV2luOiBcIk1ldGFcIixcbiAgICBTY3JvbGw6IFwiU2Nyb2xsTG9ja1wiLFxuICAgIFNwYWNlYmFyOiBcIiBcIixcblxuICAgIERvd246IFwiQXJyb3dEb3duXCIsXG4gICAgTGVmdDogXCJBcnJvd0xlZnRcIixcbiAgICBSaWdodDogXCJBcnJvd1JpZ2h0XCIsXG4gICAgVXA6IFwiQXJyb3dVcFwiLFxuXG4gICAgRGVsOiBcIkRlbGV0ZVwiLFxuICAgIEFwcHM6IFwiQ29udGV4dE1lbnVcIixcbiAgICBFc2M6IFwiRXNjYXBlXCIsXG5cbiAgICBNdWx0aXBseTogXCIqXCIsXG4gICAgQWRkOiBcIitcIixcbiAgICBTdWJ0cmFjdDogXCItXCIsXG4gICAgRGVjaW1hbDogXCIuXCIsXG4gICAgRGl2aWRlOiBcIi9cIixcbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShldmVudCwgXCJrZXlcIiwge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIga2V5ID0gZGVzYy5nZXQuY2FsbCh0aGlzKVxuXG4gICAgICByZXR1cm4ga2V5cy5oYXNPd25Qcm9wZXJ0eShrZXkpID8ga2V5c1trZXldIDoga2V5XG4gICAgfSxcbiAgfSlcbn0pKClcbiIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NsYXNzQ2FsbENoZWNrOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIEl0ZXJhdG9yQ29tcGxldGUgPSByZXF1aXJlKCcuL0l0ZXJhdG9yQ29tcGxldGUnKTtcbnZhciBJdGVyYXRvck5leHQgPSByZXF1aXJlKCcuL0l0ZXJhdG9yTmV4dCcpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaXRlcmF0b3JzdGVwXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSXRlcmF0b3JTdGVwKGl0ZXJhdG9yKSB7XG5cdHZhciByZXN1bHQgPSBJdGVyYXRvck5leHQoaXRlcmF0b3IpO1xuXHR2YXIgZG9uZSA9IEl0ZXJhdG9yQ29tcGxldGUocmVzdWx0KTtcblx0cmV0dXJuIGRvbmUgPT09IHRydWUgPyBmYWxzZSA6IHJlc3VsdDtcbn07XG5cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSByZXF1aXJlKCcuLi9oZWxwZXJzL21heFNhZmVJbnRlZ2VyJyk7XG5cbnZhciBDYWxsID0gcmVxdWlyZSgnLi9DYWxsJyk7XG52YXIgQ3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdyA9IHJlcXVpcmUoJy4vQ3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdycpO1xudmFyIEdldCA9IHJlcXVpcmUoJy4vR2V0Jyk7XG52YXIgSGFzUHJvcGVydHkgPSByZXF1aXJlKCcuL0hhc1Byb3BlcnR5Jyk7XG52YXIgSXNBcnJheSA9IHJlcXVpcmUoJy4vSXNBcnJheScpO1xudmFyIFRvTGVuZ3RoID0gcmVxdWlyZSgnLi9Ub0xlbmd0aCcpO1xudmFyIFRvU3RyaW5nID0gcmVxdWlyZSgnLi9Ub1N0cmluZycpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvMTAuMC8jc2VjLWZsYXR0ZW5pbnRvYXJyYXlcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1wYXJhbXMsIG1heC1zdGF0ZW1lbnRzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBzb3VyY2UsIHNvdXJjZUxlbiwgc3RhcnQsIGRlcHRoKSB7XG5cdHZhciBtYXBwZXJGdW5jdGlvbjtcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiA1KSB7XG5cdFx0bWFwcGVyRnVuY3Rpb24gPSBhcmd1bWVudHNbNV07XG5cdH1cblxuXHR2YXIgdGFyZ2V0SW5kZXggPSBzdGFydDtcblx0dmFyIHNvdXJjZUluZGV4ID0gMDtcblx0d2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG5cdFx0dmFyIFAgPSBUb1N0cmluZyhzb3VyY2VJbmRleCk7XG5cdFx0dmFyIGV4aXN0cyA9IEhhc1Byb3BlcnR5KHNvdXJjZSwgUCk7XG5cdFx0aWYgKGV4aXN0cyA9PT0gdHJ1ZSkge1xuXHRcdFx0dmFyIGVsZW1lbnQgPSBHZXQoc291cmNlLCBQKTtcblx0XHRcdGlmICh0eXBlb2YgbWFwcGVyRnVuY3Rpb24gIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdGlmIChhcmd1bWVudHMubGVuZ3RoIDw9IDYpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogdGhpc0FyZyBpcyByZXF1aXJlZCB3aGVuIG1hcHBlckZ1bmN0aW9uIGlzIHByb3ZpZGVkJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxlbWVudCA9IENhbGwobWFwcGVyRnVuY3Rpb24sIGFyZ3VtZW50c1s2XSwgW2VsZW1lbnQsIHNvdXJjZUluZGV4LCBzb3VyY2VdKTtcblx0XHRcdH1cblx0XHRcdHZhciBzaG91bGRGbGF0dGVuID0gZmFsc2U7XG5cdFx0XHRpZiAoZGVwdGggPiAwKSB7XG5cdFx0XHRcdHNob3VsZEZsYXR0ZW4gPSBJc0FycmF5KGVsZW1lbnQpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHNob3VsZEZsYXR0ZW4pIHtcblx0XHRcdFx0dmFyIGVsZW1lbnRMZW4gPSBUb0xlbmd0aChHZXQoZWxlbWVudCwgJ2xlbmd0aCcpKTtcblx0XHRcdFx0dGFyZ2V0SW5kZXggPSBGbGF0dGVuSW50b0FycmF5KHRhcmdldCwgZWxlbWVudCwgZWxlbWVudExlbiwgdGFyZ2V0SW5kZXgsIGRlcHRoIC0gMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAodGFyZ2V0SW5kZXggPj0gTUFYX1NBRkVfSU5URUdFUikge1xuXHRcdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpbmRleCB0b28gbGFyZ2UnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRDcmVhdGVEYXRhUHJvcGVydHlPclRocm93KHRhcmdldCwgVG9TdHJpbmcodGFyZ2V0SW5kZXgpLCBlbGVtZW50KTtcblx0XHRcdFx0dGFyZ2V0SW5kZXggKz0gMTtcblx0XHRcdH1cblx0XHR9XG5cdFx0c291cmNlSW5kZXggKz0gMTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXRJbmRleDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scycpKCk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgcmVnZXhwTWF0Y2hBbGxQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwtcmVnZXhwLW1hdGNoYWxsJyk7XG5cbnZhciBkZWZpbmVQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1NYXRjaEFsbCgpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKFxuXHRcdFN0cmluZy5wcm90b3R5cGUsXG5cdFx0eyBtYXRjaEFsbDogcG9seWZpbGwgfSxcblx0XHR7IG1hdGNoQWxsOiBmdW5jdGlvbiAoKSB7IHJldHVybiBTdHJpbmcucHJvdG90eXBlLm1hdGNoQWxsICE9PSBwb2x5ZmlsbDsgfSB9XG5cdCk7XG5cdGlmIChoYXNTeW1ib2xzKSB7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllc1xuXHRcdHZhciBzeW1ib2wgPSBTeW1ib2wubWF0Y2hBbGwgfHwgKFN5bWJvbFsnZm9yJ10gPyBTeW1ib2xbJ2ZvciddKCdTeW1ib2wubWF0Y2hBbGwnKSA6IFN5bWJvbCgnU3ltYm9sLm1hdGNoQWxsJykpO1xuXHRcdGRlZmluZShcblx0XHRcdFN5bWJvbCxcblx0XHRcdHsgbWF0Y2hBbGw6IHN5bWJvbCB9LFxuXHRcdFx0eyBtYXRjaEFsbDogZnVuY3Rpb24gKCkgeyByZXR1cm4gU3ltYm9sLm1hdGNoQWxsICE9PSBzeW1ib2w7IH0gfVxuXHRcdCk7XG5cblx0XHRpZiAoZGVmaW5lUCAmJiBnT1BEKSB7XG5cdFx0XHR2YXIgZGVzYyA9IGdPUEQoU3ltYm9sLCBzeW1ib2wpO1xuXHRcdFx0aWYgKCFkZXNjIHx8IGRlc2MuY29uZmlndXJhYmxlKSB7XG5cdFx0XHRcdGRlZmluZVAoU3ltYm9sLCBzeW1ib2wsIHtcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuXHRcdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRcdHZhbHVlOiBzeW1ib2wsXG5cdFx0XHRcdFx0d3JpdGFibGU6IGZhbHNlXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciByZWdleHBNYXRjaEFsbCA9IHJlZ2V4cE1hdGNoQWxsUG9seWZpbGwoKTtcblx0XHR2YXIgZnVuYyA9IHt9O1xuXHRcdGZ1bmNbc3ltYm9sXSA9IHJlZ2V4cE1hdGNoQWxsO1xuXHRcdHZhciBwcmVkaWNhdGUgPSB7fTtcblx0XHRwcmVkaWNhdGVbc3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBSZWdFeHAucHJvdG90eXBlW3N5bWJvbF0gIT09IHJlZ2V4cE1hdGNoQWxsO1xuXHRcdH07XG5cdFx0ZGVmaW5lKFJlZ0V4cC5wcm90b3R5cGUsIGZ1bmMsIHByZWRpY2F0ZSk7XG5cdH1cblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb250YWlucyhvdGhlcikge1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDEpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCcxIGFyZ3VtZW50IGlzIHJlcXVpcmVkJyk7XG5cdH1cblx0aWYgKHR5cGVvZiBvdGhlciAhPT0gJ29iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCAxICjigJ1vdGhlcuKAnCkgdG8gTm9kZS5jb250YWlucyBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIE5vZGUnKTtcblx0fVxuXG5cdHZhciBub2RlID0gb3RoZXI7XG5cdGRvIHtcblx0XHRpZiAodGhpcyA9PT0gbm9kZSkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdGlmIChub2RlKSB7XG5cdFx0XHRub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuXHRcdH1cblx0fSB3aGlsZSAobm9kZSk7XG5cblx0cmV0dXJuIGZhbHNlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi9zaGltJykoKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIEdldCA9IHJlcXVpcmUoJy4vR2V0Jyk7XG52YXIgVG9Cb29sZWFuID0gcmVxdWlyZSgnLi9Ub0Jvb2xlYW4nKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1pdGVyYXRvcmNvbXBsZXRlXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSXRlcmF0b3JDb21wbGV0ZShpdGVyUmVzdWx0KSB7XG5cdGlmIChUeXBlKGl0ZXJSZXN1bHQpICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKGl0ZXJSZXN1bHQpIGlzIG5vdCBPYmplY3QnKTtcblx0fVxuXHRyZXR1cm4gVG9Cb29sZWFuKEdldChpdGVyUmVzdWx0LCAnZG9uZScpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgUmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvUmVxdWlyZU9iamVjdENvZXJjaWJsZScpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L2hlbHBlcnMvY2FsbEJvdW5kJyk7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbnZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG52YXIgc2hpbSA9IHJlcXVpcmUoJy4vc2hpbScpO1xuXG52YXIgJHNsaWNlID0gY2FsbEJvdW5kKCdBcnJheS5wcm90b3R5cGUuc2xpY2UnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG52YXIgYm91bmRNYXBTaGltID0gZnVuY3Rpb24gbWFwKGFycmF5LCBjYWxsYmFja2ZuKSB7XG5cdFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJyYXkpO1xuXHRyZXR1cm4gcG9seWZpbGwuYXBwbHkoYXJyYXksICRzbGljZShhcmd1bWVudHMsIDEpKTtcbn07XG5kZWZpbmUoYm91bmRNYXBTaGltLCB7XG5cdGdldFBvbHlmaWxsOiBnZXRQb2x5ZmlsbCxcblx0aW1wbGVtZW50YXRpb246IGltcGxlbWVudGF0aW9uLFxuXHRzaGltOiBzaGltXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBib3VuZE1hcFNoaW07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBHZXQgPSByZXF1aXJlKCcuL0dldCcpO1xudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWl0ZXJhdG9ydmFsdWVcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBJdGVyYXRvclZhbHVlKGl0ZXJSZXN1bHQpIHtcblx0aWYgKFR5cGUoaXRlclJlc3VsdCkgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFR5cGUoaXRlclJlc3VsdCkgaXMgbm90IE9iamVjdCcpO1xuXHR9XG5cdHJldHVybiBHZXQoaXRlclJlc3VsdCwgJ3ZhbHVlJyk7XG59O1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRBcnJheSA9IEdldEludHJpbnNpYygnJUFycmF5JScpO1xudmFyICRzcGVjaWVzID0gR2V0SW50cmluc2ljKCclU3ltYm9sLnNwZWNpZXMlJywgdHJ1ZSk7XG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIEdldCA9IHJlcXVpcmUoJy4vR2V0Jyk7XG52YXIgSXNBcnJheSA9IHJlcXVpcmUoJy4vSXNBcnJheScpO1xudmFyIElzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL0lzQ29uc3RydWN0b3InKTtcbnZhciBJc0ludGVnZXIgPSByZXF1aXJlKCcuL0lzSW50ZWdlcicpO1xudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWFycmF5c3BlY2llc2NyZWF0ZVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcblx0aWYgKCFJc0ludGVnZXIobGVuZ3RoKSB8fCBsZW5ndGggPCAwKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGxlbmd0aCBtdXN0IGJlIGFuIGludGVnZXIgPj0gMCcpO1xuXHR9XG5cdHZhciBsZW4gPSBsZW5ndGggPT09IDAgPyAwIDogbGVuZ3RoO1xuXHR2YXIgQztcblx0dmFyIGlzQXJyYXkgPSBJc0FycmF5KG9yaWdpbmFsQXJyYXkpO1xuXHRpZiAoaXNBcnJheSkge1xuXHRcdEMgPSBHZXQob3JpZ2luYWxBcnJheSwgJ2NvbnN0cnVjdG9yJyk7XG5cdFx0Ly8gVE9ETzogZmlndXJlIG91dCBob3cgdG8gbWFrZSBhIGNyb3NzLXJlYWxtIG5vcm1hbCBBcnJheSwgYSBzYW1lLXJlYWxtIEFycmF5XG5cdFx0Ly8gaWYgKElzQ29uc3RydWN0b3IoQykpIHtcblx0XHQvLyBcdGlmIEMgaXMgYW5vdGhlciByZWFsbSdzIEFycmF5LCBDID0gdW5kZWZpbmVkXG5cdFx0Ly8gXHRPYmplY3QuZ2V0UHJvdG90eXBlT2YoT2JqZWN0LmdldFByb3RvdHlwZU9mKE9iamVjdC5nZXRQcm90b3R5cGVPZihBcnJheSkpKSA9PT0gbnVsbCA/XG5cdFx0Ly8gfVxuXHRcdGlmICgkc3BlY2llcyAmJiBUeXBlKEMpID09PSAnT2JqZWN0Jykge1xuXHRcdFx0QyA9IEdldChDLCAkc3BlY2llcyk7XG5cdFx0XHRpZiAoQyA9PT0gbnVsbCkge1xuXHRcdFx0XHRDID0gdm9pZCAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRpZiAodHlwZW9mIEMgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuICRBcnJheShsZW4pO1xuXHR9XG5cdGlmICghSXNDb25zdHJ1Y3RvcihDKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdDIG11c3QgYmUgYSBjb25zdHJ1Y3RvcicpO1xuXHR9XG5cdHJldHVybiBuZXcgQyhsZW4pOyAvLyBDb25zdHJ1Y3QoQywgbGVuKTtcbn07XG5cbiIsIi8qIVxuICogaHR0cHM6Ly9naXRodWIuY29tL3BhdWxtaWxsci9lczYtc2hpbVxuICogQGxpY2Vuc2UgZXM2LXNoaW0gQ29weXJpZ2h0IDIwMTMtMjAxNiBieSBQYXVsIE1pbGxlciAoaHR0cDovL3BhdWxtaWxsci5jb20pXG4gKiAgIGFuZCBjb250cmlidXRvcnMsICBNSVQgTGljZW5zZVxuICogZXM2LXNoaW06IHYwLjM1LjRcbiAqIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGF1bG1pbGxyL2VzNi1zaGltL2Jsb2IvMC4zNS4zL0xJQ0VOU0VcbiAqIERldGFpbHMgYW5kIGRvY3VtZW50YXRpb246XG4gKiBodHRwczovL2dpdGh1Yi5jb20vcGF1bG1pbGxyL2VzNi1zaGltL1xuICovXG5cbi8vIFVNRCAoVW5pdmVyc2FsIE1vZHVsZSBEZWZpbml0aW9uKVxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91bWRqcy91bWQvYmxvYi9tYXN0ZXIvcmV0dXJuRXhwb3J0cy5qc1xuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gIC8qZ2xvYmFsIGRlZmluZSwgbW9kdWxlLCBleHBvcnRzICovXG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgZGVmaW5lKGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIC8vIE5vZGUuIERvZXMgbm90IHdvcmsgd2l0aCBzdHJpY3QgQ29tbW9uSlMsIGJ1dFxuICAgIC8vIG9ubHkgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgdGhhdCBzdXBwb3J0IG1vZHVsZS5leHBvcnRzLFxuICAgIC8vIGxpa2UgTm9kZS5cbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBCcm93c2VyIGdsb2JhbHMgKHJvb3QgaXMgd2luZG93KVxuICAgIHJvb3QucmV0dXJuRXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfVxufSh0aGlzLCBmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgX2FwcGx5ID0gRnVuY3Rpb24uY2FsbC5iaW5kKEZ1bmN0aW9uLmFwcGx5KTtcbiAgdmFyIF9jYWxsID0gRnVuY3Rpb24uY2FsbC5iaW5kKEZ1bmN0aW9uLmNhbGwpO1xuICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXM7XG5cbiAgdmFyIG5vdCA9IGZ1bmN0aW9uIG5vdFRodW5rZXIoZnVuYykge1xuICAgIHJldHVybiBmdW5jdGlvbiBub3RUaHVuaygpIHtcbiAgICAgIHJldHVybiAhX2FwcGx5KGZ1bmMsIHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfTtcbiAgdmFyIHRocm93c0Vycm9yID0gZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICB0cnkge1xuICAgICAgZnVuYygpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfTtcbiAgdmFyIHZhbHVlT3JGYWxzZUlmVGhyb3dzID0gZnVuY3Rpb24gdmFsdWVPckZhbHNlSWZUaHJvd3MoZnVuYykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuYygpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQ2FsbGFibGVXaXRob3V0TmV3ID0gbm90KHRocm93c0Vycm9yKTtcbiAgdmFyIGFyZVByb3BlcnR5RGVzY3JpcHRvcnNTdXBwb3J0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gaWYgT2JqZWN0LmRlZmluZVByb3BlcnR5IGV4aXN0cyBidXQgdGhyb3dzLCBpdCdzIElFIDhcbiAgICByZXR1cm4gIXRocm93c0Vycm9yKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICd4JywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgfSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBnZXR0ZXItcmV0dXJuXG4gICAgfSk7XG4gIH07XG4gIHZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gISFPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgYXJlUHJvcGVydHlEZXNjcmlwdG9yc1N1cHBvcnRlZCgpO1xuICB2YXIgZnVuY3Rpb25zSGF2ZU5hbWVzID0gKGZ1bmN0aW9uIGZvbygpIHt9KS5uYW1lID09PSAnZm9vJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1leHRyYS1wYXJlbnNcblxuICB2YXIgX2ZvckVhY2ggPSBGdW5jdGlvbi5jYWxsLmJpbmQoQXJyYXkucHJvdG90eXBlLmZvckVhY2gpO1xuICB2YXIgX3JlZHVjZSA9IEZ1bmN0aW9uLmNhbGwuYmluZChBcnJheS5wcm90b3R5cGUucmVkdWNlKTtcbiAgdmFyIF9maWx0ZXIgPSBGdW5jdGlvbi5jYWxsLmJpbmQoQXJyYXkucHJvdG90eXBlLmZpbHRlcik7XG4gIHZhciBfc29tZSA9IEZ1bmN0aW9uLmNhbGwuYmluZChBcnJheS5wcm90b3R5cGUuc29tZSk7XG5cbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgdmFsdWUsIGZvcmNlKSB7XG4gICAgaWYgKCFmb3JjZSAmJiBuYW1lIGluIG9iamVjdCkgeyByZXR1cm47IH1cbiAgICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgbmFtZSwge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqZWN0W25hbWVdID0gdmFsdWU7XG4gICAgfVxuICB9O1xuXG4gIC8vIERlZmluZSBjb25maWd1cmFibGUsIHdyaXRhYmxlIGFuZCBub24tZW51bWVyYWJsZSBwcm9wc1xuICAvLyBpZiB0aGV5IGRvbuKAmXQgZXhpc3QuXG4gIHZhciBkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9iamVjdCwgbWFwLCBmb3JjZU92ZXJyaWRlKSB7XG4gICAgX2ZvckVhY2goa2V5cyhtYXApLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIG1ldGhvZCA9IG1hcFtuYW1lXTtcbiAgICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwgbmFtZSwgbWV0aG9kLCAhIWZvcmNlT3ZlcnJpZGUpO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBfdG9TdHJpbmcgPSBGdW5jdGlvbi5jYWxsLmJpbmQoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyk7XG4gIHZhciBpc0NhbGxhYmxlID0gdHlwZW9mIC9hYmMvID09PSAnZnVuY3Rpb24nID8gZnVuY3Rpb24gSXNDYWxsYWJsZVNsb3coeCkge1xuICAgIC8vIFNvbWUgb2xkIGJyb3dzZXJzIChJRSwgRkYpIHNheSB0aGF0IHR5cGVvZiAvYWJjLyA9PT0gJ2Z1bmN0aW9uJ1xuICAgIHJldHVybiB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJyAmJiBfdG9TdHJpbmcoeCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG4gIH0gOiBmdW5jdGlvbiBJc0NhbGxhYmxlRmFzdCh4KSB7IHJldHVybiB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJzsgfTtcblxuICB2YXIgVmFsdWUgPSB7XG4gICAgZ2V0dGVyOiBmdW5jdGlvbiAob2JqZWN0LCBuYW1lLCBnZXR0ZXIpIHtcbiAgICAgIGlmICghc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdnZXR0ZXJzIHJlcXVpcmUgdHJ1ZSBFUzUgc3VwcG9ydCcpO1xuICAgICAgfVxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgbmFtZSwge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBnZXQ6IGdldHRlclxuICAgICAgfSk7XG4gICAgfSxcbiAgICBwcm94eTogZnVuY3Rpb24gKG9yaWdpbmFsT2JqZWN0LCBrZXksIHRhcmdldE9iamVjdCkge1xuICAgICAgaWYgKCFzdXBwb3J0c0Rlc2NyaXB0b3JzKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2dldHRlcnMgcmVxdWlyZSB0cnVlIEVTNSBzdXBwb3J0Jyk7XG4gICAgICB9XG4gICAgICB2YXIgb3JpZ2luYWxEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvcmlnaW5hbE9iamVjdCwga2V5KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXRPYmplY3QsIGtleSwge1xuICAgICAgICBjb25maWd1cmFibGU6IG9yaWdpbmFsRGVzY3JpcHRvci5jb25maWd1cmFibGUsXG4gICAgICAgIGVudW1lcmFibGU6IG9yaWdpbmFsRGVzY3JpcHRvci5lbnVtZXJhYmxlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldEtleSgpIHsgcmV0dXJuIG9yaWdpbmFsT2JqZWN0W2tleV07IH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0S2V5KHZhbHVlKSB7IG9yaWdpbmFsT2JqZWN0W2tleV0gPSB2YWx1ZTsgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICByZWRlZmluZTogZnVuY3Rpb24gKG9iamVjdCwgcHJvcGVydHksIG5ld1ZhbHVlKSB7XG4gICAgICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7XG4gICAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIGRlc2NyaXB0b3IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0W3Byb3BlcnR5XSA9IG5ld1ZhbHVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVmaW5lQnlEZXNjcmlwdG9yOiBmdW5jdGlvbiAob2JqZWN0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvcikge1xuICAgICAgaWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIGRlc2NyaXB0b3IpO1xuICAgICAgfSBlbHNlIGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgb2JqZWN0W3Byb3BlcnR5XSA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBwcmVzZXJ2ZVRvU3RyaW5nOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICAgIGlmIChzb3VyY2UgJiYgaXNDYWxsYWJsZShzb3VyY2UudG9TdHJpbmcpKSB7XG4gICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwgJ3RvU3RyaW5nJywgc291cmNlLnRvU3RyaW5nLmJpbmQoc291cmNlKSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIFNpbXBsZSBzaGltIGZvciBPYmplY3QuY3JlYXRlIG9uIEVTMyBicm93c2Vyc1xuICAvLyAodW5saWtlIHJlYWwgc2hpbSwgbm8gYXR0ZW1wdCB0byBzdXBwb3J0IGBwcm90b3R5cGUgPT09IG51bGxgKVxuICB2YXIgY3JlYXRlID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiAocHJvdG90eXBlLCBwcm9wZXJ0aWVzKSB7XG4gICAgdmFyIFByb3RvdHlwZSA9IGZ1bmN0aW9uIFByb3RvdHlwZSgpIHt9O1xuICAgIFByb3RvdHlwZS5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gICAgdmFyIG9iamVjdCA9IG5ldyBQcm90b3R5cGUoKTtcbiAgICBpZiAodHlwZW9mIHByb3BlcnRpZXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBrZXlzKHByb3BlcnRpZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBWYWx1ZS5kZWZpbmVCeURlc2NyaXB0b3Iob2JqZWN0LCBrZXksIHByb3BlcnRpZXNba2V5XSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfTtcblxuICB2YXIgc3VwcG9ydHNTdWJjbGFzc2luZyA9IGZ1bmN0aW9uIChDLCBmKSB7XG4gICAgaWYgKCFPYmplY3Quc2V0UHJvdG90eXBlT2YpIHsgcmV0dXJuIGZhbHNlOyAvKiBza2lwIHRlc3Qgb24gSUUgPCAxMSAqLyB9XG4gICAgcmV0dXJuIHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBTdWIgPSBmdW5jdGlvbiBTdWJjbGFzcyhhcmcpIHtcbiAgICAgICAgdmFyIG8gPSBuZXcgQyhhcmcpO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YobywgU3ViY2xhc3MucHJvdG90eXBlKTtcbiAgICAgICAgcmV0dXJuIG87XG4gICAgICB9O1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKFN1YiwgQyk7XG4gICAgICBTdWIucHJvdG90eXBlID0gY3JlYXRlKEMucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBTdWIgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZihTdWIpO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnZXRHbG9iYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgLyogZ2xvYmFsIHNlbGYsIHdpbmRvdywgZ2xvYmFsICovXG4gICAgLy8gdGhlIG9ubHkgcmVsaWFibGUgbWVhbnMgdG8gZ2V0IHRoZSBnbG9iYWwgb2JqZWN0IGlzXG4gICAgLy8gYEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKClgXG4gICAgLy8gSG93ZXZlciwgdGhpcyBjYXVzZXMgQ1NQIHZpb2xhdGlvbnMgaW4gQ2hyb21lIGFwcHMuXG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykgeyByZXR1cm4gc2VsZjsgfVxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykgeyByZXR1cm4gd2luZG93OyB9XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7IHJldHVybiBnbG9iYWw7IH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBsb2NhdGUgZ2xvYmFsIG9iamVjdCcpO1xuICB9O1xuXG4gIHZhciBnbG9iYWxzID0gZ2V0R2xvYmFsKCk7XG4gIHZhciBnbG9iYWxJc0Zpbml0ZSA9IGdsb2JhbHMuaXNGaW5pdGU7XG4gIHZhciBfaW5kZXhPZiA9IEZ1bmN0aW9uLmNhbGwuYmluZChTdHJpbmcucHJvdG90eXBlLmluZGV4T2YpO1xuICB2YXIgX2FycmF5SW5kZXhPZkFwcGx5ID0gRnVuY3Rpb24uYXBwbHkuYmluZChBcnJheS5wcm90b3R5cGUuaW5kZXhPZik7XG4gIHZhciBfY29uY2F0ID0gRnVuY3Rpb24uY2FsbC5iaW5kKEFycmF5LnByb3RvdHlwZS5jb25jYXQpO1xuICAvLyB2YXIgX3NvcnQgPSBGdW5jdGlvbi5jYWxsLmJpbmQoQXJyYXkucHJvdG90eXBlLnNvcnQpO1xuICB2YXIgX3N0clNsaWNlID0gRnVuY3Rpb24uY2FsbC5iaW5kKFN0cmluZy5wcm90b3R5cGUuc2xpY2UpO1xuICB2YXIgX3B1c2ggPSBGdW5jdGlvbi5jYWxsLmJpbmQoQXJyYXkucHJvdG90eXBlLnB1c2gpO1xuICB2YXIgX3B1c2hBcHBseSA9IEZ1bmN0aW9uLmFwcGx5LmJpbmQoQXJyYXkucHJvdG90eXBlLnB1c2gpO1xuICB2YXIgX3NoaWZ0ID0gRnVuY3Rpb24uY2FsbC5iaW5kKEFycmF5LnByb3RvdHlwZS5zaGlmdCk7XG4gIHZhciBfbWF4ID0gTWF0aC5tYXg7XG4gIHZhciBfbWluID0gTWF0aC5taW47XG4gIHZhciBfZmxvb3IgPSBNYXRoLmZsb29yO1xuICB2YXIgX2FicyA9IE1hdGguYWJzO1xuICB2YXIgX2V4cCA9IE1hdGguZXhwO1xuICB2YXIgX2xvZyA9IE1hdGgubG9nO1xuICB2YXIgX3NxcnQgPSBNYXRoLnNxcnQ7XG4gIHZhciBfaGFzT3duUHJvcGVydHkgPSBGdW5jdGlvbi5jYWxsLmJpbmQoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSk7XG4gIHZhciBBcnJheUl0ZXJhdG9yOyAvLyBtYWtlIG91ciBpbXBsZW1lbnRhdGlvbiBwcml2YXRlXG4gIHZhciBub29wID0gZnVuY3Rpb24gKCkge307XG5cbiAgdmFyIE9yaWdNYXAgPSBnbG9iYWxzLk1hcDtcbiAgdmFyIG9yaWdNYXBEZWxldGUgPSBPcmlnTWFwICYmIE9yaWdNYXAucHJvdG90eXBlWydkZWxldGUnXTtcbiAgdmFyIG9yaWdNYXBHZXQgPSBPcmlnTWFwICYmIE9yaWdNYXAucHJvdG90eXBlLmdldDtcbiAgdmFyIG9yaWdNYXBIYXMgPSBPcmlnTWFwICYmIE9yaWdNYXAucHJvdG90eXBlLmhhcztcbiAgdmFyIG9yaWdNYXBTZXQgPSBPcmlnTWFwICYmIE9yaWdNYXAucHJvdG90eXBlLnNldDtcblxuICB2YXIgU3ltYm9sID0gZ2xvYmFscy5TeW1ib2wgfHwge307XG4gIHZhciBzeW1ib2xTcGVjaWVzID0gU3ltYm9sLnNwZWNpZXMgfHwgJ0BAc3BlY2llcyc7XG5cbiAgdmFyIG51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XG4gICAgLy8gTmFOICE9PSBOYU4sIGJ1dCB0aGV5IGFyZSBpZGVudGljYWwuXG4gICAgLy8gTmFOcyBhcmUgdGhlIG9ubHkgbm9uLXJlZmxleGl2ZSB2YWx1ZSwgaS5lLiwgaWYgeCAhPT0geCxcbiAgICAvLyB0aGVuIHggaXMgTmFOLlxuICAgIC8vIGlzTmFOIGlzIGJyb2tlbjogaXQgY29udmVydHMgaXRzIGFyZ3VtZW50IHRvIG51bWJlciwgc29cbiAgICAvLyBpc05hTignZm9vJykgPT4gdHJ1ZVxuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG4gIH07XG4gIHZhciBudW1iZXJJc0Zpbml0ZSA9IE51bWJlci5pc0Zpbml0ZSB8fCBmdW5jdGlvbiBpc0Zpbml0ZSh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIGdsb2JhbElzRmluaXRlKHZhbHVlKTtcbiAgfTtcbiAgdmFyIF9zaWduID0gaXNDYWxsYWJsZShNYXRoLnNpZ24pID8gTWF0aC5zaWduIDogZnVuY3Rpb24gc2lnbih2YWx1ZSkge1xuICAgIHZhciBudW1iZXIgPSBOdW1iZXIodmFsdWUpO1xuICAgIGlmIChudW1iZXIgPT09IDApIHsgcmV0dXJuIG51bWJlcjsgfVxuICAgIGlmIChudW1iZXJJc05hTihudW1iZXIpKSB7IHJldHVybiBudW1iZXI7IH1cbiAgICByZXR1cm4gbnVtYmVyIDwgMCA/IC0xIDogMTtcbiAgfTtcbiAgdmFyIF9sb2cxcCA9IGZ1bmN0aW9uIGxvZzFwKHZhbHVlKSB7XG4gICAgdmFyIHggPSBOdW1iZXIodmFsdWUpO1xuICAgIGlmICh4IDwgLTEgfHwgbnVtYmVySXNOYU4oeCkpIHsgcmV0dXJuIE5hTjsgfVxuICAgIGlmICh4ID09PSAwIHx8IHggPT09IEluZmluaXR5KSB7IHJldHVybiB4OyB9XG4gICAgaWYgKHggPT09IC0xKSB7IHJldHVybiAtSW5maW5pdHk7IH1cblxuICAgIHJldHVybiAoMSArIHgpIC0gMSA9PT0gMCA/IHggOiB4ICogKF9sb2coMSArIHgpIC8gKCgxICsgeCkgLSAxKSk7XG4gIH07XG5cbiAgLy8gdGFrZW4gZGlyZWN0bHkgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbGpoYXJiL2lzLWFyZ3VtZW50cy9ibG9iL21hc3Rlci9pbmRleC5qc1xuICAvLyBjYW4gYmUgcmVwbGFjZWQgd2l0aCByZXF1aXJlKCdpcy1hcmd1bWVudHMnKSBpZiB3ZSBldmVyIHVzZSBhIGJ1aWxkIHByb2Nlc3MgaW5zdGVhZFxuICB2YXIgaXNTdGFuZGFyZEFyZ3VtZW50cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG4gICAgcmV0dXJuIF90b1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuICB9O1xuICB2YXIgaXNMZWdhY3lBcmd1bWVudHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJlxuICAgICAgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuICAgICAgdHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ251bWJlcicgJiZcbiAgICAgIHZhbHVlLmxlbmd0aCA+PSAwICYmXG4gICAgICBfdG9TdHJpbmcodmFsdWUpICE9PSAnW29iamVjdCBBcnJheV0nICYmXG4gICAgICBfdG9TdHJpbmcodmFsdWUuY2FsbGVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbiAgfTtcbiAgdmFyIGlzQXJndW1lbnRzID0gaXNTdGFuZGFyZEFyZ3VtZW50cyhhcmd1bWVudHMpID8gaXNTdGFuZGFyZEFyZ3VtZW50cyA6IGlzTGVnYWN5QXJndW1lbnRzO1xuXG4gIHZhciBUeXBlID0ge1xuICAgIHByaW1pdGl2ZTogZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggPT09IG51bGwgfHwgKHR5cGVvZiB4ICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB4ICE9PSAnb2JqZWN0Jyk7IH0sXG4gICAgc3RyaW5nOiBmdW5jdGlvbiAoeCkgeyByZXR1cm4gX3RvU3RyaW5nKHgpID09PSAnW29iamVjdCBTdHJpbmddJzsgfSxcbiAgICByZWdleDogZnVuY3Rpb24gKHgpIHsgcmV0dXJuIF90b1N0cmluZyh4KSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7IH0sXG4gICAgc3ltYm9sOiBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBnbG9iYWxzLlN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgeCA9PT0gJ3N5bWJvbCc7XG4gICAgfVxuICB9O1xuXG4gIHZhciBvdmVycmlkZU5hdGl2ZSA9IGZ1bmN0aW9uIG92ZXJyaWRlTmF0aXZlKG9iamVjdCwgcHJvcGVydHksIHJlcGxhY2VtZW50KSB7XG4gICAgdmFyIG9yaWdpbmFsID0gb2JqZWN0W3Byb3BlcnR5XTtcbiAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIHByb3BlcnR5LCByZXBsYWNlbWVudCwgdHJ1ZSk7XG4gICAgVmFsdWUucHJlc2VydmVUb1N0cmluZyhvYmplY3RbcHJvcGVydHldLCBvcmlnaW5hbCk7XG4gIH07XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllc1xuICB2YXIgaGFzU3ltYm9scyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbFsnZm9yJ10gPT09ICdmdW5jdGlvbicgJiYgVHlwZS5zeW1ib2woU3ltYm9sKCkpO1xuXG4gIC8vIFRoaXMgaXMgYSBwcml2YXRlIG5hbWUgaW4gdGhlIGVzNiBzcGVjLCBlcXVhbCB0byAnW1N5bWJvbC5pdGVyYXRvcl0nXG4gIC8vIHdlJ3JlIGdvaW5nIHRvIHVzZSBhbiBhcmJpdHJhcnkgXy1wcmVmaXhlZCBuYW1lIHRvIG1ha2Ugb3VyIHNoaW1zXG4gIC8vIHdvcmsgcHJvcGVybHkgd2l0aCBlYWNoIG90aGVyLCBldmVuIHRob3VnaCB3ZSBkb24ndCBoYXZlIGZ1bGwgSXRlcmF0b3JcbiAgLy8gc3VwcG9ydC4gIFRoYXQgaXMsIGBBcnJheS5mcm9tKG1hcC5rZXlzKCkpYCB3aWxsIHdvcmssIGJ1dCB3ZSBkb24ndFxuICAvLyBwcmV0ZW5kIHRvIGV4cG9ydCBhIFwicmVhbFwiIEl0ZXJhdG9yIGludGVyZmFjZS5cbiAgdmFyICRpdGVyYXRvciQgPSBUeXBlLnN5bWJvbChTeW1ib2wuaXRlcmF0b3IpID8gU3ltYm9sLml0ZXJhdG9yIDogJ19lczYtc2hpbSBpdGVyYXRvcl8nO1xuICAvLyBGaXJlZm94IHNoaXBzIGEgcGFydGlhbCBpbXBsZW1lbnRhdGlvbiB1c2luZyB0aGUgbmFtZSBAQGl0ZXJhdG9yLlxuICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD05MDcwNzcjYzE0XG4gIC8vIFNvIHVzZSB0aGF0IG5hbWUgaWYgd2UgZGV0ZWN0IGl0LlxuICBpZiAoZ2xvYmFscy5TZXQgJiYgdHlwZW9mIG5ldyBnbG9iYWxzLlNldCgpWydAQGl0ZXJhdG9yJ10gPT09ICdmdW5jdGlvbicpIHtcbiAgICAkaXRlcmF0b3IkID0gJ0BAaXRlcmF0b3InO1xuICB9XG5cbiAgLy8gUmVmbGVjdFxuICBpZiAoIWdsb2JhbHMuUmVmbGVjdCkge1xuICAgIGRlZmluZVByb3BlcnR5KGdsb2JhbHMsICdSZWZsZWN0Jywge30sIHRydWUpO1xuICB9XG4gIHZhciBSZWZsZWN0ID0gZ2xvYmFscy5SZWZsZWN0O1xuXG4gIHZhciAkU3RyaW5nID0gU3RyaW5nO1xuXG4gIC8qIGdsb2JhbCBkb2N1bWVudCAqL1xuICB2YXIgZG9tQWxsID0gKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcgfHwgIWRvY3VtZW50KSA/IG51bGwgOiBkb2N1bWVudC5hbGw7XG4gIHZhciBpc051bGxPclVuZGVmaW5lZCA9IGRvbUFsbCA9PSBudWxsID8gZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoeCkge1xuICAgIHJldHVybiB4ID09IG51bGw7XG4gIH0gOiBmdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZEFuZE5vdERvY3VtZW50QWxsKHgpIHtcbiAgICByZXR1cm4geCA9PSBudWxsICYmIHggIT09IGRvbUFsbDtcbiAgfTtcblxuICB2YXIgRVMgPSB7XG4gICAgLy8gaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWNhbGxcbiAgICBDYWxsOiBmdW5jdGlvbiBDYWxsKEYsIFYpIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiBbXTtcbiAgICAgIGlmICghRVMuSXNDYWxsYWJsZShGKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEYgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2FwcGx5KEYsIFYsIGFyZ3MpO1xuICAgIH0sXG5cbiAgICBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlOiBmdW5jdGlvbiAoeCwgb3B0TWVzc2FnZSkge1xuICAgICAgaWYgKGlzTnVsbE9yVW5kZWZpbmVkKHgpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3Iob3B0TWVzc2FnZSB8fCAnQ2Fubm90IGNhbGwgbWV0aG9kIG9uICcgKyB4KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB4O1xuICAgIH0sXG5cbiAgICAvLyBUaGlzIG1pZ2h0IG1pc3MgdGhlIFwiKG5vbi1zdGFuZGFyZCBleG90aWMgYW5kIGRvZXMgbm90IGltcGxlbWVudFxuICAgIC8vIFtbQ2FsbF1dKVwiIGNhc2UgZnJvbVxuICAgIC8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10eXBlb2Ytb3BlcmF0b3ItcnVudGltZS1zZW1hbnRpY3MtZXZhbHVhdGlvblxuICAgIC8vIGJ1dCB3ZSBjYW4ndCBmaW5kIGFueSBldmlkZW5jZSB0aGVzZSBvYmplY3RzIGV4aXN0IGluIHByYWN0aWNlLlxuICAgIC8vIElmIHdlIGZpbmQgc29tZSBpbiB0aGUgZnV0dXJlLCB5b3UgY291bGQgdGVzdCBgT2JqZWN0KHgpID09PSB4YCxcbiAgICAvLyB3aGljaCBpcyByZWxpYWJsZSBhY2NvcmRpbmcgdG9cbiAgICAvLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9vYmplY3RcbiAgICAvLyBidXQgaXMgbm90IHdlbGwgb3B0aW1pemVkIGJ5IHJ1bnRpbWVzIGFuZCBjcmVhdGVzIGFuIG9iamVjdFxuICAgIC8vIHdoZW5ldmVyIGl0IHJldHVybnMgZmFsc2UsIGFuZCB0aHVzIGlzIHZlcnkgc2xvdy5cbiAgICBUeXBlSXNPYmplY3Q6IGZ1bmN0aW9uICh4KSB7XG4gICAgICBpZiAoeCA9PT0gdm9pZCAwIHx8IHggPT09IG51bGwgfHwgeCA9PT0gdHJ1ZSB8fCB4ID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHggPT09ICdvYmplY3QnIHx8IHggPT09IGRvbUFsbDtcbiAgICB9LFxuXG4gICAgVG9PYmplY3Q6IGZ1bmN0aW9uIChvLCBvcHRNZXNzYWdlKSB7XG4gICAgICByZXR1cm4gT2JqZWN0KEVTLlJlcXVpcmVPYmplY3RDb2VyY2libGUobywgb3B0TWVzc2FnZSkpO1xuICAgIH0sXG5cbiAgICBJc0NhbGxhYmxlOiBpc0NhbGxhYmxlLFxuXG4gICAgSXNDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHgpIHtcbiAgICAgIC8vIFdlIGNhbid0IHRlbGwgY2FsbGFibGVzIGZyb20gY29uc3RydWN0b3JzIGluIEVTNVxuICAgICAgcmV0dXJuIEVTLklzQ2FsbGFibGUoeCk7XG4gICAgfSxcblxuICAgIFRvSW50MzI6IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gRVMuVG9OdW1iZXIoeCkgPj4gMDtcbiAgICB9LFxuXG4gICAgVG9VaW50MzI6IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gRVMuVG9OdW1iZXIoeCkgPj4+IDA7XG4gICAgfSxcblxuICAgIFRvTnVtYmVyOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmIChfdG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBTeW1ib2xdJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBhIFN5bWJvbCB2YWx1ZSB0byBhIG51bWJlcicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuICt2YWx1ZTtcbiAgICB9LFxuXG4gICAgVG9JbnRlZ2VyOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHZhciBudW1iZXIgPSBFUy5Ub051bWJlcih2YWx1ZSk7XG4gICAgICBpZiAobnVtYmVySXNOYU4obnVtYmVyKSkgeyByZXR1cm4gMDsgfVxuICAgICAgaWYgKG51bWJlciA9PT0gMCB8fCAhbnVtYmVySXNGaW5pdGUobnVtYmVyKSkgeyByZXR1cm4gbnVtYmVyOyB9XG4gICAgICByZXR1cm4gKG51bWJlciA+IDAgPyAxIDogLTEpICogX2Zsb29yKF9hYnMobnVtYmVyKSk7XG4gICAgfSxcblxuICAgIFRvTGVuZ3RoOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHZhciBsZW4gPSBFUy5Ub0ludGVnZXIodmFsdWUpO1xuICAgICAgaWYgKGxlbiA8PSAwKSB7IHJldHVybiAwOyB9IC8vIGluY2x1ZGVzIGNvbnZlcnRpbmcgLTAgdG8gKzBcbiAgICAgIGlmIChsZW4gPiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikgeyByZXR1cm4gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7IH1cbiAgICAgIHJldHVybiBsZW47XG4gICAgfSxcblxuICAgIFNhbWVWYWx1ZTogZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIGlmIChhID09PSBiKSB7XG4gICAgICAgIC8vIDAgPT09IC0wLCBidXQgdGhleSBhcmUgbm90IGlkZW50aWNhbC5cbiAgICAgICAgaWYgKGEgPT09IDApIHsgcmV0dXJuIDEgLyBhID09PSAxIC8gYjsgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudW1iZXJJc05hTihhKSAmJiBudW1iZXJJc05hTihiKTtcbiAgICB9LFxuXG4gICAgU2FtZVZhbHVlWmVybzogZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIC8vIHNhbWUgYXMgU2FtZVZhbHVlIGV4Y2VwdCBmb3IgU2FtZVZhbHVlWmVybygrMCwgLTApID09IHRydWVcbiAgICAgIHJldHVybiAoYSA9PT0gYikgfHwgKG51bWJlcklzTmFOKGEpICYmIG51bWJlcklzTmFOKGIpKTtcbiAgICB9LFxuXG4gICAgSXNJdGVyYWJsZTogZnVuY3Rpb24gKG8pIHtcbiAgICAgIHJldHVybiBFUy5UeXBlSXNPYmplY3QobykgJiYgKHR5cGVvZiBvWyRpdGVyYXRvciRdICE9PSAndW5kZWZpbmVkJyB8fCBpc0FyZ3VtZW50cyhvKSk7XG4gICAgfSxcblxuICAgIEdldEl0ZXJhdG9yOiBmdW5jdGlvbiAobykge1xuICAgICAgaWYgKGlzQXJndW1lbnRzKG8pKSB7XG4gICAgICAgIC8vIHNwZWNpYWwgY2FzZSBzdXBwb3J0IGZvciBgYXJndW1lbnRzYFxuICAgICAgICByZXR1cm4gbmV3IEFycmF5SXRlcmF0b3IobywgJ3ZhbHVlJyk7XG4gICAgICB9XG4gICAgICB2YXIgaXRGbiA9IEVTLkdldE1ldGhvZChvLCAkaXRlcmF0b3IkKTtcbiAgICAgIGlmICghRVMuSXNDYWxsYWJsZShpdEZuKSkge1xuICAgICAgICAvLyBCZXR0ZXIgZGlhZ25vc3RpY3MgaWYgaXRGbiBpcyBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWx1ZSBpcyBub3QgYW4gaXRlcmFibGUnKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdCA9IEVTLkNhbGwoaXRGbiwgbyk7XG4gICAgICBpZiAoIUVTLlR5cGVJc09iamVjdChpdCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYmFkIGl0ZXJhdG9yJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXQ7XG4gICAgfSxcblxuICAgIEdldE1ldGhvZDogZnVuY3Rpb24gKG8sIHApIHtcbiAgICAgIHZhciBmdW5jID0gRVMuVG9PYmplY3QobylbcF07XG4gICAgICBpZiAoaXNOdWxsT3JVbmRlZmluZWQoZnVuYykpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIGlmICghRVMuSXNDYWxsYWJsZShmdW5jKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdNZXRob2Qgbm90IGNhbGxhYmxlOiAnICsgcCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuYztcbiAgICB9LFxuXG4gICAgSXRlcmF0b3JDb21wbGV0ZTogZnVuY3Rpb24gKGl0ZXJSZXN1bHQpIHtcbiAgICAgIHJldHVybiAhIWl0ZXJSZXN1bHQuZG9uZTtcbiAgICB9LFxuXG4gICAgSXRlcmF0b3JDbG9zZTogZnVuY3Rpb24gKGl0ZXJhdG9yLCBjb21wbGV0aW9uSXNUaHJvdykge1xuICAgICAgdmFyIHJldHVybk1ldGhvZCA9IEVTLkdldE1ldGhvZChpdGVyYXRvciwgJ3JldHVybicpO1xuICAgICAgaWYgKHJldHVybk1ldGhvZCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBpbm5lclJlc3VsdCwgaW5uZXJFeGNlcHRpb247XG4gICAgICB0cnkge1xuICAgICAgICBpbm5lclJlc3VsdCA9IEVTLkNhbGwocmV0dXJuTWV0aG9kLCBpdGVyYXRvcik7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlubmVyRXhjZXB0aW9uID0gZTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wbGV0aW9uSXNUaHJvdykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaW5uZXJFeGNlcHRpb24pIHtcbiAgICAgICAgdGhyb3cgaW5uZXJFeGNlcHRpb247XG4gICAgICB9XG4gICAgICBpZiAoIUVTLlR5cGVJc09iamVjdChpbm5lclJlc3VsdCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkl0ZXJhdG9yJ3MgcmV0dXJuIG1ldGhvZCByZXR1cm5lZCBhIG5vbi1vYmplY3QuXCIpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBJdGVyYXRvck5leHQ6IGZ1bmN0aW9uIChpdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gaXQubmV4dChhcmd1bWVudHNbMV0pIDogaXQubmV4dCgpO1xuICAgICAgaWYgKCFFUy5UeXBlSXNPYmplY3QocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdiYWQgaXRlcmF0b3InKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIEl0ZXJhdG9yU3RlcDogZnVuY3Rpb24gKGl0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gRVMuSXRlcmF0b3JOZXh0KGl0KTtcbiAgICAgIHZhciBkb25lID0gRVMuSXRlcmF0b3JDb21wbGV0ZShyZXN1bHQpO1xuICAgICAgcmV0dXJuIGRvbmUgPyBmYWxzZSA6IHJlc3VsdDtcbiAgICB9LFxuXG4gICAgQ29uc3RydWN0OiBmdW5jdGlvbiAoQywgYXJncywgbmV3VGFyZ2V0LCBpc0VTNmludGVybmFsKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gdHlwZW9mIG5ld1RhcmdldCA9PT0gJ3VuZGVmaW5lZCcgPyBDIDogbmV3VGFyZ2V0O1xuXG4gICAgICBpZiAoIWlzRVM2aW50ZXJuYWwgJiYgUmVmbGVjdC5jb25zdHJ1Y3QpIHtcbiAgICAgICAgLy8gVHJ5IHRvIHVzZSBSZWZsZWN0LmNvbnN0cnVjdCBpZiBhdmFpbGFibGVcbiAgICAgICAgcmV0dXJuIFJlZmxlY3QuY29uc3RydWN0KEMsIGFyZ3MsIHRhcmdldCk7XG4gICAgICB9XG4gICAgICAvLyBPSywgd2UgaGF2ZSB0byBmYWtlIGl0LiAgVGhpcyB3aWxsIG9ubHkgd29yayBpZiB0aGVcbiAgICAgIC8vIEMuW1tDb25zdHJ1Y3RvcktpbmRdXSA9PSBcImJhc2VcIiAtLSBidXQgdGhhdCdzIHRoZSBvbmx5XG4gICAgICAvLyBraW5kIHdlIGNhbiBtYWtlIGluIEVTNSBjb2RlIGFueXdheS5cblxuICAgICAgLy8gT3JkaW5hcnlDcmVhdGVGcm9tQ29uc3RydWN0b3IodGFyZ2V0LCBcIiVPYmplY3RQcm90b3R5cGUlXCIpXG4gICAgICB2YXIgcHJvdG8gPSB0YXJnZXQucHJvdG90eXBlO1xuICAgICAgaWYgKCFFUy5UeXBlSXNPYmplY3QocHJvdG8pKSB7XG4gICAgICAgIHByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgICAgIH1cbiAgICAgIHZhciBvYmogPSBjcmVhdGUocHJvdG8pO1xuICAgICAgLy8gQ2FsbCB0aGUgY29uc3RydWN0b3IuXG4gICAgICB2YXIgcmVzdWx0ID0gRVMuQ2FsbChDLCBvYmosIGFyZ3MpO1xuICAgICAgcmV0dXJuIEVTLlR5cGVJc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogb2JqO1xuICAgIH0sXG5cbiAgICBTcGVjaWVzQ29uc3RydWN0b3I6IGZ1bmN0aW9uIChPLCBkZWZhdWx0Q29uc3RydWN0b3IpIHtcbiAgICAgIHZhciBDID0gTy5jb25zdHJ1Y3RvcjtcbiAgICAgIGlmIChDID09PSB2b2lkIDApIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRDb25zdHJ1Y3RvcjtcbiAgICAgIH1cbiAgICAgIGlmICghRVMuVHlwZUlzT2JqZWN0KEMpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBjb25zdHJ1Y3RvcicpO1xuICAgICAgfVxuICAgICAgdmFyIFMgPSBDW3N5bWJvbFNwZWNpZXNdO1xuICAgICAgaWYgKGlzTnVsbE9yVW5kZWZpbmVkKFMpKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0Q29uc3RydWN0b3I7XG4gICAgICB9XG4gICAgICBpZiAoIUVTLklzQ29uc3RydWN0b3IoUykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQmFkIEBAc3BlY2llcycpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFM7XG4gICAgfSxcblxuICAgIENyZWF0ZUhUTUw6IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgICAgdmFyIFMgPSBFUy5Ub1N0cmluZyhzdHJpbmcpO1xuICAgICAgdmFyIHAxID0gJzwnICsgdGFnO1xuICAgICAgaWYgKGF0dHJpYnV0ZSAhPT0gJycpIHtcbiAgICAgICAgdmFyIFYgPSBFUy5Ub1N0cmluZyh2YWx1ZSk7XG4gICAgICAgIHZhciBlc2NhcGVkViA9IFYucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xuICAgICAgICBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIGVzY2FwZWRWICsgJ1wiJztcbiAgICAgIH1cbiAgICAgIHZhciBwMiA9IHAxICsgJz4nO1xuICAgICAgdmFyIHAzID0gcDIgKyBTO1xuICAgICAgcmV0dXJuIHAzICsgJzwvJyArIHRhZyArICc+JztcbiAgICB9LFxuXG4gICAgSXNSZWdFeHA6IGZ1bmN0aW9uIElzUmVnRXhwKGFyZ3VtZW50KSB7XG4gICAgICBpZiAoIUVTLlR5cGVJc09iamVjdChhcmd1bWVudCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGlzUmVnRXhwID0gYXJndW1lbnRbU3ltYm9sLm1hdGNoXTtcbiAgICAgIGlmICh0eXBlb2YgaXNSZWdFeHAgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiAhIWlzUmVnRXhwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFR5cGUucmVnZXgoYXJndW1lbnQpO1xuICAgIH0sXG5cbiAgICBUb1N0cmluZzogZnVuY3Rpb24gVG9TdHJpbmcoc3RyaW5nKSB7XG4gICAgICByZXR1cm4gJFN0cmluZyhzdHJpbmcpO1xuICAgIH1cbiAgfTtcblxuICAvLyBXZWxsLWtub3duIFN5bWJvbCBzaGltc1xuICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycyAmJiBoYXNTeW1ib2xzKSB7XG4gICAgdmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IGZ1bmN0aW9uIGRlZmluZVdlbGxLbm93blN5bWJvbChuYW1lKSB7XG4gICAgICBpZiAoVHlwZS5zeW1ib2woU3ltYm9sW25hbWVdKSkge1xuICAgICAgICByZXR1cm4gU3ltYm9sW25hbWVdO1xuICAgICAgfVxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllc1xuICAgICAgdmFyIHN5bSA9IFN5bWJvbFsnZm9yJ10oJ1N5bWJvbC4nICsgbmFtZSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3ltYm9sLCBuYW1lLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBzeW1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHN5bTtcbiAgICB9O1xuICAgIGlmICghVHlwZS5zeW1ib2woU3ltYm9sLnNlYXJjaCkpIHtcbiAgICAgIHZhciBzeW1ib2xTZWFyY2ggPSBkZWZpbmVXZWxsS25vd25TeW1ib2woJ3NlYXJjaCcpO1xuICAgICAgdmFyIG9yaWdpbmFsU2VhcmNoID0gU3RyaW5nLnByb3RvdHlwZS5zZWFyY2g7XG4gICAgICBkZWZpbmVQcm9wZXJ0eShSZWdFeHAucHJvdG90eXBlLCBzeW1ib2xTZWFyY2gsIGZ1bmN0aW9uIHNlYXJjaChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIEVTLkNhbGwob3JpZ2luYWxTZWFyY2gsIHN0cmluZywgW3RoaXNdKTtcbiAgICAgIH0pO1xuICAgICAgdmFyIHNlYXJjaFNoaW0gPSBmdW5jdGlvbiBzZWFyY2gocmVnZXhwKSB7XG4gICAgICAgIHZhciBPID0gRVMuUmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgICAgaWYgKCFpc051bGxPclVuZGVmaW5lZChyZWdleHApKSB7XG4gICAgICAgICAgdmFyIHNlYXJjaGVyID0gRVMuR2V0TWV0aG9kKHJlZ2V4cCwgc3ltYm9sU2VhcmNoKTtcbiAgICAgICAgICBpZiAodHlwZW9mIHNlYXJjaGVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIEVTLkNhbGwoc2VhcmNoZXIsIHJlZ2V4cCwgW09dKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEVTLkNhbGwob3JpZ2luYWxTZWFyY2gsIE8sIFtFUy5Ub1N0cmluZyhyZWdleHApXSk7XG4gICAgICB9O1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoU3RyaW5nLnByb3RvdHlwZSwgJ3NlYXJjaCcsIHNlYXJjaFNoaW0pO1xuICAgIH1cbiAgICBpZiAoIVR5cGUuc3ltYm9sKFN5bWJvbC5yZXBsYWNlKSkge1xuICAgICAgdmFyIHN5bWJvbFJlcGxhY2UgPSBkZWZpbmVXZWxsS25vd25TeW1ib2woJ3JlcGxhY2UnKTtcbiAgICAgIHZhciBvcmlnaW5hbFJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG4gICAgICBkZWZpbmVQcm9wZXJ0eShSZWdFeHAucHJvdG90eXBlLCBzeW1ib2xSZXBsYWNlLCBmdW5jdGlvbiByZXBsYWNlKHN0cmluZywgcmVwbGFjZVZhbHVlKSB7XG4gICAgICAgIHJldHVybiBFUy5DYWxsKG9yaWdpbmFsUmVwbGFjZSwgc3RyaW5nLCBbdGhpcywgcmVwbGFjZVZhbHVlXSk7XG4gICAgICB9KTtcbiAgICAgIHZhciByZXBsYWNlU2hpbSA9IGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgICB2YXIgTyA9IEVTLlJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICAgIGlmICghaXNOdWxsT3JVbmRlZmluZWQoc2VhcmNoVmFsdWUpKSB7XG4gICAgICAgICAgdmFyIHJlcGxhY2VyID0gRVMuR2V0TWV0aG9kKHNlYXJjaFZhbHVlLCBzeW1ib2xSZXBsYWNlKTtcbiAgICAgICAgICBpZiAodHlwZW9mIHJlcGxhY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIEVTLkNhbGwocmVwbGFjZXIsIHNlYXJjaFZhbHVlLCBbTywgcmVwbGFjZVZhbHVlXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBFUy5DYWxsKG9yaWdpbmFsUmVwbGFjZSwgTywgW0VTLlRvU3RyaW5nKHNlYXJjaFZhbHVlKSwgcmVwbGFjZVZhbHVlXSk7XG4gICAgICB9O1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoU3RyaW5nLnByb3RvdHlwZSwgJ3JlcGxhY2UnLCByZXBsYWNlU2hpbSk7XG4gICAgfVxuICAgIGlmICghVHlwZS5zeW1ib2woU3ltYm9sLnNwbGl0KSkge1xuICAgICAgdmFyIHN5bWJvbFNwbGl0ID0gZGVmaW5lV2VsbEtub3duU3ltYm9sKCdzcGxpdCcpO1xuICAgICAgdmFyIG9yaWdpbmFsU3BsaXQgPSBTdHJpbmcucHJvdG90eXBlLnNwbGl0O1xuICAgICAgZGVmaW5lUHJvcGVydHkoUmVnRXhwLnByb3RvdHlwZSwgc3ltYm9sU3BsaXQsIGZ1bmN0aW9uIHNwbGl0KHN0cmluZywgbGltaXQpIHtcbiAgICAgICAgcmV0dXJuIEVTLkNhbGwob3JpZ2luYWxTcGxpdCwgc3RyaW5nLCBbdGhpcywgbGltaXRdKTtcbiAgICAgIH0pO1xuICAgICAgdmFyIHNwbGl0U2hpbSA9IGZ1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgICAgdmFyIE8gPSBFUy5SZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKHNlcGFyYXRvcikpIHtcbiAgICAgICAgICB2YXIgc3BsaXR0ZXIgPSBFUy5HZXRNZXRob2Qoc2VwYXJhdG9yLCBzeW1ib2xTcGxpdCk7XG4gICAgICAgICAgaWYgKHR5cGVvZiBzcGxpdHRlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBFUy5DYWxsKHNwbGl0dGVyLCBzZXBhcmF0b3IsIFtPLCBsaW1pdF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRVMuQ2FsbChvcmlnaW5hbFNwbGl0LCBPLCBbRVMuVG9TdHJpbmcoc2VwYXJhdG9yKSwgbGltaXRdKTtcbiAgICAgIH07XG4gICAgICBvdmVycmlkZU5hdGl2ZShTdHJpbmcucHJvdG90eXBlLCAnc3BsaXQnLCBzcGxpdFNoaW0pO1xuICAgIH1cbiAgICB2YXIgc3ltYm9sTWF0Y2hFeGlzdHMgPSBUeXBlLnN5bWJvbChTeW1ib2wubWF0Y2gpO1xuICAgIHZhciBzdHJpbmdNYXRjaElnbm9yZXNTeW1ib2xNYXRjaCA9IHN5bWJvbE1hdGNoRXhpc3RzICYmIChmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBGaXJlZm94IDQxLCB0aHJvdWdoIE5pZ2h0bHkgNDUgaGFzIFN5bWJvbC5tYXRjaCwgYnV0IFN0cmluZyNtYXRjaCBpZ25vcmVzIGl0LlxuICAgICAgLy8gRmlyZWZveCA0MCBhbmQgYmVsb3cgaGF2ZSBTeW1ib2wubWF0Y2ggYnV0IFN0cmluZyNtYXRjaCB3b3JrcyBmaW5lLlxuICAgICAgdmFyIG8gPSB7fTtcbiAgICAgIG9bU3ltYm9sLm1hdGNoXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyOyB9O1xuICAgICAgcmV0dXJuICdhJy5tYXRjaChvKSAhPT0gNDI7XG4gICAgfSgpKTtcbiAgICBpZiAoIXN5bWJvbE1hdGNoRXhpc3RzIHx8IHN0cmluZ01hdGNoSWdub3Jlc1N5bWJvbE1hdGNoKSB7XG4gICAgICB2YXIgc3ltYm9sTWF0Y2ggPSBkZWZpbmVXZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG5cbiAgICAgIHZhciBvcmlnaW5hbE1hdGNoID0gU3RyaW5nLnByb3RvdHlwZS5tYXRjaDtcbiAgICAgIGRlZmluZVByb3BlcnR5KFJlZ0V4cC5wcm90b3R5cGUsIHN5bWJvbE1hdGNoLCBmdW5jdGlvbiBtYXRjaChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIEVTLkNhbGwob3JpZ2luYWxNYXRjaCwgc3RyaW5nLCBbdGhpc10pO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBtYXRjaFNoaW0gPSBmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAgICAgdmFyIE8gPSBFUy5SZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKHJlZ2V4cCkpIHtcbiAgICAgICAgICB2YXIgbWF0Y2hlciA9IEVTLkdldE1ldGhvZChyZWdleHAsIHN5bWJvbE1hdGNoKTtcbiAgICAgICAgICBpZiAodHlwZW9mIG1hdGNoZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gRVMuQ2FsbChtYXRjaGVyLCByZWdleHAsIFtPXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBFUy5DYWxsKG9yaWdpbmFsTWF0Y2gsIE8sIFtFUy5Ub1N0cmluZyhyZWdleHApXSk7XG4gICAgICB9O1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoU3RyaW5nLnByb3RvdHlwZSwgJ21hdGNoJywgbWF0Y2hTaGltKTtcbiAgICB9XG4gIH1cblxuICB2YXIgd3JhcENvbnN0cnVjdG9yID0gZnVuY3Rpb24gd3JhcENvbnN0cnVjdG9yKG9yaWdpbmFsLCByZXBsYWNlbWVudCwga2V5c1RvU2tpcCkge1xuICAgIFZhbHVlLnByZXNlcnZlVG9TdHJpbmcocmVwbGFjZW1lbnQsIG9yaWdpbmFsKTtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICAvLyBzZXRzIHVwIHByb3BlciBwcm90b3R5cGUgY2hhaW4gd2hlcmUgcG9zc2libGVcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihvcmlnaW5hbCwgcmVwbGFjZW1lbnQpO1xuICAgIH1cbiAgICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuICAgICAgX2ZvckVhY2goT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob3JpZ2luYWwpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChrZXkgaW4gbm9vcCB8fCBrZXlzVG9Ta2lwW2tleV0pIHsgcmV0dXJuOyB9XG4gICAgICAgIFZhbHVlLnByb3h5KG9yaWdpbmFsLCBrZXksIHJlcGxhY2VtZW50KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBfZm9yRWFjaChPYmplY3Qua2V5cyhvcmlnaW5hbCksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKGtleSBpbiBub29wIHx8IGtleXNUb1NraXBba2V5XSkgeyByZXR1cm47IH1cbiAgICAgICAgcmVwbGFjZW1lbnRba2V5XSA9IG9yaWdpbmFsW2tleV07XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmVwbGFjZW1lbnQucHJvdG90eXBlID0gb3JpZ2luYWwucHJvdG90eXBlO1xuICAgIFZhbHVlLnJlZGVmaW5lKG9yaWdpbmFsLnByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgcmVwbGFjZW1lbnQpO1xuICB9O1xuXG4gIHZhciBkZWZhdWx0U3BlY2llc0dldHRlciA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG4gIHZhciBhZGREZWZhdWx0U3BlY2llcyA9IGZ1bmN0aW9uIChDKSB7XG4gICAgaWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMgJiYgIV9oYXNPd25Qcm9wZXJ0eShDLCBzeW1ib2xTcGVjaWVzKSkge1xuICAgICAgVmFsdWUuZ2V0dGVyKEMsIHN5bWJvbFNwZWNpZXMsIGRlZmF1bHRTcGVjaWVzR2V0dGVyKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGFkZEl0ZXJhdG9yID0gZnVuY3Rpb24gKHByb3RvdHlwZSwgaW1wbCkge1xuICAgIHZhciBpbXBsZW1lbnRhdGlvbiA9IGltcGwgfHwgZnVuY3Rpb24gaXRlcmF0b3IoKSB7IHJldHVybiB0aGlzOyB9O1xuICAgIGRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgJGl0ZXJhdG9yJCwgaW1wbGVtZW50YXRpb24pO1xuICAgIGlmICghcHJvdG90eXBlWyRpdGVyYXRvciRdICYmIFR5cGUuc3ltYm9sKCRpdGVyYXRvciQpKSB7XG4gICAgICAvLyBpbXBsZW1lbnRhdGlvbnMgYXJlIGJ1Z2d5IHdoZW4gJGl0ZXJhdG9yJCBpcyBhIFN5bWJvbFxuICAgICAgcHJvdG90eXBlWyRpdGVyYXRvciRdID0gaW1wbGVtZW50YXRpb247XG4gICAgfVxuICB9O1xuXG4gIHZhciBjcmVhdGVEYXRhUHJvcGVydHkgPSBmdW5jdGlvbiBjcmVhdGVEYXRhUHJvcGVydHkob2JqZWN0LCBuYW1lLCB2YWx1ZSkge1xuICAgIGlmIChzdXBwb3J0c0Rlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBuYW1lLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9iamVjdFtuYW1lXSA9IHZhbHVlO1xuICAgIH1cbiAgfTtcbiAgdmFyIGNyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3cgPSBmdW5jdGlvbiBjcmVhdGVEYXRhUHJvcGVydHlPclRocm93KG9iamVjdCwgbmFtZSwgdmFsdWUpIHtcbiAgICBjcmVhdGVEYXRhUHJvcGVydHkob2JqZWN0LCBuYW1lLCB2YWx1ZSk7XG4gICAgaWYgKCFFUy5TYW1lVmFsdWUob2JqZWN0W25hbWVdLCB2YWx1ZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Byb3BlcnR5IGlzIG5vbmNvbmZpZ3VyYWJsZScpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgZW11bGF0ZUVTNmNvbnN0cnVjdCA9IGZ1bmN0aW9uIChvLCBkZWZhdWx0TmV3VGFyZ2V0LCBkZWZhdWx0UHJvdG8sIHNsb3RzKSB7XG4gICAgLy8gVGhpcyBpcyBhbiBlczUgYXBwcm94aW1hdGlvbiB0byBlczYgY29uc3RydWN0IHNlbWFudGljcy4gIGluIGVzNixcbiAgICAvLyAnbmV3IEZvbycgaW52b2tlcyBGb28uW1tDb25zdHJ1Y3RdXSB3aGljaCAoZm9yIGFsbW9zdCBhbGwgb2JqZWN0cylcbiAgICAvLyBqdXN0IHNldHMgdGhlIGludGVybmFsIHZhcmlhYmxlIE5ld1RhcmdldCAoaW4gZXM2IHN5bnRheCBgbmV3LnRhcmdldGApXG4gICAgLy8gdG8gRm9vIGFuZCB0aGVuIHJldHVybnMgRm9vKCkuXG5cbiAgICAvLyBNYW55IEVTNiBvYmplY3QgdGhlbiBoYXZlIGNvbnN0cnVjdG9ycyBvZiB0aGUgZm9ybTpcbiAgICAvLyAxLiBJZiBOZXdUYXJnZXQgaXMgdW5kZWZpbmVkLCB0aHJvdyBhIFR5cGVFcnJvciBleGNlcHRpb25cbiAgICAvLyAyLiBMZXQgeHh4IGJ5IE9yZGluYXJ5Q3JlYXRlRnJvbUNvbnN0cnVjdG9yKE5ld1RhcmdldCwgeXl5LCB6enopXG5cbiAgICAvLyBTbyB3ZSdyZSBnb2luZyB0byBlbXVsYXRlIHRob3NlIGZpcnN0IHR3byBzdGVwcy5cbiAgICBpZiAoIUVTLlR5cGVJc09iamVjdChvKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ29uc3RydWN0b3IgcmVxdWlyZXMgYG5ld2A6ICcgKyBkZWZhdWx0TmV3VGFyZ2V0Lm5hbWUpO1xuICAgIH1cbiAgICB2YXIgcHJvdG8gPSBkZWZhdWx0TmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICBpZiAoIUVTLlR5cGVJc09iamVjdChwcm90bykpIHtcbiAgICAgIHByb3RvID0gZGVmYXVsdFByb3RvO1xuICAgIH1cbiAgICB2YXIgb2JqID0gY3JlYXRlKHByb3RvKTtcbiAgICBmb3IgKHZhciBuYW1lIGluIHNsb3RzKSB7XG4gICAgICBpZiAoX2hhc093blByb3BlcnR5KHNsb3RzLCBuYW1lKSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBzbG90c1tuYW1lXTtcbiAgICAgICAgZGVmaW5lUHJvcGVydHkob2JqLCBuYW1lLCB2YWx1ZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gRmlyZWZveCAzMSByZXBvcnRzIHRoaXMgZnVuY3Rpb24ncyBsZW5ndGggYXMgMFxuICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMDYyNDg0XG4gIGlmIChTdHJpbmcuZnJvbUNvZGVQb2ludCAmJiBTdHJpbmcuZnJvbUNvZGVQb2ludC5sZW5ndGggIT09IDEpIHtcbiAgICB2YXIgb3JpZ2luYWxGcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG4gICAgb3ZlcnJpZGVOYXRpdmUoU3RyaW5nLCAnZnJvbUNvZGVQb2ludCcsIGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoY29kZVBvaW50cykge1xuICAgICAgcmV0dXJuIEVTLkNhbGwob3JpZ2luYWxGcm9tQ29kZVBvaW50LCB0aGlzLCBhcmd1bWVudHMpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIFN0cmluZ1NoaW1zID0ge1xuICAgIGZyb21Db2RlUG9pbnQ6IGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoY29kZVBvaW50cykge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgdmFyIG5leHQ7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG5leHQgPSBOdW1iZXIoYXJndW1lbnRzW2ldKTtcbiAgICAgICAgaWYgKCFFUy5TYW1lVmFsdWUobmV4dCwgRVMuVG9JbnRlZ2VyKG5leHQpKSB8fCBuZXh0IDwgMCB8fCBuZXh0ID4gMHgxMEZGRkYpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCBjb2RlIHBvaW50ICcgKyBuZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXh0IDwgMHgxMDAwMCkge1xuICAgICAgICAgIF9wdXNoKHJlc3VsdCwgU3RyaW5nLmZyb21DaGFyQ29kZShuZXh0KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dCAtPSAweDEwMDAwO1xuICAgICAgICAgIF9wdXNoKHJlc3VsdCwgU3RyaW5nLmZyb21DaGFyQ29kZSgobmV4dCA+PiAxMCkgKyAweEQ4MDApKTtcbiAgICAgICAgICBfcHVzaChyZXN1bHQsIFN0cmluZy5mcm9tQ2hhckNvZGUoKG5leHQgJSAweDQwMCkgKyAweERDMDApKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKCcnKTtcbiAgICB9LFxuXG4gICAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpIHtcbiAgICAgIHZhciBjb29rZWQgPSBFUy5Ub09iamVjdChjYWxsU2l0ZSwgJ2JhZCBjYWxsU2l0ZScpO1xuICAgICAgdmFyIHJhd1N0cmluZyA9IEVTLlRvT2JqZWN0KGNvb2tlZC5yYXcsICdiYWQgcmF3IHZhbHVlJyk7XG4gICAgICB2YXIgbGVuID0gcmF3U3RyaW5nLmxlbmd0aDtcbiAgICAgIHZhciBsaXRlcmFsc2VnbWVudHMgPSBFUy5Ub0xlbmd0aChsZW4pO1xuICAgICAgaWYgKGxpdGVyYWxzZWdtZW50cyA8PSAwKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgICAgdmFyIHN0cmluZ0VsZW1lbnRzID0gW107XG4gICAgICB2YXIgbmV4dEluZGV4ID0gMDtcbiAgICAgIHZhciBuZXh0S2V5LCBuZXh0LCBuZXh0U2VnLCBuZXh0U3ViO1xuICAgICAgd2hpbGUgKG5leHRJbmRleCA8IGxpdGVyYWxzZWdtZW50cykge1xuICAgICAgICBuZXh0S2V5ID0gRVMuVG9TdHJpbmcobmV4dEluZGV4KTtcbiAgICAgICAgbmV4dFNlZyA9IEVTLlRvU3RyaW5nKHJhd1N0cmluZ1tuZXh0S2V5XSk7XG4gICAgICAgIF9wdXNoKHN0cmluZ0VsZW1lbnRzLCBuZXh0U2VnKTtcbiAgICAgICAgaWYgKG5leHRJbmRleCArIDEgPj0gbGl0ZXJhbHNlZ21lbnRzKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dCA9IG5leHRJbmRleCArIDEgPCBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzW25leHRJbmRleCArIDFdIDogJyc7XG4gICAgICAgIG5leHRTdWIgPSBFUy5Ub1N0cmluZyhuZXh0KTtcbiAgICAgICAgX3B1c2goc3RyaW5nRWxlbWVudHMsIG5leHRTdWIpO1xuICAgICAgICBuZXh0SW5kZXggKz0gMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmdFbGVtZW50cy5qb2luKCcnKTtcbiAgICB9XG4gIH07XG4gIGlmIChTdHJpbmcucmF3ICYmIFN0cmluZy5yYXcoeyByYXc6IHsgMDogJ3gnLCAxOiAneScsIGxlbmd0aDogMiB9IH0pICE9PSAneHknKSB7XG4gICAgLy8gSUUgMTEgVFAgaGFzIGEgYnJva2VuIFN0cmluZy5yYXcgaW1wbGVtZW50YXRpb25cbiAgICBvdmVycmlkZU5hdGl2ZShTdHJpbmcsICdyYXcnLCBTdHJpbmdTaGltcy5yYXcpO1xuICB9XG4gIGRlZmluZVByb3BlcnRpZXMoU3RyaW5nLCBTdHJpbmdTaGltcyk7XG5cbiAgLy8gRmFzdCByZXBlYXQsIHVzZXMgdGhlIGBFeHBvbmVudGlhdGlvbiBieSBzcXVhcmluZ2AgYWxnb3JpdGhtLlxuICAvLyBQZXJmOiBodHRwOi8vanNwZXJmLmNvbS9zdHJpbmctcmVwZWF0Mi8yXG4gIHZhciBzdHJpbmdSZXBlYXQgPSBmdW5jdGlvbiByZXBlYXQocywgdGltZXMpIHtcbiAgICBpZiAodGltZXMgPCAxKSB7IHJldHVybiAnJzsgfVxuICAgIGlmICh0aW1lcyAlIDIpIHsgcmV0dXJuIHJlcGVhdChzLCB0aW1lcyAtIDEpICsgczsgfVxuICAgIHZhciBoYWxmID0gcmVwZWF0KHMsIHRpbWVzIC8gMik7XG4gICAgcmV0dXJuIGhhbGYgKyBoYWxmO1xuICB9O1xuICB2YXIgc3RyaW5nTWF4TGVuZ3RoID0gSW5maW5pdHk7XG5cbiAgdmFyIFN0cmluZ1Byb3RvdHlwZVNoaW1zID0ge1xuICAgIHJlcGVhdDogZnVuY3Rpb24gcmVwZWF0KHRpbWVzKSB7XG4gICAgICB2YXIgdGhpc1N0ciA9IEVTLlRvU3RyaW5nKEVTLlJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgICAgdmFyIG51bVRpbWVzID0gRVMuVG9JbnRlZ2VyKHRpbWVzKTtcbiAgICAgIGlmIChudW1UaW1lcyA8IDAgfHwgbnVtVGltZXMgPj0gc3RyaW5nTWF4TGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdyZXBlYXQgY291bnQgbXVzdCBiZSBsZXNzIHRoYW4gaW5maW5pdHkgYW5kIG5vdCBvdmVyZmxvdyBtYXhpbXVtIHN0cmluZyBzaXplJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nUmVwZWF0KHRoaXNTdHIsIG51bVRpbWVzKTtcbiAgICB9LFxuXG4gICAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcpIHtcbiAgICAgIHZhciBTID0gRVMuVG9TdHJpbmcoRVMuUmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7XG4gICAgICBpZiAoRVMuSXNSZWdFeHAoc2VhcmNoU3RyaW5nKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBtZXRob2QgXCJzdGFydHNXaXRoXCIgd2l0aCBhIHJlZ2V4Jyk7XG4gICAgICB9XG4gICAgICB2YXIgc2VhcmNoU3RyID0gRVMuVG9TdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICAgIHZhciBwb3NpdGlvbjtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBwb3NpdGlvbiA9IGFyZ3VtZW50c1sxXTtcbiAgICAgIH1cbiAgICAgIHZhciBzdGFydCA9IF9tYXgoRVMuVG9JbnRlZ2VyKHBvc2l0aW9uKSwgMCk7XG4gICAgICByZXR1cm4gX3N0clNsaWNlKFMsIHN0YXJ0LCBzdGFydCArIHNlYXJjaFN0ci5sZW5ndGgpID09PSBzZWFyY2hTdHI7XG4gICAgfSxcblxuICAgIGVuZHNXaXRoOiBmdW5jdGlvbiBlbmRzV2l0aChzZWFyY2hTdHJpbmcpIHtcbiAgICAgIHZhciBTID0gRVMuVG9TdHJpbmcoRVMuUmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7XG4gICAgICBpZiAoRVMuSXNSZWdFeHAoc2VhcmNoU3RyaW5nKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBtZXRob2QgXCJlbmRzV2l0aFwiIHdpdGggYSByZWdleCcpO1xuICAgICAgfVxuICAgICAgdmFyIHNlYXJjaFN0ciA9IEVTLlRvU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgICB2YXIgbGVuID0gUy5sZW5ndGg7XG4gICAgICB2YXIgZW5kUG9zaXRpb247XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZW5kUG9zaXRpb24gPSBhcmd1bWVudHNbMV07XG4gICAgICB9XG4gICAgICB2YXIgcG9zID0gdHlwZW9mIGVuZFBvc2l0aW9uID09PSAndW5kZWZpbmVkJyA/IGxlbiA6IEVTLlRvSW50ZWdlcihlbmRQb3NpdGlvbik7XG4gICAgICB2YXIgZW5kID0gX21pbihfbWF4KHBvcywgMCksIGxlbik7XG4gICAgICByZXR1cm4gX3N0clNsaWNlKFMsIGVuZCAtIHNlYXJjaFN0ci5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaFN0cjtcbiAgICB9LFxuXG4gICAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZykge1xuICAgICAgaWYgKEVTLklzUmVnRXhwKHNlYXJjaFN0cmluZykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJpbmNsdWRlc1wiIGRvZXMgbm90IGFjY2VwdCBhIFJlZ0V4cCcpO1xuICAgICAgfVxuICAgICAgdmFyIHNlYXJjaFN0ciA9IEVTLlRvU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgICB2YXIgcG9zaXRpb247XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgcG9zaXRpb24gPSBhcmd1bWVudHNbMV07XG4gICAgICB9XG4gICAgICAvLyBTb21laG93IHRoaXMgdHJpY2sgbWFrZXMgbWV0aG9kIDEwMCUgY29tcGF0IHdpdGggdGhlIHNwZWMuXG4gICAgICByZXR1cm4gX2luZGV4T2YodGhpcywgc2VhcmNoU3RyLCBwb3NpdGlvbikgIT09IC0xO1xuICAgIH0sXG5cbiAgICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgICB2YXIgdGhpc1N0ciA9IEVTLlRvU3RyaW5nKEVTLlJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgICAgdmFyIHBvc2l0aW9uID0gRVMuVG9JbnRlZ2VyKHBvcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gdGhpc1N0ci5sZW5ndGg7XG4gICAgICBpZiAocG9zaXRpb24gPj0gMCAmJiBwb3NpdGlvbiA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZmlyc3QgPSB0aGlzU3RyLmNoYXJDb2RlQXQocG9zaXRpb24pO1xuICAgICAgICB2YXIgaXNFbmQgPSBwb3NpdGlvbiArIDEgPT09IGxlbmd0aDtcbiAgICAgICAgaWYgKGZpcnN0IDwgMHhEODAwIHx8IGZpcnN0ID4gMHhEQkZGIHx8IGlzRW5kKSB7IHJldHVybiBmaXJzdDsgfVxuICAgICAgICB2YXIgc2Vjb25kID0gdGhpc1N0ci5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSk7XG4gICAgICAgIGlmIChzZWNvbmQgPCAweERDMDAgfHwgc2Vjb25kID4gMHhERkZGKSB7IHJldHVybiBmaXJzdDsgfVxuICAgICAgICByZXR1cm4gKChmaXJzdCAtIDB4RDgwMCkgKiAxMDI0KSArIChzZWNvbmQgLSAweERDMDApICsgMHgxMDAwMDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGlmIChTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzICYmICdhJy5pbmNsdWRlcygnYScsIEluZmluaXR5KSAhPT0gZmFsc2UpIHtcbiAgICBvdmVycmlkZU5hdGl2ZShTdHJpbmcucHJvdG90eXBlLCAnaW5jbHVkZXMnLCBTdHJpbmdQcm90b3R5cGVTaGltcy5pbmNsdWRlcyk7XG4gIH1cblxuICBpZiAoU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoICYmIFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgpIHtcbiAgICB2YXIgc3RhcnRzV2l0aFJlamVjdHNSZWdleCA9IHRocm93c0Vycm9yKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8qIHRocm93cyBpZiBzcGVjLWNvbXBsaWFudCAqL1xuICAgICAgcmV0dXJuICcvYS8nLnN0YXJ0c1dpdGgoL2EvKTtcbiAgICB9KTtcbiAgICB2YXIgc3RhcnRzV2l0aEhhbmRsZXNJbmZpbml0eSA9IHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAnYWJjJy5zdGFydHNXaXRoKCdhJywgSW5maW5pdHkpID09PSBmYWxzZTtcbiAgICB9KTtcbiAgICBpZiAoIXN0YXJ0c1dpdGhSZWplY3RzUmVnZXggfHwgIXN0YXJ0c1dpdGhIYW5kbGVzSW5maW5pdHkpIHtcbiAgICAgIC8vIEZpcmVmb3ggKDwgMzc/KSBhbmQgSUUgMTEgVFAgaGF2ZSBhIG5vbmNvbXBsaWFudCBzdGFydHNXaXRoIGltcGxlbWVudGF0aW9uXG4gICAgICBvdmVycmlkZU5hdGl2ZShTdHJpbmcucHJvdG90eXBlLCAnc3RhcnRzV2l0aCcsIFN0cmluZ1Byb3RvdHlwZVNoaW1zLnN0YXJ0c1dpdGgpO1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoU3RyaW5nLnByb3RvdHlwZSwgJ2VuZHNXaXRoJywgU3RyaW5nUHJvdG90eXBlU2hpbXMuZW5kc1dpdGgpO1xuICAgIH1cbiAgfVxuICBpZiAoaGFzU3ltYm9scykge1xuICAgIHZhciBzdGFydHNXaXRoU3VwcG9ydHNTeW1ib2xNYXRjaCA9IHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciByZSA9IC9hLztcbiAgICAgIHJlW1N5bWJvbC5tYXRjaF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAnL2EvJy5zdGFydHNXaXRoKHJlKTtcbiAgICB9KTtcbiAgICBpZiAoIXN0YXJ0c1dpdGhTdXBwb3J0c1N5bWJvbE1hdGNoKSB7XG4gICAgICBvdmVycmlkZU5hdGl2ZShTdHJpbmcucHJvdG90eXBlLCAnc3RhcnRzV2l0aCcsIFN0cmluZ1Byb3RvdHlwZVNoaW1zLnN0YXJ0c1dpdGgpO1xuICAgIH1cbiAgICB2YXIgZW5kc1dpdGhTdXBwb3J0c1N5bWJvbE1hdGNoID0gdmFsdWVPckZhbHNlSWZUaHJvd3MoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHJlID0gL2EvO1xuICAgICAgcmVbU3ltYm9sLm1hdGNoXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICcvYS8nLmVuZHNXaXRoKHJlKTtcbiAgICB9KTtcbiAgICBpZiAoIWVuZHNXaXRoU3VwcG9ydHNTeW1ib2xNYXRjaCkge1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoU3RyaW5nLnByb3RvdHlwZSwgJ2VuZHNXaXRoJywgU3RyaW5nUHJvdG90eXBlU2hpbXMuZW5kc1dpdGgpO1xuICAgIH1cbiAgICB2YXIgaW5jbHVkZXNTdXBwb3J0c1N5bWJvbE1hdGNoID0gdmFsdWVPckZhbHNlSWZUaHJvd3MoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHJlID0gL2EvO1xuICAgICAgcmVbU3ltYm9sLm1hdGNoXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICcvYS8nLmluY2x1ZGVzKHJlKTtcbiAgICB9KTtcbiAgICBpZiAoIWluY2x1ZGVzU3VwcG9ydHNTeW1ib2xNYXRjaCkge1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoU3RyaW5nLnByb3RvdHlwZSwgJ2luY2x1ZGVzJywgU3RyaW5nUHJvdG90eXBlU2hpbXMuaW5jbHVkZXMpO1xuICAgIH1cbiAgfVxuXG4gIGRlZmluZVByb3BlcnRpZXMoU3RyaW5nLnByb3RvdHlwZSwgU3RyaW5nUHJvdG90eXBlU2hpbXMpO1xuXG4gIC8vIHdoaXRlc3BhY2UgZnJvbTogaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS41LjQuMjBcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vYmxvYi92My40LjAvZXM1LXNoaW0uanMjTDEzMDQtTDEzMjRcbiAgdmFyIHdzID0gW1xuICAgICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycsXG4gICAgJ1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4JyxcbiAgICAnXFx1MjAyOVxcdUZFRkYnXG4gIF0uam9pbignJyk7XG4gIHZhciB0cmltUmVnZXhwID0gbmV3IFJlZ0V4cCgnKF5bJyArIHdzICsgJ10rKXwoWycgKyB3cyArICddKyQpJywgJ2cnKTtcbiAgdmFyIHRyaW1TaGltID0gZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gRVMuVG9TdHJpbmcoRVMuUmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSkucmVwbGFjZSh0cmltUmVnZXhwLCAnJyk7XG4gIH07XG4gIHZhciBub25XUyA9IFsnXFx1MDA4NScsICdcXHUyMDBiJywgJ1xcdWZmZmUnXS5qb2luKCcnKTtcbiAgdmFyIG5vbldTcmVnZXggPSBuZXcgUmVnRXhwKCdbJyArIG5vbldTICsgJ10nLCAnZycpO1xuICB2YXIgaXNCYWRIZXhSZWdleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuICB2YXIgaGFzU3RyaW5nVHJpbUJ1ZyA9IG5vbldTLnRyaW0oKS5sZW5ndGggIT09IG5vbldTLmxlbmd0aDtcbiAgZGVmaW5lUHJvcGVydHkoU3RyaW5nLnByb3RvdHlwZSwgJ3RyaW0nLCB0cmltU2hpbSwgaGFzU3RyaW5nVHJpbUJ1Zyk7XG5cbiAgLy8gR2l2ZW4gYW4gYXJndW1lbnQgeCwgaXQgd2lsbCByZXR1cm4gYW4gSXRlcmF0b3JSZXN1bHQgb2JqZWN0LFxuICAvLyB3aXRoIHZhbHVlIHNldCB0byB4IGFuZCBkb25lIHRvIGZhbHNlLlxuICAvLyBHaXZlbiBubyBhcmd1bWVudHMsIGl0IHdpbGwgcmV0dXJuIGFuIGl0ZXJhdG9yIGNvbXBsZXRpb24gb2JqZWN0LlxuICB2YXIgaXRlcmF0b3JSZXN1bHQgPSBmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB4LCBkb25lOiBhcmd1bWVudHMubGVuZ3RoID09PSAwIH07XG4gIH07XG5cbiAgLy8gc2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1zdHJpbmcucHJvdG90eXBlLUBAaXRlcmF0b3JcbiAgdmFyIFN0cmluZ0l0ZXJhdG9yID0gZnVuY3Rpb24gKHMpIHtcbiAgICBFUy5SZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHMpO1xuICAgIHRoaXMuX3MgPSBFUy5Ub1N0cmluZyhzKTtcbiAgICB0aGlzLl9pID0gMDtcbiAgfTtcbiAgU3RyaW5nSXRlcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHMgPSB0aGlzLl9zO1xuICAgIHZhciBpID0gdGhpcy5faTtcbiAgICBpZiAodHlwZW9mIHMgPT09ICd1bmRlZmluZWQnIHx8IGkgPj0gcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3MgPSB2b2lkIDA7XG4gICAgICByZXR1cm4gaXRlcmF0b3JSZXN1bHQoKTtcbiAgICB9XG4gICAgdmFyIGZpcnN0ID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHZhciBzZWNvbmQsIGxlbjtcbiAgICBpZiAoZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYgfHwgKGkgKyAxKSA9PT0gcy5sZW5ndGgpIHtcbiAgICAgIGxlbiA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlY29uZCA9IHMuY2hhckNvZGVBdChpICsgMSk7XG4gICAgICBsZW4gPSAoc2Vjb25kIDwgMHhEQzAwIHx8IHNlY29uZCA+IDB4REZGRikgPyAxIDogMjtcbiAgICB9XG4gICAgdGhpcy5faSA9IGkgKyBsZW47XG4gICAgcmV0dXJuIGl0ZXJhdG9yUmVzdWx0KHMuc3Vic3RyKGksIGxlbikpO1xuICB9O1xuICBhZGRJdGVyYXRvcihTdHJpbmdJdGVyYXRvci5wcm90b3R5cGUpO1xuICBhZGRJdGVyYXRvcihTdHJpbmcucHJvdG90eXBlLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJpbmdJdGVyYXRvcih0aGlzKTtcbiAgfSk7XG5cbiAgdmFyIEFycmF5U2hpbXMgPSB7XG4gICAgZnJvbTogZnVuY3Rpb24gZnJvbShpdGVtcykge1xuICAgICAgdmFyIEMgPSB0aGlzO1xuICAgICAgdmFyIG1hcEZuO1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIG1hcEZuID0gYXJndW1lbnRzWzFdO1xuICAgICAgfVxuICAgICAgdmFyIG1hcHBpbmcsIFQ7XG4gICAgICBpZiAodHlwZW9mIG1hcEZuID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBtYXBwaW5nID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIUVTLklzQ2FsbGFibGUobWFwRm4pKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkuZnJvbTogd2hlbiBwcm92aWRlZCwgdGhlIHNlY29uZCBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICBUID0gYXJndW1lbnRzWzJdO1xuICAgICAgICB9XG4gICAgICAgIG1hcHBpbmcgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBOb3RlIHRoYXQgdGhhdCBBcnJheXMgd2lsbCB1c2UgQXJyYXlJdGVyYXRvcjpcbiAgICAgIC8vIGh0dHBzOi8vYnVncy5lY21hc2NyaXB0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjQxNlxuICAgICAgdmFyIHVzaW5nSXRlcmF0b3IgPSB0eXBlb2YgKGlzQXJndW1lbnRzKGl0ZW1zKSB8fCBFUy5HZXRNZXRob2QoaXRlbXMsICRpdGVyYXRvciQpKSAhPT0gJ3VuZGVmaW5lZCc7XG5cbiAgICAgIHZhciBsZW5ndGgsIHJlc3VsdCwgaTtcbiAgICAgIGlmICh1c2luZ0l0ZXJhdG9yKSB7XG4gICAgICAgIHJlc3VsdCA9IEVTLklzQ29uc3RydWN0b3IoQykgPyBPYmplY3QobmV3IEMoKSkgOiBbXTtcbiAgICAgICAgdmFyIGl0ZXJhdG9yID0gRVMuR2V0SXRlcmF0b3IoaXRlbXMpO1xuICAgICAgICB2YXIgbmV4dCwgbmV4dFZhbHVlO1xuXG4gICAgICAgIGkgPSAwO1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgIG5leHQgPSBFUy5JdGVyYXRvclN0ZXAoaXRlcmF0b3IpO1xuICAgICAgICAgIGlmIChuZXh0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5leHRWYWx1ZSA9IG5leHQudmFsdWU7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChtYXBwaW5nKSB7XG4gICAgICAgICAgICAgIG5leHRWYWx1ZSA9IHR5cGVvZiBUID09PSAndW5kZWZpbmVkJyA/IG1hcEZuKG5leHRWYWx1ZSwgaSkgOiBfY2FsbChtYXBGbiwgVCwgbmV4dFZhbHVlLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdFtpXSA9IG5leHRWYWx1ZTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBFUy5JdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCB0cnVlKTtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBsZW5ndGggPSBpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGFycmF5TGlrZSA9IEVTLlRvT2JqZWN0KGl0ZW1zKTtcbiAgICAgICAgbGVuZ3RoID0gRVMuVG9MZW5ndGgoYXJyYXlMaWtlLmxlbmd0aCk7XG4gICAgICAgIHJlc3VsdCA9IEVTLklzQ29uc3RydWN0b3IoQykgPyBPYmplY3QobmV3IEMobGVuZ3RoKSkgOiBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICB2YWx1ZSA9IGFycmF5TGlrZVtpXTtcbiAgICAgICAgICBpZiAobWFwcGluZykge1xuICAgICAgICAgICAgdmFsdWUgPSB0eXBlb2YgVCA9PT0gJ3VuZGVmaW5lZCcgPyBtYXBGbih2YWx1ZSwgaSkgOiBfY2FsbChtYXBGbiwgVCwgdmFsdWUsIGkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjcmVhdGVEYXRhUHJvcGVydHlPclRocm93KHJlc3VsdCwgaSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdC5sZW5ndGggPSBsZW5ndGg7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBvZjogZnVuY3Rpb24gb2YoKSB7XG4gICAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHZhciBDID0gdGhpcztcbiAgICAgIHZhciBBID0gaXNBcnJheShDKSB8fCAhRVMuSXNDYWxsYWJsZShDKSA/IG5ldyBBcnJheShsZW4pIDogRVMuQ29uc3RydWN0KEMsIFtsZW5dKTtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgbGVuOyArK2spIHtcbiAgICAgICAgY3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdyhBLCBrLCBhcmd1bWVudHNba10pO1xuICAgICAgfVxuICAgICAgQS5sZW5ndGggPSBsZW47XG4gICAgICByZXR1cm4gQTtcbiAgICB9XG4gIH07XG4gIGRlZmluZVByb3BlcnRpZXMoQXJyYXksIEFycmF5U2hpbXMpO1xuICBhZGREZWZhdWx0U3BlY2llcyhBcnJheSk7XG5cbiAgLy8gT3VyIEFycmF5SXRlcmF0b3IgaXMgcHJpdmF0ZTsgc2VlXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wYXVsbWlsbHIvZXM2LXNoaW0vaXNzdWVzLzI1MlxuICBBcnJheUl0ZXJhdG9yID0gZnVuY3Rpb24gKGFycmF5LCBraW5kKSB7XG4gICAgdGhpcy5pID0gMDtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG4gICAgdGhpcy5raW5kID0ga2luZDtcbiAgfTtcblxuICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5SXRlcmF0b3IucHJvdG90eXBlLCB7XG4gICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGkgPSB0aGlzLmk7XG4gICAgICB2YXIgYXJyYXkgPSB0aGlzLmFycmF5O1xuICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEFycmF5SXRlcmF0b3IpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05vdCBhbiBBcnJheUl0ZXJhdG9yJyk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGFycmF5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgbGVuID0gRVMuVG9MZW5ndGgoYXJyYXkubGVuZ3RoKTtcbiAgICAgICAgZm9yICg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIHZhciBraW5kID0gdGhpcy5raW5kO1xuICAgICAgICAgIHZhciByZXR2YWw7XG4gICAgICAgICAgaWYgKGtpbmQgPT09ICdrZXknKSB7XG4gICAgICAgICAgICByZXR2YWwgPSBpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoa2luZCA9PT0gJ3ZhbHVlJykge1xuICAgICAgICAgICAgcmV0dmFsID0gYXJyYXlbaV07XG4gICAgICAgICAgfSBlbHNlIGlmIChraW5kID09PSAnZW50cnknKSB7XG4gICAgICAgICAgICByZXR2YWwgPSBbaSwgYXJyYXlbaV1dO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmkgPSBpICsgMTtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0b3JSZXN1bHQocmV0dmFsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5hcnJheSA9IHZvaWQgMDtcbiAgICAgIHJldHVybiBpdGVyYXRvclJlc3VsdCgpO1xuICAgIH1cbiAgfSk7XG4gIGFkZEl0ZXJhdG9yKEFycmF5SXRlcmF0b3IucHJvdG90eXBlKTtcblxuICAvKlxuICB2YXIgb3JkZXJLZXlzID0gZnVuY3Rpb24gb3JkZXJLZXlzKGEsIGIpIHtcbiAgICB2YXIgYU51bWVyaWMgPSBTdHJpbmcoRVMuVG9JbnRlZ2VyKGEpKSA9PT0gYTtcbiAgICB2YXIgYk51bWVyaWMgPSBTdHJpbmcoRVMuVG9JbnRlZ2VyKGIpKSA9PT0gYjtcbiAgICBpZiAoYU51bWVyaWMgJiYgYk51bWVyaWMpIHtcbiAgICAgIHJldHVybiBiIC0gYTtcbiAgICB9IGVsc2UgaWYgKGFOdW1lcmljICYmICFiTnVtZXJpYykge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH0gZWxzZSBpZiAoIWFOdW1lcmljICYmIGJOdW1lcmljKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGEubG9jYWxlQ29tcGFyZShiKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGdldEFsbEtleXMgPSBmdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICAgIHZhciBvd25LZXlzID0gW107XG4gICAgdmFyIGtleXMgPSBbXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIF9wdXNoKF9oYXNPd25Qcm9wZXJ0eShvYmplY3QsIGtleSkgPyBvd25LZXlzIDoga2V5cywga2V5KTtcbiAgICB9XG4gICAgX3NvcnQob3duS2V5cywgb3JkZXJLZXlzKTtcbiAgICBfc29ydChrZXlzLCBvcmRlcktleXMpO1xuXG4gICAgcmV0dXJuIF9jb25jYXQob3duS2V5cywga2V5cyk7XG4gIH07XG4gICovXG5cbiAgLy8gbm90ZTogdGhpcyBpcyBwb3NpdGlvbmVkIGhlcmUgYmVjYXVzZSBpdCBkZXBlbmRzIG9uIEFycmF5SXRlcmF0b3JcbiAgdmFyIGFycmF5T2ZTdXBwb3J0c1N1YmNsYXNzaW5nID0gQXJyYXkub2YgPT09IEFycmF5U2hpbXMub2YgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBEZXRlY3RzIGEgYnVnIGluIFdlYmtpdCBuaWdodGx5IHIxODE4ODZcbiAgICB2YXIgRm9vID0gZnVuY3Rpb24gRm9vKGxlbikgeyB0aGlzLmxlbmd0aCA9IGxlbjsgfTtcbiAgICBGb28ucHJvdG90eXBlID0gW107XG4gICAgdmFyIGZvb0FyciA9IEFycmF5Lm9mLmFwcGx5KEZvbywgWzEsIDJdKTtcbiAgICByZXR1cm4gZm9vQXJyIGluc3RhbmNlb2YgRm9vICYmIGZvb0Fyci5sZW5ndGggPT09IDI7XG4gIH0oKSk7XG4gIGlmICghYXJyYXlPZlN1cHBvcnRzU3ViY2xhc3NpbmcpIHtcbiAgICBvdmVycmlkZU5hdGl2ZShBcnJheSwgJ29mJywgQXJyYXlTaGltcy5vZik7XG4gIH1cblxuICB2YXIgQXJyYXlQcm90b3R5cGVTaGltcyA9IHtcbiAgICBjb3B5V2l0aGluOiBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCwgc3RhcnQpIHtcbiAgICAgIHZhciBvID0gRVMuVG9PYmplY3QodGhpcyk7XG4gICAgICB2YXIgbGVuID0gRVMuVG9MZW5ndGgoby5sZW5ndGgpO1xuICAgICAgdmFyIHJlbGF0aXZlVGFyZ2V0ID0gRVMuVG9JbnRlZ2VyKHRhcmdldCk7XG4gICAgICB2YXIgcmVsYXRpdmVTdGFydCA9IEVTLlRvSW50ZWdlcihzdGFydCk7XG4gICAgICB2YXIgdG8gPSByZWxhdGl2ZVRhcmdldCA8IDAgPyBfbWF4KGxlbiArIHJlbGF0aXZlVGFyZ2V0LCAwKSA6IF9taW4ocmVsYXRpdmVUYXJnZXQsIGxlbik7XG4gICAgICB2YXIgZnJvbSA9IHJlbGF0aXZlU3RhcnQgPCAwID8gX21heChsZW4gKyByZWxhdGl2ZVN0YXJ0LCAwKSA6IF9taW4ocmVsYXRpdmVTdGFydCwgbGVuKTtcbiAgICAgIHZhciBlbmQ7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgZW5kID0gYXJndW1lbnRzWzJdO1xuICAgICAgfVxuICAgICAgdmFyIHJlbGF0aXZlRW5kID0gdHlwZW9mIGVuZCA9PT0gJ3VuZGVmaW5lZCcgPyBsZW4gOiBFUy5Ub0ludGVnZXIoZW5kKTtcbiAgICAgIHZhciBmaW5hbEl0ZW0gPSByZWxhdGl2ZUVuZCA8IDAgPyBfbWF4KGxlbiArIHJlbGF0aXZlRW5kLCAwKSA6IF9taW4ocmVsYXRpdmVFbmQsIGxlbik7XG4gICAgICB2YXIgY291bnQgPSBfbWluKGZpbmFsSXRlbSAtIGZyb20sIGxlbiAtIHRvKTtcbiAgICAgIHZhciBkaXJlY3Rpb24gPSAxO1xuICAgICAgaWYgKGZyb20gPCB0byAmJiB0byA8IChmcm9tICsgY291bnQpKSB7XG4gICAgICAgIGRpcmVjdGlvbiA9IC0xO1xuICAgICAgICBmcm9tICs9IGNvdW50IC0gMTtcbiAgICAgICAgdG8gKz0gY291bnQgLSAxO1xuICAgICAgfVxuICAgICAgd2hpbGUgKGNvdW50ID4gMCkge1xuICAgICAgICBpZiAoZnJvbSBpbiBvKSB7XG4gICAgICAgICAgb1t0b10gPSBvW2Zyb21dO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSBvW3RvXTtcbiAgICAgICAgfVxuICAgICAgICBmcm9tICs9IGRpcmVjdGlvbjtcbiAgICAgICAgdG8gKz0gZGlyZWN0aW9uO1xuICAgICAgICBjb3VudCAtPSAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG87XG4gICAgfSxcblxuICAgIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUpIHtcbiAgICAgIHZhciBzdGFydDtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBzdGFydCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgIH1cbiAgICAgIHZhciBlbmQ7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgZW5kID0gYXJndW1lbnRzWzJdO1xuICAgICAgfVxuICAgICAgdmFyIE8gPSBFUy5Ub09iamVjdCh0aGlzKTtcbiAgICAgIHZhciBsZW4gPSBFUy5Ub0xlbmd0aChPLmxlbmd0aCk7XG4gICAgICBzdGFydCA9IEVTLlRvSW50ZWdlcih0eXBlb2Ygc3RhcnQgPT09ICd1bmRlZmluZWQnID8gMCA6IHN0YXJ0KTtcbiAgICAgIGVuZCA9IEVTLlRvSW50ZWdlcih0eXBlb2YgZW5kID09PSAndW5kZWZpbmVkJyA/IGxlbiA6IGVuZCk7XG5cbiAgICAgIHZhciByZWxhdGl2ZVN0YXJ0ID0gc3RhcnQgPCAwID8gX21heChsZW4gKyBzdGFydCwgMCkgOiBfbWluKHN0YXJ0LCBsZW4pO1xuICAgICAgdmFyIHJlbGF0aXZlRW5kID0gZW5kIDwgMCA/IGxlbiArIGVuZCA6IGVuZDtcblxuICAgICAgZm9yICh2YXIgaSA9IHJlbGF0aXZlU3RhcnQ7IGkgPCBsZW4gJiYgaSA8IHJlbGF0aXZlRW5kOyArK2kpIHtcbiAgICAgICAgT1tpXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE87XG4gICAgfSxcblxuICAgIGZpbmQ6IGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlKSB7XG4gICAgICB2YXIgbGlzdCA9IEVTLlRvT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIGxlbmd0aCA9IEVTLlRvTGVuZ3RoKGxpc3QubGVuZ3RoKTtcbiAgICAgIGlmICghRVMuSXNDYWxsYWJsZShwcmVkaWNhdGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5I2ZpbmQ6IHByZWRpY2F0ZSBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICAgIHZhciB0aGlzQXJnID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIHZhbHVlOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWUgPSBsaXN0W2ldO1xuICAgICAgICBpZiAodGhpc0FyZykge1xuICAgICAgICAgIGlmIChfY2FsbChwcmVkaWNhdGUsIHRoaXNBcmcsIHZhbHVlLCBpLCBsaXN0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwcmVkaWNhdGUodmFsdWUsIGksIGxpc3QpKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGxpc3QgPSBFUy5Ub09iamVjdCh0aGlzKTtcbiAgICAgIHZhciBsZW5ndGggPSBFUy5Ub0xlbmd0aChsaXN0Lmxlbmd0aCk7XG4gICAgICBpZiAoIUVTLklzQ2FsbGFibGUocHJlZGljYXRlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheSNmaW5kSW5kZXg6IHByZWRpY2F0ZSBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICAgIHZhciB0aGlzQXJnID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodGhpc0FyZykge1xuICAgICAgICAgIGlmIChfY2FsbChwcmVkaWNhdGUsIHRoaXNBcmcsIGxpc3RbaV0sIGksIGxpc3QpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocHJlZGljYXRlKGxpc3RbaV0sIGksIGxpc3QpKSB7XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9LFxuXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBuZXcgQXJyYXlJdGVyYXRvcih0aGlzLCAna2V5Jyk7XG4gICAgfSxcblxuICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgcmV0dXJuIG5ldyBBcnJheUl0ZXJhdG9yKHRoaXMsICd2YWx1ZScpO1xuICAgIH0sXG5cbiAgICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICAgICAgcmV0dXJuIG5ldyBBcnJheUl0ZXJhdG9yKHRoaXMsICdlbnRyeScpO1xuICAgIH1cbiAgfTtcbiAgLy8gU2FmYXJpIDcuMSBkZWZpbmVzIEFycmF5I2tleXMgYW5kIEFycmF5I2VudHJpZXMgbmF0aXZlbHksXG4gIC8vIGJ1dCB0aGUgcmVzdWx0aW5nIEFycmF5SXRlcmF0b3Igb2JqZWN0cyBkb24ndCBoYXZlIGEgXCJuZXh0XCIgbWV0aG9kLlxuICBpZiAoQXJyYXkucHJvdG90eXBlLmtleXMgJiYgIUVTLklzQ2FsbGFibGUoWzFdLmtleXMoKS5uZXh0KSkge1xuICAgIGRlbGV0ZSBBcnJheS5wcm90b3R5cGUua2V5cztcbiAgfVxuICBpZiAoQXJyYXkucHJvdG90eXBlLmVudHJpZXMgJiYgIUVTLklzQ2FsbGFibGUoWzFdLmVudHJpZXMoKS5uZXh0KSkge1xuICAgIGRlbGV0ZSBBcnJheS5wcm90b3R5cGUuZW50cmllcztcbiAgfVxuXG4gIC8vIENocm9tZSAzOCBkZWZpbmVzIEFycmF5I2tleXMgYW5kIEFycmF5I2VudHJpZXMsIGFuZCBBcnJheSNAQGl0ZXJhdG9yLCBidXQgbm90IEFycmF5I3ZhbHVlc1xuICBpZiAoQXJyYXkucHJvdG90eXBlLmtleXMgJiYgQXJyYXkucHJvdG90eXBlLmVudHJpZXMgJiYgIUFycmF5LnByb3RvdHlwZS52YWx1ZXMgJiYgQXJyYXkucHJvdG90eXBlWyRpdGVyYXRvciRdKSB7XG4gICAgZGVmaW5lUHJvcGVydGllcyhBcnJheS5wcm90b3R5cGUsIHtcbiAgICAgIHZhbHVlczogQXJyYXkucHJvdG90eXBlWyRpdGVyYXRvciRdXG4gICAgfSk7XG4gICAgaWYgKFR5cGUuc3ltYm9sKFN5bWJvbC51bnNjb3BhYmxlcykpIHtcbiAgICAgIEFycmF5LnByb3RvdHlwZVtTeW1ib2wudW5zY29wYWJsZXNdLnZhbHVlcyA9IHRydWU7XG4gICAgfVxuICB9XG4gIC8vIENocm9tZSA0MCBkZWZpbmVzIEFycmF5I3ZhbHVlcyB3aXRoIHRoZSBpbmNvcnJlY3QgbmFtZSwgYWx0aG91Z2ggQXJyYXkje2tleXMsZW50cmllc30gaGF2ZSB0aGUgY29ycmVjdCBuYW1lXG4gIGlmIChmdW5jdGlvbnNIYXZlTmFtZXMgJiYgQXJyYXkucHJvdG90eXBlLnZhbHVlcyAmJiBBcnJheS5wcm90b3R5cGUudmFsdWVzLm5hbWUgIT09ICd2YWx1ZXMnKSB7XG4gICAgdmFyIG9yaWdpbmFsQXJyYXlQcm90b3R5cGVWYWx1ZXMgPSBBcnJheS5wcm90b3R5cGUudmFsdWVzO1xuICAgIG92ZXJyaWRlTmF0aXZlKEFycmF5LnByb3RvdHlwZSwgJ3ZhbHVlcycsIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIEVTLkNhbGwob3JpZ2luYWxBcnJheVByb3RvdHlwZVZhbHVlcywgdGhpcywgYXJndW1lbnRzKTsgfSk7XG4gICAgZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCAkaXRlcmF0b3IkLCBBcnJheS5wcm90b3R5cGUudmFsdWVzLCB0cnVlKTtcbiAgfVxuICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5LnByb3RvdHlwZSwgQXJyYXlQcm90b3R5cGVTaGltcyk7XG5cbiAgaWYgKDEgLyBbdHJ1ZV0uaW5kZXhPZih0cnVlLCAtMCkgPCAwKSB7XG4gICAgLy8gaW5kZXhPZiB3aGVuIGdpdmVuIGEgcG9zaXRpb24gYXJnIG9mIC0wIHNob3VsZCByZXR1cm4gKzAuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvZWNtYTI2Mi9wdWxsLzMxNlxuICAgIGRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgJ2luZGV4T2YnLCBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQpIHtcbiAgICAgIHZhciB2YWx1ZSA9IF9hcnJheUluZGV4T2ZBcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHZhbHVlID09PSAwICYmICgxIC8gdmFsdWUpIDwgMCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LCB0cnVlKTtcbiAgfVxuXG4gIGFkZEl0ZXJhdG9yKEFycmF5LnByb3RvdHlwZSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy52YWx1ZXMoKTsgfSk7XG4gIC8vIENocm9tZSBkZWZpbmVzIGtleXMvdmFsdWVzL2VudHJpZXMgb24gQXJyYXksIGJ1dCBkb2Vzbid0IGdpdmUgdXNcbiAgLy8gYW55IHdheSB0byBpZGVudGlmeSBpdHMgaXRlcmF0b3IuICBTbyBhZGQgb3VyIG93biBzaGltbWVkIGZpZWxkLlxuICBpZiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKSB7XG4gICAgYWRkSXRlcmF0b3IoT2JqZWN0LmdldFByb3RvdHlwZU9mKFtdLnZhbHVlcygpKSk7XG4gIH1cblxuICAvLyBub3RlOiB0aGlzIGlzIHBvc2l0aW9uZWQgaGVyZSBiZWNhdXNlIGl0IHJlbGllcyBvbiBBcnJheSNlbnRyaWVzXG4gIHZhciBhcnJheUZyb21Td2FsbG93c05lZ2F0aXZlTGVuZ3RocyA9IChmdW5jdGlvbiAoKSB7XG4gICAgLy8gRGV0ZWN0cyBhIEZpcmVmb3ggYnVnIGluIHYzMlxuICAgIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEwNjM5OTNcbiAgICByZXR1cm4gdmFsdWVPckZhbHNlSWZUaHJvd3MoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIEFycmF5LmZyb20oeyBsZW5ndGg6IC0xIH0pLmxlbmd0aCA9PT0gMDtcbiAgICB9KTtcbiAgfSgpKTtcbiAgdmFyIGFycmF5RnJvbUhhbmRsZXNJdGVyYWJsZXMgPSAoZnVuY3Rpb24gKCkge1xuICAgIC8vIERldGVjdHMgYSBidWcgaW4gV2Via2l0IG5pZ2h0bHkgcjE4MTg4NlxuICAgIHZhciBhcnIgPSBBcnJheS5mcm9tKFswXS5lbnRyaWVzKCkpO1xuICAgIHJldHVybiBhcnIubGVuZ3RoID09PSAxICYmIGlzQXJyYXkoYXJyWzBdKSAmJiBhcnJbMF1bMF0gPT09IDAgJiYgYXJyWzBdWzFdID09PSAwO1xuICB9KCkpO1xuICBpZiAoIWFycmF5RnJvbVN3YWxsb3dzTmVnYXRpdmVMZW5ndGhzIHx8ICFhcnJheUZyb21IYW5kbGVzSXRlcmFibGVzKSB7XG4gICAgb3ZlcnJpZGVOYXRpdmUoQXJyYXksICdmcm9tJywgQXJyYXlTaGltcy5mcm9tKTtcbiAgfVxuICB2YXIgYXJyYXlGcm9tSGFuZGxlc1VuZGVmaW5lZE1hcEZ1bmN0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBNaWNyb3NvZnQgRWRnZSB2MC4xMSB0aHJvd3MgaWYgdGhlIG1hcEZuIGFyZ3VtZW50IGlzICpwcm92aWRlZCogYnV0IHVuZGVmaW5lZCxcbiAgICAvLyBidXQgdGhlIHNwZWMgZG9lc24ndCBjYXJlIGlmIGl0J3MgcHJvdmlkZWQgb3Igbm90IC0gdW5kZWZpbmVkIGRvZXNuJ3QgdGhyb3cuXG4gICAgcmV0dXJuIHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBBcnJheS5mcm9tKFswXSwgdm9pZCAwKTtcbiAgICB9KTtcbiAgfSgpKTtcbiAgaWYgKCFhcnJheUZyb21IYW5kbGVzVW5kZWZpbmVkTWFwRnVuY3Rpb24pIHtcbiAgICB2YXIgb3JpZ0FycmF5RnJvbSA9IEFycmF5LmZyb207XG4gICAgb3ZlcnJpZGVOYXRpdmUoQXJyYXksICdmcm9tJywgZnVuY3Rpb24gZnJvbShpdGVtcykge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIHR5cGVvZiBhcmd1bWVudHNbMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBFUy5DYWxsKG9yaWdBcnJheUZyb20sIHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gX2NhbGwob3JpZ0FycmF5RnJvbSwgdGhpcywgaXRlbXMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGludDMyc0FzT25lID0gLShNYXRoLnBvdygyLCAzMikgLSAxKTtcbiAgdmFyIHRvTGVuZ3Roc0NvcnJlY3RseSA9IGZ1bmN0aW9uIChtZXRob2QsIHJldmVyc2VkKSB7XG4gICAgdmFyIG9iaiA9IHsgbGVuZ3RoOiBpbnQzMnNBc09uZSB9O1xuICAgIG9ialtyZXZlcnNlZCA/IChvYmoubGVuZ3RoID4+PiAwKSAtIDEgOiAwXSA9IHRydWU7XG4gICAgcmV0dXJuIHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICAgIF9jYWxsKG1ldGhvZCwgb2JqLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIG5vdGU6IGluIG5vbmNvbmZvcm1pbmcgYnJvd3NlcnMsIHRoaXMgd2lsbCBiZSBjYWxsZWRcbiAgICAgICAgLy8gLTEgPj4+IDAgdGltZXMsIHdoaWNoIGlzIDQyOTQ5NjcyOTUsIHNvIHRoZSB0aHJvdyBtYXR0ZXJzLlxuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc2hvdWxkIG5vdCByZWFjaCBoZXJlJyk7XG4gICAgICB9LCBbXSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfTtcbiAgaWYgKCF0b0xlbmd0aHNDb3JyZWN0bHkoQXJyYXkucHJvdG90eXBlLmZvckVhY2gpKSB7XG4gICAgdmFyIG9yaWdpbmFsRm9yRWFjaCA9IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoO1xuICAgIG92ZXJyaWRlTmF0aXZlKEFycmF5LnByb3RvdHlwZSwgJ2ZvckVhY2gnLCBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrRm4pIHtcbiAgICAgIHJldHVybiBFUy5DYWxsKG9yaWdpbmFsRm9yRWFjaCwgdGhpcy5sZW5ndGggPj0gMCA/IHRoaXMgOiBbXSwgYXJndW1lbnRzKTtcbiAgICB9LCB0cnVlKTtcbiAgfVxuICBpZiAoIXRvTGVuZ3Roc0NvcnJlY3RseShBcnJheS5wcm90b3R5cGUubWFwKSkge1xuICAgIHZhciBvcmlnaW5hbE1hcCA9IEFycmF5LnByb3RvdHlwZS5tYXA7XG4gICAgb3ZlcnJpZGVOYXRpdmUoQXJyYXkucHJvdG90eXBlLCAnbWFwJywgZnVuY3Rpb24gbWFwKGNhbGxiYWNrRm4pIHtcbiAgICAgIHJldHVybiBFUy5DYWxsKG9yaWdpbmFsTWFwLCB0aGlzLmxlbmd0aCA+PSAwID8gdGhpcyA6IFtdLCBhcmd1bWVudHMpO1xuICAgIH0sIHRydWUpO1xuICB9XG4gIGlmICghdG9MZW5ndGhzQ29ycmVjdGx5KEFycmF5LnByb3RvdHlwZS5maWx0ZXIpKSB7XG4gICAgdmFyIG9yaWdpbmFsRmlsdGVyID0gQXJyYXkucHJvdG90eXBlLmZpbHRlcjtcbiAgICBvdmVycmlkZU5hdGl2ZShBcnJheS5wcm90b3R5cGUsICdmaWx0ZXInLCBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tGbikge1xuICAgICAgcmV0dXJuIEVTLkNhbGwob3JpZ2luYWxGaWx0ZXIsIHRoaXMubGVuZ3RoID49IDAgPyB0aGlzIDogW10sIGFyZ3VtZW50cyk7XG4gICAgfSwgdHJ1ZSk7XG4gIH1cbiAgaWYgKCF0b0xlbmd0aHNDb3JyZWN0bHkoQXJyYXkucHJvdG90eXBlLnNvbWUpKSB7XG4gICAgdmFyIG9yaWdpbmFsU29tZSA9IEFycmF5LnByb3RvdHlwZS5zb21lO1xuICAgIG92ZXJyaWRlTmF0aXZlKEFycmF5LnByb3RvdHlwZSwgJ3NvbWUnLCBmdW5jdGlvbiBzb21lKGNhbGxiYWNrRm4pIHtcbiAgICAgIHJldHVybiBFUy5DYWxsKG9yaWdpbmFsU29tZSwgdGhpcy5sZW5ndGggPj0gMCA/IHRoaXMgOiBbXSwgYXJndW1lbnRzKTtcbiAgICB9LCB0cnVlKTtcbiAgfVxuICBpZiAoIXRvTGVuZ3Roc0NvcnJlY3RseShBcnJheS5wcm90b3R5cGUuZXZlcnkpKSB7XG4gICAgdmFyIG9yaWdpbmFsRXZlcnkgPSBBcnJheS5wcm90b3R5cGUuZXZlcnk7XG4gICAgb3ZlcnJpZGVOYXRpdmUoQXJyYXkucHJvdG90eXBlLCAnZXZlcnknLCBmdW5jdGlvbiBldmVyeShjYWxsYmFja0ZuKSB7XG4gICAgICByZXR1cm4gRVMuQ2FsbChvcmlnaW5hbEV2ZXJ5LCB0aGlzLmxlbmd0aCA+PSAwID8gdGhpcyA6IFtdLCBhcmd1bWVudHMpO1xuICAgIH0sIHRydWUpO1xuICB9XG4gIGlmICghdG9MZW5ndGhzQ29ycmVjdGx5KEFycmF5LnByb3RvdHlwZS5yZWR1Y2UpKSB7XG4gICAgdmFyIG9yaWdpbmFsUmVkdWNlID0gQXJyYXkucHJvdG90eXBlLnJlZHVjZTtcbiAgICBvdmVycmlkZU5hdGl2ZShBcnJheS5wcm90b3R5cGUsICdyZWR1Y2UnLCBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tGbikge1xuICAgICAgcmV0dXJuIEVTLkNhbGwob3JpZ2luYWxSZWR1Y2UsIHRoaXMubGVuZ3RoID49IDAgPyB0aGlzIDogW10sIGFyZ3VtZW50cyk7XG4gICAgfSwgdHJ1ZSk7XG4gIH1cbiAgaWYgKCF0b0xlbmd0aHNDb3JyZWN0bHkoQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0LCB0cnVlKSkge1xuICAgIHZhciBvcmlnaW5hbFJlZHVjZVJpZ2h0ID0gQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0O1xuICAgIG92ZXJyaWRlTmF0aXZlKEFycmF5LnByb3RvdHlwZSwgJ3JlZHVjZVJpZ2h0JywgZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tGbikge1xuICAgICAgcmV0dXJuIEVTLkNhbGwob3JpZ2luYWxSZWR1Y2VSaWdodCwgdGhpcy5sZW5ndGggPj0gMCA/IHRoaXMgOiBbXSwgYXJndW1lbnRzKTtcbiAgICB9LCB0cnVlKTtcbiAgfVxuXG4gIHZhciBsYWNrc09jdGFsU3VwcG9ydCA9IE51bWJlcignMG8xMCcpICE9PSA4O1xuICB2YXIgbGFja3NCaW5hcnlTdXBwb3J0ID0gTnVtYmVyKCcwYjEwJykgIT09IDI7XG4gIHZhciB0cmltc05vbldoaXRlc3BhY2UgPSBfc29tZShub25XUywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gTnVtYmVyKGMgKyAwICsgYykgPT09IDA7XG4gIH0pO1xuICBpZiAobGFja3NPY3RhbFN1cHBvcnQgfHwgbGFja3NCaW5hcnlTdXBwb3J0IHx8IHRyaW1zTm9uV2hpdGVzcGFjZSkge1xuICAgIHZhciBPcmlnTnVtYmVyID0gTnVtYmVyO1xuICAgIHZhciBiaW5hcnlSZWdleCA9IC9eMGJbMDFdKyQvaTtcbiAgICB2YXIgb2N0YWxSZWdleCA9IC9eMG9bMC03XSskL2k7XG4gICAgLy8gTm90ZSB0aGF0IGluIElFIDgsIFJlZ0V4cC5wcm90b3R5cGUudGVzdCBkb2Vzbid0IHNlZW0gdG8gZXhpc3Q6IGllLCBcInRlc3RcIiBpcyBhbiBvd24gcHJvcGVydHkgb2YgcmVnZXhlcy4gd3RmLlxuICAgIHZhciBpc0JpbmFyeSA9IGJpbmFyeVJlZ2V4LnRlc3QuYmluZChiaW5hcnlSZWdleCk7XG4gICAgdmFyIGlzT2N0YWwgPSBvY3RhbFJlZ2V4LnRlc3QuYmluZChvY3RhbFJlZ2V4KTtcbiAgICB2YXIgdG9QcmltaXRpdmUgPSBmdW5jdGlvbiAoTykgeyAvLyBuZWVkIHRvIHJlcGxhY2UgdGhpcyB3aXRoIGBlcy10by1wcmltaXRpdmUvZXM2YFxuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmICh0eXBlb2YgTy52YWx1ZU9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJlc3VsdCA9IE8udmFsdWVPZigpO1xuICAgICAgICBpZiAoVHlwZS5wcmltaXRpdmUocmVzdWx0KSkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgTy50b1N0cmluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXN1bHQgPSBPLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmIChUeXBlLnByaW1pdGl2ZShyZXN1bHQpKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTm8gZGVmYXVsdCB2YWx1ZScpO1xuICAgIH07XG4gICAgdmFyIGhhc05vbldTID0gbm9uV1NyZWdleC50ZXN0LmJpbmQobm9uV1NyZWdleCk7XG4gICAgdmFyIGlzQmFkSGV4ID0gaXNCYWRIZXhSZWdleC50ZXN0LmJpbmQoaXNCYWRIZXhSZWdleCk7XG4gICAgdmFyIE51bWJlclNoaW0gPSAoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gdGhpcyBpcyB3cmFwcGVkIGluIGFuIElJRkUgYmVjYXVzZSBvZiBJRSA2LTgncyB3YWNreSBzY29waW5nIGlzc3VlcyB3aXRoIG5hbWVkIGZ1bmN0aW9uIGV4cHJlc3Npb25zLlxuICAgICAgdmFyIE51bWJlclNoaW0gPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcbiAgICAgICAgdmFyIHByaW1WYWx1ZTtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcHJpbVZhbHVlID0gVHlwZS5wcmltaXRpdmUodmFsdWUpID8gdmFsdWUgOiB0b1ByaW1pdGl2ZSh2YWx1ZSwgJ251bWJlcicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByaW1WYWx1ZSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBwcmltVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcHJpbVZhbHVlID0gRVMuQ2FsbCh0cmltU2hpbSwgcHJpbVZhbHVlKTtcbiAgICAgICAgICBpZiAoaXNCaW5hcnkocHJpbVZhbHVlKSkge1xuICAgICAgICAgICAgcHJpbVZhbHVlID0gcGFyc2VJbnQoX3N0clNsaWNlKHByaW1WYWx1ZSwgMiksIDIpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNPY3RhbChwcmltVmFsdWUpKSB7XG4gICAgICAgICAgICBwcmltVmFsdWUgPSBwYXJzZUludChfc3RyU2xpY2UocHJpbVZhbHVlLCAyKSwgOCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNOb25XUyhwcmltVmFsdWUpIHx8IGlzQmFkSGV4KHByaW1WYWx1ZSkpIHtcbiAgICAgICAgICAgIHByaW1WYWx1ZSA9IE5hTjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlY2VpdmVyID0gdGhpcztcbiAgICAgICAgdmFyIHZhbHVlT2ZTdWNjZWVkcyA9IHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBPcmlnTnVtYmVyLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwocmVjZWl2ZXIpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHJlY2VpdmVyIGluc3RhbmNlb2YgTnVtYmVyU2hpbSAmJiAhdmFsdWVPZlN1Y2NlZWRzKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBPcmlnTnVtYmVyKHByaW1WYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9yaWdOdW1iZXIocHJpbVZhbHVlKTtcbiAgICAgIH07XG4gICAgICByZXR1cm4gTnVtYmVyU2hpbTtcbiAgICB9KCkpO1xuICAgIHdyYXBDb25zdHJ1Y3RvcihPcmlnTnVtYmVyLCBOdW1iZXJTaGltLCB7fSk7XG4gICAgLy8gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIEVTMyBicm93c2Vycywgd2hlcmUgdGhlc2UgcHJvcGVydGllcyBhcmUgbm9uLWVudW1lcmFibGUuXG4gICAgZGVmaW5lUHJvcGVydGllcyhOdW1iZXJTaGltLCB7XG4gICAgICBOYU46IE9yaWdOdW1iZXIuTmFOLFxuICAgICAgTUFYX1ZBTFVFOiBPcmlnTnVtYmVyLk1BWF9WQUxVRSxcbiAgICAgIE1JTl9WQUxVRTogT3JpZ051bWJlci5NSU5fVkFMVUUsXG4gICAgICBORUdBVElWRV9JTkZJTklUWTogT3JpZ051bWJlci5ORUdBVElWRV9JTkZJTklUWSxcbiAgICAgIFBPU0lUSVZFX0lORklOSVRZOiBPcmlnTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZXG4gICAgfSk7XG4gICAgLyogZ2xvYmFscyBOdW1iZXI6IHRydWUgKi9cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiwgbm8tZ2xvYmFsLWFzc2lnbiAqL1xuICAgIE51bWJlciA9IE51bWJlclNoaW07XG4gICAgVmFsdWUucmVkZWZpbmUoZ2xvYmFscywgJ051bWJlcicsIE51bWJlclNoaW0pO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5kZWYsIG5vLWdsb2JhbC1hc3NpZ24gKi9cbiAgICAvKiBnbG9iYWxzIE51bWJlcjogZmFsc2UgKi9cbiAgfVxuXG4gIHZhciBtYXhTYWZlSW50ZWdlciA9IE1hdGgucG93KDIsIDUzKSAtIDE7XG4gIGRlZmluZVByb3BlcnRpZXMoTnVtYmVyLCB7XG4gICAgTUFYX1NBRkVfSU5URUdFUjogbWF4U2FmZUludGVnZXIsXG4gICAgTUlOX1NBRkVfSU5URUdFUjogLW1heFNhZmVJbnRlZ2VyLFxuICAgIEVQU0lMT046IDIuMjIwNDQ2MDQ5MjUwMzEzZS0xNixcblxuICAgIHBhcnNlSW50OiBnbG9iYWxzLnBhcnNlSW50LFxuICAgIHBhcnNlRmxvYXQ6IGdsb2JhbHMucGFyc2VGbG9hdCxcblxuICAgIGlzRmluaXRlOiBudW1iZXJJc0Zpbml0ZSxcblxuICAgIGlzSW50ZWdlcjogZnVuY3Rpb24gaXNJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gbnVtYmVySXNGaW5pdGUodmFsdWUpICYmIEVTLlRvSW50ZWdlcih2YWx1ZSkgPT09IHZhbHVlO1xuICAgIH0sXG5cbiAgICBpc1NhZmVJbnRlZ2VyOiBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSkgJiYgX2Ficyh2YWx1ZSkgPD0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfSxcblxuICAgIGlzTmFOOiBudW1iZXJJc05hTlxuICB9KTtcbiAgLy8gRmlyZWZveCAzNyBoYXMgYSBjb25mb3JtaW5nIE51bWJlci5wYXJzZUludCwgYnV0IGl0J3Mgbm90ID09PSB0byB0aGUgZ2xvYmFsIHBhcnNlSW50IChmaXhlZCBpbiB2NDApXG4gIGRlZmluZVByb3BlcnR5KE51bWJlciwgJ3BhcnNlSW50JywgZ2xvYmFscy5wYXJzZUludCwgTnVtYmVyLnBhcnNlSW50ICE9PSBnbG9iYWxzLnBhcnNlSW50KTtcblxuICAvLyBXb3JrIGFyb3VuZCBidWdzIGluIEFycmF5I2ZpbmQgYW5kIEFycmF5I2ZpbmRJbmRleCAtLSBlYXJseVxuICAvLyBpbXBsZW1lbnRhdGlvbnMgc2tpcHBlZCBob2xlcyBpbiBzcGFyc2UgYXJyYXlzLiAoTm90ZSB0aGF0IHRoZVxuICAvLyBpbXBsZW1lbnRhdGlvbnMgb2YgZmluZC9maW5kSW5kZXggaW5kaXJlY3RseSB1c2Ugc2hpbW1lZFxuICAvLyBtZXRob2RzIG9mIE51bWJlciwgc28gdGhpcyB0ZXN0IGhhcyB0byBoYXBwZW4gZG93biBoZXJlLilcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tc3BhcnNlLWFycmF5cyAqL1xuICBpZiAoWywgMV0uZmluZChmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9KSA9PT0gMSkge1xuICAgIG92ZXJyaWRlTmF0aXZlKEFycmF5LnByb3RvdHlwZSwgJ2ZpbmQnLCBBcnJheVByb3RvdHlwZVNoaW1zLmZpbmQpO1xuICB9XG4gIGlmIChbLCAxXS5maW5kSW5kZXgoZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfSkgIT09IDApIHtcbiAgICBvdmVycmlkZU5hdGl2ZShBcnJheS5wcm90b3R5cGUsICdmaW5kSW5kZXgnLCBBcnJheVByb3RvdHlwZVNoaW1zLmZpbmRJbmRleCk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1zcGFyc2UtYXJyYXlzICovXG5cbiAgdmFyIGlzRW51bWVyYWJsZU9uID0gRnVuY3Rpb24uYmluZC5jYWxsKEZ1bmN0aW9uLmJpbmQsIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUpO1xuICB2YXIgZW5zdXJlRW51bWVyYWJsZSA9IGZ1bmN0aW9uIGVuc3VyZUVudW1lcmFibGUob2JqLCBwcm9wKSB7XG4gICAgaWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMgJiYgaXNFbnVtZXJhYmxlT24ob2JqLCBwcm9wKSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgcHJvcCwgeyBlbnVtZXJhYmxlOiBmYWxzZSB9KTtcbiAgICB9XG4gIH07XG4gIHZhciBzbGljZUFyZ3MgPSBmdW5jdGlvbiBzbGljZUFyZ3MoKSB7XG4gICAgLy8gcGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9wZXRrYWFudG9ub3YvYmx1ZWJpcmQvd2lraS9PcHRpbWl6YXRpb24ta2lsbGVycyMzMi1sZWFraW5nLWFyZ3VtZW50c1xuICAgIC8vIGFuZCBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9XZWJSZWZsZWN0aW9uLzQzMjc3NjJjYjg3YThjNjM0YTI5XG4gICAgdmFyIGluaXRpYWwgPSBOdW1iZXIodGhpcyk7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGRlc2lyZWRBcmdDb3VudCA9IGxlbiAtIGluaXRpYWw7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoZGVzaXJlZEFyZ0NvdW50IDwgMCA/IDAgOiBkZXNpcmVkQXJnQ291bnQpO1xuICAgIGZvciAodmFyIGkgPSBpbml0aWFsOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIGFyZ3NbaSAtIGluaXRpYWxdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gYXJncztcbiAgfTtcbiAgdmFyIGFzc2lnblRvID0gZnVuY3Rpb24gYXNzaWduVG8oc291cmNlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGFzc2lnblRvU291cmNlKHRhcmdldCwga2V5KSB7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9O1xuICB9O1xuICB2YXIgYXNzaWduUmVkdWNlciA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuICAgIHZhciBzb3VyY2VLZXlzID0ga2V5cyhPYmplY3Qoc291cmNlKSk7XG4gICAgdmFyIHN5bWJvbHM7XG4gICAgaWYgKEVTLklzQ2FsbGFibGUoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykpIHtcbiAgICAgIHN5bWJvbHMgPSBfZmlsdGVyKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoT2JqZWN0KHNvdXJjZSkpLCBpc0VudW1lcmFibGVPbihzb3VyY2UpKTtcbiAgICB9XG4gICAgcmV0dXJuIF9yZWR1Y2UoX2NvbmNhdChzb3VyY2VLZXlzLCBzeW1ib2xzIHx8IFtdKSwgYXNzaWduVG8oc291cmNlKSwgdGFyZ2V0KTtcbiAgfTtcblxuICB2YXIgT2JqZWN0U2hpbXMgPSB7XG4gICAgLy8gMTkuMS4zLjFcbiAgICBhc3NpZ246IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuICAgICAgdmFyIHRvID0gRVMuVG9PYmplY3QodGFyZ2V0LCAnQ2Fubm90IGNvbnZlcnQgdW5kZWZpbmVkIG9yIG51bGwgdG8gb2JqZWN0Jyk7XG4gICAgICByZXR1cm4gX3JlZHVjZShFUy5DYWxsKHNsaWNlQXJncywgMSwgYXJndW1lbnRzKSwgYXNzaWduUmVkdWNlciwgdG8pO1xuICAgIH0sXG5cbiAgICAvLyBBZGRlZCBpbiBXZWJLaXQgaW4gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE0Mzg2NVxuICAgIGlzOiBmdW5jdGlvbiBpcyhhLCBiKSB7XG4gICAgICByZXR1cm4gRVMuU2FtZVZhbHVlKGEsIGIpO1xuICAgIH1cbiAgfTtcbiAgdmFyIGFzc2lnbkhhc1BlbmRpbmdFeGNlcHRpb25zID0gT2JqZWN0LmFzc2lnbiAmJiBPYmplY3QucHJldmVudEV4dGVuc2lvbnMgJiYgKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBGaXJlZm94IDM3IHN0aWxsIGhhcyBcInBlbmRpbmcgZXhjZXB0aW9uXCIgbG9naWMgaW4gaXRzIE9iamVjdC5hc3NpZ24gaW1wbGVtZW50YXRpb24sXG4gICAgLy8gd2hpY2ggaXMgNzIlIHNsb3dlciB0aGFuIG91ciBzaGltLCBhbmQgRmlyZWZveCA0MCdzIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbi5cbiAgICB2YXIgdGhyb3dlciA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7IDE6IDIgfSk7XG4gICAgdHJ5IHtcbiAgICAgIE9iamVjdC5hc3NpZ24odGhyb3dlciwgJ3h5Jyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHRocm93ZXJbMV0gPT09ICd5JztcbiAgICB9XG4gIH0oKSk7XG4gIGlmIChhc3NpZ25IYXNQZW5kaW5nRXhjZXB0aW9ucykge1xuICAgIG92ZXJyaWRlTmF0aXZlKE9iamVjdCwgJ2Fzc2lnbicsIE9iamVjdFNoaW1zLmFzc2lnbik7XG4gIH1cbiAgZGVmaW5lUHJvcGVydGllcyhPYmplY3QsIE9iamVjdFNoaW1zKTtcblxuICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuICAgIHZhciBFUzVPYmplY3RTaGltcyA9IHtcbiAgICAgIC8vIDE5LjEuMy45XG4gICAgICAvLyBzaGltIGZyb20gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vV2ViUmVmbGVjdGlvbi81NTkzNTU0XG4gICAgICBzZXRQcm90b3R5cGVPZjogKGZ1bmN0aW9uIChPYmplY3QsIG1hZ2ljKSB7XG4gICAgICAgIHZhciBzZXQ7XG5cbiAgICAgICAgdmFyIGNoZWNrQXJncyA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICAgICAgICAgIGlmICghRVMuVHlwZUlzT2JqZWN0KE8pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjYW5ub3Qgc2V0IHByb3RvdHlwZSBvbiBhIG5vbi1vYmplY3QnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCEocHJvdG8gPT09IG51bGwgfHwgRVMuVHlwZUlzT2JqZWN0KHByb3RvKSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NhbiBvbmx5IHNldCBwcm90b3R5cGUgdG8gYW4gb2JqZWN0IG9yIG51bGwnICsgcHJvdG8pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgc2V0UHJvdG90eXBlT2YgPSBmdW5jdGlvbiAoTywgcHJvdG8pIHtcbiAgICAgICAgICBjaGVja0FyZ3MoTywgcHJvdG8pO1xuICAgICAgICAgIF9jYWxsKHNldCwgTywgcHJvdG8pO1xuICAgICAgICAgIHJldHVybiBPO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gdGhpcyB3b3JrcyBhbHJlYWR5IGluIEZpcmVmb3ggYW5kIFNhZmFyaVxuICAgICAgICAgIHNldCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LnByb3RvdHlwZSwgbWFnaWMpLnNldDtcbiAgICAgICAgICBfY2FsbChzZXQsIHt9LCBudWxsKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlICE9PSB7fVttYWdpY10pIHtcbiAgICAgICAgICAgIC8vIElFIDwgMTEgY2Fubm90IGJlIHNoaW1tZWRcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gcHJvYmFibHkgQ2hyb21lIG9yIHNvbWUgb2xkIE1vYmlsZSBzdG9jayBicm93c2VyXG4gICAgICAgICAgc2V0ID0gZnVuY3Rpb24gKHByb3RvKSB7XG4gICAgICAgICAgICB0aGlzW21hZ2ljXSA9IHByb3RvO1xuICAgICAgICAgIH07XG4gICAgICAgICAgLy8gcGxlYXNlIG5vdGUgdGhhdCB0aGlzIHdpbGwgKipub3QqKiB3b3JrXG4gICAgICAgICAgLy8gaW4gdGhvc2UgYnJvd3NlcnMgdGhhdCBkbyBub3QgaW5oZXJpdFxuICAgICAgICAgIC8vIF9fcHJvdG9fXyBieSBtaXN0YWtlIGZyb20gT2JqZWN0LnByb3RvdHlwZVxuICAgICAgICAgIC8vIGluIHRoZXNlIGNhc2VzIHdlIHNob3VsZCBwcm9iYWJseSB0aHJvdyBhbiBlcnJvclxuICAgICAgICAgIC8vIG9yIGF0IGxlYXN0IGJlIGluZm9ybWVkIGFib3V0IHRoZSBpc3N1ZVxuICAgICAgICAgIHNldFByb3RvdHlwZU9mLnBvbHlmaWxsID0gc2V0UHJvdG90eXBlT2YoXG4gICAgICAgICAgICBzZXRQcm90b3R5cGVPZih7fSwgbnVsbCksXG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlXG4gICAgICAgICAgKSBpbnN0YW5jZW9mIE9iamVjdDtcbiAgICAgICAgICAvLyBzZXRQcm90b3R5cGVPZi5wb2x5ZmlsbCA9PT0gdHJ1ZSBtZWFucyBpdCB3b3JrcyBhcyBtZWFudFxuICAgICAgICAgIC8vIHNldFByb3RvdHlwZU9mLnBvbHlmaWxsID09PSBmYWxzZSBtZWFucyBpdCdzIG5vdCAxMDAlIHJlbGlhYmxlXG4gICAgICAgICAgLy8gc2V0UHJvdG90eXBlT2YucG9seWZpbGwgPT09IHVuZGVmaW5lZFxuICAgICAgICAgIC8vIG9yXG4gICAgICAgICAgLy8gc2V0UHJvdG90eXBlT2YucG9seWZpbGwgPT0gIG51bGwgbWVhbnMgaXQncyBub3QgYSBwb2x5ZmlsbFxuICAgICAgICAgIC8vIHdoaWNoIG1lYW5zIGl0IHdvcmtzIGFzIGV4cGVjdGVkXG4gICAgICAgICAgLy8gd2UgY2FuIGV2ZW4gZGVsZXRlIE9iamVjdC5wcm90b3R5cGUuX19wcm90b19fO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXRQcm90b3R5cGVPZjtcbiAgICAgIH0oT2JqZWN0LCAnX19wcm90b19fJykpXG4gICAgfTtcblxuICAgIGRlZmluZVByb3BlcnRpZXMoT2JqZWN0LCBFUzVPYmplY3RTaGltcyk7XG4gIH1cblxuICAvLyBXb3JrYXJvdW5kIGJ1ZyBpbiBPcGVyYSAxMiB3aGVyZSBzZXRQcm90b3R5cGVPZih4LCBudWxsKSBkb2Vzbid0IHdvcmssXG4gIC8vIGJ1dCBPYmplY3QuY3JlYXRlKG51bGwpIGRvZXMuXG4gIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mICYmXG4gICAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YoT2JqZWN0LnNldFByb3RvdHlwZU9mKHt9LCBudWxsKSkgIT09IG51bGwgJiZcbiAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZihPYmplY3QuY3JlYXRlKG51bGwpKSA9PT0gbnVsbCkge1xuICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgRkFLRU5VTEwgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgdmFyIGdwbyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgICAgIHZhciBzcG8gPSBPYmplY3Quc2V0UHJvdG90eXBlT2Y7XG4gICAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YgPSBmdW5jdGlvbiAobykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gZ3BvKG8pO1xuICAgICAgICByZXR1cm4gcmVzdWx0ID09PSBGQUtFTlVMTCA/IG51bGwgOiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mID0gZnVuY3Rpb24gKG8sIHApIHtcbiAgICAgICAgdmFyIHByb3RvID0gcCA9PT0gbnVsbCA/IEZBS0VOVUxMIDogcDtcbiAgICAgICAgcmV0dXJuIHNwbyhvLCBwcm90byk7XG4gICAgICB9O1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mLnBvbHlmaWxsID0gZmFsc2U7XG4gICAgfSgpKTtcbiAgfVxuXG4gIHZhciBvYmplY3RLZXlzQWNjZXB0c1ByaW1pdGl2ZXMgPSAhdGhyb3dzRXJyb3IoZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JqZWN0LmtleXMoJ2ZvbycpOyB9KTtcbiAgaWYgKCFvYmplY3RLZXlzQWNjZXB0c1ByaW1pdGl2ZXMpIHtcbiAgICB2YXIgb3JpZ2luYWxPYmplY3RLZXlzID0gT2JqZWN0LmtleXM7XG4gICAgb3ZlcnJpZGVOYXRpdmUoT2JqZWN0LCAna2V5cycsIGZ1bmN0aW9uIGtleXModmFsdWUpIHtcbiAgICAgIHJldHVybiBvcmlnaW5hbE9iamVjdEtleXMoRVMuVG9PYmplY3QodmFsdWUpKTtcbiAgICB9KTtcbiAgICBrZXlzID0gT2JqZWN0LmtleXM7XG4gIH1cbiAgdmFyIG9iamVjdEtleXNSZWplY3RzUmVnZXggPSB0aHJvd3NFcnJvcihmdW5jdGlvbiAoKSB7IHJldHVybiBPYmplY3Qua2V5cygvYS9nKTsgfSk7XG4gIGlmIChvYmplY3RLZXlzUmVqZWN0c1JlZ2V4KSB7XG4gICAgdmFyIHJlZ2V4UmVqZWN0aW5nT2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzO1xuICAgIG92ZXJyaWRlTmF0aXZlKE9iamVjdCwgJ2tleXMnLCBmdW5jdGlvbiBrZXlzKHZhbHVlKSB7XG4gICAgICBpZiAoVHlwZS5yZWdleCh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIHJlZ2V4S2V5cyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBrIGluIHZhbHVlKSB7XG4gICAgICAgICAgaWYgKF9oYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgaykpIHtcbiAgICAgICAgICAgIF9wdXNoKHJlZ2V4S2V5cywgayk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWdleEtleXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVnZXhSZWplY3RpbmdPYmplY3RLZXlzKHZhbHVlKTtcbiAgICB9KTtcbiAgICBrZXlzID0gT2JqZWN0LmtleXM7XG4gIH1cblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMpIHtcbiAgICB2YXIgb2JqZWN0R09QTkFjY2VwdHNQcmltaXRpdmVzID0gIXRocm93c0Vycm9yKGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKCdmb28nKTsgfSk7XG4gICAgaWYgKCFvYmplY3RHT1BOQWNjZXB0c1ByaW1pdGl2ZXMpIHtcbiAgICAgIHZhciBjYWNoZWRXaW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuICAgICAgdmFyIG9yaWdpbmFsT2JqZWN0R2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoT2JqZWN0LCAnZ2V0T3duUHJvcGVydHlOYW1lcycsIGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXModmFsdWUpIHtcbiAgICAgICAgdmFyIHZhbCA9IEVTLlRvT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgaWYgKF90b1N0cmluZyh2YWwpID09PSAnW29iamVjdCBXaW5kb3ddJykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxPYmplY3RHZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gSUUgYnVnIHdoZXJlIGxheW91dCBlbmdpbmUgY2FsbHMgdXNlcmxhbmQgZ09QTiBmb3IgY3Jvc3MtZG9tYWluIGB3aW5kb3dgIG9iamVjdHNcbiAgICAgICAgICAgIHJldHVybiBfY29uY2F0KFtdLCBjYWNoZWRXaW5kb3dOYW1lcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcmlnaW5hbE9iamVjdEdldE93blByb3BlcnR5TmFtZXModmFsKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcikge1xuICAgIHZhciBvYmplY3RHT1BEQWNjZXB0c1ByaW1pdGl2ZXMgPSAhdGhyb3dzRXJyb3IoZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcignZm9vJywgJ2JhcicpOyB9KTtcbiAgICBpZiAoIW9iamVjdEdPUERBY2NlcHRzUHJpbWl0aXZlcykge1xuICAgICAgdmFyIG9yaWdpbmFsT2JqZWN0R2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgICAgIG92ZXJyaWRlTmF0aXZlKE9iamVjdCwgJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwgcHJvcGVydHkpIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsT2JqZWN0R2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEVTLlRvT2JqZWN0KHZhbHVlKSwgcHJvcGVydHkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGlmIChPYmplY3Quc2VhbCkge1xuICAgIHZhciBvYmplY3RTZWFsQWNjZXB0c1ByaW1pdGl2ZXMgPSAhdGhyb3dzRXJyb3IoZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JqZWN0LnNlYWwoJ2ZvbycpOyB9KTtcbiAgICBpZiAoIW9iamVjdFNlYWxBY2NlcHRzUHJpbWl0aXZlcykge1xuICAgICAgdmFyIG9yaWdpbmFsT2JqZWN0U2VhbCA9IE9iamVjdC5zZWFsO1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoT2JqZWN0LCAnc2VhbCcsIGZ1bmN0aW9uIHNlYWwodmFsdWUpIHtcbiAgICAgICAgaWYgKCFFUy5UeXBlSXNPYmplY3QodmFsdWUpKSB7IHJldHVybiB2YWx1ZTsgfVxuICAgICAgICByZXR1cm4gb3JpZ2luYWxPYmplY3RTZWFsKHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBpZiAoT2JqZWN0LmlzU2VhbGVkKSB7XG4gICAgdmFyIG9iamVjdElzU2VhbGVkQWNjZXB0c1ByaW1pdGl2ZXMgPSAhdGhyb3dzRXJyb3IoZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JqZWN0LmlzU2VhbGVkKCdmb28nKTsgfSk7XG4gICAgaWYgKCFvYmplY3RJc1NlYWxlZEFjY2VwdHNQcmltaXRpdmVzKSB7XG4gICAgICB2YXIgb3JpZ2luYWxPYmplY3RJc1NlYWxlZCA9IE9iamVjdC5pc1NlYWxlZDtcbiAgICAgIG92ZXJyaWRlTmF0aXZlKE9iamVjdCwgJ2lzU2VhbGVkJywgZnVuY3Rpb24gaXNTZWFsZWQodmFsdWUpIHtcbiAgICAgICAgaWYgKCFFUy5UeXBlSXNPYmplY3QodmFsdWUpKSB7IHJldHVybiB0cnVlOyB9XG4gICAgICAgIHJldHVybiBvcmlnaW5hbE9iamVjdElzU2VhbGVkKHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBpZiAoT2JqZWN0LmZyZWV6ZSkge1xuICAgIHZhciBvYmplY3RGcmVlemVBY2NlcHRzUHJpbWl0aXZlcyA9ICF0aHJvd3NFcnJvcihmdW5jdGlvbiAoKSB7IHJldHVybiBPYmplY3QuZnJlZXplKCdmb28nKTsgfSk7XG4gICAgaWYgKCFvYmplY3RGcmVlemVBY2NlcHRzUHJpbWl0aXZlcykge1xuICAgICAgdmFyIG9yaWdpbmFsT2JqZWN0RnJlZXplID0gT2JqZWN0LmZyZWV6ZTtcbiAgICAgIG92ZXJyaWRlTmF0aXZlKE9iamVjdCwgJ2ZyZWV6ZScsIGZ1bmN0aW9uIGZyZWV6ZSh2YWx1ZSkge1xuICAgICAgICBpZiAoIUVTLlR5cGVJc09iamVjdCh2YWx1ZSkpIHsgcmV0dXJuIHZhbHVlOyB9XG4gICAgICAgIHJldHVybiBvcmlnaW5hbE9iamVjdEZyZWV6ZSh2YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgaWYgKE9iamVjdC5pc0Zyb3plbikge1xuICAgIHZhciBvYmplY3RJc0Zyb3plbkFjY2VwdHNQcmltaXRpdmVzID0gIXRocm93c0Vycm9yKGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9iamVjdC5pc0Zyb3plbignZm9vJyk7IH0pO1xuICAgIGlmICghb2JqZWN0SXNGcm96ZW5BY2NlcHRzUHJpbWl0aXZlcykge1xuICAgICAgdmFyIG9yaWdpbmFsT2JqZWN0SXNGcm96ZW4gPSBPYmplY3QuaXNGcm96ZW47XG4gICAgICBvdmVycmlkZU5hdGl2ZShPYmplY3QsICdpc0Zyb3plbicsIGZ1bmN0aW9uIGlzRnJvemVuKHZhbHVlKSB7XG4gICAgICAgIGlmICghRVMuVHlwZUlzT2JqZWN0KHZhbHVlKSkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgICByZXR1cm4gb3JpZ2luYWxPYmplY3RJc0Zyb3plbih2YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgaWYgKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucykge1xuICAgIHZhciBvYmplY3RQcmV2ZW50RXh0ZW5zaW9uc0FjY2VwdHNQcmltaXRpdmVzID0gIXRocm93c0Vycm9yKGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucygnZm9vJyk7IH0pO1xuICAgIGlmICghb2JqZWN0UHJldmVudEV4dGVuc2lvbnNBY2NlcHRzUHJpbWl0aXZlcykge1xuICAgICAgdmFyIG9yaWdpbmFsT2JqZWN0UHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XG4gICAgICBvdmVycmlkZU5hdGl2ZShPYmplY3QsICdwcmV2ZW50RXh0ZW5zaW9ucycsIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHZhbHVlKSB7XG4gICAgICAgIGlmICghRVMuVHlwZUlzT2JqZWN0KHZhbHVlKSkgeyByZXR1cm4gdmFsdWU7IH1cbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsT2JqZWN0UHJldmVudEV4dGVuc2lvbnModmFsdWUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGlmIChPYmplY3QuaXNFeHRlbnNpYmxlKSB7XG4gICAgdmFyIG9iamVjdElzRXh0ZW5zaWJsZUFjY2VwdHNQcmltaXRpdmVzID0gIXRocm93c0Vycm9yKGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9iamVjdC5pc0V4dGVuc2libGUoJ2ZvbycpOyB9KTtcbiAgICBpZiAoIW9iamVjdElzRXh0ZW5zaWJsZUFjY2VwdHNQcmltaXRpdmVzKSB7XG4gICAgICB2YXIgb3JpZ2luYWxPYmplY3RJc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoT2JqZWN0LCAnaXNFeHRlbnNpYmxlJywgZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHZhbHVlKSB7XG4gICAgICAgIGlmICghRVMuVHlwZUlzT2JqZWN0KHZhbHVlKSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsT2JqZWN0SXNFeHRlbnNpYmxlKHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBpZiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKSB7XG4gICAgdmFyIG9iamVjdEdldFByb3RvQWNjZXB0c1ByaW1pdGl2ZXMgPSAhdGhyb3dzRXJyb3IoZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKCdmb28nKTsgfSk7XG4gICAgaWYgKCFvYmplY3RHZXRQcm90b0FjY2VwdHNQcmltaXRpdmVzKSB7XG4gICAgICB2YXIgb3JpZ2luYWxHZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgICAgIG92ZXJyaWRlTmF0aXZlKE9iamVjdCwgJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsR2V0UHJvdG8oRVMuVG9PYmplY3QodmFsdWUpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBoYXNGbGFncyA9IHN1cHBvcnRzRGVzY3JpcHRvcnMgJiYgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJyk7XG4gICAgcmV0dXJuIGRlc2MgJiYgRVMuSXNDYWxsYWJsZShkZXNjLmdldCk7XG4gIH0oKSk7XG4gIGlmIChzdXBwb3J0c0Rlc2NyaXB0b3JzICYmICFoYXNGbGFncykge1xuICAgIHZhciByZWdFeHBGbGFnc0dldHRlciA9IGZ1bmN0aW9uIGZsYWdzKCkge1xuICAgICAgaWYgKCFFUy5UeXBlSXNPYmplY3QodGhpcykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTWV0aG9kIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgdHlwZTogbXVzdCBiZSBhbiBvYmplY3QuJyk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICBpZiAodGhpcy5nbG9iYWwpIHtcbiAgICAgICAgcmVzdWx0ICs9ICdnJztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmlnbm9yZUNhc2UpIHtcbiAgICAgICAgcmVzdWx0ICs9ICdpJztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm11bHRpbGluZSkge1xuICAgICAgICByZXN1bHQgKz0gJ20nO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMudW5pY29kZSkge1xuICAgICAgICByZXN1bHQgKz0gJ3UnO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc3RpY2t5KSB7XG4gICAgICAgIHJlc3VsdCArPSAneSc7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBWYWx1ZS5nZXR0ZXIoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywgcmVnRXhwRmxhZ3NHZXR0ZXIpO1xuICB9XG5cbiAgdmFyIHJlZ0V4cFN1cHBvcnRzRmxhZ3NXaXRoUmVnZXggPSBzdXBwb3J0c0Rlc2NyaXB0b3JzICYmIHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gU3RyaW5nKG5ldyBSZWdFeHAoL2EvZywgJ2knKSkgPT09ICcvYS9pJztcbiAgfSk7XG4gIHZhciByZWdFeHBOZWVkc1RvU3VwcG9ydFN5bWJvbE1hdGNoID0gaGFzU3ltYm9scyAmJiBzdXBwb3J0c0Rlc2NyaXB0b3JzICYmIChmdW5jdGlvbiAoKSB7XG4gICAgLy8gRWRnZSAwLjEyIHN1cHBvcnRzIGZsYWdzIGZ1bGx5LCBidXQgZG9lcyBub3Qgc3VwcG9ydCBTeW1ib2wubWF0Y2hcbiAgICB2YXIgcmVnZXggPSAvLi87XG4gICAgcmVnZXhbU3ltYm9sLm1hdGNoXSA9IGZhbHNlO1xuICAgIHJldHVybiBSZWdFeHAocmVnZXgpID09PSByZWdleDtcbiAgfSgpKTtcblxuICB2YXIgcmVnZXhUb1N0cmluZ0lzR2VuZXJpYyA9IHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHsgc291cmNlOiAnYWJjJyB9KSA9PT0gJy9hYmMvJztcbiAgfSk7XG4gIHZhciByZWdleFRvU3RyaW5nU3VwcG9ydHNHZW5lcmljRmxhZ3MgPSByZWdleFRvU3RyaW5nSXNHZW5lcmljICYmIHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgPT09ICcvYS9iJztcbiAgfSk7XG4gIGlmICghcmVnZXhUb1N0cmluZ0lzR2VuZXJpYyB8fCAhcmVnZXhUb1N0cmluZ1N1cHBvcnRzR2VuZXJpY0ZsYWdzKSB7XG4gICAgdmFyIG9yaWdSZWdFeHBUb1N0cmluZyA9IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmc7XG4gICAgZGVmaW5lUHJvcGVydHkoUmVnRXhwLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICB2YXIgUiA9IEVTLlJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICBpZiAoVHlwZS5yZWdleChSKSkge1xuICAgICAgICByZXR1cm4gX2NhbGwob3JpZ1JlZ0V4cFRvU3RyaW5nLCBSKTtcbiAgICAgIH1cbiAgICAgIHZhciBwYXR0ZXJuID0gJFN0cmluZyhSLnNvdXJjZSk7XG4gICAgICB2YXIgZmxhZ3MgPSAkU3RyaW5nKFIuZmxhZ3MpO1xuICAgICAgcmV0dXJuICcvJyArIHBhdHRlcm4gKyAnLycgKyBmbGFncztcbiAgICB9LCB0cnVlKTtcbiAgICBWYWx1ZS5wcmVzZXJ2ZVRvU3RyaW5nKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcsIG9yaWdSZWdFeHBUb1N0cmluZyk7XG4gIH1cblxuICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycyAmJiAoIXJlZ0V4cFN1cHBvcnRzRmxhZ3NXaXRoUmVnZXggfHwgcmVnRXhwTmVlZHNUb1N1cHBvcnRTeW1ib2xNYXRjaCkpIHtcbiAgICB2YXIgZmxhZ3NHZXR0ZXIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycpLmdldDtcbiAgICB2YXIgc291cmNlRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoUmVnRXhwLnByb3RvdHlwZSwgJ3NvdXJjZScpIHx8IHt9O1xuICAgIHZhciBsZWdhY3lTb3VyY2VHZXR0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBwcmlvciB0byBpdCBiZWluZyBhIGdldHRlciwgaXQncyBvd24gKyBub25jb25maWd1cmFibGVcbiAgICAgIHJldHVybiB0aGlzLnNvdXJjZTtcbiAgICB9O1xuICAgIHZhciBzb3VyY2VHZXR0ZXIgPSBFUy5Jc0NhbGxhYmxlKHNvdXJjZURlc2MuZ2V0KSA/IHNvdXJjZURlc2MuZ2V0IDogbGVnYWN5U291cmNlR2V0dGVyO1xuXG4gICAgdmFyIE9yaWdSZWdFeHAgPSBSZWdFeHA7XG4gICAgdmFyIFJlZ0V4cFNoaW0gPSAoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIFJlZ0V4cChwYXR0ZXJuLCBmbGFncykge1xuICAgICAgICB2YXIgcGF0dGVybklzUmVnRXhwID0gRVMuSXNSZWdFeHAocGF0dGVybik7XG4gICAgICAgIHZhciBjYWxsZWRXaXRoTmV3ID0gdGhpcyBpbnN0YW5jZW9mIFJlZ0V4cDtcbiAgICAgICAgaWYgKCFjYWxsZWRXaXRoTmV3ICYmIHBhdHRlcm5Jc1JlZ0V4cCAmJiB0eXBlb2YgZmxhZ3MgPT09ICd1bmRlZmluZWQnICYmIHBhdHRlcm4uY29uc3RydWN0b3IgPT09IFJlZ0V4cCkge1xuICAgICAgICAgIHJldHVybiBwYXR0ZXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIFAgPSBwYXR0ZXJuO1xuICAgICAgICB2YXIgRiA9IGZsYWdzO1xuICAgICAgICBpZiAoVHlwZS5yZWdleChwYXR0ZXJuKSkge1xuICAgICAgICAgIFAgPSBFUy5DYWxsKHNvdXJjZUdldHRlciwgcGF0dGVybik7XG4gICAgICAgICAgRiA9IHR5cGVvZiBmbGFncyA9PT0gJ3VuZGVmaW5lZCcgPyBFUy5DYWxsKGZsYWdzR2V0dGVyLCBwYXR0ZXJuKSA6IGZsYWdzO1xuICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKFAsIEYpO1xuICAgICAgICB9IGVsc2UgaWYgKHBhdHRlcm5Jc1JlZ0V4cCkge1xuICAgICAgICAgIFAgPSBwYXR0ZXJuLnNvdXJjZTtcbiAgICAgICAgICBGID0gdHlwZW9mIGZsYWdzID09PSAndW5kZWZpbmVkJyA/IHBhdHRlcm4uZmxhZ3MgOiBmbGFncztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IE9yaWdSZWdFeHAocGF0dGVybiwgZmxhZ3MpO1xuICAgICAgfTtcbiAgICB9KCkpO1xuICAgIHdyYXBDb25zdHJ1Y3RvcihPcmlnUmVnRXhwLCBSZWdFeHBTaGltLCB7XG4gICAgICAkaW5wdXQ6IHRydWUgLy8gQ2hyb21lIDwgdjM5ICYgT3BlcmEgPCAyNiBoYXZlIGEgbm9uc3RhbmRhcmQgXCIkaW5wdXRcIiBwcm9wZXJ0eVxuICAgIH0pO1xuICAgIC8qIGdsb2JhbHMgUmVnRXhwOiB0cnVlICovXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYsIG5vLWdsb2JhbC1hc3NpZ24gKi9cbiAgICBSZWdFeHAgPSBSZWdFeHBTaGltO1xuICAgIFZhbHVlLnJlZGVmaW5lKGdsb2JhbHMsICdSZWdFeHAnLCBSZWdFeHBTaGltKTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZGVmLCBuby1nbG9iYWwtYXNzaWduICovXG4gICAgLyogZ2xvYmFscyBSZWdFeHA6IGZhbHNlICovXG4gIH1cblxuICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuICAgIHZhciByZWdleEdsb2JhbHMgPSB7XG4gICAgICBpbnB1dDogJyRfJyxcbiAgICAgIGxhc3RNYXRjaDogJyQmJyxcbiAgICAgIGxhc3RQYXJlbjogJyQrJyxcbiAgICAgIGxlZnRDb250ZXh0OiAnJGAnLFxuICAgICAgcmlnaHRDb250ZXh0OiAnJFxcJydcbiAgICB9O1xuICAgIF9mb3JFYWNoKGtleXMocmVnZXhHbG9iYWxzKSwgZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgIGlmIChwcm9wIGluIFJlZ0V4cCAmJiAhKHJlZ2V4R2xvYmFsc1twcm9wXSBpbiBSZWdFeHApKSB7XG4gICAgICAgIFZhbHVlLmdldHRlcihSZWdFeHAsIHJlZ2V4R2xvYmFsc1twcm9wXSwgZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBSZWdFeHBbcHJvcF07XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGFkZERlZmF1bHRTcGVjaWVzKFJlZ0V4cCk7XG5cbiAgdmFyIGludmVyc2VFcHNpbG9uID0gMSAvIE51bWJlci5FUFNJTE9OO1xuICB2YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24gcm91bmRUaWVzVG9FdmVuKG4pIHtcbiAgICAvLyBFdmVuIHRob3VnaCB0aGlzIHJlZHVjZXMgZG93biB0byBgcmV0dXJuIG5gLCBpdCB0YWtlcyBhZHZhbnRhZ2Ugb2YgYnVpbHQtaW4gcm91bmRpbmcuXG4gICAgcmV0dXJuIChuICsgaW52ZXJzZUVwc2lsb24pIC0gaW52ZXJzZUVwc2lsb247XG4gIH07XG4gIHZhciBCSU5BUllfMzJfRVBTSUxPTiA9IE1hdGgucG93KDIsIC0yMyk7XG4gIHZhciBCSU5BUllfMzJfTUFYX1ZBTFVFID0gTWF0aC5wb3coMiwgMTI3KSAqICgyIC0gQklOQVJZXzMyX0VQU0lMT04pO1xuICB2YXIgQklOQVJZXzMyX01JTl9WQUxVRSA9IE1hdGgucG93KDIsIC0xMjYpO1xuICB2YXIgRSA9IE1hdGguRTtcbiAgdmFyIExPRzJFID0gTWF0aC5MT0cyRTtcbiAgdmFyIExPRzEwRSA9IE1hdGguTE9HMTBFO1xuICB2YXIgbnVtYmVyQ0xaID0gTnVtYmVyLnByb3RvdHlwZS5jbHo7XG4gIGRlbGV0ZSBOdW1iZXIucHJvdG90eXBlLmNsejsgLy8gU2FmYXJpIDggaGFzIE51bWJlciNjbHpcblxuICB2YXIgTWF0aFNoaW1zID0ge1xuICAgIGFjb3NoOiBmdW5jdGlvbiBhY29zaCh2YWx1ZSkge1xuICAgICAgdmFyIHggPSBOdW1iZXIodmFsdWUpO1xuICAgICAgaWYgKG51bWJlcklzTmFOKHgpIHx8IHZhbHVlIDwgMSkgeyByZXR1cm4gTmFOOyB9XG4gICAgICBpZiAoeCA9PT0gMSkgeyByZXR1cm4gMDsgfVxuICAgICAgaWYgKHggPT09IEluZmluaXR5KSB7IHJldHVybiB4OyB9XG5cbiAgICAgIHZhciB4SW52U3F1YXJlZCA9IDEgLyAoeCAqIHgpO1xuICAgICAgaWYgKHggPCAyKSB7XG4gICAgICAgIHJldHVybiBfbG9nMXAoeCAtIDEgKyAoX3NxcnQoMSAtIHhJbnZTcXVhcmVkKSAqIHgpKTtcbiAgICAgIH1cbiAgICAgIHZhciBoYWxmWCA9IHggLyAyO1xuICAgICAgcmV0dXJuIF9sb2cxcChoYWxmWCArIChfc3FydCgxIC0geEludlNxdWFyZWQpICogaGFsZlgpIC0gMSkgKyAoMSAvIExPRzJFKTtcbiAgICB9LFxuXG4gICAgYXNpbmg6IGZ1bmN0aW9uIGFzaW5oKHZhbHVlKSB7XG4gICAgICB2YXIgeCA9IE51bWJlcih2YWx1ZSk7XG4gICAgICBpZiAoeCA9PT0gMCB8fCAhZ2xvYmFsSXNGaW5pdGUoeCkpIHtcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgICB9XG5cbiAgICAgIHZhciBhID0gX2Ficyh4KTtcbiAgICAgIHZhciBhU3F1YXJlZCA9IGEgKiBhO1xuICAgICAgdmFyIHMgPSBfc2lnbih4KTtcbiAgICAgIGlmIChhIDwgMSkge1xuICAgICAgICByZXR1cm4gcyAqIF9sb2cxcChhICsgKGFTcXVhcmVkIC8gKF9zcXJ0KGFTcXVhcmVkICsgMSkgKyAxKSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHMgKiAoX2xvZzFwKChhIC8gMikgKyAoX3NxcnQoMSArICgxIC8gYVNxdWFyZWQpKSAqIGEgLyAyKSAtIDEpICsgKDEgLyBMT0cyRSkpO1xuICAgIH0sXG5cbiAgICBhdGFuaDogZnVuY3Rpb24gYXRhbmgodmFsdWUpIHtcbiAgICAgIHZhciB4ID0gTnVtYmVyKHZhbHVlKTtcblxuICAgICAgaWYgKHggPT09IDApIHsgcmV0dXJuIHg7IH1cbiAgICAgIGlmICh4ID09PSAtMSkgeyByZXR1cm4gLUluZmluaXR5OyB9XG4gICAgICBpZiAoeCA9PT0gMSkgeyByZXR1cm4gSW5maW5pdHk7IH1cbiAgICAgIGlmIChudW1iZXJJc05hTih4KSB8fCB4IDwgLTEgfHwgeCA+IDEpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgIH1cblxuICAgICAgdmFyIGEgPSBfYWJzKHgpO1xuICAgICAgcmV0dXJuIF9zaWduKHgpICogX2xvZzFwKDIgKiBhIC8gKDEgLSBhKSkgLyAyO1xuICAgIH0sXG5cbiAgICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHZhbHVlKSB7XG4gICAgICB2YXIgeCA9IE51bWJlcih2YWx1ZSk7XG4gICAgICBpZiAoeCA9PT0gMCkgeyByZXR1cm4geDsgfVxuICAgICAgdmFyIG5lZ2F0ZSA9IHggPCAwO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmIChuZWdhdGUpIHsgeCA9IC14OyB9XG4gICAgICBpZiAoeCA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgcmVzdWx0ID0gSW5maW5pdHk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBfZXhwKF9sb2coeCkgLyAzKTtcbiAgICAgICAgLy8gZnJvbSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0N1YmVfcm9vdCNOdW1lcmljYWxfbWV0aG9kc1xuICAgICAgICByZXN1bHQgPSAoKHggLyAocmVzdWx0ICogcmVzdWx0KSkgKyAoMiAqIHJlc3VsdCkpIC8gMztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZWdhdGUgPyAtcmVzdWx0IDogcmVzdWx0O1xuICAgIH0sXG5cbiAgICBjbHozMjogZnVuY3Rpb24gY2x6MzIodmFsdWUpIHtcbiAgICAgIC8vIFNlZSBodHRwczovL2J1Z3MuZWNtYXNjcmlwdC5vcmcvc2hvd19idWcuY2dpP2lkPTI0NjVcbiAgICAgIHZhciB4ID0gTnVtYmVyKHZhbHVlKTtcbiAgICAgIHZhciBudW1iZXIgPSBFUy5Ub1VpbnQzMih4KTtcbiAgICAgIGlmIChudW1iZXIgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIDMyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bWJlckNMWiA/IEVTLkNhbGwobnVtYmVyQ0xaLCBudW1iZXIpIDogMzEgLSBfZmxvb3IoX2xvZyhudW1iZXIgKyAwLjUpICogTE9HMkUpO1xuICAgIH0sXG5cbiAgICBjb3NoOiBmdW5jdGlvbiBjb3NoKHZhbHVlKSB7XG4gICAgICB2YXIgeCA9IE51bWJlcih2YWx1ZSk7XG4gICAgICBpZiAoeCA9PT0gMCkgeyByZXR1cm4gMTsgfSAvLyArMCBvciAtMFxuICAgICAgaWYgKG51bWJlcklzTmFOKHgpKSB7IHJldHVybiBOYU47IH1cbiAgICAgIGlmICghZ2xvYmFsSXNGaW5pdGUoeCkpIHsgcmV0dXJuIEluZmluaXR5OyB9XG5cbiAgICAgIHZhciB0ID0gX2V4cChfYWJzKHgpIC0gMSk7XG4gICAgICByZXR1cm4gKHQgKyAoMSAvICh0ICogRSAqIEUpKSkgKiAoRSAvIDIpO1xuICAgIH0sXG5cbiAgICBleHBtMTogZnVuY3Rpb24gZXhwbTEodmFsdWUpIHtcbiAgICAgIHZhciB4ID0gTnVtYmVyKHZhbHVlKTtcbiAgICAgIGlmICh4ID09PSAtSW5maW5pdHkpIHsgcmV0dXJuIC0xOyB9XG4gICAgICBpZiAoIWdsb2JhbElzRmluaXRlKHgpIHx8IHggPT09IDApIHsgcmV0dXJuIHg7IH1cbiAgICAgIGlmIChfYWJzKHgpID4gMC41KSB7XG4gICAgICAgIHJldHVybiBfZXhwKHgpIC0gMTtcbiAgICAgIH1cbiAgICAgIC8vIEEgbW9yZSBwcmVjaXNlIGFwcHJveGltYXRpb24gdXNpbmcgVGF5bG9yIHNlcmllcyBleHBhbnNpb25cbiAgICAgIC8vIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3BhdWxtaWxsci9lczYtc2hpbS9pc3N1ZXMvMzE0I2lzc3VlY29tbWVudC03MDI5Mzk4NlxuICAgICAgdmFyIHQgPSB4O1xuICAgICAgdmFyIHN1bSA9IDA7XG4gICAgICB2YXIgbiA9IDE7XG4gICAgICB3aGlsZSAoc3VtICsgdCAhPT0gc3VtKSB7XG4gICAgICAgIHN1bSArPSB0O1xuICAgICAgICBuICs9IDE7XG4gICAgICAgIHQgKj0geCAvIG47XG4gICAgICB9XG4gICAgICByZXR1cm4gc3VtO1xuICAgIH0sXG5cbiAgICBoeXBvdDogZnVuY3Rpb24gaHlwb3QoeCwgeSkge1xuICAgICAgdmFyIHJlc3VsdCA9IDA7XG4gICAgICB2YXIgbGFyZ2VzdCA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBfYWJzKE51bWJlcihhcmd1bWVudHNbaV0pKTtcbiAgICAgICAgaWYgKGxhcmdlc3QgPCB2YWx1ZSkge1xuICAgICAgICAgIHJlc3VsdCAqPSAobGFyZ2VzdCAvIHZhbHVlKSAqIChsYXJnZXN0IC8gdmFsdWUpO1xuICAgICAgICAgIHJlc3VsdCArPSAxO1xuICAgICAgICAgIGxhcmdlc3QgPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgKz0gdmFsdWUgPiAwID8gKHZhbHVlIC8gbGFyZ2VzdCkgKiAodmFsdWUgLyBsYXJnZXN0KSA6IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbGFyZ2VzdCA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmdlc3QgKiBfc3FydChyZXN1bHQpO1xuICAgIH0sXG5cbiAgICBsb2cyOiBmdW5jdGlvbiBsb2cyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gX2xvZyh2YWx1ZSkgKiBMT0cyRTtcbiAgICB9LFxuXG4gICAgbG9nMTA6IGZ1bmN0aW9uIGxvZzEwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gX2xvZyh2YWx1ZSkgKiBMT0cxMEU7XG4gICAgfSxcblxuICAgIGxvZzFwOiBfbG9nMXAsXG5cbiAgICBzaWduOiBfc2lnbixcblxuICAgIHNpbmg6IGZ1bmN0aW9uIHNpbmgodmFsdWUpIHtcbiAgICAgIHZhciB4ID0gTnVtYmVyKHZhbHVlKTtcbiAgICAgIGlmICghZ2xvYmFsSXNGaW5pdGUoeCkgfHwgeCA9PT0gMCkgeyByZXR1cm4geDsgfVxuXG4gICAgICB2YXIgYSA9IF9hYnMoeCk7XG4gICAgICBpZiAoYSA8IDEpIHtcbiAgICAgICAgdmFyIHUgPSBNYXRoLmV4cG0xKGEpO1xuICAgICAgICByZXR1cm4gX3NpZ24oeCkgKiB1ICogKDEgKyAoMSAvICh1ICsgMSkpKSAvIDI7XG4gICAgICB9XG4gICAgICB2YXIgdCA9IF9leHAoYSAtIDEpO1xuICAgICAgcmV0dXJuIF9zaWduKHgpICogKHQgLSAoMSAvICh0ICogRSAqIEUpKSkgKiAoRSAvIDIpO1xuICAgIH0sXG5cbiAgICB0YW5oOiBmdW5jdGlvbiB0YW5oKHZhbHVlKSB7XG4gICAgICB2YXIgeCA9IE51bWJlcih2YWx1ZSk7XG4gICAgICBpZiAobnVtYmVySXNOYU4oeCkgfHwgeCA9PT0gMCkgeyByZXR1cm4geDsgfVxuICAgICAgLy8gY2FuIGV4aXQgZWFybHkgYXQgKy0yMCBhcyBKUyBsb3NlcyBwcmVjaXNpb24gZm9yIHRydWUgdmFsdWUgYXQgdGhpcyBpbnRlZ2VyXG4gICAgICBpZiAoeCA+PSAyMCkgeyByZXR1cm4gMTsgfVxuICAgICAgaWYgKHggPD0gLTIwKSB7IHJldHVybiAtMTsgfVxuXG4gICAgICByZXR1cm4gKE1hdGguZXhwbTEoeCkgLSBNYXRoLmV4cG0xKC14KSkgLyAoX2V4cCh4KSArIF9leHAoLXgpKTtcbiAgICB9LFxuXG4gICAgdHJ1bmM6IGZ1bmN0aW9uIHRydW5jKHZhbHVlKSB7XG4gICAgICB2YXIgeCA9IE51bWJlcih2YWx1ZSk7XG4gICAgICByZXR1cm4geCA8IDAgPyAtX2Zsb29yKC14KSA6IF9mbG9vcih4KTtcbiAgICB9LFxuXG4gICAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KSB7XG4gICAgICAvLyB0YWtlbiBmcm9tIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL01hdGgvaW11bFxuICAgICAgdmFyIGEgPSBFUy5Ub1VpbnQzMih4KTtcbiAgICAgIHZhciBiID0gRVMuVG9VaW50MzIoeSk7XG4gICAgICB2YXIgYWggPSAoYSA+Pj4gMTYpICYgMHhmZmZmO1xuICAgICAgdmFyIGFsID0gYSAmIDB4ZmZmZjtcbiAgICAgIHZhciBiaCA9IChiID4+PiAxNikgJiAweGZmZmY7XG4gICAgICB2YXIgYmwgPSBiICYgMHhmZmZmO1xuICAgICAgLy8gdGhlIHNoaWZ0IGJ5IDAgZml4ZXMgdGhlIHNpZ24gb24gdGhlIGhpZ2ggcGFydFxuICAgICAgLy8gdGhlIGZpbmFsIHwwIGNvbnZlcnRzIHRoZSB1bnNpZ25lZCB2YWx1ZSBpbnRvIGEgc2lnbmVkIHZhbHVlXG4gICAgICByZXR1cm4gKGFsICogYmwpICsgKCgoKGFoICogYmwpICsgKGFsICogYmgpKSA8PCAxNikgPj4+IDApIHwgMDtcbiAgICB9LFxuXG4gICAgZnJvdW5kOiBmdW5jdGlvbiBmcm91bmQoeCkge1xuICAgICAgdmFyIHYgPSBOdW1iZXIoeCk7XG4gICAgICBpZiAodiA9PT0gMCB8fCB2ID09PSBJbmZpbml0eSB8fCB2ID09PSAtSW5maW5pdHkgfHwgbnVtYmVySXNOYU4odikpIHtcbiAgICAgICAgcmV0dXJuIHY7XG4gICAgICB9XG4gICAgICB2YXIgc2lnbiA9IF9zaWduKHYpO1xuICAgICAgdmFyIGFicyA9IF9hYnModik7XG4gICAgICBpZiAoYWJzIDwgQklOQVJZXzMyX01JTl9WQUxVRSkge1xuICAgICAgICByZXR1cm4gc2lnbiAqIHJvdW5kVGllc1RvRXZlbihhYnMgLyBCSU5BUllfMzJfTUlOX1ZBTFVFIC8gQklOQVJZXzMyX0VQU0lMT04pICogQklOQVJZXzMyX01JTl9WQUxVRSAqIEJJTkFSWV8zMl9FUFNJTE9OO1xuICAgICAgfVxuICAgICAgLy8gVmVsdGthbXAncyBzcGxpdHRpbmcgKD8pXG4gICAgICB2YXIgYSA9ICgxICsgKEJJTkFSWV8zMl9FUFNJTE9OIC8gTnVtYmVyLkVQU0lMT04pKSAqIGFicztcbiAgICAgIHZhciByZXN1bHQgPSBhIC0gKGEgLSBhYnMpO1xuICAgICAgaWYgKHJlc3VsdCA+IEJJTkFSWV8zMl9NQVhfVkFMVUUgfHwgbnVtYmVySXNOYU4ocmVzdWx0KSkge1xuICAgICAgICByZXR1cm4gc2lnbiAqIEluZmluaXR5O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNpZ24gKiByZXN1bHQ7XG4gICAgfVxuICB9O1xuXG4gIHZhciB3aXRoaW5VTFBEaXN0YW5jZSA9IGZ1bmN0aW9uIHdpdGhpblVMUERpc3RhbmNlKHJlc3VsdCwgZXhwZWN0ZWQsIGRpc3RhbmNlKSB7XG4gICAgcmV0dXJuIF9hYnMoMSAtIChyZXN1bHQgLyBleHBlY3RlZCkpIC8gTnVtYmVyLkVQU0lMT04gPCAoZGlzdGFuY2UgfHwgOCk7XG4gIH07XG5cbiAgZGVmaW5lUHJvcGVydGllcyhNYXRoLCBNYXRoU2hpbXMpO1xuICAvLyBDaHJvbWUgPCA0MCBzaW5oIHJldHVybnMg4oieIGZvciBsYXJnZSBudW1iZXJzXG4gIGRlZmluZVByb3BlcnR5KE1hdGgsICdzaW5oJywgTWF0aFNoaW1zLnNpbmgsIE1hdGguc2luaCg3MTApID09PSBJbmZpbml0eSk7XG4gIC8vIENocm9tZSA8IDQwIGNvc2ggcmV0dXJucyDiiJ4gZm9yIGxhcmdlIG51bWJlcnNcbiAgZGVmaW5lUHJvcGVydHkoTWF0aCwgJ2Nvc2gnLCBNYXRoU2hpbXMuY29zaCwgTWF0aC5jb3NoKDcxMCkgPT09IEluZmluaXR5KTtcbiAgLy8gSUUgMTEgVFAgaGFzIGFuIGltcHJlY2lzZSBsb2cxcDogcmVwb3J0cyBNYXRoLmxvZzFwKC0xZS0xNykgYXMgMFxuICBkZWZpbmVQcm9wZXJ0eShNYXRoLCAnbG9nMXAnLCBNYXRoU2hpbXMubG9nMXAsIE1hdGgubG9nMXAoLTFlLTE3KSAhPT0gLTFlLTE3KTtcbiAgLy8gSUUgMTEgVFAgaGFzIGFuIGltcHJlY2lzZSBhc2luaDogcmVwb3J0cyBNYXRoLmFzaW5oKC0xZTcpIGFzIG5vdCBleGFjdGx5IGVxdWFsIHRvIC1NYXRoLmFzaW5oKDFlNylcbiAgZGVmaW5lUHJvcGVydHkoTWF0aCwgJ2FzaW5oJywgTWF0aFNoaW1zLmFzaW5oLCBNYXRoLmFzaW5oKC0xZTcpICE9PSAtTWF0aC5hc2luaCgxZTcpKTtcbiAgLy8gQ2hyb21lIDwgNTQgYXNpbmggcmV0dXJucyDiiJ4gZm9yIGxhcmdlIG51bWJlcnMgYW5kIHNob3VsZCBub3RcbiAgZGVmaW5lUHJvcGVydHkoTWF0aCwgJ2FzaW5oJywgTWF0aFNoaW1zLmFzaW5oLCBNYXRoLmFzaW5oKDFlKzMwMCkgPT09IEluZmluaXR5KTtcbiAgLy8gQ2hyb21lIDwgNTQgYXRhbmggaW5jb3JyZWN0bHkgcmV0dXJucyAwIGZvciBsYXJnZSBudW1iZXJzXG4gIGRlZmluZVByb3BlcnR5KE1hdGgsICdhdGFuaCcsIE1hdGhTaGltcy5hdGFuaCwgTWF0aC5hdGFuaCgxZS0zMDApID09PSAwKTtcbiAgLy8gQ2hyb21lIDQwIGhhcyBhbiBpbXByZWNpc2UgTWF0aC50YW5oIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzXG4gIGRlZmluZVByb3BlcnR5KE1hdGgsICd0YW5oJywgTWF0aFNoaW1zLnRhbmgsIE1hdGgudGFuaCgtMmUtMTcpICE9PSAtMmUtMTcpO1xuICAvLyBDaHJvbWUgNDAgbG9zZXMgTWF0aC5hY29zaCBwcmVjaXNpb24gd2l0aCBoaWdoIG51bWJlcnNcbiAgZGVmaW5lUHJvcGVydHkoTWF0aCwgJ2Fjb3NoJywgTWF0aFNoaW1zLmFjb3NoLCBNYXRoLmFjb3NoKE51bWJlci5NQVhfVkFMVUUpID09PSBJbmZpbml0eSk7XG4gIC8vIENocm9tZSA8IDU0IGhhcyBhbiBpbmFjY3VyYXRlIGFjb3NoIGZvciBFUFNJTE9OIGRlbHRhc1xuICBkZWZpbmVQcm9wZXJ0eShNYXRoLCAnYWNvc2gnLCBNYXRoU2hpbXMuYWNvc2gsICF3aXRoaW5VTFBEaXN0YW5jZShNYXRoLmFjb3NoKDEgKyBOdW1iZXIuRVBTSUxPTiksIE1hdGguc3FydCgyICogTnVtYmVyLkVQU0lMT04pKSk7XG4gIC8vIEZpcmVmb3ggMzggb24gV2luZG93c1xuICBkZWZpbmVQcm9wZXJ0eShNYXRoLCAnY2JydCcsIE1hdGhTaGltcy5jYnJ0LCAhd2l0aGluVUxQRGlzdGFuY2UoTWF0aC5jYnJ0KDFlLTMwMCksIDFlLTEwMCkpO1xuICAvLyBub2RlIDAuMTEgaGFzIGFuIGltcHJlY2lzZSBNYXRoLnNpbmggd2l0aCB2ZXJ5IHNtYWxsIG51bWJlcnNcbiAgZGVmaW5lUHJvcGVydHkoTWF0aCwgJ3NpbmgnLCBNYXRoU2hpbXMuc2luaCwgTWF0aC5zaW5oKC0yZS0xNykgIT09IC0yZS0xNyk7XG4gIC8vIEZGIDM1IG9uIExpbnV4IHJlcG9ydHMgMjIwMjUuNDY1Nzk0ODA2NzI1IGZvciBNYXRoLmV4cG0xKDEwKVxuICB2YXIgZXhwbTFPZlRlbiA9IE1hdGguZXhwbTEoMTApO1xuICBkZWZpbmVQcm9wZXJ0eShNYXRoLCAnZXhwbTEnLCBNYXRoU2hpbXMuZXhwbTEsIGV4cG0xT2ZUZW4gPiAyMjAyNS40NjU3OTQ4MDY3MTkgfHwgZXhwbTFPZlRlbiA8IDIyMDI1LjQ2NTc5NDgwNjcxNjUxNjgpO1xuXG4gIHZhciBvcmlnTWF0aFJvdW5kID0gTWF0aC5yb3VuZDtcbiAgLy8gYnJlYWtzIGluIGUuZy4gU2FmYXJpIDgsIEludGVybmV0IEV4cGxvcmVyIDExLCBPcGVyYSAxMlxuICB2YXIgcm91bmRIYW5kbGVzQm91bmRhcnlDb25kaXRpb25zID0gTWF0aC5yb3VuZCgwLjUgLSAoTnVtYmVyLkVQU0lMT04gLyA0KSkgPT09IDAgJiZcbiAgICBNYXRoLnJvdW5kKC0wLjUgKyAoTnVtYmVyLkVQU0lMT04gLyAzLjk5KSkgPT09IDE7XG5cbiAgLy8gV2hlbiBlbmdpbmVzIHVzZSBNYXRoLmZsb29yKHggKyAwLjUpIGludGVybmFsbHksIE1hdGgucm91bmQgY2FuIGJlIGJ1Z2d5IGZvciBsYXJnZSBpbnRlZ2Vycy5cbiAgLy8gVGhpcyBiZWhhdmlvciBzaG91bGQgYmUgZ292ZXJuZWQgYnkgXCJyb3VuZCB0byBuZWFyZXN0LCB0aWVzIHRvIGV2ZW4gbW9kZVwiXG4gIC8vIHNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdGVybXMtYW5kLWRlZmluaXRpb25zLW51bWJlci10eXBlXG4gIC8vIFRoZXNlIGFyZSB0aGUgYm91bmRhcnkgY2FzZXMgd2hlcmUgaXQgYnJlYWtzLlxuICB2YXIgc21hbGxlc3RQb3NpdGl2ZU51bWJlcldoZXJlUm91bmRCcmVha3MgPSBpbnZlcnNlRXBzaWxvbiArIDE7XG4gIHZhciBsYXJnZXN0UG9zaXRpdmVOdW1iZXJXaGVyZVJvdW5kQnJlYWtzID0gKDIgKiBpbnZlcnNlRXBzaWxvbikgLSAxO1xuICB2YXIgcm91bmREb2VzTm90SW5jcmVhc2VJbnRlZ2VycyA9IFtcbiAgICBzbWFsbGVzdFBvc2l0aXZlTnVtYmVyV2hlcmVSb3VuZEJyZWFrcyxcbiAgICBsYXJnZXN0UG9zaXRpdmVOdW1iZXJXaGVyZVJvdW5kQnJlYWtzXG4gIF0uZXZlcnkoZnVuY3Rpb24gKG51bSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG51bSkgPT09IG51bTtcbiAgfSk7XG4gIGRlZmluZVByb3BlcnR5KE1hdGgsICdyb3VuZCcsIGZ1bmN0aW9uIHJvdW5kKHgpIHtcbiAgICB2YXIgZmxvb3IgPSBfZmxvb3IoeCk7XG4gICAgdmFyIGNlaWwgPSBmbG9vciA9PT0gLTEgPyAtMCA6IGZsb29yICsgMTtcbiAgICByZXR1cm4geCAtIGZsb29yIDwgMC41ID8gZmxvb3IgOiBjZWlsO1xuICB9LCAhcm91bmRIYW5kbGVzQm91bmRhcnlDb25kaXRpb25zIHx8ICFyb3VuZERvZXNOb3RJbmNyZWFzZUludGVnZXJzKTtcbiAgVmFsdWUucHJlc2VydmVUb1N0cmluZyhNYXRoLnJvdW5kLCBvcmlnTWF0aFJvdW5kKTtcblxuICB2YXIgb3JpZ0ltdWwgPSBNYXRoLmltdWw7XG4gIGlmIChNYXRoLmltdWwoMHhmZmZmZmZmZiwgNSkgIT09IC01KSB7XG4gICAgLy8gU2FmYXJpIDYuMSwgYXQgbGVhc3QsIHJlcG9ydHMgXCIwXCIgZm9yIHRoaXMgdmFsdWVcbiAgICBNYXRoLmltdWwgPSBNYXRoU2hpbXMuaW11bDtcbiAgICBWYWx1ZS5wcmVzZXJ2ZVRvU3RyaW5nKE1hdGguaW11bCwgb3JpZ0ltdWwpO1xuICB9XG4gIGlmIChNYXRoLmltdWwubGVuZ3RoICE9PSAyKSB7XG4gICAgLy8gU2FmYXJpIDguMC40IGhhcyBhIGxlbmd0aCBvZiAxXG4gICAgLy8gZml4ZWQgaW4gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE0MzY1OFxuICAgIG92ZXJyaWRlTmF0aXZlKE1hdGgsICdpbXVsJywgZnVuY3Rpb24gaW11bCh4LCB5KSB7XG4gICAgICByZXR1cm4gRVMuQ2FsbChvcmlnSW11bCwgTWF0aCwgYXJndW1lbnRzKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFByb21pc2VzXG4gIC8vIFNpbXBsZXN0IHBvc3NpYmxlIGltcGxlbWVudGF0aW9uOyB1c2UgYSAzcmQtcGFydHkgbGlicmFyeSBpZiB5b3VcbiAgLy8gd2FudCB0aGUgYmVzdCBwb3NzaWJsZSBzcGVlZCBhbmQvb3IgbG9uZyBzdGFjayB0cmFjZXMuXG4gIHZhciBQcm9taXNlU2hpbSA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNldFRpbWVvdXQgPSBnbG9iYWxzLnNldFRpbWVvdXQ7XG4gICAgLy8gc29tZSBlbnZpcm9ubWVudHMgZG9uJ3QgaGF2ZSBzZXRUaW1lb3V0IC0gbm8gd2F5IHRvIHNoaW0gaGVyZS5cbiAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHNldFRpbWVvdXQgIT09ICdvYmplY3QnKSB7IHJldHVybjsgfVxuXG4gICAgRVMuSXNQcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgIGlmICghRVMuVHlwZUlzT2JqZWN0KHByb21pc2UpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgcHJvbWlzZS5fcHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyB1bmluaXRpYWxpemVkLCBvciBtaXNzaW5nIG91ciBoaWRkZW4gZmllbGQuXG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgLy8gXCJQcm9taXNlQ2FwYWJpbGl0eVwiIGluIHRoZSBzcGVjIGlzIHdoYXQgbW9zdCBwcm9taXNlIGltcGxlbWVudGF0aW9uc1xuICAgIC8vIGNhbGwgYSBcImRlZmVycmVkXCIuXG4gICAgdmFyIFByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICAgIGlmICghRVMuSXNDb25zdHJ1Y3RvcihDKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCYWQgcHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgICAgfVxuICAgICAgdmFyIGNhcGFiaWxpdHkgPSB0aGlzO1xuICAgICAgdmFyIHJlc29sdmVyID0gZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBpZiAoY2FwYWJpbGl0eS5yZXNvbHZlICE9PSB2b2lkIDAgfHwgY2FwYWJpbGl0eS5yZWplY3QgIT09IHZvaWQgMCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGltcGxlbWVudGF0aW9uIScpO1xuICAgICAgICB9XG4gICAgICAgIGNhcGFiaWxpdHkucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgIGNhcGFiaWxpdHkucmVqZWN0ID0gcmVqZWN0O1xuICAgICAgfTtcbiAgICAgIC8vIEluaXRpYWxpemUgZmllbGRzIHRvIGluZm9ybSBvcHRpbWl6ZXJzIGFib3V0IHRoZSBvYmplY3Qgc2hhcGUuXG4gICAgICBjYXBhYmlsaXR5LnJlc29sdmUgPSB2b2lkIDA7XG4gICAgICBjYXBhYmlsaXR5LnJlamVjdCA9IHZvaWQgMDtcbiAgICAgIGNhcGFiaWxpdHkucHJvbWlzZSA9IG5ldyBDKHJlc29sdmVyKTtcbiAgICAgIGlmICghKEVTLklzQ2FsbGFibGUoY2FwYWJpbGl0eS5yZXNvbHZlKSAmJiBFUy5Jc0NhbGxhYmxlKGNhcGFiaWxpdHkucmVqZWN0KSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQmFkIHByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gZmluZCBhbiBhcHByb3ByaWF0ZSBzZXRJbW1lZGlhdGUtYWxpa2VcbiAgICB2YXIgbWFrZVplcm9UaW1lb3V0O1xuICAgIC8qZ2xvYmFsIHdpbmRvdyAqL1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiBFUy5Jc0NhbGxhYmxlKHdpbmRvdy5wb3N0TWVzc2FnZSkpIHtcbiAgICAgIG1ha2VaZXJvVGltZW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gZnJvbSBodHRwOi8vZGJhcm9uLm9yZy9sb2cvMjAxMDAzMDktZmFzdGVyLXRpbWVvdXRzXG4gICAgICAgIHZhciB0aW1lb3V0cyA9IFtdO1xuICAgICAgICB2YXIgbWVzc2FnZU5hbWUgPSAnemVyby10aW1lb3V0LW1lc3NhZ2UnO1xuICAgICAgICB2YXIgc2V0WmVyb1RpbWVvdXQgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgICBfcHVzaCh0aW1lb3V0cywgZm4pO1xuICAgICAgICAgIHdpbmRvdy5wb3N0TWVzc2FnZShtZXNzYWdlTmFtZSwgJyonKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGhhbmRsZU1lc3NhZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSB3aW5kb3cgJiYgZXZlbnQuZGF0YSA9PT0gbWVzc2FnZU5hbWUpIHtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgaWYgKHRpbWVvdXRzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIHZhciBmbiA9IF9zaGlmdCh0aW1lb3V0cyk7XG4gICAgICAgICAgICBmbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBoYW5kbGVNZXNzYWdlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHNldFplcm9UaW1lb3V0O1xuICAgICAgfTtcbiAgICB9XG4gICAgdmFyIG1ha2VQcm9taXNlQXNhcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEFuIGVmZmljaWVudCB0YXNrLXNjaGVkdWxlciBiYXNlZCBvbiBhIHByZS1leGlzdGluZyBQcm9taXNlXG4gICAgICAvLyBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggd2UgY2FuIHVzZSBldmVuIGlmIHdlIG92ZXJyaWRlIHRoZVxuICAgICAgLy8gZ2xvYmFsIFByb21pc2UgYmVsb3cgKGluIG9yZGVyIHRvIHdvcmthcm91bmQgYnVncylcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9SYXlub3Mvb2JzZXJ2LWhhc2gvaXNzdWVzLzIjaXNzdWVjb21tZW50LTM1ODU3NjcxXG4gICAgICB2YXIgUCA9IGdsb2JhbHMuUHJvbWlzZTtcbiAgICAgIHZhciBwciA9IFAgJiYgUC5yZXNvbHZlICYmIFAucmVzb2x2ZSgpO1xuICAgICAgcmV0dXJuIHByICYmIGZ1bmN0aW9uICh0YXNrKSB7XG4gICAgICAgIHJldHVybiBwci50aGVuKHRhc2spO1xuICAgICAgfTtcbiAgICB9O1xuICAgIC8qZ2xvYmFsIHByb2Nlc3MgKi9cbiAgICB2YXIgZW5xdWV1ZSA9IEVTLklzQ2FsbGFibGUoZ2xvYmFscy5zZXRJbW1lZGlhdGUpID9cbiAgICAgIGdsb2JhbHMuc2V0SW1tZWRpYXRlIDpcbiAgICAgIHR5cGVvZiBwcm9jZXNzID09PSAnb2JqZWN0JyAmJiBwcm9jZXNzLm5leHRUaWNrID8gcHJvY2Vzcy5uZXh0VGljayA6IG1ha2VQcm9taXNlQXNhcCgpIHx8XG4gICAgICAoRVMuSXNDYWxsYWJsZShtYWtlWmVyb1RpbWVvdXQpID8gbWFrZVplcm9UaW1lb3V0KCkgOiBmdW5jdGlvbiAodGFzaykgeyBzZXRUaW1lb3V0KHRhc2ssIDApOyB9KTsgLy8gZmFsbGJhY2tcblxuICAgIC8vIENvbnN0YW50cyBmb3IgUHJvbWlzZSBpbXBsZW1lbnRhdGlvblxuICAgIHZhciBQUk9NSVNFX0lERU5USVRZID0gZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHg7IH07XG4gICAgdmFyIFBST01JU0VfVEhST1dFUiA9IGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH07XG4gICAgdmFyIFBST01JU0VfUEVORElORyA9IDA7XG4gICAgdmFyIFBST01JU0VfRlVMRklMTEVEID0gMTtcbiAgICB2YXIgUFJPTUlTRV9SRUpFQ1RFRCA9IDI7XG4gICAgLy8gV2Ugc3RvcmUgZnVsZmlsbC9yZWplY3QgaGFuZGxlcnMgYW5kIGNhcGFiaWxpdGllcyBpbiBhIHNpbmdsZSBhcnJheS5cbiAgICB2YXIgUFJPTUlTRV9GVUxGSUxMX09GRlNFVCA9IDA7XG4gICAgdmFyIFBST01JU0VfUkVKRUNUX09GRlNFVCA9IDE7XG4gICAgdmFyIFBST01JU0VfQ0FQQUJJTElUWV9PRkZTRVQgPSAyO1xuICAgIC8vIFRoaXMgaXMgdXNlZCBpbiBhbiBvcHRpbWl6YXRpb24gZm9yIGNoYWluaW5nIHByb21pc2VzIHZpYSB0aGVuLlxuICAgIHZhciBQUk9NSVNFX0ZBS0VfQ0FQQUJJTElUWSA9IHt9O1xuXG4gICAgdmFyIGVucXVldWVQcm9taXNlUmVhY3Rpb25Kb2IgPSBmdW5jdGlvbiAoaGFuZGxlciwgY2FwYWJpbGl0eSwgYXJndW1lbnQpIHtcbiAgICAgIGVucXVldWUoZnVuY3Rpb24gKCkge1xuICAgICAgICBwcm9taXNlUmVhY3Rpb25Kb2IoaGFuZGxlciwgY2FwYWJpbGl0eSwgYXJndW1lbnQpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciBwcm9taXNlUmVhY3Rpb25Kb2IgPSBmdW5jdGlvbiAoaGFuZGxlciwgcHJvbWlzZUNhcGFiaWxpdHksIGFyZ3VtZW50KSB7XG4gICAgICB2YXIgaGFuZGxlclJlc3VsdCwgZjtcbiAgICAgIGlmIChwcm9taXNlQ2FwYWJpbGl0eSA9PT0gUFJPTUlTRV9GQUtFX0NBUEFCSUxJVFkpIHtcbiAgICAgICAgLy8gRmFzdCBjYXNlLCB3aGVuIHdlIGRvbid0IGFjdHVhbGx5IG5lZWQgdG8gY2hhaW4gdGhyb3VnaCB0byBhXG4gICAgICAgIC8vIChyZWFsKSBwcm9taXNlQ2FwYWJpbGl0eS5cbiAgICAgICAgcmV0dXJuIGhhbmRsZXIoYXJndW1lbnQpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgaGFuZGxlclJlc3VsdCA9IGhhbmRsZXIoYXJndW1lbnQpO1xuICAgICAgICBmID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaGFuZGxlclJlc3VsdCA9IGU7XG4gICAgICAgIGYgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgICB9XG4gICAgICBmKGhhbmRsZXJSZXN1bHQpO1xuICAgIH07XG5cbiAgICB2YXIgZnVsZmlsbFByb21pc2UgPSBmdW5jdGlvbiAocHJvbWlzZSwgdmFsdWUpIHtcbiAgICAgIHZhciBfcHJvbWlzZSA9IHByb21pc2UuX3Byb21pc2U7XG4gICAgICB2YXIgbGVuZ3RoID0gX3Byb21pc2UucmVhY3Rpb25MZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoID4gMCkge1xuICAgICAgICBlbnF1ZXVlUHJvbWlzZVJlYWN0aW9uSm9iKFxuICAgICAgICAgIF9wcm9taXNlLmZ1bGZpbGxSZWFjdGlvbkhhbmRsZXIwLFxuICAgICAgICAgIF9wcm9taXNlLnJlYWN0aW9uQ2FwYWJpbGl0eTAsXG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgKTtcbiAgICAgICAgX3Byb21pc2UuZnVsZmlsbFJlYWN0aW9uSGFuZGxlcjAgPSB2b2lkIDA7XG4gICAgICAgIF9wcm9taXNlLnJlamVjdFJlYWN0aW9uczAgPSB2b2lkIDA7XG4gICAgICAgIF9wcm9taXNlLnJlYWN0aW9uQ2FwYWJpbGl0eTAgPSB2b2lkIDA7XG4gICAgICAgIGlmIChsZW5ndGggPiAxKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDEsIGlkeCA9IDA7IGkgPCBsZW5ndGg7IGkrKywgaWR4ICs9IDMpIHtcbiAgICAgICAgICAgIGVucXVldWVQcm9taXNlUmVhY3Rpb25Kb2IoXG4gICAgICAgICAgICAgIF9wcm9taXNlW2lkeCArIFBST01JU0VfRlVMRklMTF9PRkZTRVRdLFxuICAgICAgICAgICAgICBfcHJvbWlzZVtpZHggKyBQUk9NSVNFX0NBUEFCSUxJVFlfT0ZGU0VUXSxcbiAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBwcm9taXNlW2lkeCArIFBST01JU0VfRlVMRklMTF9PRkZTRVRdID0gdm9pZCAwO1xuICAgICAgICAgICAgcHJvbWlzZVtpZHggKyBQUk9NSVNFX1JFSkVDVF9PRkZTRVRdID0gdm9pZCAwO1xuICAgICAgICAgICAgcHJvbWlzZVtpZHggKyBQUk9NSVNFX0NBUEFCSUxJVFlfT0ZGU0VUXSA9IHZvaWQgMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIF9wcm9taXNlLnJlc3VsdCA9IHZhbHVlO1xuICAgICAgX3Byb21pc2Uuc3RhdGUgPSBQUk9NSVNFX0ZVTEZJTExFRDtcbiAgICAgIF9wcm9taXNlLnJlYWN0aW9uTGVuZ3RoID0gMDtcbiAgICB9O1xuXG4gICAgdmFyIHJlamVjdFByb21pc2UgPSBmdW5jdGlvbiAocHJvbWlzZSwgcmVhc29uKSB7XG4gICAgICB2YXIgX3Byb21pc2UgPSBwcm9taXNlLl9wcm9taXNlO1xuICAgICAgdmFyIGxlbmd0aCA9IF9wcm9taXNlLnJlYWN0aW9uTGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA+IDApIHtcbiAgICAgICAgZW5xdWV1ZVByb21pc2VSZWFjdGlvbkpvYihcbiAgICAgICAgICBfcHJvbWlzZS5yZWplY3RSZWFjdGlvbkhhbmRsZXIwLFxuICAgICAgICAgIF9wcm9taXNlLnJlYWN0aW9uQ2FwYWJpbGl0eTAsXG4gICAgICAgICAgcmVhc29uXG4gICAgICAgICk7XG4gICAgICAgIF9wcm9taXNlLmZ1bGZpbGxSZWFjdGlvbkhhbmRsZXIwID0gdm9pZCAwO1xuICAgICAgICBfcHJvbWlzZS5yZWplY3RSZWFjdGlvbnMwID0gdm9pZCAwO1xuICAgICAgICBfcHJvbWlzZS5yZWFjdGlvbkNhcGFiaWxpdHkwID0gdm9pZCAwO1xuICAgICAgICBpZiAobGVuZ3RoID4gMSkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxLCBpZHggPSAwOyBpIDwgbGVuZ3RoOyBpKyssIGlkeCArPSAzKSB7XG4gICAgICAgICAgICBlbnF1ZXVlUHJvbWlzZVJlYWN0aW9uSm9iKFxuICAgICAgICAgICAgICBfcHJvbWlzZVtpZHggKyBQUk9NSVNFX1JFSkVDVF9PRkZTRVRdLFxuICAgICAgICAgICAgICBfcHJvbWlzZVtpZHggKyBQUk9NSVNFX0NBUEFCSUxJVFlfT0ZGU0VUXSxcbiAgICAgICAgICAgICAgcmVhc29uXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcHJvbWlzZVtpZHggKyBQUk9NSVNFX0ZVTEZJTExfT0ZGU0VUXSA9IHZvaWQgMDtcbiAgICAgICAgICAgIHByb21pc2VbaWR4ICsgUFJPTUlTRV9SRUpFQ1RfT0ZGU0VUXSA9IHZvaWQgMDtcbiAgICAgICAgICAgIHByb21pc2VbaWR4ICsgUFJPTUlTRV9DQVBBQklMSVRZX09GRlNFVF0gPSB2b2lkIDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBfcHJvbWlzZS5yZXN1bHQgPSByZWFzb247XG4gICAgICBfcHJvbWlzZS5zdGF0ZSA9IFBST01JU0VfUkVKRUNURUQ7XG4gICAgICBfcHJvbWlzZS5yZWFjdGlvbkxlbmd0aCA9IDA7XG4gICAgfTtcblxuICAgIHZhciBjcmVhdGVSZXNvbHZpbmdGdW5jdGlvbnMgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgdmFyIGFscmVhZHlSZXNvbHZlZCA9IGZhbHNlO1xuICAgICAgdmFyIHJlc29sdmUgPSBmdW5jdGlvbiAocmVzb2x1dGlvbikge1xuICAgICAgICB2YXIgdGhlbjtcbiAgICAgICAgaWYgKGFscmVhZHlSZXNvbHZlZCkgeyByZXR1cm47IH1cbiAgICAgICAgYWxyZWFkeVJlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHJlc29sdXRpb24gPT09IHByb21pc2UpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0UHJvbWlzZShwcm9taXNlLCBuZXcgVHlwZUVycm9yKCdTZWxmIHJlc29sdXRpb24nKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFFUy5UeXBlSXNPYmplY3QocmVzb2x1dGlvbikpIHtcbiAgICAgICAgICByZXR1cm4gZnVsZmlsbFByb21pc2UocHJvbWlzZSwgcmVzb2x1dGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuID0gcmVzb2x1dGlvbi50aGVuO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdFByb21pc2UocHJvbWlzZSwgZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFFUy5Jc0NhbGxhYmxlKHRoZW4pKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bGZpbGxQcm9taXNlKHByb21pc2UsIHJlc29sdXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGVucXVldWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHByb21pc2VSZXNvbHZlVGhlbmFibGVKb2IocHJvbWlzZSwgcmVzb2x1dGlvbiwgdGhlbik7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICAgIHZhciByZWplY3QgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIGlmIChhbHJlYWR5UmVzb2x2ZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIGFscmVhZHlSZXNvbHZlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiByZWplY3RQcm9taXNlKHByb21pc2UsIHJlYXNvbik7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIHsgcmVzb2x2ZTogcmVzb2x2ZSwgcmVqZWN0OiByZWplY3QgfTtcbiAgICB9O1xuXG4gICAgdmFyIG9wdGltaXplZFRoZW4gPSBmdW5jdGlvbiAodGhlbiwgdGhlbmFibGUsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgLy8gT3B0aW1pemF0aW9uOiBzaW5jZSB3ZSBkaXNjYXJkIHRoZSByZXN1bHQsIHdlIGNhbiBwYXNzIG91clxuICAgICAgLy8gb3duIHRoZW4gaW1wbGVtZW50YXRpb24gYSBzcGVjaWFsIGhpbnQgdG8gbGV0IGl0IGtub3cgaXRcbiAgICAgIC8vIGRvZXNuJ3QgaGF2ZSB0byBjcmVhdGUgaXQuICAoVGhlIFBST01JU0VfRkFLRV9DQVBBQklMSVRZXG4gICAgICAvLyBvYmplY3QgaXMgbG9jYWwgdG8gdGhpcyBpbXBsZW1lbnRhdGlvbiBhbmQgdW5mb3JnZWFibGUgb3V0c2lkZS4pXG4gICAgICBpZiAodGhlbiA9PT0gUHJvbWlzZSRwcm90b3R5cGUkdGhlbikge1xuICAgICAgICBfY2FsbCh0aGVuLCB0aGVuYWJsZSwgcmVzb2x2ZSwgcmVqZWN0LCBQUk9NSVNFX0ZBS0VfQ0FQQUJJTElUWSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfY2FsbCh0aGVuLCB0aGVuYWJsZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBwcm9taXNlUmVzb2x2ZVRoZW5hYmxlSm9iID0gZnVuY3Rpb24gKHByb21pc2UsIHRoZW5hYmxlLCB0aGVuKSB7XG4gICAgICB2YXIgcmVzb2x2aW5nRnVuY3Rpb25zID0gY3JlYXRlUmVzb2x2aW5nRnVuY3Rpb25zKHByb21pc2UpO1xuICAgICAgdmFyIHJlc29sdmUgPSByZXNvbHZpbmdGdW5jdGlvbnMucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZXNvbHZpbmdGdW5jdGlvbnMucmVqZWN0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgb3B0aW1pemVkVGhlbih0aGVuLCB0aGVuYWJsZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgUHJvbWlzZSRwcm90b3R5cGUsIFByb21pc2UkcHJvdG90eXBlJHRoZW47XG4gICAgdmFyIFByb21pc2UgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIFByb21pc2VTaGltID0gZnVuY3Rpb24gUHJvbWlzZShyZXNvbHZlcikge1xuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUHJvbWlzZVNoaW0pKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ29uc3RydWN0b3IgUHJvbWlzZSByZXF1aXJlcyBcIm5ld1wiJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMgJiYgdGhpcy5fcHJvbWlzZSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBjb25zdHJ1Y3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzZWUgaHR0cHM6Ly9idWdzLmVjbWFzY3JpcHQub3JnL3Nob3dfYnVnLmNnaT9pZD0yNDgyXG4gICAgICAgIGlmICghRVMuSXNDYWxsYWJsZShyZXNvbHZlcikpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdub3QgYSB2YWxpZCByZXNvbHZlcicpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcm9taXNlID0gZW11bGF0ZUVTNmNvbnN0cnVjdCh0aGlzLCBQcm9taXNlU2hpbSwgUHJvbWlzZSRwcm90b3R5cGUsIHtcbiAgICAgICAgICBfcHJvbWlzZToge1xuICAgICAgICAgICAgcmVzdWx0OiB2b2lkIDAsXG4gICAgICAgICAgICBzdGF0ZTogUFJPTUlTRV9QRU5ESU5HLFxuICAgICAgICAgICAgLy8gVGhlIGZpcnN0IG1lbWJlciBvZiB0aGUgXCJyZWFjdGlvbnNcIiBhcnJheSBpcyBpbmxpbmVkIGhlcmUsXG4gICAgICAgICAgICAvLyBzaW5jZSBtb3N0IHByb21pc2VzIG9ubHkgaGF2ZSBvbmUgcmVhY3Rpb24uXG4gICAgICAgICAgICAvLyBXZSd2ZSBhbHNvIGV4cGxvZGVkIHRoZSAncmVhY3Rpb24nIG9iamVjdCB0byBpbmxpbmUgdGhlXG4gICAgICAgICAgICAvLyBcImhhbmRsZXJcIiBhbmQgXCJjYXBhYmlsaXR5XCIgZmllbGRzLCBzaW5jZSBib3RoIGZ1bGZpbGwgYW5kXG4gICAgICAgICAgICAvLyByZWplY3QgcmVhY3Rpb25zIHNoYXJlIHRoZSBzYW1lIGNhcGFiaWxpdHkuXG4gICAgICAgICAgICByZWFjdGlvbkxlbmd0aDogMCxcbiAgICAgICAgICAgIGZ1bGZpbGxSZWFjdGlvbkhhbmRsZXIwOiB2b2lkIDAsXG4gICAgICAgICAgICByZWplY3RSZWFjdGlvbkhhbmRsZXIwOiB2b2lkIDAsXG4gICAgICAgICAgICByZWFjdGlvbkNhcGFiaWxpdHkwOiB2b2lkIDBcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgcmVzb2x2aW5nRnVuY3Rpb25zID0gY3JlYXRlUmVzb2x2aW5nRnVuY3Rpb25zKHByb21pc2UpO1xuICAgICAgICB2YXIgcmVqZWN0ID0gcmVzb2x2aW5nRnVuY3Rpb25zLnJlamVjdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXNvbHZlcihyZXNvbHZpbmdGdW5jdGlvbnMucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgIH07XG4gICAgICByZXR1cm4gUHJvbWlzZVNoaW07XG4gICAgfSgpKTtcbiAgICBQcm9taXNlJHByb3RvdHlwZSA9IFByb21pc2UucHJvdG90eXBlO1xuXG4gICAgdmFyIF9wcm9taXNlQWxsUmVzb2x2ZXIgPSBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlcywgY2FwYWJpbGl0eSwgcmVtYWluaW5nKSB7XG4gICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSB7IHJldHVybjsgfVxuICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgdmFsdWVzW2luZGV4XSA9IHg7XG4gICAgICAgIGlmICgoLS1yZW1haW5pbmcuY291bnQpID09PSAwKSB7XG4gICAgICAgICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgICAgICAgcmVzb2x2ZSh2YWx1ZXMpOyAvLyBjYWxsIHcvIHRoaXM9PT11bmRlZmluZWRcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgdmFyIHBlcmZvcm1Qcm9taXNlQWxsID0gZnVuY3Rpb24gKGl0ZXJhdG9yUmVjb3JkLCBDLCByZXN1bHRDYXBhYmlsaXR5KSB7XG4gICAgICB2YXIgaXQgPSBpdGVyYXRvclJlY29yZC5pdGVyYXRvcjtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciByZW1haW5pbmcgPSB7IGNvdW50OiAxIH07XG4gICAgICB2YXIgbmV4dCwgbmV4dFZhbHVlO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbmV4dCA9IEVTLkl0ZXJhdG9yU3RlcChpdCk7XG4gICAgICAgICAgaWYgKG5leHQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpdGVyYXRvclJlY29yZC5kb25lID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZXh0VmFsdWUgPSBuZXh0LnZhbHVlO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaXRlcmF0b3JSZWNvcmQuZG9uZSA9IHRydWU7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZXNbaW5kZXhdID0gdm9pZCAwO1xuICAgICAgICB2YXIgbmV4dFByb21pc2UgPSBDLnJlc29sdmUobmV4dFZhbHVlKTtcbiAgICAgICAgdmFyIHJlc29sdmVFbGVtZW50ID0gX3Byb21pc2VBbGxSZXNvbHZlcihcbiAgICAgICAgICBpbmRleCxcbiAgICAgICAgICB2YWx1ZXMsXG4gICAgICAgICAgcmVzdWx0Q2FwYWJpbGl0eSxcbiAgICAgICAgICByZW1haW5pbmdcbiAgICAgICAgKTtcbiAgICAgICAgcmVtYWluaW5nLmNvdW50ICs9IDE7XG4gICAgICAgIG9wdGltaXplZFRoZW4obmV4dFByb21pc2UudGhlbiwgbmV4dFByb21pc2UsIHJlc29sdmVFbGVtZW50LCByZXN1bHRDYXBhYmlsaXR5LnJlamVjdCk7XG4gICAgICAgIGluZGV4ICs9IDE7XG4gICAgICB9XG4gICAgICBpZiAoKC0tcmVtYWluaW5nLmNvdW50KSA9PT0gMCkge1xuICAgICAgICB2YXIgcmVzb2x2ZSA9IHJlc3VsdENhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZXMpOyAvLyBjYWxsIHcvIHRoaXM9PT11bmRlZmluZWRcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgfTtcblxuICAgIHZhciBwZXJmb3JtUHJvbWlzZVJhY2UgPSBmdW5jdGlvbiAoaXRlcmF0b3JSZWNvcmQsIEMsIHJlc3VsdENhcGFiaWxpdHkpIHtcbiAgICAgIHZhciBpdCA9IGl0ZXJhdG9yUmVjb3JkLml0ZXJhdG9yO1xuICAgICAgdmFyIG5leHQsIG5leHRWYWx1ZSwgbmV4dFByb21pc2U7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIG5leHQgPSBFUy5JdGVyYXRvclN0ZXAoaXQpO1xuICAgICAgICAgIGlmIChuZXh0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgLy8gTk9URTogSWYgaXRlcmFibGUgaGFzIG5vIGl0ZW1zLCByZXN1bHRpbmcgcHJvbWlzZSB3aWxsIG5ldmVyXG4gICAgICAgICAgICAvLyByZXNvbHZlOyBzZWU6XG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZG9tZW5pYy9wcm9taXNlcy11bndyYXBwaW5nL2lzc3Vlcy83NVxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9idWdzLmVjbWFzY3JpcHQub3JnL3Nob3dfYnVnLmNnaT9pZD0yNTE1XG4gICAgICAgICAgICBpdGVyYXRvclJlY29yZC5kb25lID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZXh0VmFsdWUgPSBuZXh0LnZhbHVlO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaXRlcmF0b3JSZWNvcmQuZG9uZSA9IHRydWU7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgICBuZXh0UHJvbWlzZSA9IEMucmVzb2x2ZShuZXh0VmFsdWUpO1xuICAgICAgICBvcHRpbWl6ZWRUaGVuKG5leHRQcm9taXNlLnRoZW4sIG5leHRQcm9taXNlLCByZXN1bHRDYXBhYmlsaXR5LnJlc29sdmUsIHJlc3VsdENhcGFiaWxpdHkucmVqZWN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgfTtcblxuICAgIGRlZmluZVByb3BlcnRpZXMoUHJvbWlzZSwge1xuICAgICAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICAgICAgdmFyIEMgPSB0aGlzO1xuICAgICAgICBpZiAoIUVTLlR5cGVJc09iamVjdChDKSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb21pc2UgaXMgbm90IG9iamVjdCcpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgICAgICB2YXIgaXRlcmF0b3IsIGl0ZXJhdG9yUmVjb3JkO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGl0ZXJhdG9yID0gRVMuR2V0SXRlcmF0b3IoaXRlcmFibGUpO1xuICAgICAgICAgIGl0ZXJhdG9yUmVjb3JkID0geyBpdGVyYXRvcjogaXRlcmF0b3IsIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgcmV0dXJuIHBlcmZvcm1Qcm9taXNlQWxsKGl0ZXJhdG9yUmVjb3JkLCBDLCBjYXBhYmlsaXR5KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHZhciBleGNlcHRpb24gPSBlO1xuICAgICAgICAgIGlmIChpdGVyYXRvclJlY29yZCAmJiAhaXRlcmF0b3JSZWNvcmQuZG9uZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgRVMuSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgdHJ1ZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlZSkge1xuICAgICAgICAgICAgICBleGNlcHRpb24gPSBlZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgICAgICAgIHJlamVjdChleGNlcHRpb24pO1xuICAgICAgICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICAgICAgdmFyIEMgPSB0aGlzO1xuICAgICAgICBpZiAoIUVTLlR5cGVJc09iamVjdChDKSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb21pc2UgaXMgbm90IG9iamVjdCcpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgICAgICB2YXIgaXRlcmF0b3IsIGl0ZXJhdG9yUmVjb3JkO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGl0ZXJhdG9yID0gRVMuR2V0SXRlcmF0b3IoaXRlcmFibGUpO1xuICAgICAgICAgIGl0ZXJhdG9yUmVjb3JkID0geyBpdGVyYXRvcjogaXRlcmF0b3IsIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgcmV0dXJuIHBlcmZvcm1Qcm9taXNlUmFjZShpdGVyYXRvclJlY29yZCwgQywgY2FwYWJpbGl0eSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICB2YXIgZXhjZXB0aW9uID0gZTtcbiAgICAgICAgICBpZiAoaXRlcmF0b3JSZWNvcmQgJiYgIWl0ZXJhdG9yUmVjb3JkLmRvbmUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIEVTLkl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIHRydWUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZWUpIHtcbiAgICAgICAgICAgICAgZXhjZXB0aW9uID0gZWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAgICAgICByZWplY3QoZXhjZXB0aW9uKTtcbiAgICAgICAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyZWFzb24pIHtcbiAgICAgICAgdmFyIEMgPSB0aGlzO1xuICAgICAgICBpZiAoIUVTLlR5cGVJc09iamVjdChDKSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBwcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhcGFiaWxpdHkgPSBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgICAgIHZhciByZWplY3RGdW5jID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgICAgIHJlamVjdEZ1bmMocmVhc29uKTsgLy8gY2FsbCB3aXRoIHRoaXM9PT11bmRlZmluZWRcbiAgICAgICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgICAgIH0sXG5cbiAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUodikge1xuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9lc2Rpc2N1c3Mub3JnL3RvcGljL2ZpeGluZy1wcm9taXNlLXJlc29sdmUgZm9yIHNwZWNcbiAgICAgICAgdmFyIEMgPSB0aGlzO1xuICAgICAgICBpZiAoIUVTLlR5cGVJc09iamVjdChDKSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBwcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEVTLklzUHJvbWlzZSh2KSkge1xuICAgICAgICAgIHZhciBjb25zdHJ1Y3RvciA9IHYuY29uc3RydWN0b3I7XG4gICAgICAgICAgaWYgKGNvbnN0cnVjdG9yID09PSBDKSB7XG4gICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhcGFiaWxpdHkgPSBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgICAgIHZhciByZXNvbHZlRnVuYyA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICAgICAgcmVzb2x2ZUZ1bmModik7IC8vIGNhbGwgd2l0aCB0aGlzPT09dW5kZWZpbmVkXG4gICAgICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBkZWZpbmVQcm9wZXJ0aWVzKFByb21pc2UkcHJvdG90eXBlLCB7XG4gICAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gdGhpcy50aGVuKG51bGwsIG9uUmVqZWN0ZWQpO1xuICAgICAgfSxcblxuICAgICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gICAgICAgIGlmICghRVMuSXNQcm9taXNlKHByb21pc2UpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ25vdCBhIHByb21pc2UnKTsgfVxuICAgICAgICB2YXIgQyA9IEVTLlNwZWNpZXNDb25zdHJ1Y3Rvcihwcm9taXNlLCBQcm9taXNlKTtcbiAgICAgICAgdmFyIHJlc3VsdENhcGFiaWxpdHk7XG4gICAgICAgIHZhciByZXR1cm5WYWx1ZUlzSWdub3JlZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSA9PT0gUFJPTUlTRV9GQUtFX0NBUEFCSUxJVFk7XG4gICAgICAgIGlmIChyZXR1cm5WYWx1ZUlzSWdub3JlZCAmJiBDID09PSBQcm9taXNlKSB7XG4gICAgICAgICAgcmVzdWx0Q2FwYWJpbGl0eSA9IFBST01JU0VfRkFLRV9DQVBBQklMSVRZO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdENhcGFiaWxpdHkgPSBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUGVyZm9ybVByb21pc2VUaGVuKHByb21pc2UsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCByZXN1bHRDYXBhYmlsaXR5KVxuICAgICAgICAvLyBOb3RlIHRoYXQgd2UndmUgc3BsaXQgdGhlICdyZWFjdGlvbicgb2JqZWN0IGludG8gaXRzIHR3b1xuICAgICAgICAvLyBjb21wb25lbnRzLCBcImNhcGFiaWxpdGllc1wiIGFuZCBcImhhbmRsZXJcIlxuICAgICAgICAvLyBcImNhcGFiaWxpdGllc1wiIGlzIGFsd2F5cyBlcXVhbCB0byBgcmVzdWx0Q2FwYWJpbGl0eWBcbiAgICAgICAgdmFyIGZ1bGZpbGxSZWFjdGlvbkhhbmRsZXIgPSBFUy5Jc0NhbGxhYmxlKG9uRnVsZmlsbGVkKSA/IG9uRnVsZmlsbGVkIDogUFJPTUlTRV9JREVOVElUWTtcbiAgICAgICAgdmFyIHJlamVjdFJlYWN0aW9uSGFuZGxlciA9IEVTLklzQ2FsbGFibGUob25SZWplY3RlZCkgPyBvblJlamVjdGVkIDogUFJPTUlTRV9USFJPV0VSO1xuICAgICAgICB2YXIgX3Byb21pc2UgPSBwcm9taXNlLl9wcm9taXNlO1xuICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgIGlmIChfcHJvbWlzZS5zdGF0ZSA9PT0gUFJPTUlTRV9QRU5ESU5HKSB7XG4gICAgICAgICAgaWYgKF9wcm9taXNlLnJlYWN0aW9uTGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBfcHJvbWlzZS5mdWxmaWxsUmVhY3Rpb25IYW5kbGVyMCA9IGZ1bGZpbGxSZWFjdGlvbkhhbmRsZXI7XG4gICAgICAgICAgICBfcHJvbWlzZS5yZWplY3RSZWFjdGlvbkhhbmRsZXIwID0gcmVqZWN0UmVhY3Rpb25IYW5kbGVyO1xuICAgICAgICAgICAgX3Byb21pc2UucmVhY3Rpb25DYXBhYmlsaXR5MCA9IHJlc3VsdENhcGFiaWxpdHk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBpZHggPSAzICogKF9wcm9taXNlLnJlYWN0aW9uTGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICBfcHJvbWlzZVtpZHggKyBQUk9NSVNFX0ZVTEZJTExfT0ZGU0VUXSA9IGZ1bGZpbGxSZWFjdGlvbkhhbmRsZXI7XG4gICAgICAgICAgICBfcHJvbWlzZVtpZHggKyBQUk9NSVNFX1JFSkVDVF9PRkZTRVRdID0gcmVqZWN0UmVhY3Rpb25IYW5kbGVyO1xuICAgICAgICAgICAgX3Byb21pc2VbaWR4ICsgUFJPTUlTRV9DQVBBQklMSVRZX09GRlNFVF0gPSByZXN1bHRDYXBhYmlsaXR5O1xuICAgICAgICAgIH1cbiAgICAgICAgICBfcHJvbWlzZS5yZWFjdGlvbkxlbmd0aCArPSAxO1xuICAgICAgICB9IGVsc2UgaWYgKF9wcm9taXNlLnN0YXRlID09PSBQUk9NSVNFX0ZVTEZJTExFRCkge1xuICAgICAgICAgIHZhbHVlID0gX3Byb21pc2UucmVzdWx0O1xuICAgICAgICAgIGVucXVldWVQcm9taXNlUmVhY3Rpb25Kb2IoXG4gICAgICAgICAgICBmdWxmaWxsUmVhY3Rpb25IYW5kbGVyLFxuICAgICAgICAgICAgcmVzdWx0Q2FwYWJpbGl0eSxcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChfcHJvbWlzZS5zdGF0ZSA9PT0gUFJPTUlTRV9SRUpFQ1RFRCkge1xuICAgICAgICAgIHZhbHVlID0gX3Byb21pc2UucmVzdWx0O1xuICAgICAgICAgIGVucXVldWVQcm9taXNlUmVhY3Rpb25Kb2IoXG4gICAgICAgICAgICByZWplY3RSZWFjdGlvbkhhbmRsZXIsXG4gICAgICAgICAgICByZXN1bHRDYXBhYmlsaXR5LFxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3VuZXhwZWN0ZWQgUHJvbWlzZSBzdGF0ZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gVGhpcyBoZWxwcyB0aGUgb3B0aW1pemVyIGJ5IGVuc3VyaW5nIHRoYXQgbWV0aG9kcyB3aGljaCB0YWtlXG4gICAgLy8gY2FwYWJpbGl0aWVzIGFyZW4ndCBwb2x5bW9ycGhpYy5cbiAgICBQUk9NSVNFX0ZBS0VfQ0FQQUJJTElUWSA9IG5ldyBQcm9taXNlQ2FwYWJpbGl0eShQcm9taXNlKTtcbiAgICBQcm9taXNlJHByb3RvdHlwZSR0aGVuID0gUHJvbWlzZSRwcm90b3R5cGUudGhlbjtcblxuICAgIHJldHVybiBQcm9taXNlO1xuICB9KCkpO1xuXG4gIC8vIENocm9tZSdzIG5hdGl2ZSBQcm9taXNlIGhhcyBleHRyYSBtZXRob2RzIHRoYXQgaXQgc2hvdWxkbid0IGhhdmUuIExldCdzIHJlbW92ZSB0aGVtLlxuICBpZiAoZ2xvYmFscy5Qcm9taXNlKSB7XG4gICAgZGVsZXRlIGdsb2JhbHMuUHJvbWlzZS5hY2NlcHQ7XG4gICAgZGVsZXRlIGdsb2JhbHMuUHJvbWlzZS5kZWZlcjtcbiAgICBkZWxldGUgZ2xvYmFscy5Qcm9taXNlLnByb3RvdHlwZS5jaGFpbjtcbiAgfVxuXG4gIGlmICh0eXBlb2YgUHJvbWlzZVNoaW0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBleHBvcnQgdGhlIFByb21pc2UgY29uc3RydWN0b3IuXG4gICAgZGVmaW5lUHJvcGVydGllcyhnbG9iYWxzLCB7IFByb21pc2U6IFByb21pc2VTaGltIH0pO1xuICAgIC8vIEluIENocm9tZSAzMyAoYW5kIHRoZXJlYWJvdXRzKSBQcm9taXNlIGlzIGRlZmluZWQsIGJ1dCB0aGVcbiAgICAvLyBpbXBsZW1lbnRhdGlvbiBpcyBidWdneSBpbiBhIG51bWJlciBvZiB3YXlzLiAgTGV0J3MgY2hlY2sgc3ViY2xhc3NpbmdcbiAgICAvLyBzdXBwb3J0IHRvIHNlZSBpZiB3ZSBoYXZlIGEgYnVnZ3kgaW1wbGVtZW50YXRpb24uXG4gICAgdmFyIHByb21pc2VTdXBwb3J0c1N1YmNsYXNzaW5nID0gc3VwcG9ydHNTdWJjbGFzc2luZyhnbG9iYWxzLlByb21pc2UsIGZ1bmN0aW9uIChTKSB7XG4gICAgICByZXR1cm4gUy5yZXNvbHZlKDQyKS50aGVuKGZ1bmN0aW9uICgpIHt9KSBpbnN0YW5jZW9mIFM7XG4gICAgfSk7XG4gICAgdmFyIHByb21pc2VJZ25vcmVzTm9uRnVuY3Rpb25UaGVuQ2FsbGJhY2tzID0gIXRocm93c0Vycm9yKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBnbG9iYWxzLlByb21pc2UucmVqZWN0KDQyKS50aGVuKG51bGwsIDUpLnRoZW4obnVsbCwgbm9vcCk7XG4gICAgfSk7XG4gICAgdmFyIHByb21pc2VSZXF1aXJlc09iamVjdENvbnRleHQgPSB0aHJvd3NFcnJvcihmdW5jdGlvbiAoKSB7IHJldHVybiBnbG9iYWxzLlByb21pc2UuY2FsbCgzLCBub29wKTsgfSk7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlKCkgd2FzIGVycmF0YSdlZCBsYXRlIGluIHRoZSBFUzYgcHJvY2Vzcy5cbiAgICAvLyBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTExNzA3NDJcbiAgICAvLyAgICAgIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTYxXG4gICAgLy8gSXQgc2VydmVzIGFzIGEgcHJveHkgZm9yIGEgbnVtYmVyIG9mIG90aGVyIGJ1Z3MgaW4gZWFybHkgUHJvbWlzZVxuICAgIC8vIGltcGxlbWVudGF0aW9ucy5cbiAgICB2YXIgcHJvbWlzZVJlc29sdmVCcm9rZW4gPSAoZnVuY3Rpb24gKFByb21pc2UpIHtcbiAgICAgIHZhciBwID0gUHJvbWlzZS5yZXNvbHZlKDUpO1xuICAgICAgcC5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgdmFyIHAyID0gUHJvbWlzZS5yZXNvbHZlKHApO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcDIudGhlbihudWxsLCBub29wKS50aGVuKG51bGwsIG5vb3ApOyAvLyBhdm9pZCBcInVuY2F1Z2h0IHJlamVjdGlvblwiIHdhcm5pbmdzIGluIGNvbnNvbGVcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7IC8vIHY4IG5hdGl2ZSBQcm9taXNlcyBicmVhayBoZXJlIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01NzUzMTRcbiAgICAgIH1cbiAgICAgIHJldHVybiBwID09PSBwMjsgLy8gVGhpcyAqc2hvdWxkKiBiZSBmYWxzZSFcbiAgICB9KGdsb2JhbHMuUHJvbWlzZSkpO1xuXG4gICAgLy8gQ2hyb21lIDQ2IChwcm9iYWJseSBvbGRlciB0b28pIGRvZXMgbm90IHJldHJpZXZlIGEgdGhlbmFibGUncyAudGhlbiBzeW5jaHJvbm91c2x5XG4gICAgdmFyIGdldHNUaGVuU3luY2hyb25vdXNseSA9IHN1cHBvcnRzRGVzY3JpcHRvcnMgJiYgKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ2V0dGVyLXJldHVyblxuICAgICAgdmFyIHRoZW5hYmxlID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAndGhlbicsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IGNvdW50ICs9IDE7IH0gfSk7XG4gICAgICBQcm9taXNlLnJlc29sdmUodGhlbmFibGUpO1xuICAgICAgcmV0dXJuIGNvdW50ID09PSAxO1xuICAgIH0oKSk7XG5cbiAgICB2YXIgQmFkUmVzb2x2ZXJQcm9taXNlID0gZnVuY3Rpb24gQmFkUmVzb2x2ZXJQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgICB2YXIgcCA9IG5ldyBQcm9taXNlKGV4ZWN1dG9yKTtcbiAgICAgIGV4ZWN1dG9yKDMsIGZ1bmN0aW9uICgpIHt9KTtcbiAgICAgIHRoaXMudGhlbiA9IHAudGhlbjtcbiAgICAgIHRoaXMuY29uc3RydWN0b3IgPSBCYWRSZXNvbHZlclByb21pc2U7XG4gICAgfTtcbiAgICBCYWRSZXNvbHZlclByb21pc2UucHJvdG90eXBlID0gUHJvbWlzZS5wcm90b3R5cGU7XG4gICAgQmFkUmVzb2x2ZXJQcm9taXNlLmFsbCA9IFByb21pc2UuYWxsO1xuICAgIC8vIENocm9tZSBDYW5hcnkgNDkgKHByb2JhYmx5IG9sZGVyIHRvbykgaGFzIHNvbWUgaW1wbGVtZW50YXRpb24gYnVnc1xuICAgIHZhciBoYXNCYWRSZXNvbHZlclByb21pc2UgPSB2YWx1ZU9yRmFsc2VJZlRocm93cyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gISFCYWRSZXNvbHZlclByb21pc2UuYWxsKFsxLCAyXSk7XG4gICAgfSk7XG5cbiAgICBpZiAoIXByb21pc2VTdXBwb3J0c1N1YmNsYXNzaW5nIHx8ICFwcm9taXNlSWdub3Jlc05vbkZ1bmN0aW9uVGhlbkNhbGxiYWNrcyB8fFxuICAgICAgICAhcHJvbWlzZVJlcXVpcmVzT2JqZWN0Q29udGV4dCB8fCBwcm9taXNlUmVzb2x2ZUJyb2tlbiB8fFxuICAgICAgICAhZ2V0c1RoZW5TeW5jaHJvbm91c2x5IHx8IGhhc0JhZFJlc29sdmVyUHJvbWlzZSkge1xuICAgICAgLyogZ2xvYmFscyBQcm9taXNlOiB0cnVlICovXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiwgbm8tZ2xvYmFsLWFzc2lnbiAqL1xuICAgICAgUHJvbWlzZSA9IFByb21pc2VTaGltO1xuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby11bmRlZiwgbm8tZ2xvYmFsLWFzc2lnbiAqL1xuICAgICAgLyogZ2xvYmFscyBQcm9taXNlOiBmYWxzZSAqL1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoZ2xvYmFscywgJ1Byb21pc2UnLCBQcm9taXNlU2hpbSk7XG4gICAgfVxuICAgIGlmIChQcm9taXNlLmFsbC5sZW5ndGggIT09IDEpIHtcbiAgICAgIHZhciBvcmlnQWxsID0gUHJvbWlzZS5hbGw7XG4gICAgICBvdmVycmlkZU5hdGl2ZShQcm9taXNlLCAnYWxsJywgZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgICAgIHJldHVybiBFUy5DYWxsKG9yaWdBbGwsIHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKFByb21pc2UucmFjZS5sZW5ndGggIT09IDEpIHtcbiAgICAgIHZhciBvcmlnUmFjZSA9IFByb21pc2UucmFjZTtcbiAgICAgIG92ZXJyaWRlTmF0aXZlKFByb21pc2UsICdyYWNlJywgZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgICAgICByZXR1cm4gRVMuQ2FsbChvcmlnUmFjZSwgdGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoUHJvbWlzZS5yZXNvbHZlLmxlbmd0aCAhPT0gMSkge1xuICAgICAgdmFyIG9yaWdSZXNvbHZlID0gUHJvbWlzZS5yZXNvbHZlO1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoUHJvbWlzZSwgJ3Jlc29sdmUnLCBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICAgICAgcmV0dXJuIEVTLkNhbGwob3JpZ1Jlc29sdmUsIHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKFByb21pc2UucmVqZWN0Lmxlbmd0aCAhPT0gMSkge1xuICAgICAgdmFyIG9yaWdSZWplY3QgPSBQcm9taXNlLnJlamVjdDtcbiAgICAgIG92ZXJyaWRlTmF0aXZlKFByb21pc2UsICdyZWplY3QnLCBmdW5jdGlvbiByZWplY3Qocikge1xuICAgICAgICByZXR1cm4gRVMuQ2FsbChvcmlnUmVqZWN0LCB0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGVuc3VyZUVudW1lcmFibGUoUHJvbWlzZSwgJ2FsbCcpO1xuICAgIGVuc3VyZUVudW1lcmFibGUoUHJvbWlzZSwgJ3JhY2UnKTtcbiAgICBlbnN1cmVFbnVtZXJhYmxlKFByb21pc2UsICdyZXNvbHZlJyk7XG4gICAgZW5zdXJlRW51bWVyYWJsZShQcm9taXNlLCAncmVqZWN0Jyk7XG4gICAgYWRkRGVmYXVsdFNwZWNpZXMoUHJvbWlzZSk7XG4gIH1cblxuICAvLyBNYXAgYW5kIFNldCByZXF1aXJlIGEgdHJ1ZSBFUzUgZW52aXJvbm1lbnRcbiAgLy8gVGhlaXIgZmFzdCBwYXRoIGFsc28gcmVxdWlyZXMgdGhhdCB0aGUgZW52aXJvbm1lbnQgcHJlc2VydmVcbiAgLy8gcHJvcGVydHkgaW5zZXJ0aW9uIG9yZGVyLCB3aGljaCBpcyBub3QgZ3VhcmFudGVlZCBieSB0aGUgc3BlYy5cbiAgdmFyIHRlc3RPcmRlciA9IGZ1bmN0aW9uIChhKSB7XG4gICAgdmFyIGIgPSBrZXlzKF9yZWR1Y2UoYSwgZnVuY3Rpb24gKG8sIGspIHtcbiAgICAgIG9ba10gPSB0cnVlO1xuICAgICAgcmV0dXJuIG87XG4gICAgfSwge30pKTtcbiAgICByZXR1cm4gYS5qb2luKCc6JykgPT09IGIuam9pbignOicpO1xuICB9O1xuICB2YXIgcHJlc2VydmVzSW5zZXJ0aW9uT3JkZXIgPSB0ZXN0T3JkZXIoWyd6JywgJ2EnLCAnYmInXSk7XG4gIC8vIHNvbWUgZW5naW5lcyAoZWcsIENocm9tZSkgb25seSBwcmVzZXJ2ZSBpbnNlcnRpb24gb3JkZXIgZm9yIHN0cmluZyBrZXlzXG4gIHZhciBwcmVzZXJ2ZXNOdW1lcmljSW5zZXJ0aW9uT3JkZXIgPSB0ZXN0T3JkZXIoWyd6JywgMSwgJ2EnLCAnMycsIDJdKTtcblxuICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuXG4gICAgdmFyIGZhc3RrZXkgPSBmdW5jdGlvbiBmYXN0a2V5KGtleSwgc2tpcEluc2VydGlvbk9yZGVyQ2hlY2spIHtcbiAgICAgIGlmICghc2tpcEluc2VydGlvbk9yZGVyQ2hlY2sgJiYgIXByZXNlcnZlc0luc2VydGlvbk9yZGVyKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKGlzTnVsbE9yVW5kZWZpbmVkKGtleSkpIHtcbiAgICAgICAgcmV0dXJuICdeJyArIEVTLlRvU3RyaW5nKGtleSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiAnJCcgKyBrZXk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBrZXkgPT09ICdudW1iZXInKSB7XG4gICAgICAgIC8vIG5vdGUgdGhhdCAtMCB3aWxsIGdldCBjb2VyY2VkIHRvIFwiMFwiIHdoZW4gdXNlZCBhcyBhIHByb3BlcnR5IGtleVxuICAgICAgICBpZiAoIXByZXNlcnZlc051bWVyaWNJbnNlcnRpb25PcmRlcikge1xuICAgICAgICAgIHJldHVybiAnbicgKyBrZXk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGtleSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiAnYicgKyBrZXk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgdmFyIGVtcHR5T2JqZWN0ID0gZnVuY3Rpb24gZW1wdHlPYmplY3QoKSB7XG4gICAgICAvLyBhY2NvbW9kYXRlIHNvbWUgb2xkZXIgbm90LXF1aXRlLUVTNSBicm93c2Vyc1xuICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge307XG4gICAgfTtcblxuICAgIHZhciBhZGRJdGVyYWJsZVRvTWFwID0gZnVuY3Rpb24gYWRkSXRlcmFibGVUb01hcChNYXBDb25zdHJ1Y3RvciwgbWFwLCBpdGVyYWJsZSkge1xuICAgICAgaWYgKGlzQXJyYXkoaXRlcmFibGUpIHx8IFR5cGUuc3RyaW5nKGl0ZXJhYmxlKSkge1xuICAgICAgICBfZm9yRWFjaChpdGVyYWJsZSwgZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgaWYgKCFFUy5UeXBlSXNPYmplY3QoZW50cnkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJdGVyYXRvciB2YWx1ZSAnICsgZW50cnkgKyAnIGlzIG5vdCBhbiBlbnRyeSBvYmplY3QnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbWFwLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoaXRlcmFibGUgaW5zdGFuY2VvZiBNYXBDb25zdHJ1Y3Rvcikge1xuICAgICAgICBfY2FsbChNYXBDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZm9yRWFjaCwgaXRlcmFibGUsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgbWFwLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaXRlciwgYWRkZXI7XG4gICAgICAgIGlmICghaXNOdWxsT3JVbmRlZmluZWQoaXRlcmFibGUpKSB7XG4gICAgICAgICAgYWRkZXIgPSBtYXAuc2V0O1xuICAgICAgICAgIGlmICghRVMuSXNDYWxsYWJsZShhZGRlcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignYmFkIG1hcCcpOyB9XG4gICAgICAgICAgaXRlciA9IEVTLkdldEl0ZXJhdG9yKGl0ZXJhYmxlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGl0ZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIHZhciBuZXh0ID0gRVMuSXRlcmF0b3JTdGVwKGl0ZXIpO1xuICAgICAgICAgICAgaWYgKG5leHQgPT09IGZhbHNlKSB7IGJyZWFrOyB9XG4gICAgICAgICAgICB2YXIgbmV4dEl0ZW0gPSBuZXh0LnZhbHVlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgaWYgKCFFUy5UeXBlSXNPYmplY3QobmV4dEl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSXRlcmF0b3IgdmFsdWUgJyArIG5leHRJdGVtICsgJyBpcyBub3QgYW4gZW50cnkgb2JqZWN0Jyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgX2NhbGwoYWRkZXIsIG1hcCwgbmV4dEl0ZW1bMF0sIG5leHRJdGVtWzFdKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgRVMuSXRlcmF0b3JDbG9zZShpdGVyLCB0cnVlKTtcbiAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBhZGRJdGVyYWJsZVRvU2V0ID0gZnVuY3Rpb24gYWRkSXRlcmFibGVUb1NldChTZXRDb25zdHJ1Y3Rvciwgc2V0LCBpdGVyYWJsZSkge1xuICAgICAgaWYgKGlzQXJyYXkoaXRlcmFibGUpIHx8IFR5cGUuc3RyaW5nKGl0ZXJhYmxlKSkge1xuICAgICAgICBfZm9yRWFjaChpdGVyYWJsZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgc2V0LmFkZCh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChpdGVyYWJsZSBpbnN0YW5jZW9mIFNldENvbnN0cnVjdG9yKSB7XG4gICAgICAgIF9jYWxsKFNldENvbnN0cnVjdG9yLnByb3RvdHlwZS5mb3JFYWNoLCBpdGVyYWJsZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgc2V0LmFkZCh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGl0ZXIsIGFkZGVyO1xuICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKGl0ZXJhYmxlKSkge1xuICAgICAgICAgIGFkZGVyID0gc2V0LmFkZDtcbiAgICAgICAgICBpZiAoIUVTLklzQ2FsbGFibGUoYWRkZXIpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ2JhZCBzZXQnKTsgfVxuICAgICAgICAgIGl0ZXIgPSBFUy5HZXRJdGVyYXRvcihpdGVyYWJsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBpdGVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICB2YXIgbmV4dCA9IEVTLkl0ZXJhdG9yU3RlcChpdGVyKTtcbiAgICAgICAgICAgIGlmIChuZXh0ID09PSBmYWxzZSkgeyBicmVhazsgfVxuICAgICAgICAgICAgdmFyIG5leHRWYWx1ZSA9IG5leHQudmFsdWU7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBfY2FsbChhZGRlciwgc2V0LCBuZXh0VmFsdWUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBFUy5JdGVyYXRvckNsb3NlKGl0ZXIsIHRydWUpO1xuICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgY29sbGVjdGlvblNoaW1zID0ge1xuICAgICAgTWFwOiAoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBlbXB0eSA9IHt9O1xuXG4gICAgICAgIHZhciBNYXBFbnRyeSA9IGZ1bmN0aW9uIE1hcEVudHJ5KGtleSwgdmFsdWUpIHtcbiAgICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgICAgICAgICB0aGlzLnByZXYgPSBudWxsO1xuICAgICAgICB9O1xuXG4gICAgICAgIE1hcEVudHJ5LnByb3RvdHlwZS5pc1JlbW92ZWQgPSBmdW5jdGlvbiBpc1JlbW92ZWQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMua2V5ID09PSBlbXB0eTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgaXNNYXAgPSBmdW5jdGlvbiBpc01hcChtYXApIHtcbiAgICAgICAgICByZXR1cm4gISFtYXAuX2VzNm1hcDtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcmVxdWlyZU1hcFNsb3QgPSBmdW5jdGlvbiByZXF1aXJlTWFwU2xvdChtYXAsIG1ldGhvZCkge1xuICAgICAgICAgIGlmICghRVMuVHlwZUlzT2JqZWN0KG1hcCkgfHwgIWlzTWFwKG1hcCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ01ldGhvZCBNYXAucHJvdG90eXBlLicgKyBtZXRob2QgKyAnIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXIgJyArIEVTLlRvU3RyaW5nKG1hcCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgTWFwSXRlcmF0b3IgPSBmdW5jdGlvbiBNYXBJdGVyYXRvcihtYXAsIGtpbmQpIHtcbiAgICAgICAgICByZXF1aXJlTWFwU2xvdChtYXAsICdbW01hcEl0ZXJhdG9yXV0nKTtcbiAgICAgICAgICB0aGlzLmhlYWQgPSBtYXAuX2hlYWQ7XG4gICAgICAgICAgdGhpcy5pID0gdGhpcy5oZWFkO1xuICAgICAgICAgIHRoaXMua2luZCA9IGtpbmQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgTWFwSXRlcmF0b3IucHJvdG90eXBlID0ge1xuICAgICAgICAgIGlzTWFwSXRlcmF0b3I6IHRydWUsXG4gICAgICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc01hcEl0ZXJhdG9yKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05vdCBhIE1hcEl0ZXJhdG9yJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaSA9IHRoaXMuaTtcbiAgICAgICAgICAgIHZhciBraW5kID0gdGhpcy5raW5kO1xuICAgICAgICAgICAgdmFyIGhlYWQgPSB0aGlzLmhlYWQ7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuaSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yUmVzdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoaS5pc1JlbW92ZWQoKSAmJiBpICE9PSBoZWFkKSB7XG4gICAgICAgICAgICAgIC8vIGJhY2sgdXAgb2ZmIG9mIHJlbW92ZWQgZW50cmllc1xuICAgICAgICAgICAgICBpID0gaS5wcmV2O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYWR2YW5jZSB0byBuZXh0IHVucmV0dXJuZWQgZWxlbWVudC5cbiAgICAgICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgICAgICB3aGlsZSAoaS5uZXh0ICE9PSBoZWFkKSB7XG4gICAgICAgICAgICAgIGkgPSBpLm5leHQ7XG4gICAgICAgICAgICAgIGlmICghaS5pc1JlbW92ZWQoKSkge1xuICAgICAgICAgICAgICAgIGlmIChraW5kID09PSAna2V5Jykge1xuICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gaS5rZXk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChraW5kID09PSAndmFsdWUnKSB7XG4gICAgICAgICAgICAgICAgICByZXN1bHQgPSBpLnZhbHVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXN1bHQgPSBbaS5rZXksIGkudmFsdWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmkgPSBpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVyYXRvclJlc3VsdChyZXN1bHQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBvbmNlIHRoZSBpdGVyYXRvciBpcyBkb25lLCBpdCBpcyBkb25lIGZvcmV2ZXIuXG4gICAgICAgICAgICB0aGlzLmkgPSB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4gaXRlcmF0b3JSZXN1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGFkZEl0ZXJhdG9yKE1hcEl0ZXJhdG9yLnByb3RvdHlwZSk7XG5cbiAgICAgICAgdmFyIE1hcCRwcm90b3R5cGU7XG4gICAgICAgIHZhciBNYXBTaGltID0gZnVuY3Rpb24gTWFwKCkge1xuICAgICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBNYXApKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDb25zdHJ1Y3RvciBNYXAgcmVxdWlyZXMgXCJuZXdcIicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpcyAmJiB0aGlzLl9lczZtYXApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBjb25zdHJ1Y3Rpb24nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG1hcCA9IGVtdWxhdGVFUzZjb25zdHJ1Y3QodGhpcywgTWFwLCBNYXAkcHJvdG90eXBlLCB7XG4gICAgICAgICAgICBfZXM2bWFwOiB0cnVlLFxuICAgICAgICAgICAgX2hlYWQ6IG51bGwsXG4gICAgICAgICAgICBfbWFwOiBPcmlnTWFwID8gbmV3IE9yaWdNYXAoKSA6IG51bGwsXG4gICAgICAgICAgICBfc2l6ZTogMCxcbiAgICAgICAgICAgIF9zdG9yYWdlOiBlbXB0eU9iamVjdCgpXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB2YXIgaGVhZCA9IG5ldyBNYXBFbnRyeShudWxsLCBudWxsKTtcbiAgICAgICAgICAvLyBjaXJjdWxhciBkb3VibHktbGlua2VkIGxpc3QuXG4gICAgICAgICAgLyogZXNsaW50IG5vLW11bHRpLWFzc2lnbjogMSAqL1xuICAgICAgICAgIGhlYWQubmV4dCA9IGhlYWQucHJldiA9IGhlYWQ7XG4gICAgICAgICAgbWFwLl9oZWFkID0gaGVhZDtcblxuICAgICAgICAgIC8vIE9wdGlvbmFsbHkgaW5pdGlhbGl6ZSBtYXAgZnJvbSBpdGVyYWJsZVxuICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgYWRkSXRlcmFibGVUb01hcChNYXAsIG1hcCwgYXJndW1lbnRzWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG1hcDtcbiAgICAgICAgfTtcbiAgICAgICAgTWFwJHByb3RvdHlwZSA9IE1hcFNoaW0ucHJvdG90eXBlO1xuXG4gICAgICAgIFZhbHVlLmdldHRlcihNYXAkcHJvdG90eXBlLCAnc2l6ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuX3NpemUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzaXplIG1ldGhvZCBjYWxsZWQgb24gaW5jb21wYXRpYmxlIE1hcCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyhNYXAkcHJvdG90eXBlLCB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICAgICAgICByZXF1aXJlTWFwU2xvdCh0aGlzLCAnZ2V0Jyk7XG4gICAgICAgICAgICB2YXIgZW50cnk7XG4gICAgICAgICAgICB2YXIgZmtleSA9IGZhc3RrZXkoa2V5LCB0cnVlKTtcbiAgICAgICAgICAgIGlmIChma2V5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIC8vIGZhc3QgTygxKSBwYXRoXG4gICAgICAgICAgICAgIGVudHJ5ID0gdGhpcy5fc3RvcmFnZVtma2V5XTtcbiAgICAgICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVudHJ5LnZhbHVlO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX21hcCkge1xuICAgICAgICAgICAgICAvLyBmYXN0IG9iamVjdCBrZXkgcGF0aFxuICAgICAgICAgICAgICBlbnRyeSA9IG9yaWdNYXBHZXQuY2FsbCh0aGlzLl9tYXAsIGtleSk7XG4gICAgICAgICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbnRyeS52YWx1ZTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBoZWFkID0gdGhpcy5faGVhZDtcbiAgICAgICAgICAgIHZhciBpID0gaGVhZDtcbiAgICAgICAgICAgIHdoaWxlICgoaSA9IGkubmV4dCkgIT09IGhlYWQpIHtcbiAgICAgICAgICAgICAgaWYgKEVTLlNhbWVWYWx1ZVplcm8oaS5rZXksIGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaS52YWx1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgICAgIHJlcXVpcmVNYXBTbG90KHRoaXMsICdoYXMnKTtcbiAgICAgICAgICAgIHZhciBma2V5ID0gZmFzdGtleShrZXksIHRydWUpO1xuICAgICAgICAgICAgaWYgKGZrZXkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgLy8gZmFzdCBPKDEpIHBhdGhcbiAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLl9zdG9yYWdlW2ZrZXldICE9PSAndW5kZWZpbmVkJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9tYXApIHtcbiAgICAgICAgICAgICAgLy8gZmFzdCBvYmplY3Qga2V5IHBhdGhcbiAgICAgICAgICAgICAgcmV0dXJuIG9yaWdNYXBIYXMuY2FsbCh0aGlzLl9tYXAsIGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaGVhZCA9IHRoaXMuX2hlYWQ7XG4gICAgICAgICAgICB2YXIgaSA9IGhlYWQ7XG4gICAgICAgICAgICB3aGlsZSAoKGkgPSBpLm5leHQpICE9PSBoZWFkKSB7XG4gICAgICAgICAgICAgIGlmIChFUy5TYW1lVmFsdWVaZXJvKGkua2V5LCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgcmVxdWlyZU1hcFNsb3QodGhpcywgJ3NldCcpO1xuICAgICAgICAgICAgdmFyIGhlYWQgPSB0aGlzLl9oZWFkO1xuICAgICAgICAgICAgdmFyIGkgPSBoZWFkO1xuICAgICAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICAgICAgdmFyIGZrZXkgPSBmYXN0a2V5KGtleSwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAoZmtleSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAvLyBmYXN0IE8oMSkgcGF0aFxuICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuX3N0b3JhZ2VbZmtleV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RvcmFnZVtma2V5XS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVudHJ5ID0gdGhpcy5fc3RvcmFnZVtma2V5XSA9IG5ldyBNYXBFbnRyeShrZXksIHZhbHVlKTsgLyogZXNsaW50IG5vLW11bHRpLWFzc2lnbjogMSAqL1xuICAgICAgICAgICAgICAgIGkgPSBoZWFkLnByZXY7XG4gICAgICAgICAgICAgICAgLy8gZmFsbCB0aHJvdWdoXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fbWFwKSB7XG4gICAgICAgICAgICAgIC8vIGZhc3Qgb2JqZWN0IGtleSBwYXRoXG4gICAgICAgICAgICAgIGlmIChvcmlnTWFwSGFzLmNhbGwodGhpcy5fbWFwLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgb3JpZ01hcEdldC5jYWxsKHRoaXMuX21hcCwga2V5KS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVudHJ5ID0gbmV3IE1hcEVudHJ5KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIG9yaWdNYXBTZXQuY2FsbCh0aGlzLl9tYXAsIGtleSwgZW50cnkpO1xuICAgICAgICAgICAgICAgIGkgPSBoZWFkLnByZXY7XG4gICAgICAgICAgICAgICAgLy8gZmFsbCB0aHJvdWdoXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlICgoaSA9IGkubmV4dCkgIT09IGhlYWQpIHtcbiAgICAgICAgICAgICAgaWYgKEVTLlNhbWVWYWx1ZVplcm8oaS5rZXksIGtleSkpIHtcbiAgICAgICAgICAgICAgICBpLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVudHJ5ID0gZW50cnkgfHwgbmV3IE1hcEVudHJ5KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgaWYgKEVTLlNhbWVWYWx1ZSgtMCwga2V5KSkge1xuICAgICAgICAgICAgICBlbnRyeS5rZXkgPSArMDsgLy8gY29lcmNlIC0wIHRvICswIGluIGVudHJ5XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbnRyeS5uZXh0ID0gdGhpcy5faGVhZDtcbiAgICAgICAgICAgIGVudHJ5LnByZXYgPSB0aGlzLl9oZWFkLnByZXY7XG4gICAgICAgICAgICBlbnRyeS5wcmV2Lm5leHQgPSBlbnRyeTtcbiAgICAgICAgICAgIGVudHJ5Lm5leHQucHJldiA9IGVudHJ5O1xuICAgICAgICAgICAgdGhpcy5fc2l6ZSArPSAxO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICByZXF1aXJlTWFwU2xvdCh0aGlzLCAnZGVsZXRlJyk7XG4gICAgICAgICAgICB2YXIgaGVhZCA9IHRoaXMuX2hlYWQ7XG4gICAgICAgICAgICB2YXIgaSA9IGhlYWQ7XG4gICAgICAgICAgICB2YXIgZmtleSA9IGZhc3RrZXkoa2V5LCB0cnVlKTtcbiAgICAgICAgICAgIGlmIChma2V5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIC8vIGZhc3QgTygxKSBwYXRoXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5fc3RvcmFnZVtma2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaSA9IHRoaXMuX3N0b3JhZ2VbZmtleV0ucHJldjtcbiAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3N0b3JhZ2VbZmtleV07XG4gICAgICAgICAgICAgIC8vIGZhbGwgdGhyb3VnaFxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9tYXApIHtcbiAgICAgICAgICAgICAgLy8gZmFzdCBvYmplY3Qga2V5IHBhdGhcbiAgICAgICAgICAgICAgaWYgKCFvcmlnTWFwSGFzLmNhbGwodGhpcy5fbWFwLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGkgPSBvcmlnTWFwR2V0LmNhbGwodGhpcy5fbWFwLCBrZXkpLnByZXY7XG4gICAgICAgICAgICAgIG9yaWdNYXBEZWxldGUuY2FsbCh0aGlzLl9tYXAsIGtleSk7XG4gICAgICAgICAgICAgIC8vIGZhbGwgdGhyb3VnaFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKChpID0gaS5uZXh0KSAhPT0gaGVhZCkge1xuICAgICAgICAgICAgICBpZiAoRVMuU2FtZVZhbHVlWmVybyhpLmtleSwga2V5KSkge1xuICAgICAgICAgICAgICAgIGkua2V5ID0gZW1wdHk7XG4gICAgICAgICAgICAgICAgaS52YWx1ZSA9IGVtcHR5O1xuICAgICAgICAgICAgICAgIGkucHJldi5uZXh0ID0gaS5uZXh0O1xuICAgICAgICAgICAgICAgIGkubmV4dC5wcmV2ID0gaS5wcmV2O1xuICAgICAgICAgICAgICAgIHRoaXMuX3NpemUgLT0gMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgICAgICAvKiBlc2xpbnQgbm8tbXVsdGktYXNzaWduOiAxICovXG4gICAgICAgICAgICByZXF1aXJlTWFwU2xvdCh0aGlzLCAnY2xlYXInKTtcbiAgICAgICAgICAgIHRoaXMuX21hcCA9IE9yaWdNYXAgPyBuZXcgT3JpZ01hcCgpIDogbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX3NpemUgPSAwO1xuICAgICAgICAgICAgdGhpcy5fc3RvcmFnZSA9IGVtcHR5T2JqZWN0KCk7XG4gICAgICAgICAgICB2YXIgaGVhZCA9IHRoaXMuX2hlYWQ7XG4gICAgICAgICAgICB2YXIgaSA9IGhlYWQ7XG4gICAgICAgICAgICB2YXIgcCA9IGkubmV4dDtcbiAgICAgICAgICAgIHdoaWxlICgoaSA9IHApICE9PSBoZWFkKSB7XG4gICAgICAgICAgICAgIGkua2V5ID0gZW1wdHk7XG4gICAgICAgICAgICAgIGkudmFsdWUgPSBlbXB0eTtcbiAgICAgICAgICAgICAgcCA9IGkubmV4dDtcbiAgICAgICAgICAgICAgaS5uZXh0ID0gaS5wcmV2ID0gaGVhZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhlYWQubmV4dCA9IGhlYWQucHJldiA9IGhlYWQ7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGtleXM6IGZ1bmN0aW9uIGtleXMoKSB7XG4gICAgICAgICAgICByZXF1aXJlTWFwU2xvdCh0aGlzLCAna2V5cycpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBNYXBJdGVyYXRvcih0aGlzLCAna2V5Jyk7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgICAgICAgcmVxdWlyZU1hcFNsb3QodGhpcywgJ3ZhbHVlcycpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBNYXBJdGVyYXRvcih0aGlzLCAndmFsdWUnKTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHtcbiAgICAgICAgICAgIHJlcXVpcmVNYXBTbG90KHRoaXMsICdlbnRyaWVzJyk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE1hcEl0ZXJhdG9yKHRoaXMsICdrZXkrdmFsdWUnKTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFjaykge1xuICAgICAgICAgICAgcmVxdWlyZU1hcFNsb3QodGhpcywgJ2ZvckVhY2gnKTtcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuICAgICAgICAgICAgdmFyIGl0ID0gdGhpcy5lbnRyaWVzKCk7XG4gICAgICAgICAgICBmb3IgKHZhciBlbnRyeSA9IGl0Lm5leHQoKTsgIWVudHJ5LmRvbmU7IGVudHJ5ID0gaXQubmV4dCgpKSB7XG4gICAgICAgICAgICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgX2NhbGwoY2FsbGJhY2ssIGNvbnRleHQsIGVudHJ5LnZhbHVlWzFdLCBlbnRyeS52YWx1ZVswXSwgdGhpcyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZW50cnkudmFsdWVbMV0sIGVudHJ5LnZhbHVlWzBdLCB0aGlzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGFkZEl0ZXJhdG9yKE1hcCRwcm90b3R5cGUsIE1hcCRwcm90b3R5cGUuZW50cmllcyk7XG5cbiAgICAgICAgcmV0dXJuIE1hcFNoaW07XG4gICAgICB9KCkpLFxuXG4gICAgICBTZXQ6IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpc1NldCA9IGZ1bmN0aW9uIGlzU2V0KHNldCkge1xuICAgICAgICAgIHJldHVybiBzZXQuX2VzNnNldCAmJiB0eXBlb2Ygc2V0Ll9zdG9yYWdlICE9PSAndW5kZWZpbmVkJztcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlcXVpcmVTZXRTbG90ID0gZnVuY3Rpb24gcmVxdWlyZVNldFNsb3Qoc2V0LCBtZXRob2QpIHtcbiAgICAgICAgICBpZiAoIUVTLlR5cGVJc09iamVjdChzZXQpIHx8ICFpc1NldChzZXQpKSB7XG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcGF1bG1pbGxyL2VzNi1zaGltL2lzc3Vlcy8xNzZcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1NldC5wcm90b3R5cGUuJyArIG1ldGhvZCArICcgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlciAnICsgRVMuVG9TdHJpbmcoc2V0KSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIENyZWF0aW5nIGEgTWFwIGlzIGV4cGVuc2l2ZS4gIFRvIHNwZWVkIHVwIHRoZSBjb21tb24gY2FzZSBvZlxuICAgICAgICAvLyBTZXRzIGNvbnRhaW5pbmcgb25seSBzdHJpbmcgb3IgbnVtZXJpYyBrZXlzLCB3ZSB1c2UgYW4gb2JqZWN0XG4gICAgICAgIC8vIGFzIGJhY2tpbmcgc3RvcmFnZSBhbmQgbGF6aWx5IGNyZWF0ZSBhIGZ1bGwgTWFwIG9ubHkgd2hlblxuICAgICAgICAvLyByZXF1aXJlZC5cbiAgICAgICAgdmFyIFNldCRwcm90b3R5cGU7XG4gICAgICAgIHZhciBTZXRTaGltID0gZnVuY3Rpb24gU2V0KCkge1xuICAgICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTZXQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDb25zdHJ1Y3RvciBTZXQgcmVxdWlyZXMgXCJuZXdcIicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpcyAmJiB0aGlzLl9lczZzZXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBjb25zdHJ1Y3Rpb24nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHNldCA9IGVtdWxhdGVFUzZjb25zdHJ1Y3QodGhpcywgU2V0LCBTZXQkcHJvdG90eXBlLCB7XG4gICAgICAgICAgICBfZXM2c2V0OiB0cnVlLFxuICAgICAgICAgICAgJ1tbU2V0RGF0YV1dJzogbnVsbCxcbiAgICAgICAgICAgIF9zdG9yYWdlOiBlbXB0eU9iamVjdCgpXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKCFzZXQuX2VzNnNldCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYmFkIHNldCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIE9wdGlvbmFsbHkgaW5pdGlhbGl6ZSBTZXQgZnJvbSBpdGVyYWJsZVxuICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgYWRkSXRlcmFibGVUb1NldChTZXQsIHNldCwgYXJndW1lbnRzWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHNldDtcbiAgICAgICAgfTtcbiAgICAgICAgU2V0JHByb3RvdHlwZSA9IFNldFNoaW0ucHJvdG90eXBlO1xuXG4gICAgICAgIHZhciBkZWNvZGVLZXkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgdmFyIGsgPSBrZXk7XG4gICAgICAgICAgaWYgKGsgPT09ICdebnVsbCcpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH0gZWxzZSBpZiAoayA9PT0gJ151bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgZmlyc3QgPSBrLmNoYXJBdCgwKTtcbiAgICAgICAgICAgIGlmIChmaXJzdCA9PT0gJyQnKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfc3RyU2xpY2UoaywgMSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSAnbicpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICtfc3RyU2xpY2UoaywgMSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSAnYicpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGsgPT09ICdidHJ1ZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAraztcbiAgICAgICAgfTtcbiAgICAgICAgLy8gU3dpdGNoIGZyb20gdGhlIG9iamVjdCBiYWNraW5nIHN0b3JhZ2UgdG8gYSBmdWxsIE1hcC5cbiAgICAgICAgdmFyIGVuc3VyZU1hcCA9IGZ1bmN0aW9uIGVuc3VyZU1hcChzZXQpIHtcbiAgICAgICAgICBpZiAoIXNldFsnW1tTZXREYXRhXV0nXSkge1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgY29sbGVjdGlvblNoaW1zLk1hcCgpO1xuICAgICAgICAgICAgc2V0WydbW1NldERhdGFdXSddID0gbTtcbiAgICAgICAgICAgIF9mb3JFYWNoKGtleXMoc2V0Ll9zdG9yYWdlKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICB2YXIgayA9IGRlY29kZUtleShrZXkpO1xuICAgICAgICAgICAgICBtLnNldChrLCBrKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2V0WydbW1NldERhdGFdXSddID0gbTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2V0Ll9zdG9yYWdlID0gbnVsbDsgLy8gZnJlZSBvbGQgYmFja2luZyBzdG9yYWdlXG4gICAgICAgIH07XG5cbiAgICAgICAgVmFsdWUuZ2V0dGVyKFNldFNoaW0ucHJvdG90eXBlLCAnc2l6ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXF1aXJlU2V0U2xvdCh0aGlzLCAnc2l6ZScpO1xuICAgICAgICAgIGlmICh0aGlzLl9zdG9yYWdlKSB7XG4gICAgICAgICAgICByZXR1cm4ga2V5cyh0aGlzLl9zdG9yYWdlKS5sZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVuc3VyZU1hcCh0aGlzKTtcbiAgICAgICAgICByZXR1cm4gdGhpc1snW1tTZXREYXRhXV0nXS5zaXplO1xuICAgICAgICB9KTtcblxuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKFNldFNoaW0ucHJvdG90eXBlLCB7XG4gICAgICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgICAgICByZXF1aXJlU2V0U2xvdCh0aGlzLCAnaGFzJyk7XG4gICAgICAgICAgICB2YXIgZmtleTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zdG9yYWdlICYmIChma2V5ID0gZmFzdGtleShrZXkpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICByZXR1cm4gISF0aGlzLl9zdG9yYWdlW2ZrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW5zdXJlTWFwKHRoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbJ1tbU2V0RGF0YV1dJ10uaGFzKGtleSk7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGFkZDogZnVuY3Rpb24gYWRkKGtleSkge1xuICAgICAgICAgICAgcmVxdWlyZVNldFNsb3QodGhpcywgJ2FkZCcpO1xuICAgICAgICAgICAgdmFyIGZrZXk7XG4gICAgICAgICAgICBpZiAodGhpcy5fc3RvcmFnZSAmJiAoZmtleSA9IGZhc3RrZXkoa2V5KSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgdGhpcy5fc3RvcmFnZVtma2V5XSA9IHRydWU7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW5zdXJlTWFwKHRoaXMpO1xuICAgICAgICAgICAgdGhpc1snW1tTZXREYXRhXV0nXS5zZXQoa2V5LCBrZXkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICByZXF1aXJlU2V0U2xvdCh0aGlzLCAnZGVsZXRlJyk7XG4gICAgICAgICAgICB2YXIgZmtleTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zdG9yYWdlICYmIChma2V5ID0gZmFzdGtleShrZXkpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICB2YXIgaGFzRktleSA9IF9oYXNPd25Qcm9wZXJ0eSh0aGlzLl9zdG9yYWdlLCBma2V5KTtcbiAgICAgICAgICAgICAgcmV0dXJuIChkZWxldGUgdGhpcy5fc3RvcmFnZVtma2V5XSkgJiYgaGFzRktleTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVuc3VyZU1hcCh0aGlzKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzWydbW1NldERhdGFdXSddWydkZWxldGUnXShrZXkpO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgICAgICByZXF1aXJlU2V0U2xvdCh0aGlzLCAnY2xlYXInKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zdG9yYWdlKSB7XG4gICAgICAgICAgICAgIHRoaXMuX3N0b3JhZ2UgPSBlbXB0eU9iamVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXNbJ1tbU2V0RGF0YV1dJ10pIHtcbiAgICAgICAgICAgICAgdGhpc1snW1tTZXREYXRhXV0nXS5jbGVhcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG5cbiAgICAgICAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgICAgICAgIHJlcXVpcmVTZXRTbG90KHRoaXMsICd2YWx1ZXMnKTtcbiAgICAgICAgICAgIGVuc3VyZU1hcCh0aGlzKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU2V0SXRlcmF0b3IodGhpc1snW1tTZXREYXRhXV0nXS52YWx1ZXMoKSk7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICAgICAgICByZXF1aXJlU2V0U2xvdCh0aGlzLCAnZW50cmllcycpO1xuICAgICAgICAgICAgZW5zdXJlTWFwKHRoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTZXRJdGVyYXRvcih0aGlzWydbW1NldERhdGFdXSddLmVudHJpZXMoKSk7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJlcXVpcmVTZXRTbG90KHRoaXMsICdmb3JFYWNoJyk7XG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogbnVsbDtcbiAgICAgICAgICAgIHZhciBlbnRpcmVTZXQgPSB0aGlzO1xuICAgICAgICAgICAgZW5zdXJlTWFwKGVudGlyZVNldCk7XG4gICAgICAgICAgICB0aGlzWydbW1NldERhdGFdXSddLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBfY2FsbChjYWxsYmFjaywgY29udGV4dCwga2V5LCBrZXksIGVudGlyZVNldCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soa2V5LCBrZXksIGVudGlyZVNldCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGRlZmluZVByb3BlcnR5KFNldFNoaW0ucHJvdG90eXBlLCAna2V5cycsIFNldFNoaW0ucHJvdG90eXBlLnZhbHVlcywgdHJ1ZSk7XG4gICAgICAgIGFkZEl0ZXJhdG9yKFNldFNoaW0ucHJvdG90eXBlLCBTZXRTaGltLnByb3RvdHlwZS52YWx1ZXMpO1xuXG4gICAgICAgIHZhciBTZXRJdGVyYXRvciA9IGZ1bmN0aW9uIFNldEl0ZXJhdG9yKGl0KSB7XG4gICAgICAgICAgdGhpcy5pdCA9IGl0O1xuICAgICAgICB9O1xuICAgICAgICBTZXRJdGVyYXRvci5wcm90b3R5cGUgPSB7XG4gICAgICAgICAgaXNTZXRJdGVyYXRvcjogdHJ1ZSxcbiAgICAgICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzU2V0SXRlcmF0b3IpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTm90IGEgU2V0SXRlcmF0b3InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLml0Lm5leHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGFkZEl0ZXJhdG9yKFNldEl0ZXJhdG9yLnByb3RvdHlwZSk7XG5cbiAgICAgICAgcmV0dXJuIFNldFNoaW07XG4gICAgICB9KCkpXG4gICAgfTtcblxuICAgIHZhciBpc0dvb2dsZVRyYW5zbGF0ZSA9IGdsb2JhbHMuU2V0ICYmICFTZXQucHJvdG90eXBlWydkZWxldGUnXSAmJiBTZXQucHJvdG90eXBlLnJlbW92ZSAmJiBTZXQucHJvdG90eXBlLml0ZW1zICYmIFNldC5wcm90b3R5cGUubWFwICYmIEFycmF5LmlzQXJyYXkobmV3IFNldCgpLmtleXMpO1xuICAgIGlmIChpc0dvb2dsZVRyYW5zbGF0ZSkge1xuICAgICAgLy8gc3BlY2lhbC1jYXNlIGZvcmNlIHJlbW92YWwgb2Ygd2lsZGx5IGludmFsaWQgU2V0IGltcGxlbWVudGF0aW9uIGluIEdvb2dsZSBUcmFuc2xhdGUgaWZyYW1lc1xuICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9wYXVsbWlsbHIvZXM2LXNoaW0vaXNzdWVzLzQzOCAvIGh0dHBzOi8vdHdpdHRlci5jb20vbGpoYXJiL3N0YXR1cy84NDkzMzU1NzMxMTQzNjM5MDRcbiAgICAgIGdsb2JhbHMuU2V0ID0gY29sbGVjdGlvblNoaW1zLlNldDtcbiAgICB9XG4gICAgaWYgKGdsb2JhbHMuTWFwIHx8IGdsb2JhbHMuU2V0KSB7XG4gICAgICAvLyBTYWZhcmkgOCwgZm9yIGV4YW1wbGUsIGRvZXNuJ3QgYWNjZXB0IGFuIGl0ZXJhYmxlLlxuICAgICAgdmFyIG1hcEFjY2VwdHNBcmd1bWVudHMgPSB2YWx1ZU9yRmFsc2VJZlRocm93cyhmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgTWFwKFtbMSwgMl1dKS5nZXQoMSkgPT09IDI7IH0pO1xuICAgICAgaWYgKCFtYXBBY2NlcHRzQXJndW1lbnRzKSB7XG4gICAgICAgIGdsb2JhbHMuTWFwID0gZnVuY3Rpb24gTWFwKCkge1xuICAgICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBNYXApKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDb25zdHJ1Y3RvciBNYXAgcmVxdWlyZXMgXCJuZXdcIicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgbSA9IG5ldyBPcmlnTWFwKCk7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBhZGRJdGVyYWJsZVRvTWFwKE1hcCwgbSwgYXJndW1lbnRzWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVsZXRlIG0uY29uc3RydWN0b3I7XG4gICAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKG0sIGdsb2JhbHMuTWFwLnByb3RvdHlwZSk7XG4gICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG4gICAgICAgIGdsb2JhbHMuTWFwLnByb3RvdHlwZSA9IGNyZWF0ZShPcmlnTWFwLnByb3RvdHlwZSk7XG4gICAgICAgIGRlZmluZVByb3BlcnR5KGdsb2JhbHMuTWFwLnByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgZ2xvYmFscy5NYXAsIHRydWUpO1xuICAgICAgICBWYWx1ZS5wcmVzZXJ2ZVRvU3RyaW5nKGdsb2JhbHMuTWFwLCBPcmlnTWFwKTtcbiAgICAgIH1cbiAgICAgIHZhciB0ZXN0TWFwID0gbmV3IE1hcCgpO1xuICAgICAgdmFyIG1hcFVzZXNTYW1lVmFsdWVaZXJvID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gQ2hyb21lIDM4LTQyLCBub2RlIDAuMTEvMC4xMiwgaW9qcyAxLzIgYWxzbyBoYXZlIGEgYnVnIHdoZW4gdGhlIE1hcCBoYXMgYSBzaXplID4gNFxuICAgICAgICB2YXIgbSA9IG5ldyBNYXAoW1sxLCAwXSwgWzIsIDBdLCBbMywgMF0sIFs0LCAwXV0pO1xuICAgICAgICBtLnNldCgtMCwgbSk7XG4gICAgICAgIHJldHVybiBtLmdldCgwKSA9PT0gbSAmJiBtLmdldCgtMCkgPT09IG0gJiYgbS5oYXMoMCkgJiYgbS5oYXMoLTApO1xuICAgICAgfSgpKTtcbiAgICAgIHZhciBtYXBTdXBwb3J0c0NoYWluaW5nID0gdGVzdE1hcC5zZXQoMSwgMikgPT09IHRlc3RNYXA7XG4gICAgICBpZiAoIW1hcFVzZXNTYW1lVmFsdWVaZXJvIHx8ICFtYXBTdXBwb3J0c0NoYWluaW5nKSB7XG4gICAgICAgIG92ZXJyaWRlTmF0aXZlKE1hcC5wcm90b3R5cGUsICdzZXQnLCBmdW5jdGlvbiBzZXQoaywgdikge1xuICAgICAgICAgIF9jYWxsKG9yaWdNYXBTZXQsIHRoaXMsIGsgPT09IDAgPyAwIDogaywgdik7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKCFtYXBVc2VzU2FtZVZhbHVlWmVybykge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKE1hcC5wcm90b3R5cGUsIHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldChrKSB7XG4gICAgICAgICAgICByZXR1cm4gX2NhbGwob3JpZ01hcEdldCwgdGhpcywgayA9PT0gMCA/IDAgOiBrKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGhhczogZnVuY3Rpb24gaGFzKGspIHtcbiAgICAgICAgICAgIHJldHVybiBfY2FsbChvcmlnTWFwSGFzLCB0aGlzLCBrID09PSAwID8gMCA6IGspO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgIFZhbHVlLnByZXNlcnZlVG9TdHJpbmcoTWFwLnByb3RvdHlwZS5nZXQsIG9yaWdNYXBHZXQpO1xuICAgICAgICBWYWx1ZS5wcmVzZXJ2ZVRvU3RyaW5nKE1hcC5wcm90b3R5cGUuaGFzLCBvcmlnTWFwSGFzKTtcbiAgICAgIH1cbiAgICAgIHZhciB0ZXN0U2V0ID0gbmV3IFNldCgpO1xuICAgICAgdmFyIHNldFVzZXNTYW1lVmFsdWVaZXJvID0gU2V0LnByb3RvdHlwZVsnZGVsZXRlJ10gJiYgU2V0LnByb3RvdHlwZS5hZGQgJiYgU2V0LnByb3RvdHlwZS5oYXMgJiYgKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgIHNbJ2RlbGV0ZSddKDApO1xuICAgICAgICBzLmFkZCgtMCk7XG4gICAgICAgIHJldHVybiAhcy5oYXMoMCk7XG4gICAgICB9KHRlc3RTZXQpKTtcbiAgICAgIHZhciBzZXRTdXBwb3J0c0NoYWluaW5nID0gdGVzdFNldC5hZGQoMSkgPT09IHRlc3RTZXQ7XG4gICAgICBpZiAoIXNldFVzZXNTYW1lVmFsdWVaZXJvIHx8ICFzZXRTdXBwb3J0c0NoYWluaW5nKSB7XG4gICAgICAgIHZhciBvcmlnU2V0QWRkID0gU2V0LnByb3RvdHlwZS5hZGQ7XG4gICAgICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKHYpIHtcbiAgICAgICAgICBfY2FsbChvcmlnU2V0QWRkLCB0aGlzLCB2ID09PSAwID8gMCA6IHYpO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgICAgICBWYWx1ZS5wcmVzZXJ2ZVRvU3RyaW5nKFNldC5wcm90b3R5cGUuYWRkLCBvcmlnU2V0QWRkKTtcbiAgICAgIH1cbiAgICAgIGlmICghc2V0VXNlc1NhbWVWYWx1ZVplcm8pIHtcbiAgICAgICAgdmFyIG9yaWdTZXRIYXMgPSBTZXQucHJvdG90eXBlLmhhcztcbiAgICAgICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXModikge1xuICAgICAgICAgIHJldHVybiBfY2FsbChvcmlnU2V0SGFzLCB0aGlzLCB2ID09PSAwID8gMCA6IHYpO1xuICAgICAgICB9O1xuICAgICAgICBWYWx1ZS5wcmVzZXJ2ZVRvU3RyaW5nKFNldC5wcm90b3R5cGUuaGFzLCBvcmlnU2V0SGFzKTtcbiAgICAgICAgdmFyIG9yaWdTZXREZWwgPSBTZXQucHJvdG90eXBlWydkZWxldGUnXTtcbiAgICAgICAgU2V0LnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbiBTZXREZWxldGUodikge1xuICAgICAgICAgIHJldHVybiBfY2FsbChvcmlnU2V0RGVsLCB0aGlzLCB2ID09PSAwID8gMCA6IHYpO1xuICAgICAgICB9O1xuICAgICAgICBWYWx1ZS5wcmVzZXJ2ZVRvU3RyaW5nKFNldC5wcm90b3R5cGVbJ2RlbGV0ZSddLCBvcmlnU2V0RGVsKTtcbiAgICAgIH1cbiAgICAgIHZhciBtYXBTdXBwb3J0c1N1YmNsYXNzaW5nID0gc3VwcG9ydHNTdWJjbGFzc2luZyhnbG9iYWxzLk1hcCwgZnVuY3Rpb24gKE0pIHtcbiAgICAgICAgdmFyIG0gPSBuZXcgTShbXSk7XG4gICAgICAgIC8vIEZpcmVmb3ggMzIgaXMgb2sgd2l0aCB0aGUgaW5zdGFudGlhdGluZyB0aGUgc3ViY2xhc3MgYnV0IHdpbGxcbiAgICAgICAgLy8gdGhyb3cgd2hlbiB0aGUgbWFwIGlzIHVzZWQuXG4gICAgICAgIG0uc2V0KDQyLCA0Mik7XG4gICAgICAgIHJldHVybiBtIGluc3RhbmNlb2YgTTtcbiAgICAgIH0pO1xuICAgICAgLy8gd2l0aG91dCBPYmplY3Quc2V0UHJvdG90eXBlT2YsIHN1YmNsYXNzaW5nIGlzIG5vdCBwb3NzaWJsZVxuICAgICAgdmFyIG1hcEZhaWxzVG9TdXBwb3J0U3ViY2xhc3NpbmcgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgJiYgIW1hcFN1cHBvcnRzU3ViY2xhc3Npbmc7XG4gICAgICB2YXIgbWFwUmVxdWlyZXNOZXcgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiAhKGdsb2JhbHMuTWFwKCkgaW5zdGFuY2VvZiBnbG9iYWxzLk1hcCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZXR1cm4gZSBpbnN0YW5jZW9mIFR5cGVFcnJvcjtcbiAgICAgICAgfVxuICAgICAgfSgpKTtcbiAgICAgIGlmIChnbG9iYWxzLk1hcC5sZW5ndGggIT09IDAgfHwgbWFwRmFpbHNUb1N1cHBvcnRTdWJjbGFzc2luZyB8fCAhbWFwUmVxdWlyZXNOZXcpIHtcbiAgICAgICAgZ2xvYmFscy5NYXAgPSBmdW5jdGlvbiBNYXAoKSB7XG4gICAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE1hcCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvbnN0cnVjdG9yIE1hcCByZXF1aXJlcyBcIm5ld1wiJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBtID0gbmV3IE9yaWdNYXAoKTtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGFkZEl0ZXJhYmxlVG9NYXAoTWFwLCBtLCBhcmd1bWVudHNbMF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWxldGUgbS5jb25zdHJ1Y3RvcjtcbiAgICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YobSwgTWFwLnByb3RvdHlwZSk7XG4gICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG4gICAgICAgIGdsb2JhbHMuTWFwLnByb3RvdHlwZSA9IE9yaWdNYXAucHJvdG90eXBlO1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eShnbG9iYWxzLk1hcC5wcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIGdsb2JhbHMuTWFwLCB0cnVlKTtcbiAgICAgICAgVmFsdWUucHJlc2VydmVUb1N0cmluZyhnbG9iYWxzLk1hcCwgT3JpZ01hcCk7XG4gICAgICB9XG4gICAgICB2YXIgc2V0U3VwcG9ydHNTdWJjbGFzc2luZyA9IHN1cHBvcnRzU3ViY2xhc3NpbmcoZ2xvYmFscy5TZXQsIGZ1bmN0aW9uIChTKSB7XG4gICAgICAgIHZhciBzID0gbmV3IFMoW10pO1xuICAgICAgICBzLmFkZCg0MiwgNDIpO1xuICAgICAgICByZXR1cm4gcyBpbnN0YW5jZW9mIFM7XG4gICAgICB9KTtcbiAgICAgIC8vIHdpdGhvdXQgT2JqZWN0LnNldFByb3RvdHlwZU9mLCBzdWJjbGFzc2luZyBpcyBub3QgcG9zc2libGVcbiAgICAgIHZhciBzZXRGYWlsc1RvU3VwcG9ydFN1YmNsYXNzaW5nID0gT2JqZWN0LnNldFByb3RvdHlwZU9mICYmICFzZXRTdXBwb3J0c1N1YmNsYXNzaW5nO1xuICAgICAgdmFyIHNldFJlcXVpcmVzTmV3ID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gIShnbG9iYWxzLlNldCgpIGluc3RhbmNlb2YgZ2xvYmFscy5TZXQpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBUeXBlRXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH0oKSk7XG4gICAgICBpZiAoZ2xvYmFscy5TZXQubGVuZ3RoICE9PSAwIHx8IHNldEZhaWxzVG9TdXBwb3J0U3ViY2xhc3NpbmcgfHwgIXNldFJlcXVpcmVzTmV3KSB7XG4gICAgICAgIHZhciBPcmlnU2V0ID0gZ2xvYmFscy5TZXQ7XG4gICAgICAgIGdsb2JhbHMuU2V0ID0gZnVuY3Rpb24gU2V0KCkge1xuICAgICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTZXQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDb25zdHJ1Y3RvciBTZXQgcmVxdWlyZXMgXCJuZXdcIicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcyA9IG5ldyBPcmlnU2V0KCk7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBhZGRJdGVyYWJsZVRvU2V0KFNldCwgcywgYXJndW1lbnRzWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVsZXRlIHMuY29uc3RydWN0b3I7XG4gICAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHMsIFNldC5wcm90b3R5cGUpO1xuICAgICAgICAgIHJldHVybiBzO1xuICAgICAgICB9O1xuICAgICAgICBnbG9iYWxzLlNldC5wcm90b3R5cGUgPSBPcmlnU2V0LnByb3RvdHlwZTtcbiAgICAgICAgZGVmaW5lUHJvcGVydHkoZ2xvYmFscy5TZXQucHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBnbG9iYWxzLlNldCwgdHJ1ZSk7XG4gICAgICAgIFZhbHVlLnByZXNlcnZlVG9TdHJpbmcoZ2xvYmFscy5TZXQsIE9yaWdTZXQpO1xuICAgICAgfVxuICAgICAgdmFyIG5ld01hcCA9IG5ldyBnbG9iYWxzLk1hcCgpO1xuICAgICAgdmFyIG1hcEl0ZXJhdGlvblRocm93c1N0b3BJdGVyYXRvciA9ICF2YWx1ZU9yRmFsc2VJZlRocm93cyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXdNYXAua2V5cygpLm5leHQoKS5kb25lO1xuICAgICAgfSk7XG4gICAgICAvKlxuICAgICAgICAtIEluIEZpcmVmb3ggPCAyMywgTWFwI3NpemUgaXMgYSBmdW5jdGlvbi5cbiAgICAgICAgLSBJbiBhbGwgY3VycmVudCBGaXJlZm94LCBTZXQjZW50cmllcy9rZXlzL3ZhbHVlcyAmIE1hcCNjbGVhciBkbyBub3QgZXhpc3RcbiAgICAgICAgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD04Njk5OTZcbiAgICAgICAgLSBJbiBGaXJlZm94IDI0LCBNYXAgYW5kIFNldCBkbyBub3QgaW1wbGVtZW50IGZvckVhY2hcbiAgICAgICAgLSBJbiBGaXJlZm94IDI1IGF0IGxlYXN0LCBNYXAgYW5kIFNldCBhcmUgY2FsbGFibGUgd2l0aG91dCBcIm5ld1wiXG4gICAgICAqL1xuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgZ2xvYmFscy5NYXAucHJvdG90eXBlLmNsZWFyICE9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgIG5ldyBnbG9iYWxzLlNldCgpLnNpemUgIT09IDAgfHxcbiAgICAgICAgbmV3TWFwLnNpemUgIT09IDAgfHxcbiAgICAgICAgdHlwZW9mIGdsb2JhbHMuTWFwLnByb3RvdHlwZS5rZXlzICE9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgIHR5cGVvZiBnbG9iYWxzLlNldC5wcm90b3R5cGUua2V5cyAhPT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICB0eXBlb2YgZ2xvYmFscy5NYXAucHJvdG90eXBlLmZvckVhY2ggIT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgdHlwZW9mIGdsb2JhbHMuU2V0LnByb3RvdHlwZS5mb3JFYWNoICE9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgIGlzQ2FsbGFibGVXaXRob3V0TmV3KGdsb2JhbHMuTWFwKSB8fFxuICAgICAgICBpc0NhbGxhYmxlV2l0aG91dE5ldyhnbG9iYWxzLlNldCkgfHxcbiAgICAgICAgdHlwZW9mIG5ld01hcC5rZXlzKCkubmV4dCAhPT0gJ2Z1bmN0aW9uJyB8fCAvLyBTYWZhcmkgOFxuICAgICAgICBtYXBJdGVyYXRpb25UaHJvd3NTdG9wSXRlcmF0b3IgfHwgLy8gRmlyZWZveCAyNVxuICAgICAgICAhbWFwU3VwcG9ydHNTdWJjbGFzc2luZ1xuICAgICAgKSB7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXMoZ2xvYmFscywge1xuICAgICAgICAgIE1hcDogY29sbGVjdGlvblNoaW1zLk1hcCxcbiAgICAgICAgICBTZXQ6IGNvbGxlY3Rpb25TaGltcy5TZXRcbiAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChnbG9iYWxzLlNldC5wcm90b3R5cGUua2V5cyAhPT0gZ2xvYmFscy5TZXQucHJvdG90eXBlLnZhbHVlcykge1xuICAgICAgICAvLyBGaXhlZCBpbiBXZWJLaXQgd2l0aCBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTQ0MTkwXG4gICAgICAgIGRlZmluZVByb3BlcnR5KGdsb2JhbHMuU2V0LnByb3RvdHlwZSwgJ2tleXMnLCBnbG9iYWxzLlNldC5wcm90b3R5cGUudmFsdWVzLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgLy8gU2hpbSBpbmNvbXBsZXRlIGl0ZXJhdG9yIGltcGxlbWVudGF0aW9ucy5cbiAgICAgIGFkZEl0ZXJhdG9yKE9iamVjdC5nZXRQcm90b3R5cGVPZigobmV3IGdsb2JhbHMuTWFwKCkpLmtleXMoKSkpO1xuICAgICAgYWRkSXRlcmF0b3IoT2JqZWN0LmdldFByb3RvdHlwZU9mKChuZXcgZ2xvYmFscy5TZXQoKSkua2V5cygpKSk7XG5cbiAgICAgIGlmIChmdW5jdGlvbnNIYXZlTmFtZXMgJiYgZ2xvYmFscy5TZXQucHJvdG90eXBlLmhhcy5uYW1lICE9PSAnaGFzJykge1xuICAgICAgICAvLyBNaWNyb3NvZnQgRWRnZSB2MC4xMS4xMDA3NC4wIGlzIG1pc3NpbmcgYSBuYW1lIG9uIFNldCNoYXNcbiAgICAgICAgdmFyIGFub255bW91c1NldEhhcyA9IGdsb2JhbHMuU2V0LnByb3RvdHlwZS5oYXM7XG4gICAgICAgIG92ZXJyaWRlTmF0aXZlKGdsb2JhbHMuU2V0LnByb3RvdHlwZSwgJ2hhcycsIGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgICByZXR1cm4gX2NhbGwoYW5vbnltb3VzU2V0SGFzLCB0aGlzLCBrZXkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZGVmaW5lUHJvcGVydGllcyhnbG9iYWxzLCBjb2xsZWN0aW9uU2hpbXMpO1xuICAgIGFkZERlZmF1bHRTcGVjaWVzKGdsb2JhbHMuTWFwKTtcbiAgICBhZGREZWZhdWx0U3BlY2llcyhnbG9iYWxzLlNldCk7XG4gIH1cblxuICB2YXIgdGhyb3dVbmxlc3NUYXJnZXRJc09iamVjdCA9IGZ1bmN0aW9uIHRocm93VW5sZXNzVGFyZ2V0SXNPYmplY3QodGFyZ2V0KSB7XG4gICAgaWYgKCFFUy5UeXBlSXNPYmplY3QodGFyZ2V0KSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGFyZ2V0IG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFNvbWUgUmVmbGVjdCBtZXRob2RzIGFyZSBiYXNpY2FsbHkgdGhlIHNhbWUgYXNcbiAgLy8gdGhvc2Ugb24gdGhlIE9iamVjdCBnbG9iYWwsIGV4Y2VwdCB0aGF0IGEgVHlwZUVycm9yIGlzIHRocm93biBpZlxuICAvLyB0YXJnZXQgaXNuJ3QgYW4gb2JqZWN0LiBBcyB3ZWxsIGFzIHJldHVybmluZyBhIGJvb2xlYW4gaW5kaWNhdGluZ1xuICAvLyB0aGUgc3VjY2VzcyBvZiB0aGUgb3BlcmF0aW9uLlxuICB2YXIgUmVmbGVjdFNoaW1zID0ge1xuICAgIC8vIEFwcGx5IG1ldGhvZCBpbiBhIGZ1bmN0aW9uYWwgZm9ybS5cbiAgICBhcHBseTogZnVuY3Rpb24gYXBwbHkoKSB7XG4gICAgICByZXR1cm4gRVMuQ2FsbChFUy5DYWxsLCBudWxsLCBhcmd1bWVudHMpO1xuICAgIH0sXG5cbiAgICAvLyBOZXcgb3BlcmF0b3IgaW4gYSBmdW5jdGlvbmFsIGZvcm0uXG4gICAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoY29uc3RydWN0b3IsIGFyZ3MpIHtcbiAgICAgIGlmICghRVMuSXNDb25zdHJ1Y3Rvcihjb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIGNvbnN0cnVjdG9yLicpO1xuICAgICAgfVxuICAgICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogY29uc3RydWN0b3I7XG4gICAgICBpZiAoIUVTLklzQ29uc3RydWN0b3IobmV3VGFyZ2V0KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCduZXcudGFyZ2V0IG11c3QgYmUgYSBjb25zdHJ1Y3Rvci4nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBFUy5Db25zdHJ1Y3QoY29uc3RydWN0b3IsIGFyZ3MsIG5ld1RhcmdldCwgJ2ludGVybmFsJyk7XG4gICAgfSxcblxuICAgIC8vIFdoZW4gZGVsZXRpbmcgYSBub24tZXhpc3RlbnQgb3IgY29uZmlndXJhYmxlIHByb3BlcnR5LFxuICAgIC8vIHRydWUgaXMgcmV0dXJuZWQuXG4gICAgLy8gV2hlbiBhdHRlbXB0aW5nIHRvIGRlbGV0ZSBhIG5vbi1jb25maWd1cmFibGUgcHJvcGVydHksXG4gICAgLy8gaXQgd2lsbCByZXR1cm4gZmFsc2UuXG4gICAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KSB7XG4gICAgICB0aHJvd1VubGVzc1RhcmdldElzT2JqZWN0KHRhcmdldCk7XG4gICAgICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xuXG4gICAgICAgIGlmIChkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBXaWxsIHJldHVybiB0cnVlLlxuICAgICAgcmV0dXJuIGRlbGV0ZSB0YXJnZXRba2V5XTtcbiAgICB9LFxuXG4gICAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBrZXkpIHtcbiAgICAgIHRocm93VW5sZXNzVGFyZ2V0SXNPYmplY3QodGFyZ2V0KTtcbiAgICAgIHJldHVybiBrZXkgaW4gdGFyZ2V0O1xuICAgIH1cbiAgfTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMpIHtcbiAgICBPYmplY3QuYXNzaWduKFJlZmxlY3RTaGltcywge1xuICAgICAgLy8gQmFzaWNhbGx5IHRoZSByZXN1bHQgb2YgY2FsbGluZyB0aGUgaW50ZXJuYWwgW1tPd25Qcm9wZXJ0eUtleXNdXS5cbiAgICAgIC8vIENvbmNhdGVuYXRpbmcgcHJvcGVydHlOYW1lcyBhbmQgcHJvcGVydHlTeW1ib2xzIHNob3VsZCBkbyB0aGUgdHJpY2suXG4gICAgICAvLyBUaGlzIHNob3VsZCBjb250aW51ZSB0byB3b3JrIHRvZ2V0aGVyIHdpdGggYSBTeW1ib2wgc2hpbVxuICAgICAgLy8gd2hpY2ggb3ZlcnJpZGVzIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIGFuZCBpbXBsZW1lbnRzXG4gICAgICAvLyBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLlxuICAgICAgb3duS2V5czogZnVuY3Rpb24gb3duS2V5cyh0YXJnZXQpIHtcbiAgICAgICAgdGhyb3dVbmxlc3NUYXJnZXRJc09iamVjdCh0YXJnZXQpO1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldCk7XG5cbiAgICAgICAgaWYgKEVTLklzQ2FsbGFibGUoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykpIHtcbiAgICAgICAgICBfcHVzaEFwcGx5KGtleXMsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ga2V5cztcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBjYWxsQW5kQ2F0Y2hFeGNlcHRpb24gPSBmdW5jdGlvbiBDb252ZXJ0RXhjZXB0aW9uVG9Cb29sZWFuKGZ1bmMpIHtcbiAgICByZXR1cm4gIXRocm93c0Vycm9yKGZ1bmMpO1xuICB9O1xuXG4gIGlmIChPYmplY3QucHJldmVudEV4dGVuc2lvbnMpIHtcbiAgICBPYmplY3QuYXNzaWduKFJlZmxlY3RTaGltcywge1xuICAgICAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBpc0V4dGVuc2libGUodGFyZ2V0KSB7XG4gICAgICAgIHRocm93VW5sZXNzVGFyZ2V0SXNPYmplY3QodGFyZ2V0KTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5pc0V4dGVuc2libGUodGFyZ2V0KTtcbiAgICAgIH0sXG4gICAgICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgICAgIHRocm93VW5sZXNzVGFyZ2V0SXNPYmplY3QodGFyZ2V0KTtcbiAgICAgICAgcmV0dXJuIGNhbGxBbmRDYXRjaEV4Y2VwdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmIChzdXBwb3J0c0Rlc2NyaXB0b3JzKSB7XG4gICAgdmFyIGludGVybmFsR2V0ID0gZnVuY3Rpb24gZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcikge1xuICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcblxuICAgICAgaWYgKCFkZXNjKSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KTtcblxuICAgICAgICBpZiAocGFyZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbnRlcm5hbEdldChwYXJlbnQsIGtleSwgcmVjZWl2ZXIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoJ3ZhbHVlJyBpbiBkZXNjKSB7XG4gICAgICAgIHJldHVybiBkZXNjLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGVzYy5nZXQpIHtcbiAgICAgICAgcmV0dXJuIEVTLkNhbGwoZGVzYy5nZXQsIHJlY2VpdmVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9O1xuXG4gICAgdmFyIGludGVybmFsU2V0ID0gZnVuY3Rpb24gc2V0KHRhcmdldCwga2V5LCB2YWx1ZSwgcmVjZWl2ZXIpIHtcbiAgICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG5cbiAgICAgIGlmICghZGVzYykge1xuICAgICAgICB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldCk7XG5cbiAgICAgICAgaWYgKHBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBpbnRlcm5hbFNldChwYXJlbnQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlc2MgPSB7XG4gICAgICAgICAgdmFsdWU6IHZvaWQgMCxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAoJ3ZhbHVlJyBpbiBkZXNjKSB7XG4gICAgICAgIGlmICghZGVzYy53cml0YWJsZSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghRVMuVHlwZUlzT2JqZWN0KHJlY2VpdmVyKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBleGlzdGluZ0Rlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHJlY2VpdmVyLCBrZXkpO1xuXG4gICAgICAgIGlmIChleGlzdGluZ0Rlc2MpIHtcbiAgICAgICAgICByZXR1cm4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShyZWNlaXZlciwga2V5LCB7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShyZWNlaXZlciwga2V5LCB7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgICAgX2NhbGwoZGVzYy5zZXQsIHJlY2VpdmVyLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIE9iamVjdC5hc3NpZ24oUmVmbGVjdFNoaW1zLCB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykge1xuICAgICAgICB0aHJvd1VubGVzc1RhcmdldElzT2JqZWN0KHRhcmdldCk7XG4gICAgICAgIHJldHVybiBjYWxsQW5kQ2F0Y2hFeGNlcHRpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcblxuICAgICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgICAgICB0aHJvd1VubGVzc1RhcmdldElzT2JqZWN0KHRhcmdldCk7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgICAgfSxcblxuICAgICAgLy8gU3ludGF4IGluIGEgZnVuY3Rpb25hbCBmb3JtLlxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQodGFyZ2V0LCBrZXkpIHtcbiAgICAgICAgdGhyb3dVbmxlc3NUYXJnZXRJc09iamVjdCh0YXJnZXQpO1xuICAgICAgICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHRhcmdldDtcblxuICAgICAgICByZXR1cm4gaW50ZXJuYWxHZXQodGFyZ2V0LCBrZXksIHJlY2VpdmVyKTtcbiAgICAgIH0sXG5cbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHRhcmdldCwga2V5LCB2YWx1ZSkge1xuICAgICAgICB0aHJvd1VubGVzc1RhcmdldElzT2JqZWN0KHRhcmdldCk7XG4gICAgICAgIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogdGFyZ2V0O1xuXG4gICAgICAgIHJldHVybiBpbnRlcm5hbFNldCh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmIChPYmplY3QuZ2V0UHJvdG90eXBlT2YpIHtcbiAgICB2YXIgb2JqZWN0RG90R2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gICAgUmVmbGVjdFNoaW1zLmdldFByb3RvdHlwZU9mID0gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSB7XG4gICAgICB0aHJvd1VubGVzc1RhcmdldElzT2JqZWN0KHRhcmdldCk7XG4gICAgICByZXR1cm4gb2JqZWN0RG90R2V0UHJvdG90eXBlT2YodGFyZ2V0KTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZiAmJiBSZWZsZWN0U2hpbXMuZ2V0UHJvdG90eXBlT2YpIHtcbiAgICB2YXIgd2lsbENyZWF0ZUNpcmN1bGFyUHJvdG90eXBlID0gZnVuY3Rpb24gKG9iamVjdCwgbGFzdFByb3RvKSB7XG4gICAgICB2YXIgcHJvdG8gPSBsYXN0UHJvdG87XG4gICAgICB3aGlsZSAocHJvdG8pIHtcbiAgICAgICAgaWYgKG9iamVjdCA9PT0gcHJvdG8pIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBwcm90byA9IFJlZmxlY3RTaGltcy5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIE9iamVjdC5hc3NpZ24oUmVmbGVjdFNoaW1zLCB7XG4gICAgICAvLyBTZXRzIHRoZSBwcm90b3R5cGUgb2YgdGhlIGdpdmVuIG9iamVjdC5cbiAgICAgIC8vIFJldHVybnMgdHJ1ZSBvbiBzdWNjZXNzLCBvdGhlcndpc2UgZmFsc2UuXG4gICAgICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2Yob2JqZWN0LCBwcm90bykge1xuICAgICAgICB0aHJvd1VubGVzc1RhcmdldElzT2JqZWN0KG9iamVjdCk7XG4gICAgICAgIGlmIChwcm90byAhPT0gbnVsbCAmJiAhRVMuVHlwZUlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Byb3RvIG11c3QgYmUgYW4gb2JqZWN0IG9yIG51bGwnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHRoZXkgYWxyZWFkeSBhcmUgdGhlIHNhbWUsIHdlJ3JlIGRvbmUuXG4gICAgICAgIGlmIChwcm90byA9PT0gUmVmbGVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYW5ub3QgYWx0ZXIgcHJvdG90eXBlIGlmIG9iamVjdCBub3QgZXh0ZW5zaWJsZS5cbiAgICAgICAgaWYgKFJlZmxlY3QuaXNFeHRlbnNpYmxlICYmICFSZWZsZWN0LmlzRXh0ZW5zaWJsZShvYmplY3QpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgd2UgZG8gbm90IGNyZWF0ZSBhIGNpcmN1bGFyIHByb3RvdHlwZSBjaGFpbi5cbiAgICAgICAgaWYgKHdpbGxDcmVhdGVDaXJjdWxhclByb3RvdHlwZShvYmplY3QsIHByb3RvKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihvYmplY3QsIHByb3RvKTtcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICB2YXIgZGVmaW5lT3JPdmVycmlkZVJlZmxlY3RQcm9wZXJ0eSA9IGZ1bmN0aW9uIChrZXksIHNoaW0pIHtcbiAgICBpZiAoIUVTLklzQ2FsbGFibGUoZ2xvYmFscy5SZWZsZWN0W2tleV0pKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eShnbG9iYWxzLlJlZmxlY3QsIGtleSwgc2hpbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY2NlcHRzUHJpbWl0aXZlcyA9IHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZ2xvYmFscy5SZWZsZWN0W2tleV0oMSk7XG4gICAgICAgIGdsb2JhbHMuUmVmbGVjdFtrZXldKE5hTik7XG4gICAgICAgIGdsb2JhbHMuUmVmbGVjdFtrZXldKHRydWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGFjY2VwdHNQcmltaXRpdmVzKSB7XG4gICAgICAgIG92ZXJyaWRlTmF0aXZlKGdsb2JhbHMuUmVmbGVjdCwga2V5LCBzaGltKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIE9iamVjdC5rZXlzKFJlZmxlY3RTaGltcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgZGVmaW5lT3JPdmVycmlkZVJlZmxlY3RQcm9wZXJ0eShrZXksIFJlZmxlY3RTaGltc1trZXldKTtcbiAgfSk7XG4gIHZhciBvcmlnaW5hbFJlZmxlY3RHZXRQcm90byA9IGdsb2JhbHMuUmVmbGVjdC5nZXRQcm90b3R5cGVPZjtcbiAgaWYgKGZ1bmN0aW9uc0hhdmVOYW1lcyAmJiBvcmlnaW5hbFJlZmxlY3RHZXRQcm90byAmJiBvcmlnaW5hbFJlZmxlY3RHZXRQcm90by5uYW1lICE9PSAnZ2V0UHJvdG90eXBlT2YnKSB7XG4gICAgb3ZlcnJpZGVOYXRpdmUoZ2xvYmFscy5SZWZsZWN0LCAnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZih0YXJnZXQpIHtcbiAgICAgIHJldHVybiBfY2FsbChvcmlnaW5hbFJlZmxlY3RHZXRQcm90bywgZ2xvYmFscy5SZWZsZWN0LCB0YXJnZXQpO1xuICAgIH0pO1xuICB9XG4gIGlmIChnbG9iYWxzLlJlZmxlY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICBpZiAodmFsdWVPckZhbHNlSWZUaHJvd3MoZnVuY3Rpb24gKCkge1xuICAgICAgZ2xvYmFscy5SZWZsZWN0LnNldFByb3RvdHlwZU9mKDEsIHt9KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pKSB7XG4gICAgICBvdmVycmlkZU5hdGl2ZShnbG9iYWxzLlJlZmxlY3QsICdzZXRQcm90b3R5cGVPZicsIFJlZmxlY3RTaGltcy5zZXRQcm90b3R5cGVPZik7XG4gICAgfVxuICB9XG4gIGlmIChnbG9iYWxzLlJlZmxlY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgICBpZiAoIXZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBiYXNpYyA9ICFnbG9iYWxzLlJlZmxlY3QuZGVmaW5lUHJvcGVydHkoMSwgJ3Rlc3QnLCB7IHZhbHVlOiAxIH0pO1xuICAgICAgLy8gXCJleHRlbnNpYmxlXCIgZmFpbHMgb24gRWRnZSAwLjEyXG4gICAgICB2YXIgZXh0ZW5zaWJsZSA9IHR5cGVvZiBPYmplY3QucHJldmVudEV4dGVuc2lvbnMgIT09ICdmdW5jdGlvbicgfHwgIWdsb2JhbHMuUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pLCAndGVzdCcsIHt9KTtcbiAgICAgIHJldHVybiBiYXNpYyAmJiBleHRlbnNpYmxlO1xuICAgIH0pKSB7XG4gICAgICBvdmVycmlkZU5hdGl2ZShnbG9iYWxzLlJlZmxlY3QsICdkZWZpbmVQcm9wZXJ0eScsIFJlZmxlY3RTaGltcy5kZWZpbmVQcm9wZXJ0eSk7XG4gICAgfVxuICB9XG4gIGlmIChnbG9iYWxzLlJlZmxlY3QuY29uc3RydWN0KSB7XG4gICAgaWYgKCF2YWx1ZU9yRmFsc2VJZlRocm93cyhmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgRiA9IGZ1bmN0aW9uIEYoKSB7fTtcbiAgICAgIHJldHVybiBnbG9iYWxzLlJlZmxlY3QuY29uc3RydWN0KGZ1bmN0aW9uICgpIHt9LCBbXSwgRikgaW5zdGFuY2VvZiBGO1xuICAgIH0pKSB7XG4gICAgICBvdmVycmlkZU5hdGl2ZShnbG9iYWxzLlJlZmxlY3QsICdjb25zdHJ1Y3QnLCBSZWZsZWN0U2hpbXMuY29uc3RydWN0KTtcbiAgICB9XG4gIH1cblxuICBpZiAoU3RyaW5nKG5ldyBEYXRlKE5hTikpICE9PSAnSW52YWxpZCBEYXRlJykge1xuICAgIHZhciBkYXRlVG9TdHJpbmcgPSBEYXRlLnByb3RvdHlwZS50b1N0cmluZztcbiAgICB2YXIgc2hpbW1lZERhdGVUb1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgdmFyIHZhbHVlT2YgPSArdGhpcztcbiAgICAgIGlmICh2YWx1ZU9mICE9PSB2YWx1ZU9mKSB7XG4gICAgICAgIHJldHVybiAnSW52YWxpZCBEYXRlJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBFUy5DYWxsKGRhdGVUb1N0cmluZywgdGhpcyk7XG4gICAgfTtcbiAgICBvdmVycmlkZU5hdGl2ZShEYXRlLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgc2hpbW1lZERhdGVUb1N0cmluZyk7XG4gIH1cblxuICAvLyBBbm5leCBCIEhUTUwgbWV0aG9kc1xuICAvLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtYWRkaXRpb25hbC1wcm9wZXJ0aWVzLW9mLXRoZS1zdHJpbmcucHJvdG90eXBlLW9iamVjdFxuICB2YXIgc3RyaW5nSFRNTHNoaW1zID0ge1xuICAgIGFuY2hvcjogZnVuY3Rpb24gYW5jaG9yKG5hbWUpIHsgcmV0dXJuIEVTLkNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpOyB9LFxuICAgIGJpZzogZnVuY3Rpb24gYmlnKCkgeyByZXR1cm4gRVMuQ3JlYXRlSFRNTCh0aGlzLCAnYmlnJywgJycsICcnKTsgfSxcbiAgICBibGluazogZnVuY3Rpb24gYmxpbmsoKSB7IHJldHVybiBFUy5DcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7IH0sXG4gICAgYm9sZDogZnVuY3Rpb24gYm9sZCgpIHsgcmV0dXJuIEVTLkNyZWF0ZUhUTUwodGhpcywgJ2InLCAnJywgJycpOyB9LFxuICAgIGZpeGVkOiBmdW5jdGlvbiBmaXhlZCgpIHsgcmV0dXJuIEVTLkNyZWF0ZUhUTUwodGhpcywgJ3R0JywgJycsICcnKTsgfSxcbiAgICBmb250Y29sb3I6IGZ1bmN0aW9uIGZvbnRjb2xvcihjb2xvcikgeyByZXR1cm4gRVMuQ3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdjb2xvcicsIGNvbG9yKTsgfSxcbiAgICBmb250c2l6ZTogZnVuY3Rpb24gZm9udHNpemUoc2l6ZSkgeyByZXR1cm4gRVMuQ3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdzaXplJywgc2l6ZSk7IH0sXG4gICAgaXRhbGljczogZnVuY3Rpb24gaXRhbGljcygpIHsgcmV0dXJuIEVTLkNyZWF0ZUhUTUwodGhpcywgJ2knLCAnJywgJycpOyB9LFxuICAgIGxpbms6IGZ1bmN0aW9uIGxpbmsodXJsKSB7IHJldHVybiBFUy5DcmVhdGVIVE1MKHRoaXMsICdhJywgJ2hyZWYnLCB1cmwpOyB9LFxuICAgIHNtYWxsOiBmdW5jdGlvbiBzbWFsbCgpIHsgcmV0dXJuIEVTLkNyZWF0ZUhUTUwodGhpcywgJ3NtYWxsJywgJycsICcnKTsgfSxcbiAgICBzdHJpa2U6IGZ1bmN0aW9uIHN0cmlrZSgpIHsgcmV0dXJuIEVTLkNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7IH0sXG4gICAgc3ViOiBmdW5jdGlvbiBzdWIoKSB7IHJldHVybiBFUy5DcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpOyB9LFxuICAgIHN1cDogZnVuY3Rpb24gc3ViKCkgeyByZXR1cm4gRVMuQ3JlYXRlSFRNTCh0aGlzLCAnc3VwJywgJycsICcnKTsgfVxuICB9O1xuICBfZm9yRWFjaChPYmplY3Qua2V5cyhzdHJpbmdIVE1Mc2hpbXMpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIG1ldGhvZCA9IFN0cmluZy5wcm90b3R5cGVba2V5XTtcbiAgICB2YXIgc2hvdWxkT3ZlcndyaXRlID0gZmFsc2U7XG4gICAgaWYgKEVTLklzQ2FsbGFibGUobWV0aG9kKSkge1xuICAgICAgdmFyIG91dHB1dCA9IF9jYWxsKG1ldGhvZCwgJycsICcgXCIgJyk7XG4gICAgICB2YXIgcXVvdGVzQ291bnQgPSBfY29uY2F0KFtdLCBvdXRwdXQubWF0Y2goL1wiL2cpKS5sZW5ndGg7XG4gICAgICBzaG91bGRPdmVyd3JpdGUgPSBvdXRwdXQgIT09IG91dHB1dC50b0xvd2VyQ2FzZSgpIHx8IHF1b3Rlc0NvdW50ID4gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdWxkT3ZlcndyaXRlID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHNob3VsZE92ZXJ3cml0ZSkge1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoU3RyaW5nLnByb3RvdHlwZSwga2V5LCBzdHJpbmdIVE1Mc2hpbXNba2V5XSk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgSlNPTnN0cmluZ2lmaWVzU3ltYm9scyA9IChmdW5jdGlvbiAoKSB7XG4gICAgLy8gTWljcm9zb2Z0IEVkZ2UgdjAuMTIgc3RyaW5naWZpZXMgU3ltYm9scyBpbmNvcnJlY3RseVxuICAgIGlmICghaGFzU3ltYm9scykgeyByZXR1cm4gZmFsc2U7IH0gLy8gU3ltYm9scyBhcmUgbm90IHN1cHBvcnRlZFxuICAgIHZhciBzdHJpbmdpZnkgPSB0eXBlb2YgSlNPTiA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIEpTT04uc3RyaW5naWZ5ID09PSAnZnVuY3Rpb24nID8gSlNPTi5zdHJpbmdpZnkgOiBudWxsO1xuICAgIGlmICghc3RyaW5naWZ5KSB7IHJldHVybiBmYWxzZTsgfSAvLyBKU09OLnN0cmluZ2lmeSBpcyBub3Qgc3VwcG9ydGVkXG4gICAgaWYgKHR5cGVvZiBzdHJpbmdpZnkoU3ltYm9sKCkpICE9PSAndW5kZWZpbmVkJykgeyByZXR1cm4gdHJ1ZTsgfSAvLyBTeW1ib2xzIHNob3VsZCBiZWNvbWUgYHVuZGVmaW5lZGBcbiAgICBpZiAoc3RyaW5naWZ5KFtTeW1ib2woKV0pICE9PSAnW251bGxdJykgeyByZXR1cm4gdHJ1ZTsgfSAvLyBTeW1ib2xzIGluIGFycmF5cyBzaG91bGQgYmVjb21lIGBudWxsYFxuICAgIHZhciBvYmogPSB7IGE6IFN5bWJvbCgpIH07XG4gICAgb2JqW1N5bWJvbCgpXSA9IHRydWU7XG4gICAgaWYgKHN0cmluZ2lmeShvYmopICE9PSAne30nKSB7IHJldHVybiB0cnVlOyB9IC8vIFN5bWJvbC12YWx1ZWQga2V5cyAqYW5kKiBTeW1ib2wtdmFsdWVkIHByb3BlcnRpZXMgc2hvdWxkIGJlIG9taXR0ZWRcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0oKSk7XG4gIHZhciBKU09Oc3RyaW5naWZ5QWNjZXB0c09iamVjdFN5bWJvbCA9IHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBDaHJvbWUgNDUgdGhyb3dzIG9uIHN0cmluZ2lmeWluZyBvYmplY3Qgc3ltYm9sc1xuICAgIGlmICghaGFzU3ltYm9scykgeyByZXR1cm4gdHJ1ZTsgfSAvLyBTeW1ib2xzIGFyZSBub3Qgc3VwcG9ydGVkXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KE9iamVjdChTeW1ib2woKSkpID09PSAne30nICYmIEpTT04uc3RyaW5naWZ5KFtPYmplY3QoU3ltYm9sKCkpXSkgPT09ICdbe31dJztcbiAgfSk7XG4gIGlmIChKU09Oc3RyaW5naWZpZXNTeW1ib2xzIHx8ICFKU09Oc3RyaW5naWZ5QWNjZXB0c09iamVjdFN5bWJvbCkge1xuICAgIHZhciBvcmlnU3RyaW5naWZ5ID0gSlNPTi5zdHJpbmdpZnk7XG4gICAgb3ZlcnJpZGVOYXRpdmUoSlNPTiwgJ3N0cmluZ2lmeScsIGZ1bmN0aW9uIHN0cmluZ2lmeSh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N5bWJvbCcpIHsgcmV0dXJuOyB9XG4gICAgICB2YXIgcmVwbGFjZXI7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgcmVwbGFjZXIgPSBhcmd1bWVudHNbMV07XG4gICAgICB9XG4gICAgICB2YXIgYXJncyA9IFt2YWx1ZV07XG4gICAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSB7XG4gICAgICAgIHZhciByZXBsYWNlRm4gPSBFUy5Jc0NhbGxhYmxlKHJlcGxhY2VyKSA/IHJlcGxhY2VyIDogbnVsbDtcbiAgICAgICAgdmFyIHdyYXBwZWRSZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbCkge1xuICAgICAgICAgIHZhciBwYXJzZWRWYWx1ZSA9IHJlcGxhY2VGbiA/IF9jYWxsKHJlcGxhY2VGbiwgdGhpcywga2V5LCB2YWwpIDogdmFsO1xuICAgICAgICAgIGlmICh0eXBlb2YgcGFyc2VkVmFsdWUgIT09ICdzeW1ib2wnKSB7XG4gICAgICAgICAgICBpZiAoVHlwZS5zeW1ib2wocGFyc2VkVmFsdWUpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhc3NpZ25Ubyh7fSkocGFyc2VkVmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlZFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgYXJncy5wdXNoKHdyYXBwZWRSZXBsYWNlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjcmVhdGUgd3JhcHBlZCByZXBsYWNlciB0aGF0IGhhbmRsZXMgYW4gYXJyYXkgcmVwbGFjZXI/XG4gICAgICAgIGFyZ3MucHVzaChyZXBsYWNlcik7XG4gICAgICB9XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgYXJncy5wdXNoKGFyZ3VtZW50c1syXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3JpZ1N0cmluZ2lmeS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBnbG9iYWxzO1xufSkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWlzcHJvcGVydHlrZXlcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBJc1Byb3BlcnR5S2V5KGFyZ3VtZW50KSB7XG5cdHJldHVybiB0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N5bWJvbCc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ3JlYXRlRGF0YVByb3BlcnR5ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9DcmVhdGVEYXRhUHJvcGVydHknKTtcbnZhciBJc0NhbGxhYmxlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Jc0NhbGxhYmxlJyk7XG52YXIgUmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvUmVxdWlyZU9iamVjdENvZXJjaWJsZScpO1xudmFyIFRvT2JqZWN0ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Ub09iamVjdCcpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L2hlbHBlcnMvY2FsbEJvdW5kJyk7XG5cbnZhciAkZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgJGdldE93bk5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgJGdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyICRjb25jYXQgPSBjYWxsQm91bmQoJ0FycmF5LnByb3RvdHlwZS5jb25jYXQnKTtcbnZhciAkcmVkdWNlID0gY2FsbEJvdW5kKCdBcnJheS5wcm90b3R5cGUucmVkdWNlJyk7XG52YXIgZ2V0QWxsID0gJGdldFN5bWJvbHMgPyBmdW5jdGlvbiAob2JqKSB7XG5cdHJldHVybiAkY29uY2F0KCRnZXRPd25OYW1lcyhvYmopLCAkZ2V0U3ltYm9scyhvYmopKTtcbn0gOiAkZ2V0T3duTmFtZXM7XG5cbnZhciBpc0VTNSA9IElzQ2FsbGFibGUoJGdPUEQpICYmIElzQ2FsbGFibGUoJGdldE93bk5hbWVzKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHZhbHVlKSB7XG5cdFJlcXVpcmVPYmplY3RDb2VyY2libGUodmFsdWUpO1xuXHRpZiAoIWlzRVM1KSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyByZXF1aXJlcyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJyk7XG5cdH1cblxuXHR2YXIgTyA9IFRvT2JqZWN0KHZhbHVlKTtcblx0cmV0dXJuICRyZWR1Y2UoXG5cdFx0Z2V0QWxsKE8pLFxuXHRcdGZ1bmN0aW9uIChhY2MsIGtleSkge1xuXHRcdFx0dmFyIGRlc2NyaXB0b3IgPSAkZ09QRChPLCBrZXkpO1xuXHRcdFx0aWYgKHR5cGVvZiBkZXNjcmlwdG9yICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRDcmVhdGVEYXRhUHJvcGVydHkoYWNjLCBrZXksIGRlc2NyaXB0b3IpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGFjYztcblx0XHR9LFxuXHRcdHt9XG5cdCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gcmVxdWlyZSgnaGFzJyk7XG52YXIgUmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvUmVxdWlyZU9iamVjdENvZXJjaWJsZScpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L2hlbHBlcnMvY2FsbEJvdW5kJyk7XG5cbnZhciAkaXNFbnVtZXJhYmxlID0gY2FsbEJvdW5kKCdPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdmFsdWVzKE8pIHtcblx0dmFyIG9iaiA9IFJlcXVpcmVPYmplY3RDb2VyY2libGUoTyk7XG5cdHZhciB2YWxzID0gW107XG5cdGZvciAodmFyIGtleSBpbiBvYmopIHtcblx0XHRpZiAoaGFzKG9iaiwga2V5KSAmJiAkaXNFbnVtZXJhYmxlKG9iaiwga2V5KSkge1xuXHRcdFx0dmFscy5wdXNoKG9ialtrZXldKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHZhbHM7XG59O1xuIiwiLyoganNoaW50IGJyb3dzZXI6dHJ1ZVxuICpcbiAqIHdpbmRvdy1sb2NhdGlvbi1vcmlnaW4gLSB2ZXJzaW9uIDAuMC4xXG4gKiBBZGQgc3VwcG9ydCBmb3IgYnJvd3NlcnMgdGhhdCBkb24ndCBuYXRpdmVseSBzdXBwb3J0IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW5cbiAqXG4gKiBBdXRocm9yOiBLeWxlIFdlbHNieSA8a3lsZUBtZWt5bGUuY29tPlxuICogTGljZW5zZTogTUlUXG4gKi9cblxuKGZ1bmN0aW9uKGxvY2F0aW9uKXtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoIWxvY2F0aW9uLm9yaWdpbikge1xuICAgIHZhciBvcmlnaW4gPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3RuYW1lICsgKGxvY2F0aW9uLnBvcnQgJiYgXCI6XCIgKyBsb2NhdGlvbi5wb3J0KTtcbiAgICBcbiAgICB0cnkge1xuICAgICAgLy8gTWFrZSBpdCBub24gZWRpdGFibGVcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShsb2NhdGlvbiwgXCJvcmlnaW5cIiwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogb3JpZ2luXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgIC8vIElFIDwgOFxuICAgICAgbG9jYXRpb24ub3JpZ2luID0gb3JpZ2luO1xuICAgIH1cbiAgfVxufSkod2luZG93LmxvY2F0aW9uKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRyZXR1cm4gdHlwZW9mIFN0cmluZy5wcm90b3R5cGUucGFkU3RhcnQgPT09ICdmdW5jdGlvbicgPyBTdHJpbmcucHJvdG90eXBlLnBhZFN0YXJ0IDogaW1wbGVtZW50YXRpb247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVG9MZW5ndGggPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1RvTGVuZ3RoJyk7XG52YXIgVG9TdHJpbmcgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1RvU3RyaW5nJyk7XG52YXIgUmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvUmVxdWlyZU9iamVjdENvZXJjaWJsZScpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L2hlbHBlcnMvY2FsbEJvdW5kJyk7XG5cbnZhciAkc2xpY2UgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuc2xpY2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoKSB7XG5cdHZhciBPID0gUmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcblx0dmFyIFMgPSBUb1N0cmluZyhPKTtcblx0dmFyIHN0cmluZ0xlbmd0aCA9IFRvTGVuZ3RoKFMubGVuZ3RoKTtcblx0dmFyIGZpbGxTdHJpbmc7XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdGZpbGxTdHJpbmcgPSBhcmd1bWVudHNbMV07XG5cdH1cblx0dmFyIGZpbGxlciA9IHR5cGVvZiBmaWxsU3RyaW5nID09PSAndW5kZWZpbmVkJyA/ICcnIDogVG9TdHJpbmcoZmlsbFN0cmluZyk7XG5cdGlmIChmaWxsZXIgPT09ICcnKSB7XG5cdFx0ZmlsbGVyID0gJyAnO1xuXHR9XG5cdHZhciBpbnRNYXhMZW5ndGggPSBUb0xlbmd0aChtYXhMZW5ndGgpO1xuXHRpZiAoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCkge1xuXHRcdHJldHVybiBTO1xuXHR9XG5cdHZhciBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoO1xuXHR3aGlsZSAoZmlsbGVyLmxlbmd0aCA8IGZpbGxMZW4pIHtcblx0XHR2YXIgZkxlbiA9IGZpbGxlci5sZW5ndGg7XG5cdFx0dmFyIHJlbWFpbmluZ0NvZGVVbml0cyA9IGZpbGxMZW4gLSBmTGVuO1xuXHRcdGZpbGxlciArPSBmTGVuID4gcmVtYWluaW5nQ29kZVVuaXRzID8gJHNsaWNlKGZpbGxlciwgMCwgcmVtYWluaW5nQ29kZVVuaXRzKSA6IGZpbGxlcjtcblx0fVxuXG5cdHZhciB0cnVuY2F0ZWRTdHJpbmdGaWxsZXIgPSBmaWxsZXIubGVuZ3RoID4gZmlsbExlbiA/ICRzbGljZShmaWxsZXIsIDAsIGZpbGxMZW4pIDogZmlsbGVyO1xuXHRyZXR1cm4gUyArIHRydW5jYXRlZFN0cmluZ0ZpbGxlcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBrZXlzU2hpbTtcbmlmICghT2JqZWN0LmtleXMpIHtcblx0Ly8gbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW1cblx0dmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cdHZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cdHZhciBpc0FyZ3MgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZ2xvYmFsLXJlcXVpcmVcblx0dmFyIGlzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cdHZhciBoYXNEb250RW51bUJ1ZyA9ICFpc0VudW1lcmFibGUuY2FsbCh7IHRvU3RyaW5nOiBudWxsIH0sICd0b1N0cmluZycpO1xuXHR2YXIgaGFzUHJvdG9FbnVtQnVnID0gaXNFbnVtZXJhYmxlLmNhbGwoZnVuY3Rpb24gKCkge30sICdwcm90b3R5cGUnKTtcblx0dmFyIGRvbnRFbnVtcyA9IFtcblx0XHQndG9TdHJpbmcnLFxuXHRcdCd0b0xvY2FsZVN0cmluZycsXG5cdFx0J3ZhbHVlT2YnLFxuXHRcdCdoYXNPd25Qcm9wZXJ0eScsXG5cdFx0J2lzUHJvdG90eXBlT2YnLFxuXHRcdCdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG5cdFx0J2NvbnN0cnVjdG9yJ1xuXHRdO1xuXHR2YXIgZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUgPSBmdW5jdGlvbiAobykge1xuXHRcdHZhciBjdG9yID0gby5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gY3RvciAmJiBjdG9yLnByb3RvdHlwZSA9PT0gbztcblx0fTtcblx0dmFyIGV4Y2x1ZGVkS2V5cyA9IHtcblx0XHQkYXBwbGljYXRpb25DYWNoZTogdHJ1ZSxcblx0XHQkY29uc29sZTogdHJ1ZSxcblx0XHQkZXh0ZXJuYWw6IHRydWUsXG5cdFx0JGZyYW1lOiB0cnVlLFxuXHRcdCRmcmFtZUVsZW1lbnQ6IHRydWUsXG5cdFx0JGZyYW1lczogdHJ1ZSxcblx0XHQkaW5uZXJIZWlnaHQ6IHRydWUsXG5cdFx0JGlubmVyV2lkdGg6IHRydWUsXG5cdFx0JG9ubW96ZnVsbHNjcmVlbmNoYW5nZTogdHJ1ZSxcblx0XHQkb25tb3pmdWxsc2NyZWVuZXJyb3I6IHRydWUsXG5cdFx0JG91dGVySGVpZ2h0OiB0cnVlLFxuXHRcdCRvdXRlcldpZHRoOiB0cnVlLFxuXHRcdCRwYWdlWE9mZnNldDogdHJ1ZSxcblx0XHQkcGFnZVlPZmZzZXQ6IHRydWUsXG5cdFx0JHBhcmVudDogdHJ1ZSxcblx0XHQkc2Nyb2xsTGVmdDogdHJ1ZSxcblx0XHQkc2Nyb2xsVG9wOiB0cnVlLFxuXHRcdCRzY3JvbGxYOiB0cnVlLFxuXHRcdCRzY3JvbGxZOiB0cnVlLFxuXHRcdCRzZWxmOiB0cnVlLFxuXHRcdCR3ZWJraXRJbmRleGVkREI6IHRydWUsXG5cdFx0JHdlYmtpdFN0b3JhZ2VJbmZvOiB0cnVlLFxuXHRcdCR3aW5kb3c6IHRydWVcblx0fTtcblx0dmFyIGhhc0F1dG9tYXRpb25FcXVhbGl0eUJ1ZyA9IChmdW5jdGlvbiAoKSB7XG5cdFx0LyogZ2xvYmFsIHdpbmRvdyAqL1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgeyByZXR1cm4gZmFsc2U7IH1cblx0XHRmb3IgKHZhciBrIGluIHdpbmRvdykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0aWYgKCFleGNsdWRlZEtleXNbJyQnICsga10gJiYgaGFzLmNhbGwod2luZG93LCBrKSAmJiB3aW5kb3dba10gIT09IG51bGwgJiYgdHlwZW9mIHdpbmRvd1trXSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0ZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUod2luZG93W2tdKTtcblx0XHRcdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fSgpKTtcblx0dmFyIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlSWZOb3RCdWdneSA9IGZ1bmN0aW9uIChvKSB7XG5cdFx0LyogZ2xvYmFsIHdpbmRvdyAqL1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyB8fCAhaGFzQXV0b21hdGlvbkVxdWFsaXR5QnVnKSB7XG5cdFx0XHRyZXR1cm4gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUobyk7XG5cdFx0fVxuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUobyk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fTtcblxuXHRrZXlzU2hpbSA9IGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG5cdFx0dmFyIGlzT2JqZWN0ID0gb2JqZWN0ICE9PSBudWxsICYmIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnO1xuXHRcdHZhciBpc0Z1bmN0aW9uID0gdG9TdHIuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXHRcdHZhciBpc0FyZ3VtZW50cyA9IGlzQXJncyhvYmplY3QpO1xuXHRcdHZhciBpc1N0cmluZyA9IGlzT2JqZWN0ICYmIHRvU3RyLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgU3RyaW5nXSc7XG5cdFx0dmFyIHRoZUtleXMgPSBbXTtcblxuXHRcdGlmICghaXNPYmplY3QgJiYgIWlzRnVuY3Rpb24gJiYgIWlzQXJndW1lbnRzKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3Qua2V5cyBjYWxsZWQgb24gYSBub24tb2JqZWN0Jyk7XG5cdFx0fVxuXG5cdFx0dmFyIHNraXBQcm90byA9IGhhc1Byb3RvRW51bUJ1ZyAmJiBpc0Z1bmN0aW9uO1xuXHRcdGlmIChpc1N0cmluZyAmJiBvYmplY3QubGVuZ3RoID4gMCAmJiAhaGFzLmNhbGwob2JqZWN0LCAwKSkge1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBvYmplY3QubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0dGhlS2V5cy5wdXNoKFN0cmluZyhpKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGlzQXJndW1lbnRzICYmIG9iamVjdC5sZW5ndGggPiAwKSB7XG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IG9iamVjdC5sZW5ndGg7ICsraikge1xuXHRcdFx0XHR0aGVLZXlzLnB1c2goU3RyaW5nKGopKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICh2YXIgbmFtZSBpbiBvYmplY3QpIHtcblx0XHRcdFx0aWYgKCEoc2tpcFByb3RvICYmIG5hbWUgPT09ICdwcm90b3R5cGUnKSAmJiBoYXMuY2FsbChvYmplY3QsIG5hbWUpKSB7XG5cdFx0XHRcdFx0dGhlS2V5cy5wdXNoKFN0cmluZyhuYW1lKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoaGFzRG9udEVudW1CdWcpIHtcblx0XHRcdHZhciBza2lwQ29uc3RydWN0b3IgPSBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZUlmTm90QnVnZ3kob2JqZWN0KTtcblxuXHRcdFx0Zm9yICh2YXIgayA9IDA7IGsgPCBkb250RW51bXMubGVuZ3RoOyArK2spIHtcblx0XHRcdFx0aWYgKCEoc2tpcENvbnN0cnVjdG9yICYmIGRvbnRFbnVtc1trXSA9PT0gJ2NvbnN0cnVjdG9yJykgJiYgaGFzLmNhbGwob2JqZWN0LCBkb250RW51bXNba10pKSB7XG5cdFx0XHRcdFx0dGhlS2V5cy5wdXNoKGRvbnRFbnVtc1trXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHRoZUtleXM7XG5cdH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGtleXNTaGltO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkTWF0aCA9IEdldEludHJpbnNpYygnJU1hdGglJyk7XG52YXIgJE51bWJlciA9IEdldEludHJpbnNpYygnJU51bWJlciUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAkTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgfHwgJE1hdGgucG93KDIsIDUzKSAtIDE7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludCBnbG9iYWwtcmVxdWlyZTogMCAqL1xuLy8gdGhlIGNvZGUgaXMgc3RydWN0dXJlZCB0aGlzIHdheSBzbyB0aGF0IGJ1bmRsZXJzIGNhblxuLy8gYWxpYXMgb3V0IGBoYXMtc3ltYm9sc2AgdG8gYCgpID0+IHRydWVgIG9yIGAoKSA9PiBmYWxzZWAgaWYgeW91ciB0YXJnZXRcbi8vIGVudmlyb25tZW50cycgU3ltYm9sIGNhcGFiaWxpdGllcyBhcmUga25vd24sIGFuZCB0aGVuIHVzZVxuLy8gZGVhZCBjb2RlIGVsaW1pbmF0aW9uIG9uIHRoZSByZXN0IG9mIHRoaXMgbW9kdWxlLlxuLy9cbi8vIFNpbWlsYXJseSwgYGlzYXJyYXlgIGNhbiBiZSBhbGlhc2VkIHRvIGBBcnJheS5pc0FycmF5YCBpZlxuLy8gYXZhaWxhYmxlIGluIGFsbCB0YXJnZXQgZW52aXJvbm1lbnRzLlxuXG52YXIgaXNBcmd1bWVudHMgPSByZXF1aXJlKCdpcy1hcmd1bWVudHMnKTtcblxuaWYgKHJlcXVpcmUoJ2hhcy1zeW1ib2xzJykoKSB8fCByZXF1aXJlKCdoYXMtc3ltYm9scy9zaGFtcycpKCkpIHtcblx0dmFyICRpdGVyYXRvciA9IFN5bWJvbC5pdGVyYXRvcjtcblx0Ly8gU3ltYm9sIGlzIGF2YWlsYWJsZSBuYXRpdmVseSBvciBzaGFtbWVkXG5cdC8vIG5hdGl2ZWx5OlxuXHQvLyAgLSBDaHJvbWUgPj0gMzhcblx0Ly8gIC0gRWRnZSAxMi0xND8sIEVkZ2UgPj0gMTUgZm9yIHN1cmVcblx0Ly8gIC0gRkYgPj0gMzZcblx0Ly8gIC0gU2FmYXJpID49IDlcblx0Ly8gIC0gbm9kZSA+PSAwLjEyXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0SXRlcmF0b3IoaXRlcmFibGUpIHtcblx0XHQvLyBhbHRlcm5hdGl2ZWx5LCBgaXRlcmFibGVbJGl0ZXJhdG9yXT8uKClgXG5cdFx0aWYgKGl0ZXJhYmxlICE9IG51bGwgJiYgdHlwZW9mIGl0ZXJhYmxlWyRpdGVyYXRvcl0gIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRyZXR1cm4gaXRlcmFibGVbJGl0ZXJhdG9yXSgpO1xuXHRcdH1cblx0XHRpZiAoaXNBcmd1bWVudHMoaXRlcmFibGUpKSB7XG5cdFx0XHQvLyBhcmd1bWVudHMgb2JqZWN0cyBsYWNrIFN5bWJvbC5pdGVyYXRvclxuXHRcdFx0Ly8gLSBub2RlIDAuMTJcblx0XHRcdHJldHVybiBBcnJheS5wcm90b3R5cGVbJGl0ZXJhdG9yXS5jYWxsKGl0ZXJhYmxlKTtcblx0XHR9XG5cdH07XG59IGVsc2Uge1xuXHQvLyBTeW1ib2wgaXMgbm90IGF2YWlsYWJsZSwgbmF0aXZlIG9yIHNoYW1tZWRcblx0dmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG5cdHZhciBpc1N0cmluZyA9IHJlcXVpcmUoJ2lzLXN0cmluZycpO1xuXHR2YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvR2V0SW50cmluc2ljJyk7XG5cdHZhciAkTWFwID0gR2V0SW50cmluc2ljKCclTWFwJScsIHRydWUpO1xuXHR2YXIgJFNldCA9IEdldEludHJpbnNpYygnJVNldCUnLCB0cnVlKTtcblx0dmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L2hlbHBlcnMvY2FsbEJvdW5kJyk7XG5cdHZhciAkYXJyYXlQdXNoID0gY2FsbEJvdW5kKCdBcnJheS5wcm90b3R5cGUucHVzaCcpO1xuXHR2YXIgJGNoYXJDb2RlQXQgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuY2hhckNvZGVBdCcpO1xuXHR2YXIgJHN0cmluZ1NsaWNlID0gY2FsbEJvdW5kKCdTdHJpbmcucHJvdG90eXBlLnNsaWNlJyk7XG5cblx0dmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IGZ1bmN0aW9uIGFkdmFuY2VTdHJpbmdJbmRleChTLCBpbmRleCkge1xuXHRcdHZhciBsZW5ndGggPSBTLmxlbmd0aDtcblx0XHRpZiAoKGluZGV4ICsgMSkgPj0gbGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXggKyAxO1xuXHRcdH1cblxuXHRcdHZhciBmaXJzdCA9ICRjaGFyQ29kZUF0KFMsIGluZGV4KTtcblx0XHRpZiAoZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYpIHtcblx0XHRcdHJldHVybiBpbmRleCArIDE7XG5cdFx0fVxuXG5cdFx0dmFyIHNlY29uZCA9ICRjaGFyQ29kZUF0KFMsIGluZGV4ICsgMSk7XG5cdFx0aWYgKHNlY29uZCA8IDB4REMwMCB8fCBzZWNvbmQgPiAweERGRkYpIHtcblx0XHRcdHJldHVybiBpbmRleCArIDE7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGluZGV4ICsgMjtcblx0fTtcblxuXHR2YXIgZ2V0QXJyYXlJdGVyYXRvciA9IGZ1bmN0aW9uIGdldEFycmF5SXRlcmF0b3IoYXJyYXlsaWtlKSB7XG5cdFx0dmFyIGkgPSAwO1xuXHRcdHJldHVybiB7XG5cdFx0XHRuZXh0OiBmdW5jdGlvbiBuZXh0KCkge1xuXHRcdFx0XHR2YXIgZG9uZSA9IGkgPj0gYXJyYXlsaWtlLmxlbmd0aDtcblx0XHRcdFx0dmFyIHZhbHVlO1xuXHRcdFx0XHRpZiAoIWRvbmUpIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGFycmF5bGlrZVtpXTtcblx0XHRcdFx0XHRpICs9IDE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRkb25lOiBkb25lLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH07XG5cdH07XG5cblx0dmFyIGdldE5vbkNvbGxlY3Rpb25JdGVyYXRvciA9IGZ1bmN0aW9uIGdldE5vbkNvbGxlY3Rpb25JdGVyYXRvcihpdGVyYWJsZSkge1xuXHRcdGlmIChpc0FycmF5KGl0ZXJhYmxlKSB8fCBpc0FyZ3VtZW50cyhpdGVyYWJsZSkpIHtcblx0XHRcdHJldHVybiBnZXRBcnJheUl0ZXJhdG9yKGl0ZXJhYmxlKTtcblx0XHR9XG5cdFx0aWYgKGlzU3RyaW5nKGl0ZXJhYmxlKSkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0bmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcblx0XHRcdFx0XHR2YXIgbmV4dEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KGl0ZXJhYmxlLCBpKTtcblx0XHRcdFx0XHR2YXIgdmFsdWUgPSAkc3RyaW5nU2xpY2UoaXRlcmFibGUsIGksIG5leHRJbmRleCk7XG5cdFx0XHRcdFx0aSA9IG5leHRJbmRleDtcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0ZG9uZTogbmV4dEluZGV4ID4gaXRlcmFibGUubGVuZ3RoLFxuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdH07XG5cblx0aWYgKCEkTWFwICYmICEkU2V0KSB7XG5cdFx0Ly8gdGhlIG9ubHkgbGFuZ3VhZ2UgaXRlcmFibGVzIGFyZSBBcnJheSwgU3RyaW5nLCBhcmd1bWVudHNcblx0XHQvLyAtIFNhZmFyaSA8PSA2LjBcblx0XHQvLyAtIENocm9tZSA8IDM4XG5cdFx0Ly8gLSBub2RlIDwgMC4xMlxuXHRcdC8vIC0gRkYgPCAxM1xuXHRcdC8vIC0gSUUgPCAxMVxuXHRcdC8vIC0gRWRnZSA8IDExXG5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdldE5vbkNvbGxlY3Rpb25JdGVyYXRvcjtcblx0fSBlbHNlIHtcblx0XHQvLyBlaXRoZXIgTWFwIG9yIFNldCBhcmUgYXZhaWxhYmxlLCBidXQgU3ltYm9sIGlzIG5vdFxuXHRcdC8vIC0gZXM2LXNoaW0gb24gYW4gRVM1IGJyb3dzZXJcblx0XHQvLyAtIFNhZmFyaSA2LjIgKG1heWJlIDYuMT8pXG5cdFx0Ly8gLSBGRiB2WzEzLCAzNilcblx0XHQvLyAtIElFIDExXG5cdFx0Ly8gLSBFZGdlIDExXG5cdFx0Ly8gLSBTYWZhcmkgdls2LCA5KVxuXG5cdFx0dmFyIGlzTWFwID0gcmVxdWlyZSgnaXMtbWFwJyk7XG5cdFx0dmFyIGlzU2V0ID0gcmVxdWlyZSgnaXMtc2V0Jyk7XG5cblx0XHQvLyBGaXJlZm94ID49IDI3LCBJRSAxMSwgU2FmYXJpIDYuMiAtIDksIEVkZ2UgMTEsIGVzNi1zaGltIGluIG9sZGVyIGVudnMsIGFsbCBoYXZlIGZvckVhY2hcblx0XHR2YXIgJG1hcEZvckVhY2ggPSBjYWxsQm91bmQoJ01hcC5wcm90b3R5cGUuZm9yRWFjaCcsIHRydWUpO1xuXHRcdHZhciAkc2V0Rm9yRWFjaCA9IGNhbGxCb3VuZCgnU2V0LnByb3RvdHlwZS5mb3JFYWNoJywgdHJ1ZSk7XG5cdFx0aWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJyB8fCAhcHJvY2Vzcy52ZXJzaW9ucyB8fCAhcHJvY2Vzcy52ZXJzaW9ucy5ub2RlKSB7IC8vIFwiaWYgaXMgbm90IG5vZGVcIlxuXG5cdFx0XHQvLyBGaXJlZm94IDE3IC0gMjYgaGFzIGAuaXRlcmF0b3IoKWAsIHdob3NlIGl0ZXJhdG9yIGAubmV4dCgpYCBlaXRoZXJcblx0XHRcdC8vIHJldHVybnMgYSB2YWx1ZSwgb3IgdGhyb3dzIGEgU3RvcEl0ZXJhdGlvbiBvYmplY3QuIFRoZXNlIGJyb3dzZXJzXG5cdFx0XHQvLyBkbyBub3QgaGF2ZSBhbnkgb3RoZXIgbWVjaGFuaXNtIGZvciBpdGVyYXRpb24uXG5cdFx0XHR2YXIgJG1hcEl0ZXJhdG9yID0gY2FsbEJvdW5kKCdNYXAucHJvdG90eXBlLml0ZXJhdG9yJywgdHJ1ZSk7XG5cdFx0XHR2YXIgJHNldEl0ZXJhdG9yID0gY2FsbEJvdW5kKCdTZXQucHJvdG90eXBlLml0ZXJhdG9yJywgdHJ1ZSk7XG5cdFx0XHR2YXIgZ2V0U3RvcEl0ZXJhdGlvbkl0ZXJhdG9yID0gZnVuY3Rpb24gKGl0ZXJhdG9yKSB7XG5cdFx0XHRcdHZhciBkb25lID0gZmFsc2U7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0ZG9uZTogZG9uZSxcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZTogZG9uZSA/IHVuZGVmaW5lZCA6IGl0ZXJhdG9yLm5leHQoKVxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdFx0XHRkb25lID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRkb25lOiB0cnVlLFxuXHRcdFx0XHRcdFx0XHRcdHZhbHVlOiB1bmRlZmluZWRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXHRcdH1cblx0XHQvLyBGaXJlZm94IDI3LTM1LCBhbmQgc29tZSBvbGRlciBlczYtc2hpbSB2ZXJzaW9ucywgdXNlIGEgc3RyaW5nIFwiQEBpdGVyYXRvclwiIHByb3BlcnR5XG5cdFx0Ly8gdGhpcyByZXR1cm5zIGEgcHJvcGVyIGl0ZXJhdG9yIG9iamVjdCwgc28gd2Ugc2hvdWxkIHVzZSBpdCBpbnN0ZWFkIG9mIGZvckVhY2guXG5cdFx0Ly8gbmV3ZXIgZXM2LXNoaW0gdmVyc2lvbnMgdXNlIGEgc3RyaW5nIFwiX2VzNi1zaGltIGl0ZXJhdG9yX1wiIHByb3BlcnR5LlxuXHRcdHZhciAkbWFwQXRBdEl0ZXJhdG9yID0gY2FsbEJvdW5kKCdNYXAucHJvdG90eXBlLkBAaXRlcmF0b3InLCB0cnVlKSB8fCBjYWxsQm91bmQoJ01hcC5wcm90b3R5cGUuX2VzNi1zaGltIGl0ZXJhdG9yXycsIHRydWUpO1xuXHRcdHZhciAkc2V0QXRBdEl0ZXJhdG9yID0gY2FsbEJvdW5kKCdTZXQucHJvdG90eXBlLkBAaXRlcmF0b3InLCB0cnVlKSB8fCBjYWxsQm91bmQoJ1NldC5wcm90b3R5cGUuX2VzNi1zaGltIGl0ZXJhdG9yXycsIHRydWUpO1xuXG5cdFx0dmFyIGdldENvbGxlY3Rpb25JdGVyYXRvciA9IGZ1bmN0aW9uIGdldENvbGxlY3Rpb25JdGVyYXRvcihpdGVyYWJsZSkge1xuXHRcdFx0aWYgKGlzTWFwKGl0ZXJhYmxlKSkge1xuXHRcdFx0XHRpZiAoJG1hcEl0ZXJhdG9yKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGdldFN0b3BJdGVyYXRpb25JdGVyYXRvcigkbWFwSXRlcmF0b3IoaXRlcmFibGUpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoJG1hcEF0QXRJdGVyYXRvcikge1xuXHRcdFx0XHRcdHJldHVybiAkbWFwQXRBdEl0ZXJhdG9yKGl0ZXJhYmxlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoJG1hcEZvckVhY2gpIHtcblx0XHRcdFx0XHR2YXIgZW50cmllcyA9IFtdO1xuXHRcdFx0XHRcdCRtYXBGb3JFYWNoKGl0ZXJhYmxlLCBmdW5jdGlvbiAodiwgaykge1xuXHRcdFx0XHRcdFx0JGFycmF5UHVzaChlbnRyaWVzLCBbaywgdl0pO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHJldHVybiBnZXRBcnJheUl0ZXJhdG9yKGVudHJpZXMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoaXNTZXQoaXRlcmFibGUpKSB7XG5cdFx0XHRcdGlmICgkc2V0SXRlcmF0b3IpIHtcblx0XHRcdFx0XHRyZXR1cm4gZ2V0U3RvcEl0ZXJhdGlvbkl0ZXJhdG9yKCRzZXRJdGVyYXRvcihpdGVyYWJsZSkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICgkc2V0QXRBdEl0ZXJhdG9yKSB7XG5cdFx0XHRcdFx0cmV0dXJuICRzZXRBdEF0SXRlcmF0b3IoaXRlcmFibGUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICgkc2V0Rm9yRWFjaCkge1xuXHRcdFx0XHRcdHZhciB2YWx1ZXMgPSBbXTtcblx0XHRcdFx0XHQkc2V0Rm9yRWFjaChpdGVyYWJsZSwgZnVuY3Rpb24gKHYpIHtcblx0XHRcdFx0XHRcdCRhcnJheVB1c2godmFsdWVzLCB2KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRyZXR1cm4gZ2V0QXJyYXlJdGVyYXRvcih2YWx1ZXMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0SXRlcmF0b3IoaXRlcmFibGUpIHtcblx0XHRcdHJldHVybiBnZXRDb2xsZWN0aW9uSXRlcmF0b3IoaXRlcmFibGUpIHx8IGdldE5vbkNvbGxlY3Rpb25JdGVyYXRvcihpdGVyYWJsZSk7XG5cdFx0fTtcblx0fVxufVxuIiwiKGZ1bmN0aW9uKCkge1xuXHR2YXIgdGVzdE9iamVjdCA9IHt9O1xuXG5cdGlmICghKE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCB0ZXN0T2JqZWN0Ll9fcHJvdG9fXykpIHtcblx0XHR2YXIgbmF0aXZlR2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cblx0XHRPYmplY3QuZ2V0UHJvdG90eXBlT2YgPSBmdW5jdGlvbihvYmplY3QpIHtcblx0XHRcdGlmIChvYmplY3QuX19wcm90b19fKSB7XG5cdFx0XHRcdHJldHVybiBvYmplY3QuX19wcm90b19fO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIG5hdGl2ZUdldFByb3RvdHlwZU9mLmNhbGwoT2JqZWN0LCBvYmplY3QpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSkoKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIEludm9rZSA9IHJlcXVpcmUoJy4vSW52b2tlJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaXRlcmF0b3JuZXh0XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSXRlcmF0b3JOZXh0KGl0ZXJhdG9yLCB2YWx1ZSkge1xuXHR2YXIgcmVzdWx0ID0gSW52b2tlKGl0ZXJhdG9yLCAnbmV4dCcsIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gW10gOiBbdmFsdWVdKTtcblx0aWYgKFR5cGUocmVzdWx0KSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignaXRlcmF0b3IgbmV4dCBtdXN0IHJldHVybiBhbiBvYmplY3QnKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIElzUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuL0lzUHJvcGVydHlLZXknKTtcbnZhciBUb09iamVjdCA9IHJlcXVpcmUoJy4vVG9PYmplY3QnKTtcblxuLyoqXG4gKiA3LjMuMiBHZXRWIChWLCBQKVxuICogMS4gQXNzZXJ0OiBJc1Byb3BlcnR5S2V5KFApIGlzIHRydWUuXG4gKiAyLiBMZXQgTyBiZSBUb09iamVjdChWKS5cbiAqIDMuIFJldHVybklmQWJydXB0KE8pLlxuICogNC4gUmV0dXJuIE8uW1tHZXRdXShQLCBWKS5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEdldFYoViwgUCkge1xuXHQvLyA3LjMuMi4xXG5cdGlmICghSXNQcm9wZXJ0eUtleShQKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBJc1Byb3BlcnR5S2V5KFApIGlzIG5vdCB0cnVlJyk7XG5cdH1cblxuXHQvLyA3LjMuMi4yLTNcblx0dmFyIE8gPSBUb09iamVjdChWKTtcblxuXHQvLyA3LjMuMi40XG5cdHJldHVybiBPW1BdO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTkuM1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvTnVtYmVyKHZhbHVlKSB7XG5cdHJldHVybiArdmFsdWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8taW1wbGljaXQtY29lcmNpb25cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0aWYgKFN0cmluZy5wcm90b3R5cGUubWF0Y2hBbGwpIHtcblx0XHR0cnkge1xuXHRcdFx0JycubWF0Y2hBbGwoUmVnRXhwLnByb3RvdHlwZSk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0cmV0dXJuIFN0cmluZy5wcm90b3R5cGUubWF0Y2hBbGw7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBpbXBsZW1lbnRhdGlvbjtcbn07XG4iLCIvKiBnbG9iYWxzIHJlcXVlc3RJZGxlQ2FsbGJhY2ssIGNhbmNlbElkbGVDYWxsYmFjayAqL1xudmFyIGZhbGxiYWNrID0gZnVuY3Rpb24gKGNiKSB7XG4gIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhcnQgPSBEYXRlLm5vdygpXG4gICAgY2Ioe1xuICAgICAgZGlkVGltZW91dDogZmFsc2UsXG4gICAgICB0aW1lUmVtYWluaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heCgwLCA1MCAtIChEYXRlLm5vdygpIC0gc3RhcnQpKVxuICAgICAgfVxuICAgIH0pXG4gIH0sIDEpXG59XG5cbnZhciBpc1N1cHBvcnRlZCA9ICh0eXBlb2YgcmVxdWVzdElkbGVDYWxsYmFjayAhPT0gJ3VuZGVmaW5lZCcpXG5cbm1vZHVsZS5leHBvcnRzID0gaXNTdXBwb3J0ZWQgPyByZXF1ZXN0SWRsZUNhbGxiYWNrIDogZmFsbGJhY2tcbm1vZHVsZS5leHBvcnRzLmNhbmNlbElkbGVDYWxsYmFjayA9IGlzU3VwcG9ydGVkID8gY2FuY2VsSWRsZUNhbGxiYWNrIDogY2xlYXJUaW1lb3V0XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBUb0ludGVnZXIgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE4L1RvSW50ZWdlcicpO1xudmFyIFRvTGVuZ3RoID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOC9Ub0xlbmd0aCcpO1xudmFyIFRvT2JqZWN0ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOC9Ub09iamVjdCcpO1xudmFyIFNhbWVWYWx1ZVplcm8gPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE4L1NhbWVWYWx1ZVplcm8nKTtcbnZhciAkaXNOYU4gPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9oZWxwZXJzL2lzTmFOJyk7XG52YXIgJGlzRmluaXRlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvaGVscGVycy9pc0Zpbml0ZScpO1xudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L0dldEludHJpbnNpYycpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L2hlbHBlcnMvY2FsbEJvdW5kJyk7XG52YXIgaXNTdHJpbmcgPSByZXF1aXJlKCdpcy1zdHJpbmcnKTtcblxudmFyICRjaGFyQXQgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuY2hhckF0Jyk7XG52YXIgJGluZGV4T2YgPSBHZXRJbnRyaW5zaWMoJyVBcnJheS5wcm90b3R5cGUuaW5kZXhPZiUnKTsgLy8gVE9ETzogdXNlIGNhbGxCaW5kLmFwcGx5IHdpdGhvdXQgYnJlYWtpbmcgSUUgOFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaEVsZW1lbnQpIHtcblx0dmFyIGZyb21JbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gVG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkgOiAwO1xuXHRpZiAoJGluZGV4T2YgJiYgISRpc05hTihzZWFyY2hFbGVtZW50KSAmJiAkaXNGaW5pdGUoZnJvbUluZGV4KSAmJiB0eXBlb2Ygc2VhcmNoRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gJGluZGV4T2YuYXBwbHkodGhpcywgYXJndW1lbnRzKSA+IC0xO1xuXHR9XG5cblx0dmFyIE8gPSBUb09iamVjdCh0aGlzKTtcblx0dmFyIGxlbmd0aCA9IFRvTGVuZ3RoKE8ubGVuZ3RoKTtcblx0aWYgKGxlbmd0aCA9PT0gMCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHR2YXIgayA9IGZyb21JbmRleCA+PSAwID8gZnJvbUluZGV4IDogTWF0aC5tYXgoMCwgbGVuZ3RoICsgZnJvbUluZGV4KTtcblx0d2hpbGUgKGsgPCBsZW5ndGgpIHtcblx0XHRpZiAoU2FtZVZhbHVlWmVybyhzZWFyY2hFbGVtZW50LCBpc1N0cmluZyhPKSA/ICRjaGFyQXQoTywgaykgOiBPW2tdKSkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdGsgKz0gMTtcblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltRmxhdCgpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKFxuXHRcdEFycmF5LnByb3RvdHlwZSxcblx0XHR7IGZsYXQ6IHBvbHlmaWxsIH0sXG5cdFx0eyBmbGF0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBBcnJheS5wcm90b3R5cGUuZmxhdCAhPT0gcG9seWZpbGw7IH0gfVxuXHQpO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJE1hcCA9IHR5cGVvZiBNYXAgPT09ICdmdW5jdGlvbicgJiYgTWFwLnByb3RvdHlwZSA/IE1hcCA6IG51bGw7XG52YXIgJFNldCA9IHR5cGVvZiBTZXQgPT09ICdmdW5jdGlvbicgJiYgU2V0LnByb3RvdHlwZSA/IFNldCA6IG51bGw7XG5cbnZhciBleHBvcnRlZDtcblxuaWYgKCEkU2V0KSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuXHRleHBvcnRlZCA9IGZ1bmN0aW9uIGlzU2V0KHgpIHtcblx0XHQvLyBgU2V0YCBpcyBub3QgcHJlc2VudCBpbiB0aGlzIGVudmlyb25tZW50LlxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxudmFyICRtYXBIYXMgPSAkTWFwID8gTWFwLnByb3RvdHlwZS5oYXMgOiBudWxsO1xudmFyICRzZXRIYXMgPSAkU2V0ID8gU2V0LnByb3RvdHlwZS5oYXMgOiBudWxsO1xuaWYgKCFleHBvcnRlZCAmJiAhJHNldEhhcykge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcblx0ZXhwb3J0ZWQgPSBmdW5jdGlvbiBpc1NldCh4KSB7XG5cdFx0Ly8gYFNldGAgZG9lcyBub3QgaGF2ZSBhIGBoYXNgIG1ldGhvZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlZCB8fCBmdW5jdGlvbiBpc1NldCh4KSB7XG5cdGlmICgheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0dHJ5IHtcblx0XHQkc2V0SGFzLmNhbGwoeCk7XG5cdFx0aWYgKCRtYXBIYXMpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdCRtYXBIYXMuY2FsbCh4KTtcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB4IGluc3RhbmNlb2YgJFNldDsgLy8gY29yZS1qcyB3b3JrYXJvdW5kLCBwcmUtdjIuNS4wXG5cdH0gY2F0Y2ggKGUpIHt9XG5cdHJldHVybiBmYWxzZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVxdWlyZVByb21pc2UoKSB7XG5cdGlmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2BQcm9taXNlLnByb3RvdHlwZS5maW5hbGx5YCByZXF1aXJlcyBhIGdsb2JhbCBgUHJvbWlzZWAgYmUgYXZhaWxhYmxlLicpO1xuXHR9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsICE9PSAnb2JqZWN0JyB8fCAhZ2xvYmFsIHx8IGdsb2JhbC5NYXRoICE9PSBNYXRoIHx8IGdsb2JhbC5BcnJheSAhPT0gQXJyYXkpIHtcblx0XHRyZXR1cm4gaW1wbGVtZW50YXRpb247XG5cdH1cblx0cmV0dXJuIGdsb2JhbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYWxsID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9DYWxsJyk7XG52YXIgR2V0ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9HZXQnKTtcbnZhciBHZXRNZXRob2QgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0dldE1ldGhvZCcpO1xudmFyIElzUmVnRXhwID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Jc1JlZ0V4cCcpO1xudmFyIFRvU3RyaW5nID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Ub1N0cmluZycpO1xudmFyIFJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1JlcXVpcmVPYmplY3RDb2VyY2libGUnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9oZWxwZXJzL2NhbGxCb3VuZCcpO1xudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scycpKCk7XG52YXIgZmxhZ3NHZXR0ZXIgPSByZXF1aXJlKCdyZWdleHAucHJvdG90eXBlLmZsYWdzJyk7XG5cbnZhciAkaW5kZXhPZiA9IGNhbGxCb3VuZCgnU3RyaW5nLnByb3RvdHlwZS5pbmRleE9mJyk7XG5cbnZhciByZWdleHBNYXRjaEFsbFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbC1yZWdleHAtbWF0Y2hhbGwnKTtcblxudmFyIGdldE1hdGNoZXIgPSBmdW5jdGlvbiBnZXRNYXRjaGVyKHJlZ2V4cCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG5cdHZhciBtYXRjaGVyUG9seWZpbGwgPSByZWdleHBNYXRjaEFsbFBvbHlmaWxsKCk7XG5cdGlmIChoYXNTeW1ib2xzICYmIHR5cGVvZiBTeW1ib2wubWF0Y2hBbGwgPT09ICdzeW1ib2wnKSB7XG5cdFx0dmFyIG1hdGNoZXIgPSBHZXRNZXRob2QocmVnZXhwLCBTeW1ib2wubWF0Y2hBbGwpO1xuXHRcdGlmIChtYXRjaGVyID09PSBSZWdFeHAucHJvdG90eXBlW1N5bWJvbC5tYXRjaEFsbF0gJiYgbWF0Y2hlciAhPT0gbWF0Y2hlclBvbHlmaWxsKSB7XG5cdFx0XHRyZXR1cm4gbWF0Y2hlclBvbHlmaWxsO1xuXHRcdH1cblx0XHRyZXR1cm4gbWF0Y2hlcjtcblx0fVxuXHQvLyBmYWxsYmFjayBmb3IgcHJlLVN5bWJvbC5tYXRjaEFsbCBlbnZpcm9ubWVudHNcblx0aWYgKElzUmVnRXhwKHJlZ2V4cCkpIHtcblx0XHRyZXR1cm4gbWF0Y2hlclBvbHlmaWxsO1xuXHR9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1hdGNoQWxsKHJlZ2V4cCkge1xuXHR2YXIgTyA9IFJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG5cblx0aWYgKHR5cGVvZiByZWdleHAgIT09ICd1bmRlZmluZWQnICYmIHJlZ2V4cCAhPT0gbnVsbCkge1xuXHRcdHZhciBpc1JlZ0V4cCA9IElzUmVnRXhwKHJlZ2V4cCk7XG5cdFx0aWYgKGlzUmVnRXhwKSB7XG5cdFx0XHQvLyB3b3JrYXJvdW5kIGZvciBvbGRlciBlbmdpbmVzIHRoYXQgbGFjayBSZWdFeHAucHJvdG90eXBlLmZsYWdzXG5cdFx0XHR2YXIgZmxhZ3MgPSAnZmxhZ3MnIGluIHJlZ2V4cCA/IEdldChyZWdleHAsICdmbGFncycpIDogZmxhZ3NHZXR0ZXIocmVnZXhwKTtcblx0XHRcdFJlcXVpcmVPYmplY3RDb2VyY2libGUoZmxhZ3MpO1xuXHRcdFx0aWYgKCRpbmRleE9mKFRvU3RyaW5nKGZsYWdzKSwgJ2cnKSA8IDApIHtcblx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignbWF0Y2hBbGwgcmVxdWlyZXMgYSBnbG9iYWwgcmVndWxhciBleHByZXNzaW9uJyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIG1hdGNoZXIgPSBnZXRNYXRjaGVyKHJlZ2V4cCk7XG5cdFx0aWYgKHR5cGVvZiBtYXRjaGVyICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0cmV0dXJuIENhbGwobWF0Y2hlciwgcmVnZXhwLCBbT10pO1xuXHRcdH1cblx0fVxuXG5cdHZhciBTID0gVG9TdHJpbmcoTyk7XG5cdC8vIHZhciByeCA9IFJlZ0V4cENyZWF0ZShyZWdleHAsICdnJyk7XG5cdHZhciByeCA9IG5ldyBSZWdFeHAocmVnZXhwLCAnZycpO1xuXHRyZXR1cm4gQ2FsbChnZXRNYXRjaGVyKHJ4KSwgcngsIFtTXSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRVM1VG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vNS9Ub0ludGVnZXInKTtcblxudmFyIFRvTnVtYmVyID0gcmVxdWlyZSgnLi9Ub051bWJlcicpO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXRvaW50ZWdlclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvSW50ZWdlcih2YWx1ZSkge1xuXHR2YXIgbnVtYmVyID0gVG9OdW1iZXIodmFsdWUpO1xuXHRyZXR1cm4gRVM1VG9JbnRlZ2VyKG51bWJlcik7XG59O1xuIiwidmFyIG5vdyA9IHJlcXVpcmUoJ3BlcmZvcm1hbmNlLW5vdycpXG4gICwgcm9vdCA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogd2luZG93XG4gICwgdmVuZG9ycyA9IFsnbW96JywgJ3dlYmtpdCddXG4gICwgc3VmZml4ID0gJ0FuaW1hdGlvbkZyYW1lJ1xuICAsIHJhZiA9IHJvb3RbJ3JlcXVlc3QnICsgc3VmZml4XVxuICAsIGNhZiA9IHJvb3RbJ2NhbmNlbCcgKyBzdWZmaXhdIHx8IHJvb3RbJ2NhbmNlbFJlcXVlc3QnICsgc3VmZml4XVxuXG5mb3IodmFyIGkgPSAwOyAhcmFmICYmIGkgPCB2ZW5kb3JzLmxlbmd0aDsgaSsrKSB7XG4gIHJhZiA9IHJvb3RbdmVuZG9yc1tpXSArICdSZXF1ZXN0JyArIHN1ZmZpeF1cbiAgY2FmID0gcm9vdFt2ZW5kb3JzW2ldICsgJ0NhbmNlbCcgKyBzdWZmaXhdXG4gICAgICB8fCByb290W3ZlbmRvcnNbaV0gKyAnQ2FuY2VsUmVxdWVzdCcgKyBzdWZmaXhdXG59XG5cbi8vIFNvbWUgdmVyc2lvbnMgb2YgRkYgaGF2ZSByQUYgYnV0IG5vdCBjQUZcbmlmKCFyYWYgfHwgIWNhZikge1xuICB2YXIgbGFzdCA9IDBcbiAgICAsIGlkID0gMFxuICAgICwgcXVldWUgPSBbXVxuICAgICwgZnJhbWVEdXJhdGlvbiA9IDEwMDAgLyA2MFxuXG4gIHJhZiA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgaWYocXVldWUubGVuZ3RoID09PSAwKSB7XG4gICAgICB2YXIgX25vdyA9IG5vdygpXG4gICAgICAgICwgbmV4dCA9IE1hdGgubWF4KDAsIGZyYW1lRHVyYXRpb24gLSAoX25vdyAtIGxhc3QpKVxuICAgICAgbGFzdCA9IG5leHQgKyBfbm93XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY3AgPSBxdWV1ZS5zbGljZSgwKVxuICAgICAgICAvLyBDbGVhciBxdWV1ZSBoZXJlIHRvIHByZXZlbnRcbiAgICAgICAgLy8gY2FsbGJhY2tzIGZyb20gYXBwZW5kaW5nIGxpc3RlbmVyc1xuICAgICAgICAvLyB0byB0aGUgY3VycmVudCBmcmFtZSdzIHF1ZXVlXG4gICAgICAgIHF1ZXVlLmxlbmd0aCA9IDBcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGNwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYoIWNwW2ldLmNhbmNlbGxlZCkge1xuICAgICAgICAgICAgdHJ5e1xuICAgICAgICAgICAgICBjcFtpXS5jYWxsYmFjayhsYXN0KVxuICAgICAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRocm93IGUgfSwgMClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIE1hdGgucm91bmQobmV4dCkpXG4gICAgfVxuICAgIHF1ZXVlLnB1c2goe1xuICAgICAgaGFuZGxlOiArK2lkLFxuICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgY2FuY2VsbGVkOiBmYWxzZVxuICAgIH0pXG4gICAgcmV0dXJuIGlkXG4gIH1cblxuICBjYWYgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmKHF1ZXVlW2ldLmhhbmRsZSA9PT0gaGFuZGxlKSB7XG4gICAgICAgIHF1ZXVlW2ldLmNhbmNlbGxlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbikge1xuICAvLyBXcmFwIGluIGEgbmV3IGZ1bmN0aW9uIHRvIHByZXZlbnRcbiAgLy8gYGNhbmNlbGAgcG90ZW50aWFsbHkgYmVpbmcgYXNzaWduZWRcbiAgLy8gdG8gdGhlIG5hdGl2ZSByQUYgZnVuY3Rpb25cbiAgcmV0dXJuIHJhZi5jYWxsKHJvb3QsIGZuKVxufVxubW9kdWxlLmV4cG9ydHMuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gIGNhZi5hcHBseShyb290LCBhcmd1bWVudHMpXG59XG5tb2R1bGUuZXhwb3J0cy5wb2x5ZmlsbCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAoIW9iamVjdCkge1xuICAgIG9iamVjdCA9IHJvb3Q7XG4gIH1cbiAgb2JqZWN0LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHJhZlxuICBvYmplY3QuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBjYWZcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcbnZhciAkU3ludGF4RXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVTeW50YXhFcnJvciUnKTtcblxudmFyIGhhcyA9IHJlcXVpcmUoJ2hhcycpO1xuXG52YXIgcHJlZGljYXRlcyA9IHtcblx0Ly8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXByb3BlcnR5LWRlc2NyaXB0b3Itc3BlY2lmaWNhdGlvbi10eXBlXG5cdCdQcm9wZXJ0eSBEZXNjcmlwdG9yJzogZnVuY3Rpb24gaXNQcm9wZXJ0eURlc2NyaXB0b3IoVHlwZSwgRGVzYykge1xuXHRcdGlmIChUeXBlKERlc2MpICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHR2YXIgYWxsb3dlZCA9IHtcblx0XHRcdCdbW0NvbmZpZ3VyYWJsZV1dJzogdHJ1ZSxcblx0XHRcdCdbW0VudW1lcmFibGVdXSc6IHRydWUsXG5cdFx0XHQnW1tHZXRdXSc6IHRydWUsXG5cdFx0XHQnW1tTZXRdXSc6IHRydWUsXG5cdFx0XHQnW1tWYWx1ZV1dJzogdHJ1ZSxcblx0XHRcdCdbW1dyaXRhYmxlXV0nOiB0cnVlXG5cdFx0fTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBEZXNjKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblx0XHRcdGlmIChoYXMoRGVzYywga2V5KSAmJiAhYWxsb3dlZFtrZXldKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2YXIgaXNEYXRhID0gaGFzKERlc2MsICdbW1ZhbHVlXV0nKTtcblx0XHR2YXIgSXNBY2Nlc3NvciA9IGhhcyhEZXNjLCAnW1tHZXRdXScpIHx8IGhhcyhEZXNjLCAnW1tTZXRdXScpO1xuXHRcdGlmIChpc0RhdGEgJiYgSXNBY2Nlc3Nvcikge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1Byb3BlcnR5IERlc2NyaXB0b3JzIG1heSBub3QgYmUgYm90aCBhY2Nlc3NvciBhbmQgZGF0YSBkZXNjcmlwdG9ycycpO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBhc3NlcnRSZWNvcmQoVHlwZSwgcmVjb3JkVHlwZSwgYXJndW1lbnROYW1lLCB2YWx1ZSkge1xuXHR2YXIgcHJlZGljYXRlID0gcHJlZGljYXRlc1tyZWNvcmRUeXBlXTtcblx0aWYgKHR5cGVvZiBwcmVkaWNhdGUgIT09ICdmdW5jdGlvbicpIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCd1bmtub3duIHJlY29yZCB0eXBlOiAnICsgcmVjb3JkVHlwZSk7XG5cdH1cblx0aWYgKCFwcmVkaWNhdGUoVHlwZSwgdmFsdWUpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoYXJndW1lbnROYW1lICsgJyBtdXN0IGJlIGEgJyArIHJlY29yZFR5cGUpO1xuXHR9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2dldEl0ZXJhdG9yTWV0aG9kJyk7XG52YXIgQWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9BZHZhbmNlU3RyaW5nSW5kZXgnKTtcbnZhciBDYWxsID0gcmVxdWlyZSgnLi9DYWxsJyk7XG52YXIgR2V0TWV0aG9kID0gcmVxdWlyZSgnLi9HZXRNZXRob2QnKTtcbnZhciBJc0FycmF5ID0gcmVxdWlyZSgnLi9Jc0FycmF5Jyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtZ2V0aXRlcmF0b3JcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBHZXRJdGVyYXRvcihvYmosIG1ldGhvZCkge1xuXHR2YXIgYWN0dWFsTWV0aG9kID0gbWV0aG9kO1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcblx0XHRhY3R1YWxNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChcblx0XHRcdHtcblx0XHRcdFx0QWR2YW5jZVN0cmluZ0luZGV4OiBBZHZhbmNlU3RyaW5nSW5kZXgsXG5cdFx0XHRcdEdldE1ldGhvZDogR2V0TWV0aG9kLFxuXHRcdFx0XHRJc0FycmF5OiBJc0FycmF5LFxuXHRcdFx0XHRUeXBlOiBUeXBlXG5cdFx0XHR9LFxuXHRcdFx0b2JqXG5cdFx0KTtcblx0fVxuXHR2YXIgaXRlcmF0b3IgPSBDYWxsKGFjdHVhbE1ldGhvZCwgb2JqKTtcblx0aWYgKFR5cGUoaXRlcmF0b3IpICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpdGVyYXRvciBtdXN0IHJldHVybiBhbiBvYmplY3QnKTtcblx0fVxuXG5cdHJldHVybiBpdGVyYXRvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciByZWdleEV4ZWMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NhbGxCb3VuZCcpKCdSZWdFeHAucHJvdG90eXBlLmV4ZWMnKTtcblxudmFyIENhbGwgPSByZXF1aXJlKCcuL0NhbGwnKTtcbnZhciBHZXQgPSByZXF1aXJlKCcuL0dldCcpO1xudmFyIElzQ2FsbGFibGUgPSByZXF1aXJlKCcuL0lzQ2FsbGFibGUnKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1yZWdleHBleGVjXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gUmVnRXhwRXhlYyhSLCBTKSB7XG5cdGlmIChUeXBlKFIpICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgUmAgbXVzdCBiZSBhbiBPYmplY3QnKTtcblx0fVxuXHRpZiAoVHlwZShTKSAhPT0gJ1N0cmluZycpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogYFNgIG11c3QgYmUgYSBTdHJpbmcnKTtcblx0fVxuXHR2YXIgZXhlYyA9IEdldChSLCAnZXhlYycpO1xuXHRpZiAoSXNDYWxsYWJsZShleGVjKSkge1xuXHRcdHZhciByZXN1bHQgPSBDYWxsKGV4ZWMsIFIsIFtTXSk7XG5cdFx0aWYgKHJlc3VsdCA9PT0gbnVsbCB8fCBUeXBlKHJlc3VsdCkgPT09ICdPYmplY3QnKSB7XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignXCJleGVjXCIgbWV0aG9kIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBPYmplY3QnKTtcblx0fVxuXHRyZXR1cm4gcmVnZXhFeGVjKFIsIFMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRpc05hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiAoYSkgeyByZXR1cm4gYSAhPT0gYTsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBOdW1iZXIuaXNGaW5pdGUgfHwgZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHR5cGVvZiB4ID09PSAnbnVtYmVyJyAmJiAhJGlzTmFOKHgpICYmIHggIT09IEluZmluaXR5ICYmIHggIT09IC1JbmZpbml0eTsgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi9zaGltJykoKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRyZXR1cm4gdHlwZW9mIE9iamVjdC52YWx1ZXMgPT09ICdmdW5jdGlvbicgPyBPYmplY3QudmFsdWVzIDogaW1wbGVtZW50YXRpb247XG59O1xuIiwiLyohXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW1cbiAqIEBsaWNlbnNlIGVzNS1zaGltIENvcHlyaWdodCAyMDA5LTIwMjAgYnkgY29udHJpYnV0b3JzLCBNSVQgTGljZW5zZVxuICogc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cblxuLy8gdmltOiB0cz00IHN0cz00IHN3PTQgZXhwYW5kdGFiXG5cbi8vIEFkZCBzZW1pY29sb24gdG8gcHJldmVudCBJSUZFIGZyb20gYmVpbmcgcGFzc2VkIGFzIGFyZ3VtZW50IHRvIGNvbmNhdGVuYXRlZCBjb2RlLlxuO1xuXG4vLyBVTUQgKFVuaXZlcnNhbCBNb2R1bGUgRGVmaW5pdGlvbilcbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vdW1kanMvdW1kL2Jsb2IvbWFzdGVyL3RlbXBsYXRlcy9yZXR1cm5FeHBvcnRzLmpzXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvKiBnbG9iYWwgZGVmaW5lICovXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgICAgIGRlZmluZShmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAvLyBOb2RlLiBEb2VzIG5vdCB3b3JrIHdpdGggc3RyaWN0IENvbW1vbkpTLCBidXRcbiAgICAgICAgLy8gb25seSBDb21tb25KUy1saWtlIGVudmlyb21lbnRzIHRoYXQgc3VwcG9ydCBtb2R1bGUuZXhwb3J0cyxcbiAgICAgICAgLy8gbGlrZSBOb2RlLlxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBCcm93c2VyIGdsb2JhbHMgKHJvb3QgaXMgd2luZG93KVxuICAgICAgICByb290LnJldHVybkV4cG9ydHMgPSBmYWN0b3J5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB9XG59KHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBCcmluZ3MgYW4gZW52aXJvbm1lbnQgYXMgY2xvc2UgdG8gRUNNQVNjcmlwdCA1IGNvbXBsaWFuY2VcbiAgICAgKiBhcyBpcyBwb3NzaWJsZSB3aXRoIHRoZSBmYWNpbGl0aWVzIG9mIGVyc3R3aGlsZSBlbmdpbmVzLlxuICAgICAqXG4gICAgICogQW5ub3RhdGVkIEVTNTogaHR0cDovL2VzNS5naXRodWIuY29tLyAoc3BlY2lmaWMgbGlua3MgYmVsb3cpXG4gICAgICogRVM1IFNwZWM6IGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9wdWJsaWNhdGlvbnMvZmlsZXMvRUNNQS1TVC9FY21hLTI2Mi5wZGZcbiAgICAgKiBSZXF1aXJlZCByZWFkaW5nOiBodHRwOi8vamF2YXNjcmlwdHdlYmxvZy53b3JkcHJlc3MuY29tLzIwMTEvMTIvMDUvZXh0ZW5kaW5nLWphdmFzY3JpcHQtbmF0aXZlcy9cbiAgICAgKi9cblxuICAgIC8vIFNob3J0Y3V0IHRvIGFuIG9mdGVuIGFjY2Vzc2VkIHByb3BlcnRpZXMsIGluIG9yZGVyIHRvIGF2b2lkIG11bHRpcGxlXG4gICAgLy8gZGVyZWZlcmVuY2UgdGhhdCBjb3N0cyB1bml2ZXJzYWxseS4gVGhpcyBhbHNvIGhvbGRzIGEgcmVmZXJlbmNlIHRvIGtub3duLWdvb2RcbiAgICAvLyBmdW5jdGlvbnMuXG4gICAgdmFyICRBcnJheSA9IEFycmF5O1xuICAgIHZhciBBcnJheVByb3RvdHlwZSA9ICRBcnJheS5wcm90b3R5cGU7XG4gICAgdmFyICRPYmplY3QgPSBPYmplY3Q7XG4gICAgdmFyIE9iamVjdFByb3RvdHlwZSA9ICRPYmplY3QucHJvdG90eXBlO1xuICAgIHZhciAkRnVuY3Rpb24gPSBGdW5jdGlvbjtcbiAgICB2YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSAkRnVuY3Rpb24ucHJvdG90eXBlO1xuICAgIHZhciAkU3RyaW5nID0gU3RyaW5nO1xuICAgIHZhciBTdHJpbmdQcm90b3R5cGUgPSAkU3RyaW5nLnByb3RvdHlwZTtcbiAgICB2YXIgJE51bWJlciA9IE51bWJlcjtcbiAgICB2YXIgTnVtYmVyUHJvdG90eXBlID0gJE51bWJlci5wcm90b3R5cGU7XG4gICAgdmFyIGFycmF5X3NsaWNlID0gQXJyYXlQcm90b3R5cGUuc2xpY2U7XG4gICAgdmFyIGFycmF5X3NwbGljZSA9IEFycmF5UHJvdG90eXBlLnNwbGljZTtcbiAgICB2YXIgYXJyYXlfcHVzaCA9IEFycmF5UHJvdG90eXBlLnB1c2g7XG4gICAgdmFyIGFycmF5X3Vuc2hpZnQgPSBBcnJheVByb3RvdHlwZS51bnNoaWZ0O1xuICAgIHZhciBhcnJheV9jb25jYXQgPSBBcnJheVByb3RvdHlwZS5jb25jYXQ7XG4gICAgdmFyIGFycmF5X2pvaW4gPSBBcnJheVByb3RvdHlwZS5qb2luO1xuICAgIHZhciBjYWxsID0gRnVuY3Rpb25Qcm90b3R5cGUuY2FsbDtcbiAgICB2YXIgYXBwbHkgPSBGdW5jdGlvblByb3RvdHlwZS5hcHBseTtcbiAgICB2YXIgbWF4ID0gTWF0aC5tYXg7XG4gICAgdmFyIG1pbiA9IE1hdGgubWluO1xuXG4gICAgLy8gSGF2aW5nIGEgdG9TdHJpbmcgbG9jYWwgdmFyaWFibGUgbmFtZSBicmVha3MgaW4gT3BlcmEgc28gdXNlIHRvX3N0cmluZy5cbiAgICB2YXIgdG9fc3RyaW5nID0gT2JqZWN0UHJvdG90eXBlLnRvU3RyaW5nO1xuXG4gICAgLyogZXNsaW50LWRpc2FibGUgb25lLXZhci1kZWNsYXJhdGlvbi1wZXItbGluZSwgbm8tcmVkZWNsYXJlLCBtYXgtc3RhdGVtZW50cy1wZXItbGluZSAqL1xuICAgIHZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCc7XG4gICAgdmFyIGlzQ2FsbGFibGU7IC8qIGlubGluZWQgZnJvbSBodHRwczovL25wbWpzLmNvbS9pcy1jYWxsYWJsZSAqLyB2YXIgZm5Ub1N0ciA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZywgY29uc3RydWN0b3JSZWdleCA9IC9eXFxzKmNsYXNzIC8sIGlzRVM2Q2xhc3NGbiA9IGZ1bmN0aW9uIGlzRVM2Q2xhc3NGbih2YWx1ZSkgeyB0cnkgeyB2YXIgZm5TdHIgPSBmblRvU3RyLmNhbGwodmFsdWUpOyB2YXIgc2luZ2xlU3RyaXBwZWQgPSBmblN0ci5yZXBsYWNlKC9cXC9cXC8uKlxcbi9nLCAnJyk7IHZhciBtdWx0aVN0cmlwcGVkID0gc2luZ2xlU3RyaXBwZWQucmVwbGFjZSgvXFwvXFwqWy5cXHNcXFNdKlxcKlxcLy9nLCAnJyk7IHZhciBzcGFjZVN0cmlwcGVkID0gbXVsdGlTdHJpcHBlZC5yZXBsYWNlKC9cXG4vbWcsICcgJykucmVwbGFjZSgvIHsyfS9nLCAnICcpOyByZXR1cm4gY29uc3RydWN0b3JSZWdleC50ZXN0KHNwYWNlU3RyaXBwZWQpOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgLyogbm90IGEgZnVuY3Rpb24gKi8gfSB9LCB0cnlGdW5jdGlvbk9iamVjdCA9IGZ1bmN0aW9uIHRyeUZ1bmN0aW9uT2JqZWN0KHZhbHVlKSB7IHRyeSB7IGlmIChpc0VTNkNsYXNzRm4odmFsdWUpKSB7IHJldHVybiBmYWxzZTsgfSBmblRvU3RyLmNhbGwodmFsdWUpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfSwgZm5DbGFzcyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsIGdlbkNsYXNzID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJywgaXNDYWxsYWJsZSA9IGZ1bmN0aW9uIGlzQ2FsbGFibGUodmFsdWUpIHsgaWYgKCF2YWx1ZSkgeyByZXR1cm4gZmFsc2U7IH0gaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7IHJldHVybiBmYWxzZTsgfSBpZiAoaGFzVG9TdHJpbmdUYWcpIHsgcmV0dXJuIHRyeUZ1bmN0aW9uT2JqZWN0KHZhbHVlKTsgfSBpZiAoaXNFUzZDbGFzc0ZuKHZhbHVlKSkgeyByZXR1cm4gZmFsc2U7IH0gdmFyIHN0ckNsYXNzID0gdG9fc3RyaW5nLmNhbGwodmFsdWUpOyByZXR1cm4gc3RyQ2xhc3MgPT09IGZuQ2xhc3MgfHwgc3RyQ2xhc3MgPT09IGdlbkNsYXNzOyB9O1xuXG4gICAgdmFyIGlzUmVnZXg7IC8qIGlubGluZWQgZnJvbSBodHRwczovL25wbWpzLmNvbS9pcy1yZWdleCAqLyB2YXIgcmVnZXhFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjLCB0cnlSZWdleEV4ZWMgPSBmdW5jdGlvbiB0cnlSZWdleEV4ZWModmFsdWUpIHsgdHJ5IHsgcmVnZXhFeGVjLmNhbGwodmFsdWUpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfSwgcmVnZXhDbGFzcyA9ICdbb2JqZWN0IFJlZ0V4cF0nOyBpc1JlZ2V4ID0gZnVuY3Rpb24gaXNSZWdleCh2YWx1ZSkgeyBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykgeyByZXR1cm4gZmFsc2U7IH0gcmV0dXJuIGhhc1RvU3RyaW5nVGFnID8gdHJ5UmVnZXhFeGVjKHZhbHVlKSA6IHRvX3N0cmluZy5jYWxsKHZhbHVlKSA9PT0gcmVnZXhDbGFzczsgfTtcbiAgICB2YXIgaXNTdHJpbmc7IC8qIGlubGluZWQgZnJvbSBodHRwczovL25wbWpzLmNvbS9pcy1zdHJpbmcgKi8gdmFyIHN0clZhbHVlID0gU3RyaW5nLnByb3RvdHlwZS52YWx1ZU9mLCB0cnlTdHJpbmdPYmplY3QgPSBmdW5jdGlvbiB0cnlTdHJpbmdPYmplY3QodmFsdWUpIHsgdHJ5IHsgc3RyVmFsdWUuY2FsbCh2YWx1ZSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9LCBzdHJpbmdDbGFzcyA9ICdbb2JqZWN0IFN0cmluZ10nOyBpc1N0cmluZyA9IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7IGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7IHJldHVybiB0cnVlOyB9IGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7IHJldHVybiBmYWxzZTsgfSByZXR1cm4gaGFzVG9TdHJpbmdUYWcgPyB0cnlTdHJpbmdPYmplY3QodmFsdWUpIDogdG9fc3RyaW5nLmNhbGwodmFsdWUpID09PSBzdHJpbmdDbGFzczsgfTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG9uZS12YXItZGVjbGFyYXRpb24tcGVyLWxpbmUsIG5vLXJlZGVjbGFyZSwgbWF4LXN0YXRlbWVudHMtcGVyLWxpbmUgKi9cblxuICAgIC8qIGlubGluZWQgZnJvbSBodHRwOi8vbnBtanMuY29tL2RlZmluZS1wcm9wZXJ0aWVzICovXG4gICAgdmFyIHN1cHBvcnRzRGVzY3JpcHRvcnMgPSAkT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgb2JqID0ge307XG4gICAgICAgICAgICAkT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgJ3gnLCB7IGVudW1lcmFibGU6IGZhbHNlLCB2YWx1ZTogb2JqIH0pO1xuICAgICAgICAgICAgZm9yICh2YXIgXyBpbiBvYmopIHsgLy8ganNjczppZ25vcmUgZGlzYWxsb3dVbnVzZWRWYXJpYWJsZXNcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb2JqLnggPT09IG9iajtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyAvKiB0aGlzIGlzIEVTMyAqL1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSgpKTtcbiAgICB2YXIgZGVmaW5lUHJvcGVydGllcyA9IChmdW5jdGlvbiAoaGFzKSB7XG4gICAgICAgIC8vIERlZmluZSBjb25maWd1cmFibGUsIHdyaXRhYmxlLCBhbmQgbm9uLWVudW1lcmFibGUgcHJvcHNcbiAgICAgICAgLy8gaWYgdGhleSBkb24ndCBleGlzdC5cbiAgICAgICAgdmFyIGRlZmluZVByb3BlcnR5O1xuICAgICAgICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lLCBtZXRob2QsIGZvcmNlQXNzaWduKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFmb3JjZUFzc2lnbiAmJiAobmFtZSBpbiBvYmplY3QpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBtZXRob2RcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIG1ldGhvZCwgZm9yY2VBc3NpZ24pIHtcbiAgICAgICAgICAgICAgICBpZiAoIWZvcmNlQXNzaWduICYmIChuYW1lIGluIG9iamVjdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvYmplY3RbbmFtZV0gPSBtZXRob2Q7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMob2JqZWN0LCBtYXAsIGZvcmNlQXNzaWduKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBuYW1lIGluIG1hcCkge1xuICAgICAgICAgICAgICAgIGlmIChoYXMuY2FsbChtYXAsIG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwgbmFtZSwgbWFwW25hbWVdLCBmb3JjZUFzc2lnbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0oT2JqZWN0UHJvdG90eXBlLmhhc093blByb3BlcnR5KSk7XG5cbiAgICAvL1xuICAgIC8vIFV0aWxcbiAgICAvLyA9PT09PT1cbiAgICAvL1xuXG4gICAgLyogcmVwbGFjZWFibGUgd2l0aCBodHRwczovL25wbWpzLmNvbS9wYWNrYWdlL2VzLWFic3RyYWN0IC9oZWxwZXJzL2lzUHJpbWl0aXZlICovXG4gICAgdmFyIGlzUHJpbWl0aXZlID0gZnVuY3Rpb24gaXNQcmltaXRpdmUoaW5wdXQpIHtcbiAgICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgaW5wdXQ7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PT0gbnVsbCB8fCAodHlwZSAhPT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gJ2Z1bmN0aW9uJyk7XG4gICAgfTtcblxuICAgIHZhciBpc0FjdHVhbE5hTiA9ICROdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gaXNBY3R1YWxOYU4oeCkge1xuICAgICAgICByZXR1cm4geCAhPT0geDtcbiAgICB9O1xuXG4gICAgdmFyIEVTID0ge1xuICAgICAgICAvLyBFUzUgOS40XG4gICAgICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDkuNFxuICAgICAgICAvLyBodHRwOi8vanNwZXJmLmNvbS90by1pbnRlZ2VyXG4gICAgICAgIC8qIHJlcGxhY2VhYmxlIHdpdGggaHR0cHM6Ly9ucG1qcy5jb20vcGFja2FnZS9lcy1hYnN0cmFjdCBFUzUuVG9JbnRlZ2VyICovXG4gICAgICAgIFRvSW50ZWdlcjogZnVuY3Rpb24gVG9JbnRlZ2VyKG51bSkge1xuICAgICAgICAgICAgdmFyIG4gPSArbnVtO1xuICAgICAgICAgICAgaWYgKGlzQWN0dWFsTmFOKG4pKSB7XG4gICAgICAgICAgICAgICAgbiA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG4gIT09IDAgJiYgbiAhPT0gKDEgLyAwKSAmJiBuICE9PSAtKDEgLyAwKSkge1xuICAgICAgICAgICAgICAgIG4gPSAobiA+IDAgfHwgLTEpICogTWF0aC5mbG9vcihNYXRoLmFicyhuKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgfSxcblxuICAgICAgICAvKiByZXBsYWNlYWJsZSB3aXRoIGh0dHBzOi8vbnBtanMuY29tL3BhY2thZ2UvZXMtYWJzdHJhY3QgRVM1LlRvUHJpbWl0aXZlICovXG4gICAgICAgIFRvUHJpbWl0aXZlOiBmdW5jdGlvbiBUb1ByaW1pdGl2ZShpbnB1dCkge1xuICAgICAgICAgICAgdmFyIHZhbCwgdmFsdWVPZiwgdG9TdHI7XG4gICAgICAgICAgICBpZiAoaXNQcmltaXRpdmUoaW5wdXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsdWVPZiA9IGlucHV0LnZhbHVlT2Y7XG4gICAgICAgICAgICBpZiAoaXNDYWxsYWJsZSh2YWx1ZU9mKSkge1xuICAgICAgICAgICAgICAgIHZhbCA9IHZhbHVlT2YuY2FsbChpbnB1dCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzUHJpbWl0aXZlKHZhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b1N0ciA9IGlucHV0LnRvU3RyaW5nO1xuICAgICAgICAgICAgaWYgKGlzQ2FsbGFibGUodG9TdHIpKSB7XG4gICAgICAgICAgICAgICAgdmFsID0gdG9TdHIuY2FsbChpbnB1dCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzUHJpbWl0aXZlKHZhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gRVM1IDkuOVxuICAgICAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3g5LjlcbiAgICAgICAgLyogcmVwbGFjZWFibGUgd2l0aCBodHRwczovL25wbWpzLmNvbS9wYWNrYWdlL2VzLWFic3RyYWN0IEVTNS5Ub09iamVjdCAqL1xuICAgICAgICBUb09iamVjdDogZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICAgIGlmIChvID09IG51bGwpIHsgLy8gdGhpcyBtYXRjaGVzIGJvdGggbnVsbCBhbmQgdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbid0IGNvbnZlcnQgXCIgKyBvICsgJyB0byBvYmplY3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAkT2JqZWN0KG8pO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qIHJlcGxhY2VhYmxlIHdpdGggaHR0cHM6Ly9ucG1qcy5jb20vcGFja2FnZS9lcy1hYnN0cmFjdCBFUzUuVG9VaW50MzIgKi9cbiAgICAgICAgVG9VaW50MzI6IGZ1bmN0aW9uIFRvVWludDMyKHgpIHtcbiAgICAgICAgICAgIHJldHVybiB4ID4+PiAwO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vXG4gICAgLy8gRnVuY3Rpb25cbiAgICAvLyA9PT09PT09PVxuICAgIC8vXG5cbiAgICAvLyBFUy01IDE1LjMuNC41XG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMy40LjVcblxuICAgIHZhciBFbXB0eSA9IGZ1bmN0aW9uIEVtcHR5KCkge307XG5cbiAgICBkZWZpbmVQcm9wZXJ0aWVzKEZ1bmN0aW9uUHJvdG90eXBlLCB7XG4gICAgICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQodGhhdCkgeyAvLyAubGVuZ3RoIGlzIDFcbiAgICAgICAgICAgIC8vIDEuIExldCBUYXJnZXQgYmUgdGhlIHRoaXMgdmFsdWUuXG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcztcbiAgICAgICAgICAgIC8vIDIuIElmIElzQ2FsbGFibGUoVGFyZ2V0KSBpcyBmYWxzZSwgdGhyb3cgYSBUeXBlRXJyb3IgZXhjZXB0aW9uLlxuICAgICAgICAgICAgaWYgKCFpc0NhbGxhYmxlKHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBjYWxsZWQgb24gaW5jb21wYXRpYmxlICcgKyB0YXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gMy4gTGV0IEEgYmUgYSBuZXcgKHBvc3NpYmx5IGVtcHR5KSBpbnRlcm5hbCBsaXN0IG9mIGFsbCBvZiB0aGVcbiAgICAgICAgICAgIC8vICAgYXJndW1lbnQgdmFsdWVzIHByb3ZpZGVkIGFmdGVyIHRoaXNBcmcgKGFyZzEsIGFyZzIgZXRjKSwgaW4gb3JkZXIuXG4gICAgICAgICAgICAvLyBYWFggc2xpY2VkQXJncyB3aWxsIHN0YW5kIGluIGZvciBcIkFcIiBpZiB1c2VkXG4gICAgICAgICAgICB2YXIgYXJncyA9IGFycmF5X3NsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsgLy8gZm9yIG5vcm1hbCBjYWxsXG4gICAgICAgICAgICAvLyA0LiBMZXQgRiBiZSBhIG5ldyBuYXRpdmUgRUNNQVNjcmlwdCBvYmplY3QuXG4gICAgICAgICAgICAvLyAxMS4gU2V0IHRoZSBbW1Byb3RvdHlwZV1dIGludGVybmFsIHByb3BlcnR5IG9mIEYgdG8gdGhlIHN0YW5kYXJkXG4gICAgICAgICAgICAvLyAgIGJ1aWx0LWluIEZ1bmN0aW9uIHByb3RvdHlwZSBvYmplY3QgYXMgc3BlY2lmaWVkIGluIDE1LjMuMy4xLlxuICAgICAgICAgICAgLy8gMTIuIFNldCB0aGUgW1tDYWxsXV0gaW50ZXJuYWwgcHJvcGVydHkgb2YgRiBhcyBkZXNjcmliZWQgaW5cbiAgICAgICAgICAgIC8vICAgMTUuMy40LjUuMS5cbiAgICAgICAgICAgIC8vIDEzLiBTZXQgdGhlIFtbQ29uc3RydWN0XV0gaW50ZXJuYWwgcHJvcGVydHkgb2YgRiBhcyBkZXNjcmliZWQgaW5cbiAgICAgICAgICAgIC8vICAgMTUuMy40LjUuMi5cbiAgICAgICAgICAgIC8vIDE0LiBTZXQgdGhlIFtbSGFzSW5zdGFuY2VdXSBpbnRlcm5hbCBwcm9wZXJ0eSBvZiBGIGFzIGRlc2NyaWJlZCBpblxuICAgICAgICAgICAgLy8gICAxNS4zLjQuNS4zLlxuICAgICAgICAgICAgdmFyIGJvdW5kO1xuICAgICAgICAgICAgdmFyIGJpbmRlciA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgYm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gMTUuMy40LjUuMiBbW0NvbnN0cnVjdF1dXG4gICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gdGhlIFtbQ29uc3RydWN0XV0gaW50ZXJuYWwgbWV0aG9kIG9mIGEgZnVuY3Rpb24gb2JqZWN0LFxuICAgICAgICAgICAgICAgICAgICAvLyBGIHRoYXQgd2FzIGNyZWF0ZWQgdXNpbmcgdGhlIGJpbmQgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggYVxuICAgICAgICAgICAgICAgICAgICAvLyBsaXN0IG9mIGFyZ3VtZW50cyBFeHRyYUFyZ3MsIHRoZSBmb2xsb3dpbmcgc3RlcHMgYXJlIHRha2VuOlxuICAgICAgICAgICAgICAgICAgICAvLyAxLiBMZXQgdGFyZ2V0IGJlIHRoZSB2YWx1ZSBvZiBGJ3MgW1tUYXJnZXRGdW5jdGlvbl1dXG4gICAgICAgICAgICAgICAgICAgIC8vICAgaW50ZXJuYWwgcHJvcGVydHkuXG4gICAgICAgICAgICAgICAgICAgIC8vIDIuIElmIHRhcmdldCBoYXMgbm8gW1tDb25zdHJ1Y3RdXSBpbnRlcm5hbCBtZXRob2QsIGFcbiAgICAgICAgICAgICAgICAgICAgLy8gICBUeXBlRXJyb3IgZXhjZXB0aW9uIGlzIHRocm93bi5cbiAgICAgICAgICAgICAgICAgICAgLy8gMy4gTGV0IGJvdW5kQXJncyBiZSB0aGUgdmFsdWUgb2YgRidzIFtbQm91bmRBcmdzXV0gaW50ZXJuYWxcbiAgICAgICAgICAgICAgICAgICAgLy8gICBwcm9wZXJ0eS5cbiAgICAgICAgICAgICAgICAgICAgLy8gNC4gTGV0IGFyZ3MgYmUgYSBuZXcgbGlzdCBjb250YWluaW5nIHRoZSBzYW1lIHZhbHVlcyBhcyB0aGVcbiAgICAgICAgICAgICAgICAgICAgLy8gICBsaXN0IGJvdW5kQXJncyBpbiB0aGUgc2FtZSBvcmRlciBmb2xsb3dlZCBieSB0aGUgc2FtZVxuICAgICAgICAgICAgICAgICAgICAvLyAgIHZhbHVlcyBhcyB0aGUgbGlzdCBFeHRyYUFyZ3MgaW4gdGhlIHNhbWUgb3JkZXIuXG4gICAgICAgICAgICAgICAgICAgIC8vIDUuIFJldHVybiB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgdGhlIFtbQ29uc3RydWN0XV0gaW50ZXJuYWxcbiAgICAgICAgICAgICAgICAgICAgLy8gICBtZXRob2Qgb2YgdGFyZ2V0IHByb3ZpZGluZyBhcmdzIGFzIHRoZSBhcmd1bWVudHMuXG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGFwcGx5LmNhbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlfY29uY2F0LmNhbGwoYXJncywgYXJyYXlfc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoJE9iamVjdChyZXN1bHQpID09PSByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyAxNS4zLjQuNS4xIFtbQ2FsbF1dXG4gICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gdGhlIFtbQ2FsbF1dIGludGVybmFsIG1ldGhvZCBvZiBhIGZ1bmN0aW9uIG9iamVjdCwgRixcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hpY2ggd2FzIGNyZWF0ZWQgdXNpbmcgdGhlIGJpbmQgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggYVxuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIHZhbHVlIGFuZCBhIGxpc3Qgb2YgYXJndW1lbnRzIEV4dHJhQXJncywgdGhlIGZvbGxvd2luZ1xuICAgICAgICAgICAgICAgICAgICAvLyBzdGVwcyBhcmUgdGFrZW46XG4gICAgICAgICAgICAgICAgICAgIC8vIDEuIExldCBib3VuZEFyZ3MgYmUgdGhlIHZhbHVlIG9mIEYncyBbW0JvdW5kQXJnc11dIGludGVybmFsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgcHJvcGVydHkuXG4gICAgICAgICAgICAgICAgICAgIC8vIDIuIExldCBib3VuZFRoaXMgYmUgdGhlIHZhbHVlIG9mIEYncyBbW0JvdW5kVGhpc11dIGludGVybmFsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgcHJvcGVydHkuXG4gICAgICAgICAgICAgICAgICAgIC8vIDMuIExldCB0YXJnZXQgYmUgdGhlIHZhbHVlIG9mIEYncyBbW1RhcmdldEZ1bmN0aW9uXV0gaW50ZXJuYWxcbiAgICAgICAgICAgICAgICAgICAgLy8gICBwcm9wZXJ0eS5cbiAgICAgICAgICAgICAgICAgICAgLy8gNC4gTGV0IGFyZ3MgYmUgYSBuZXcgbGlzdCBjb250YWluaW5nIHRoZSBzYW1lIHZhbHVlcyBhcyB0aGVcbiAgICAgICAgICAgICAgICAgICAgLy8gICBsaXN0IGJvdW5kQXJncyBpbiB0aGUgc2FtZSBvcmRlciBmb2xsb3dlZCBieSB0aGUgc2FtZVxuICAgICAgICAgICAgICAgICAgICAvLyAgIHZhbHVlcyBhcyB0aGUgbGlzdCBFeHRyYUFyZ3MgaW4gdGhlIHNhbWUgb3JkZXIuXG4gICAgICAgICAgICAgICAgICAgIC8vIDUuIFJldHVybiB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgdGhlIFtbQ2FsbF1dIGludGVybmFsIG1ldGhvZFxuICAgICAgICAgICAgICAgICAgICAvLyAgIG9mIHRhcmdldCBwcm92aWRpbmcgYm91bmRUaGlzIGFzIHRoZSB0aGlzIHZhbHVlIGFuZFxuICAgICAgICAgICAgICAgICAgICAvLyAgIHByb3ZpZGluZyBhcmdzIGFzIHRoZSBhcmd1bWVudHMuXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gZXF1aXY6IHRhcmdldC5jYWxsKHRoaXMsIC4uLmJvdW5kQXJncywgLi4uYXJncylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwcGx5LmNhbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlfY29uY2F0LmNhbGwoYXJncywgYXJyYXlfc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyAxNS4gSWYgdGhlIFtbQ2xhc3NdXSBpbnRlcm5hbCBwcm9wZXJ0eSBvZiBUYXJnZXQgaXMgXCJGdW5jdGlvblwiLCB0aGVuXG4gICAgICAgICAgICAvLyAgICAgYS4gTGV0IEwgYmUgdGhlIGxlbmd0aCBwcm9wZXJ0eSBvZiBUYXJnZXQgbWludXMgdGhlIGxlbmd0aCBvZiBBLlxuICAgICAgICAgICAgLy8gICAgIGIuIFNldCB0aGUgbGVuZ3RoIG93biBwcm9wZXJ0eSBvZiBGIHRvIGVpdGhlciAwIG9yIEwsIHdoaWNoZXZlciBpc1xuICAgICAgICAgICAgLy8gICAgICAgbGFyZ2VyLlxuICAgICAgICAgICAgLy8gMTYuIEVsc2Ugc2V0IHRoZSBsZW5ndGggb3duIHByb3BlcnR5IG9mIEYgdG8gMC5cblxuICAgICAgICAgICAgdmFyIGJvdW5kTGVuZ3RoID0gbWF4KDAsIHRhcmdldC5sZW5ndGggLSBhcmdzLmxlbmd0aCk7XG5cbiAgICAgICAgICAgIC8vIDE3LiBTZXQgdGhlIGF0dHJpYnV0ZXMgb2YgdGhlIGxlbmd0aCBvd24gcHJvcGVydHkgb2YgRiB0byB0aGUgdmFsdWVzXG4gICAgICAgICAgICAvLyAgIHNwZWNpZmllZCBpbiAxNS4zLjUuMS5cbiAgICAgICAgICAgIHZhciBib3VuZEFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm91bmRMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGFycmF5X3B1c2guY2FsbChib3VuZEFyZ3MsICckJyArIGkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBYWFggQnVpbGQgYSBkeW5hbWljIGZ1bmN0aW9uIHdpdGggZGVzaXJlZCBhbW91bnQgb2YgYXJndW1lbnRzIGlzIHRoZSBvbmx5XG4gICAgICAgICAgICAvLyB3YXkgdG8gc2V0IHRoZSBsZW5ndGggcHJvcGVydHkgb2YgYSBmdW5jdGlvbi5cbiAgICAgICAgICAgIC8vIEluIGVudmlyb25tZW50cyB3aGVyZSBDb250ZW50IFNlY3VyaXR5IFBvbGljaWVzIGVuYWJsZWQgKENocm9tZSBleHRlbnNpb25zLFxuICAgICAgICAgICAgLy8gZm9yIGV4LikgYWxsIHVzZSBvZiBldmFsIG9yIEZ1bmN0aW9uIGNvc3RydWN0b3IgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgICAgICAgICAgIC8vIEhvd2V2ZXIgaW4gYWxsIG9mIHRoZXNlIGVudmlyb25tZW50cyBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBleGlzdHNcbiAgICAgICAgICAgIC8vIGFuZCBzbyB0aGlzIGNvZGUgd2lsbCBuZXZlciBiZSBleGVjdXRlZC5cbiAgICAgICAgICAgIGJvdW5kID0gJEZ1bmN0aW9uKCdiaW5kZXInLCAncmV0dXJuIGZ1bmN0aW9uICgnICsgYXJyYXlfam9pbi5jYWxsKGJvdW5kQXJncywgJywnKSArICcpeyByZXR1cm4gYmluZGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0nKShiaW5kZXIpO1xuXG4gICAgICAgICAgICBpZiAodGFyZ2V0LnByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IHRhcmdldC5wcm90b3R5cGU7XG4gICAgICAgICAgICAgICAgYm91bmQucHJvdG90eXBlID0gbmV3IEVtcHR5KCk7XG4gICAgICAgICAgICAgICAgLy8gQ2xlYW4gdXAgZGFuZ2xpbmcgcmVmZXJlbmNlcy5cbiAgICAgICAgICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUT0RPXG4gICAgICAgICAgICAvLyAxOC4gU2V0IHRoZSBbW0V4dGVuc2libGVdXSBpbnRlcm5hbCBwcm9wZXJ0eSBvZiBGIHRvIHRydWUuXG5cbiAgICAgICAgICAgIC8vIFRPRE9cbiAgICAgICAgICAgIC8vIDE5LiBMZXQgdGhyb3dlciBiZSB0aGUgW1tUaHJvd1R5cGVFcnJvcl1dIGZ1bmN0aW9uIE9iamVjdCAoMTMuMi4zKS5cbiAgICAgICAgICAgIC8vIDIwLiBDYWxsIHRoZSBbW0RlZmluZU93blByb3BlcnR5XV0gaW50ZXJuYWwgbWV0aG9kIG9mIEYgd2l0aFxuICAgICAgICAgICAgLy8gICBhcmd1bWVudHMgXCJjYWxsZXJcIiwgUHJvcGVydHlEZXNjcmlwdG9yIHtbW0dldF1dOiB0aHJvd2VyLCBbW1NldF1dOlxuICAgICAgICAgICAgLy8gICB0aHJvd2VyLCBbW0VudW1lcmFibGVdXTogZmFsc2UsIFtbQ29uZmlndXJhYmxlXV06IGZhbHNlfSwgYW5kXG4gICAgICAgICAgICAvLyAgIGZhbHNlLlxuICAgICAgICAgICAgLy8gMjEuIENhbGwgdGhlIFtbRGVmaW5lT3duUHJvcGVydHldXSBpbnRlcm5hbCBtZXRob2Qgb2YgRiB3aXRoXG4gICAgICAgICAgICAvLyAgIGFyZ3VtZW50cyBcImFyZ3VtZW50c1wiLCBQcm9wZXJ0eURlc2NyaXB0b3Ige1tbR2V0XV06IHRocm93ZXIsXG4gICAgICAgICAgICAvLyAgIFtbU2V0XV06IHRocm93ZXIsIFtbRW51bWVyYWJsZV1dOiBmYWxzZSwgW1tDb25maWd1cmFibGVdXTogZmFsc2V9LFxuICAgICAgICAgICAgLy8gICBhbmQgZmFsc2UuXG5cbiAgICAgICAgICAgIC8vIFRPRE9cbiAgICAgICAgICAgIC8vIE5PVEUgRnVuY3Rpb24gb2JqZWN0cyBjcmVhdGVkIHVzaW5nIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kIGRvIG5vdFxuICAgICAgICAgICAgLy8gaGF2ZSBhIHByb3RvdHlwZSBwcm9wZXJ0eSBvciB0aGUgW1tDb2RlXV0sIFtbRm9ybWFsUGFyYW1ldGVyc11dLCBhbmRcbiAgICAgICAgICAgIC8vIFtbU2NvcGVdXSBpbnRlcm5hbCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgLy8gWFhYIGNhbid0IGRlbGV0ZSBwcm90b3R5cGUgaW4gcHVyZS1qcy5cblxuICAgICAgICAgICAgLy8gMjIuIFJldHVybiBGLlxuICAgICAgICAgICAgcmV0dXJuIGJvdW5kO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBfUGxlYXNlIG5vdGU6IFNob3J0Y3V0cyBhcmUgZGVmaW5lZCBhZnRlciBgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRgIGFzIHdlXG4gICAgLy8gdXNlIGl0IGluIGRlZmluaW5nIHNob3J0Y3V0cy5cbiAgICB2YXIgb3ducyA9IGNhbGwuYmluZChPYmplY3RQcm90b3R5cGUuaGFzT3duUHJvcGVydHkpO1xuICAgIHZhciB0b1N0ciA9IGNhbGwuYmluZChPYmplY3RQcm90b3R5cGUudG9TdHJpbmcpO1xuICAgIHZhciBhcnJheVNsaWNlID0gY2FsbC5iaW5kKGFycmF5X3NsaWNlKTtcbiAgICB2YXIgYXJyYXlTbGljZUFwcGx5ID0gYXBwbHkuYmluZChhcnJheV9zbGljZSk7XG4gICAgLyogZ2xvYmFscyBkb2N1bWVudCAqL1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICdvYmplY3QnICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXJyYXlTbGljZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2hpbGROb2Rlcyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHZhciBvcmlnQXJyYXlTbGljZSA9IGFycmF5U2xpY2U7XG4gICAgICAgICAgICB2YXIgb3JpZ0FycmF5U2xpY2VBcHBseSA9IGFycmF5U2xpY2VBcHBseTtcbiAgICAgICAgICAgIGFycmF5U2xpY2UgPSBmdW5jdGlvbiBhcnJheVNsaWNlSUUoYXJyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHIgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IGFyci5sZW5ndGg7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcltpXSA9IGFycltpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdBcnJheVNsaWNlQXBwbHkociwgb3JpZ0FycmF5U2xpY2UoYXJndW1lbnRzLCAxKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYXJyYXlTbGljZUFwcGx5ID0gZnVuY3Rpb24gYXJyYXlTbGljZUFwcGx5SUUoYXJyLCBhcmdzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdBcnJheVNsaWNlQXBwbHkoYXJyYXlTbGljZShhcnIpLCBhcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHN0clNsaWNlID0gY2FsbC5iaW5kKFN0cmluZ1Byb3RvdHlwZS5zbGljZSk7XG4gICAgdmFyIHN0clNwbGl0ID0gY2FsbC5iaW5kKFN0cmluZ1Byb3RvdHlwZS5zcGxpdCk7XG4gICAgdmFyIHN0ckluZGV4T2YgPSBjYWxsLmJpbmQoU3RyaW5nUHJvdG90eXBlLmluZGV4T2YpO1xuICAgIHZhciBwdXNoQ2FsbCA9IGNhbGwuYmluZChhcnJheV9wdXNoKTtcbiAgICB2YXIgaXNFbnVtID0gY2FsbC5iaW5kKE9iamVjdFByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZSk7XG4gICAgdmFyIGFycmF5U29ydCA9IGNhbGwuYmluZChBcnJheVByb3RvdHlwZS5zb3J0KTtcblxuICAgIC8vXG4gICAgLy8gQXJyYXlcbiAgICAvLyA9PT09PVxuICAgIC8vXG5cbiAgICB2YXIgaXNBcnJheSA9ICRBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkob2JqKSB7XG4gICAgICAgIHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgIH07XG5cbiAgICAvLyBFUzUgMTUuNC40LjEyXG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuNC40LjEzXG4gICAgLy8gUmV0dXJuIGxlbithcmdDb3VudC5cbiAgICAvLyBbYnVnZml4LCBpZWx0OF1cbiAgICAvLyBJRSA8IDggYnVnOiBbXS51bnNoaWZ0KDApID09PSB1bmRlZmluZWQgYnV0IHNob3VsZCBiZSBcIjFcIlxuICAgIHZhciBoYXNVbnNoaWZ0UmV0dXJuVmFsdWVCdWcgPSBbXS51bnNoaWZ0KDApICE9PSAxO1xuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgdW5zaGlmdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYXJyYXlfdW5zaGlmdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgfSwgaGFzVW5zaGlmdFJldHVyblZhbHVlQnVnKTtcblxuICAgIC8vIEVTNSAxNS40LjMuMlxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuMy4yXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvaXNBcnJheVxuICAgIGRlZmluZVByb3BlcnRpZXMoJEFycmF5LCB7IGlzQXJyYXk6IGlzQXJyYXkgfSk7XG5cbiAgICAvLyBUaGUgSXNDYWxsYWJsZSgpIGNoZWNrIGluIHRoZSBBcnJheSBmdW5jdGlvbnNcbiAgICAvLyBoYXMgYmVlbiByZXBsYWNlZCB3aXRoIGEgc3RyaWN0IGNoZWNrIG9uIHRoZVxuICAgIC8vIGludGVybmFsIGNsYXNzIG9mIHRoZSBvYmplY3QgdG8gdHJhcCBjYXNlcyB3aGVyZVxuICAgIC8vIHRoZSBwcm92aWRlZCBmdW5jdGlvbiB3YXMgYWN0dWFsbHkgYSByZWd1bGFyXG4gICAgLy8gZXhwcmVzc2lvbiBsaXRlcmFsLCB3aGljaCBpbiBWOCBhbmRcbiAgICAvLyBKYXZhU2NyaXB0Q29yZSBpcyBhIHR5cGVvZiBcImZ1bmN0aW9uXCIuICBPbmx5IGluXG4gICAgLy8gVjggYXJlIHJlZ3VsYXIgZXhwcmVzc2lvbiBsaXRlcmFscyBwZXJtaXR0ZWQgYXNcbiAgICAvLyByZWR1Y2UgcGFyYW1ldGVycywgc28gaXQgaXMgZGVzaXJhYmxlIGluIHRoZVxuICAgIC8vIGdlbmVyYWwgY2FzZSBmb3IgdGhlIHNoaW0gdG8gbWF0Y2ggdGhlIG1vcmVcbiAgICAvLyBzdHJpY3QgYW5kIGNvbW1vbiBiZWhhdmlvciBvZiByZWplY3RpbmcgcmVndWxhclxuICAgIC8vIGV4cHJlc3Npb25zLlxuXG4gICAgLy8gRVM1IDE1LjQuNC4xOFxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuNC4xOFxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL2FycmF5L2ZvckVhY2hcblxuICAgIC8vIENoZWNrIGZhaWx1cmUgb2YgYnktaW5kZXggYWNjZXNzIG9mIHN0cmluZyBjaGFyYWN0ZXJzIChJRSA8IDkpXG4gICAgLy8gYW5kIGZhaWx1cmUgb2YgYDAgaW4gYm94ZWRTdHJpbmdgIChSaGlubylcbiAgICB2YXIgYm94ZWRTdHJpbmcgPSAkT2JqZWN0KCdhJyk7XG4gICAgdmFyIHNwbGl0U3RyaW5nID0gYm94ZWRTdHJpbmdbMF0gIT09ICdhJyB8fCAhKDAgaW4gYm94ZWRTdHJpbmcpO1xuXG4gICAgdmFyIHByb3Blcmx5Qm94ZXNDb250ZXh0ID0gZnVuY3Rpb24gcHJvcGVybHlCb3hlZChtZXRob2QpIHtcbiAgICAgICAgLy8gQ2hlY2sgbm9kZSAwLjYuMjEgYnVnIHdoZXJlIHRoaXJkIHBhcmFtZXRlciBpcyBub3QgYm94ZWRcbiAgICAgICAgdmFyIHByb3Blcmx5Qm94ZXNOb25TdHJpY3QgPSB0cnVlO1xuICAgICAgICB2YXIgcHJvcGVybHlCb3hlc1N0cmljdCA9IHRydWU7XG4gICAgICAgIHZhciB0aHJld0V4Y2VwdGlvbiA9IGZhbHNlO1xuICAgICAgICBpZiAobWV0aG9kKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG1ldGhvZC5jYWxsKCdmb28nLCBmdW5jdGlvbiAoXywgX18sIGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZXh0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVybHlCb3hlc05vblN0cmljdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBtZXRob2QuY2FsbChbMV0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgICAgICAgICAgICAgICAgIHByb3Blcmx5Qm94ZXNTdHJpY3QgPSB0eXBlb2YgdGhpcyA9PT0gJ3N0cmluZyc7XG4gICAgICAgICAgICAgICAgfSwgJ3gnKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB0aHJld0V4Y2VwdGlvbiA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICEhbWV0aG9kICYmICF0aHJld0V4Y2VwdGlvbiAmJiBwcm9wZXJseUJveGVzTm9uU3RyaWN0ICYmIHByb3Blcmx5Qm94ZXNTdHJpY3Q7XG4gICAgfTtcblxuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuLyosIHRoaXNBcmcqLykge1xuICAgICAgICAgICAgdmFyIG9iamVjdCA9IEVTLlRvT2JqZWN0KHRoaXMpO1xuICAgICAgICAgICAgdmFyIHNlbGYgPSBzcGxpdFN0cmluZyAmJiBpc1N0cmluZyh0aGlzKSA/IHN0clNwbGl0KHRoaXMsICcnKSA6IG9iamVjdDtcbiAgICAgICAgICAgIHZhciBpID0gLTE7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gRVMuVG9VaW50MzIoc2VsZi5sZW5ndGgpO1xuICAgICAgICAgICAgdmFyIFQ7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBUID0gYXJndW1lbnRzWzFdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiBubyBjYWxsYmFjayBmdW5jdGlvbiBvciBpZiBjYWxsYmFjayBpcyBub3QgYSBjYWxsYWJsZSBmdW5jdGlvblxuICAgICAgICAgICAgaWYgKCFpc0NhbGxhYmxlKGNhbGxiYWNrZm4pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkucHJvdG90eXBlLmZvckVhY2ggY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdoaWxlICgrK2kgPCBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoaSBpbiBzZWxmKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEludm9rZSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gd2l0aCBjYWxsLCBwYXNzaW5nIGFyZ3VtZW50czpcbiAgICAgICAgICAgICAgICAgICAgLy8gY29udGV4dCwgcHJvcGVydHkgdmFsdWUsIHByb3BlcnR5IGtleSwgdGhpc0FyZyBvYmplY3RcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBUID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tmbihzZWxmW2ldLCBpLCBvYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tmbi5jYWxsKFQsIHNlbGZbaV0sIGksIG9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCAhcHJvcGVybHlCb3hlc0NvbnRleHQoQXJyYXlQcm90b3R5cGUuZm9yRWFjaCkpO1xuXG4gICAgLy8gRVM1IDE1LjQuNC4xOVxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuNC4xOVxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0NvcmVfSmF2YVNjcmlwdF8xLjVfUmVmZXJlbmNlL09iamVjdHMvQXJyYXkvbWFwXG4gICAgZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwge1xuICAgICAgICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuLyosIHRoaXNBcmcqLykge1xuICAgICAgICAgICAgdmFyIG9iamVjdCA9IEVTLlRvT2JqZWN0KHRoaXMpO1xuICAgICAgICAgICAgdmFyIHNlbGYgPSBzcGxpdFN0cmluZyAmJiBpc1N0cmluZyh0aGlzKSA/IHN0clNwbGl0KHRoaXMsICcnKSA6IG9iamVjdDtcbiAgICAgICAgICAgIHZhciBsZW5ndGggPSBFUy5Ub1VpbnQzMihzZWxmLmxlbmd0aCk7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gJEFycmF5KGxlbmd0aCk7XG4gICAgICAgICAgICB2YXIgVDtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIFQgPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIG5vIGNhbGxiYWNrIGZ1bmN0aW9uIG9yIGlmIGNhbGxiYWNrIGlzIG5vdCBhIGNhbGxhYmxlIGZ1bmN0aW9uXG4gICAgICAgICAgICBpZiAoIWlzQ2FsbGFibGUoY2FsbGJhY2tmbikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5wcm90b3R5cGUubWFwIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgaW4gc2VsZikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIFQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbaV0gPSBjYWxsYmFja2ZuKHNlbGZbaV0sIGksIG9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbaV0gPSBjYWxsYmFja2ZuLmNhbGwoVCwgc2VsZltpXSwgaSwgb2JqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9LCAhcHJvcGVybHlCb3hlc0NvbnRleHQoQXJyYXlQcm90b3R5cGUubWFwKSk7XG5cbiAgICAvLyBFUzUgMTUuNC40LjIwXG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuNC40LjIwXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vQ29yZV9KYXZhU2NyaXB0XzEuNV9SZWZlcmVuY2UvT2JqZWN0cy9BcnJheS9maWx0ZXJcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgICAgIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4vKiwgdGhpc0FyZyovKSB7XG4gICAgICAgICAgICB2YXIgb2JqZWN0ID0gRVMuVG9PYmplY3QodGhpcyk7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHNwbGl0U3RyaW5nICYmIGlzU3RyaW5nKHRoaXMpID8gc3RyU3BsaXQodGhpcywgJycpIDogb2JqZWN0O1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IEVTLlRvVWludDMyKHNlbGYubGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgIHZhciBUO1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgVCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgbm8gY2FsbGJhY2sgZnVuY3Rpb24gb3IgaWYgY2FsbGJhY2sgaXMgbm90IGEgY2FsbGFibGUgZnVuY3Rpb25cbiAgICAgICAgICAgIGlmICghaXNDYWxsYWJsZShjYWxsYmFja2ZuKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5LnByb3RvdHlwZS5maWx0ZXIgY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSBpbiBzZWxmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gc2VsZltpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBUID09PSAndW5kZWZpbmVkJyA/IGNhbGxiYWNrZm4odmFsdWUsIGksIG9iamVjdCkgOiBjYWxsYmFja2ZuLmNhbGwoVCwgdmFsdWUsIGksIG9iamVjdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHB1c2hDYWxsKHJlc3VsdCwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH0sICFwcm9wZXJseUJveGVzQ29udGV4dChBcnJheVByb3RvdHlwZS5maWx0ZXIpKTtcblxuICAgIC8vIEVTNSAxNS40LjQuMTZcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS40LjQuMTZcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9ldmVyeVxuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4vKiwgdGhpc0FyZyovKSB7XG4gICAgICAgICAgICB2YXIgb2JqZWN0ID0gRVMuVG9PYmplY3QodGhpcyk7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHNwbGl0U3RyaW5nICYmIGlzU3RyaW5nKHRoaXMpID8gc3RyU3BsaXQodGhpcywgJycpIDogb2JqZWN0O1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IEVTLlRvVWludDMyKHNlbGYubGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciBUO1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgVCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgbm8gY2FsbGJhY2sgZnVuY3Rpb24gb3IgaWYgY2FsbGJhY2sgaXMgbm90IGEgY2FsbGFibGUgZnVuY3Rpb25cbiAgICAgICAgICAgIGlmICghaXNDYWxsYWJsZShjYWxsYmFja2ZuKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5LnByb3RvdHlwZS5ldmVyeSBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpIGluIHNlbGYgJiYgISh0eXBlb2YgVCA9PT0gJ3VuZGVmaW5lZCcgPyBjYWxsYmFja2ZuKHNlbGZbaV0sIGksIG9iamVjdCkgOiBjYWxsYmFja2ZuLmNhbGwoVCwgc2VsZltpXSwgaSwgb2JqZWN0KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfSwgIXByb3Blcmx5Qm94ZXNDb250ZXh0KEFycmF5UHJvdG90eXBlLmV2ZXJ5KSk7XG5cbiAgICAvLyBFUzUgMTUuNC40LjE3XG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuNC40LjE3XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvc29tZVxuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuLyosIHRoaXNBcmcgKi8pIHtcbiAgICAgICAgICAgIHZhciBvYmplY3QgPSBFUy5Ub09iamVjdCh0aGlzKTtcbiAgICAgICAgICAgIHZhciBzZWxmID0gc3BsaXRTdHJpbmcgJiYgaXNTdHJpbmcodGhpcykgPyBzdHJTcGxpdCh0aGlzLCAnJykgOiBvYmplY3Q7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gRVMuVG9VaW50MzIoc2VsZi5sZW5ndGgpO1xuICAgICAgICAgICAgdmFyIFQ7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBUID0gYXJndW1lbnRzWzFdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiBubyBjYWxsYmFjayBmdW5jdGlvbiBvciBpZiBjYWxsYmFjayBpcyBub3QgYSBjYWxsYWJsZSBmdW5jdGlvblxuICAgICAgICAgICAgaWYgKCFpc0NhbGxhYmxlKGNhbGxiYWNrZm4pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkucHJvdG90eXBlLnNvbWUgY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSBpbiBzZWxmICYmICh0eXBlb2YgVCA9PT0gJ3VuZGVmaW5lZCcgPyBjYWxsYmFja2ZuKHNlbGZbaV0sIGksIG9iamVjdCkgOiBjYWxsYmFja2ZuLmNhbGwoVCwgc2VsZltpXSwgaSwgb2JqZWN0KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSwgIXByb3Blcmx5Qm94ZXNDb250ZXh0KEFycmF5UHJvdG90eXBlLnNvbWUpKTtcblxuICAgIC8vIEVTNSAxNS40LjQuMjFcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS40LjQuMjFcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9Db3JlX0phdmFTY3JpcHRfMS41X1JlZmVyZW5jZS9PYmplY3RzL0FycmF5L3JlZHVjZVxuICAgIHZhciByZWR1Y2VDb2VyY2VzVG9PYmplY3QgPSBmYWxzZTtcbiAgICBpZiAoQXJyYXlQcm90b3R5cGUucmVkdWNlKSB7XG4gICAgICAgIHJlZHVjZUNvZXJjZXNUb09iamVjdCA9IHR5cGVvZiBBcnJheVByb3RvdHlwZS5yZWR1Y2UuY2FsbCgnZXM1JywgZnVuY3Rpb24gKF8sIF9fLCBfX18sIGxpc3QpIHtcbiAgICAgICAgICAgIHJldHVybiBsaXN0O1xuICAgICAgICB9KSA9PT0gJ29iamVjdCc7XG4gICAgfVxuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbi8qLCBpbml0aWFsVmFsdWUqLykge1xuICAgICAgICAgICAgdmFyIG9iamVjdCA9IEVTLlRvT2JqZWN0KHRoaXMpO1xuICAgICAgICAgICAgdmFyIHNlbGYgPSBzcGxpdFN0cmluZyAmJiBpc1N0cmluZyh0aGlzKSA/IHN0clNwbGl0KHRoaXMsICcnKSA6IG9iamVjdDtcbiAgICAgICAgICAgIHZhciBsZW5ndGggPSBFUy5Ub1VpbnQzMihzZWxmLmxlbmd0aCk7XG5cbiAgICAgICAgICAgIC8vIElmIG5vIGNhbGxiYWNrIGZ1bmN0aW9uIG9yIGlmIGNhbGxiYWNrIGlzIG5vdCBhIGNhbGxhYmxlIGZ1bmN0aW9uXG4gICAgICAgICAgICBpZiAoIWlzQ2FsbGFibGUoY2FsbGJhY2tmbikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5wcm90b3R5cGUucmVkdWNlIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBubyB2YWx1ZSB0byByZXR1cm4gaWYgbm8gaW5pdGlhbCB2YWx1ZSBhbmQgYW4gZW1wdHkgYXJyYXlcbiAgICAgICAgICAgIGlmIChsZW5ndGggPT09IDAgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDIpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgaW4gc2VsZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gc2VsZltpKytdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBpZiBhcnJheSBjb250YWlucyBubyB2YWx1ZXMsIG5vIGluaXRpYWwgdmFsdWUgdG8gcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIGlmICgrK2kgPj0gbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IHdoaWxlICh0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpIGluIHNlbGYpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2tmbihyZXN1bHQsIHNlbGZbaV0sIGksIG9iamVjdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfSwgIXJlZHVjZUNvZXJjZXNUb09iamVjdCk7XG5cbiAgICAvLyBFUzUgMTUuNC40LjIyXG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuNC40LjIyXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vQ29yZV9KYXZhU2NyaXB0XzEuNV9SZWZlcmVuY2UvT2JqZWN0cy9BcnJheS9yZWR1Y2VSaWdodFxuICAgIHZhciByZWR1Y2VSaWdodENvZXJjZXNUb09iamVjdCA9IGZhbHNlO1xuICAgIGlmIChBcnJheVByb3RvdHlwZS5yZWR1Y2VSaWdodCkge1xuICAgICAgICByZWR1Y2VSaWdodENvZXJjZXNUb09iamVjdCA9IHR5cGVvZiBBcnJheVByb3RvdHlwZS5yZWR1Y2VSaWdodC5jYWxsKCdlczUnLCBmdW5jdGlvbiAoXywgX18sIF9fXywgbGlzdCkge1xuICAgICAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgICAgIH0pID09PSAnb2JqZWN0JztcbiAgICB9XG4gICAgZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwge1xuICAgICAgICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbi8qLCBpbml0aWFsKi8pIHtcbiAgICAgICAgICAgIHZhciBvYmplY3QgPSBFUy5Ub09iamVjdCh0aGlzKTtcbiAgICAgICAgICAgIHZhciBzZWxmID0gc3BsaXRTdHJpbmcgJiYgaXNTdHJpbmcodGhpcykgPyBzdHJTcGxpdCh0aGlzLCAnJykgOiBvYmplY3Q7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gRVMuVG9VaW50MzIoc2VsZi5sZW5ndGgpO1xuXG4gICAgICAgICAgICAvLyBJZiBubyBjYWxsYmFjayBmdW5jdGlvbiBvciBpZiBjYWxsYmFjayBpcyBub3QgYSBjYWxsYWJsZSBmdW5jdGlvblxuICAgICAgICAgICAgaWYgKCFpc0NhbGxhYmxlKGNhbGxiYWNrZm4pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0IGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBubyB2YWx1ZSB0byByZXR1cm4gaWYgbm8gaW5pdGlhbCB2YWx1ZSwgZW1wdHkgYXJyYXlcbiAgICAgICAgICAgIGlmIChsZW5ndGggPT09IDAgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3JlZHVjZVJpZ2h0IG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICAgICAgdmFyIGkgPSBsZW5ndGggLSAxO1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMikge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSBpbiBzZWxmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBzZWxmW2ktLV07XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIGFycmF5IGNvbnRhaW5zIG5vIHZhbHVlcywgbm8gaW5pdGlhbCB2YWx1ZSB0byByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgaWYgKC0taSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3JlZHVjZVJpZ2h0IG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSB3aGlsZSAodHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBpZiAoaSBpbiBzZWxmKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrZm4ocmVzdWx0LCBzZWxmW2ldLCBpLCBvYmplY3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKGktLSk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9LCAhcmVkdWNlUmlnaHRDb2VyY2VzVG9PYmplY3QpO1xuXG4gICAgLy8gRVM1IDE1LjQuNC4xNFxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuNC4xNFxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2luZGV4T2ZcbiAgICB2YXIgaGFzRmlyZWZveDJJbmRleE9mQnVnID0gQXJyYXlQcm90b3R5cGUuaW5kZXhPZiAmJiBbMCwgMV0uaW5kZXhPZigxLCAyKSAhPT0gLTE7XG4gICAgZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwge1xuICAgICAgICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQvKiwgZnJvbUluZGV4ICovKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHNwbGl0U3RyaW5nICYmIGlzU3RyaW5nKHRoaXMpID8gc3RyU3BsaXQodGhpcywgJycpIDogRVMuVG9PYmplY3QodGhpcyk7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gRVMuVG9VaW50MzIoc2VsZi5sZW5ndGgpO1xuXG4gICAgICAgICAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBpID0gRVMuVG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGhhbmRsZSBuZWdhdGl2ZSBpbmRpY2VzXG4gICAgICAgICAgICBpID0gaSA+PSAwID8gaSA6IG1heCgwLCBsZW5ndGggKyBpKTtcbiAgICAgICAgICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSBpbiBzZWxmICYmIHNlbGZbaV0gPT09IHNlYXJjaEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgfSwgaGFzRmlyZWZveDJJbmRleE9mQnVnKTtcblxuICAgIC8vIEVTNSAxNS40LjQuMTVcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS40LjQuMTVcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9sYXN0SW5kZXhPZlxuICAgIHZhciBoYXNGaXJlZm94Mkxhc3RJbmRleE9mQnVnID0gQXJyYXlQcm90b3R5cGUubGFzdEluZGV4T2YgJiYgWzAsIDFdLmxhc3RJbmRleE9mKDAsIC0zKSAhPT0gLTE7XG4gICAgZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwge1xuICAgICAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudC8qLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gc3BsaXRTdHJpbmcgJiYgaXNTdHJpbmcodGhpcykgPyBzdHJTcGxpdCh0aGlzLCAnJykgOiBFUy5Ub09iamVjdCh0aGlzKTtcbiAgICAgICAgICAgIHZhciBsZW5ndGggPSBFUy5Ub1VpbnQzMihzZWxmLmxlbmd0aCk7XG5cbiAgICAgICAgICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaSA9IGxlbmd0aCAtIDE7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBpID0gbWluKGksIEVTLlRvSW50ZWdlcihhcmd1bWVudHNbMV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGhhbmRsZSBuZWdhdGl2ZSBpbmRpY2VzXG4gICAgICAgICAgICBpID0gaSA+PSAwID8gaSA6IGxlbmd0aCAtIE1hdGguYWJzKGkpO1xuICAgICAgICAgICAgZm9yICg7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgaW4gc2VsZiAmJiBzZWFyY2hFbGVtZW50ID09PSBzZWxmW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgIH0sIGhhc0ZpcmVmb3gyTGFzdEluZGV4T2ZCdWcpO1xuXG4gICAgLy8gRVM1IDE1LjQuNC4xMlxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuNC4xMlxuICAgIHZhciBzcGxpY2VOb29wUmV0dXJuc0VtcHR5QXJyYXkgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYSA9IFsxLCAyXTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGEuc3BsaWNlKCk7XG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gMiAmJiBpc0FycmF5KHJlc3VsdCkgJiYgcmVzdWx0Lmxlbmd0aCA9PT0gMDtcbiAgICB9KCkpO1xuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgLy8gU2FmYXJpIDUuMCBidWcgd2hlcmUgLnNwbGljZSgpIHJldHVybnMgdW5kZWZpbmVkXG4gICAgICAgIHNwbGljZTogZnVuY3Rpb24gc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCkge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBhcnJheV9zcGxpY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sICFzcGxpY2VOb29wUmV0dXJuc0VtcHR5QXJyYXkpO1xuXG4gICAgdmFyIHNwbGljZVdvcmtzV2l0aEVtcHR5T2JqZWN0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9iaiA9IHt9O1xuICAgICAgICBBcnJheVByb3RvdHlwZS5zcGxpY2UuY2FsbChvYmosIDAsIDAsIDEpO1xuICAgICAgICByZXR1cm4gb2JqLmxlbmd0aCA9PT0gMTtcbiAgICB9KCkpO1xuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgc3BsaWNlOiBmdW5jdGlvbiBzcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50KSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgdGhpcy5sZW5ndGggPSBtYXgoRVMuVG9JbnRlZ2VyKHRoaXMubGVuZ3RoKSwgMCk7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIGRlbGV0ZUNvdW50ICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIGFyZ3MgPSBhcnJheVNsaWNlKGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICAgICAgICBwdXNoQ2FsbChhcmdzLCB0aGlzLmxlbmd0aCAtIHN0YXJ0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhcmdzWzFdID0gRVMuVG9JbnRlZ2VyKGRlbGV0ZUNvdW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXJyYXlfc3BsaWNlLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgfSwgIXNwbGljZVdvcmtzV2l0aEVtcHR5T2JqZWN0KTtcbiAgICB2YXIgc3BsaWNlV29ya3NXaXRoTGFyZ2VTcGFyc2VBcnJheXMgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBQZXIgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8yOTVcbiAgICAgICAgLy8gU2FmYXJpIDcvOCBicmVha3Mgd2l0aCBzcGFyc2UgYXJyYXlzIG9mIHNpemUgMWU1IG9yIGdyZWF0ZXJcbiAgICAgICAgdmFyIGFyciA9IG5ldyAkQXJyYXkoMWU1KTtcbiAgICAgICAgLy8gbm90ZTogdGhlIGluZGV4IE1VU1QgYmUgOCBvciBsYXJnZXIgb3IgdGhlIHRlc3Qgd2lsbCBmYWxzZSBwYXNzXG4gICAgICAgIGFycls4XSA9ICd4JztcbiAgICAgICAgYXJyLnNwbGljZSgxLCAxKTtcbiAgICAgICAgLy8gbm90ZTogdGhpcyB0ZXN0IG11c3QgYmUgZGVmaW5lZCAqYWZ0ZXIqIHRoZSBpbmRleE9mIHNoaW1cbiAgICAgICAgLy8gcGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMzEzXG4gICAgICAgIHJldHVybiBhcnIuaW5kZXhPZigneCcpID09PSA3O1xuICAgIH0oKSk7XG4gICAgdmFyIHNwbGljZVdvcmtzV2l0aFNtYWxsU3BhcnNlQXJyYXlzID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gUGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMjk1XG4gICAgICAgIC8vIE9wZXJhIDEyLjE1IGJyZWFrcyBvbiB0aGlzLCBubyBpZGVhIHdoeS5cbiAgICAgICAgdmFyIG4gPSAyNTY7XG4gICAgICAgIHZhciBhcnIgPSBbXTtcbiAgICAgICAgYXJyW25dID0gJ2EnO1xuICAgICAgICBhcnIuc3BsaWNlKG4gKyAxLCAwLCAnYicpO1xuICAgICAgICByZXR1cm4gYXJyW25dID09PSAnYSc7XG4gICAgfSgpKTtcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgICAgIHNwbGljZTogZnVuY3Rpb24gc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCkge1xuICAgICAgICAgICAgdmFyIE8gPSBFUy5Ub09iamVjdCh0aGlzKTtcbiAgICAgICAgICAgIHZhciBBID0gW107XG4gICAgICAgICAgICB2YXIgbGVuID0gRVMuVG9VaW50MzIoTy5sZW5ndGgpO1xuICAgICAgICAgICAgdmFyIHJlbGF0aXZlU3RhcnQgPSBFUy5Ub0ludGVnZXIoc3RhcnQpO1xuICAgICAgICAgICAgdmFyIGFjdHVhbFN0YXJ0ID0gcmVsYXRpdmVTdGFydCA8IDAgPyBtYXgoKGxlbiArIHJlbGF0aXZlU3RhcnQpLCAwKSA6IG1pbihyZWxhdGl2ZVN0YXJ0LCBsZW4pO1xuICAgICAgICAgICAgdmFyIGFjdHVhbERlbGV0ZUNvdW50ID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMFxuICAgICAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgICAgIDogYXJndW1lbnRzLmxlbmd0aCA9PT0gMVxuICAgICAgICAgICAgICAgICAgICA/IGxlbiAtIGFjdHVhbFN0YXJ0XG4gICAgICAgICAgICAgICAgICAgIDogbWluKG1heChFUy5Ub0ludGVnZXIoZGVsZXRlQ291bnQpLCAwKSwgbGVuIC0gYWN0dWFsU3RhcnQpO1xuXG4gICAgICAgICAgICB2YXIgayA9IDA7XG4gICAgICAgICAgICB2YXIgZnJvbTtcbiAgICAgICAgICAgIHdoaWxlIChrIDwgYWN0dWFsRGVsZXRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICBmcm9tID0gJFN0cmluZyhhY3R1YWxTdGFydCArIGspO1xuICAgICAgICAgICAgICAgIGlmIChvd25zKE8sIGZyb20pKSB7XG4gICAgICAgICAgICAgICAgICAgIEFba10gPSBPW2Zyb21dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBrICs9IDE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBpdGVtcyA9IGFycmF5U2xpY2UoYXJndW1lbnRzLCAyKTtcbiAgICAgICAgICAgIHZhciBpdGVtQ291bnQgPSBpdGVtcy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgdG87XG4gICAgICAgICAgICBpZiAoaXRlbUNvdW50IDwgYWN0dWFsRGVsZXRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICBrID0gYWN0dWFsU3RhcnQ7XG4gICAgICAgICAgICAgICAgdmFyIG1heEsgPSBsZW4gLSBhY3R1YWxEZWxldGVDb3VudDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoayA8IG1heEspIHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbSA9ICRTdHJpbmcoayArIGFjdHVhbERlbGV0ZUNvdW50KTtcbiAgICAgICAgICAgICAgICAgICAgdG8gPSAkU3RyaW5nKGsgKyBpdGVtQ291bnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3ducyhPLCBmcm9tKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgT1t0b10gPSBPW2Zyb21dO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIE9bdG9dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGsgKz0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgayA9IGxlbjtcbiAgICAgICAgICAgICAgICB2YXIgbWluSyA9IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50ICsgaXRlbUNvdW50O1xuICAgICAgICAgICAgICAgIHdoaWxlIChrID4gbWluSykge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgT1trIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIGsgLT0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW1Db3VudCA+IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgayA9IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50O1xuICAgICAgICAgICAgICAgIHdoaWxlIChrID4gYWN0dWFsU3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbSA9ICRTdHJpbmcoayArIGFjdHVhbERlbGV0ZUNvdW50IC0gMSk7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gJFN0cmluZyhrICsgaXRlbUNvdW50IC0gMSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvd25zKE8sIGZyb20pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBPW3RvXSA9IE9bZnJvbV07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgT1t0b107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgayAtPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGsgPSBhY3R1YWxTdGFydDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBPW2tdID0gaXRlbXNbaV07XG4gICAgICAgICAgICAgICAgayArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgTy5sZW5ndGggPSBsZW4gLSBhY3R1YWxEZWxldGVDb3VudCArIGl0ZW1Db3VudDtcblxuICAgICAgICAgICAgcmV0dXJuIEE7XG4gICAgICAgIH1cbiAgICB9LCAhc3BsaWNlV29ya3NXaXRoTGFyZ2VTcGFyc2VBcnJheXMgfHwgIXNwbGljZVdvcmtzV2l0aFNtYWxsU3BhcnNlQXJyYXlzKTtcblxuICAgIHZhciBvcmlnaW5hbEpvaW4gPSBBcnJheVByb3RvdHlwZS5qb2luO1xuICAgIHZhciBoYXNTdHJpbmdKb2luQnVnO1xuICAgIHRyeSB7XG4gICAgICAgIGhhc1N0cmluZ0pvaW5CdWcgPSBBcnJheS5wcm90b3R5cGUuam9pbi5jYWxsKCcxMjMnLCAnLCcpICE9PSAnMSwyLDMnO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaGFzU3RyaW5nSm9pbkJ1ZyA9IHRydWU7XG4gICAgfVxuICAgIGlmIChoYXNTdHJpbmdKb2luQnVnKSB7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlcCA9IHR5cGVvZiBzZXBhcmF0b3IgPT09ICd1bmRlZmluZWQnID8gJywnIDogc2VwYXJhdG9yO1xuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbEpvaW4uY2FsbChpc1N0cmluZyh0aGlzKSA/IHN0clNwbGl0KHRoaXMsICcnKSA6IHRoaXMsIHNlcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGhhc1N0cmluZ0pvaW5CdWcpO1xuICAgIH1cblxuICAgIHZhciBoYXNKb2luVW5kZWZpbmVkQnVnID0gWzEsIDJdLmpvaW4odW5kZWZpbmVkKSAhPT0gJzEsMic7XG4gICAgaWYgKGhhc0pvaW5VbmRlZmluZWRCdWcpIHtcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwge1xuICAgICAgICAgICAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VwID0gdHlwZW9mIHNlcGFyYXRvciA9PT0gJ3VuZGVmaW5lZCcgPyAnLCcgOiBzZXBhcmF0b3I7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsSm9pbi5jYWxsKHRoaXMsIHNlcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGhhc0pvaW5VbmRlZmluZWRCdWcpO1xuICAgIH1cblxuICAgIHZhciBwdXNoU2hpbSA9IGZ1bmN0aW9uIHB1c2goaXRlbSkge1xuICAgICAgICB2YXIgTyA9IEVTLlRvT2JqZWN0KHRoaXMpO1xuICAgICAgICB2YXIgbiA9IEVTLlRvVWludDMyKE8ubGVuZ3RoKTtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIE9bbiArIGldID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICB9XG4gICAgICAgIE8ubGVuZ3RoID0gbiArIGk7XG4gICAgICAgIHJldHVybiBuICsgaTtcbiAgICB9O1xuXG4gICAgdmFyIHB1c2hJc05vdEdlbmVyaWMgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb2JqID0ge307XG4gICAgICAgIHZhciByZXN1bHQgPSBBcnJheS5wcm90b3R5cGUucHVzaC5jYWxsKG9iaiwgdW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCAhPT0gMSB8fCBvYmoubGVuZ3RoICE9PSAxIHx8IHR5cGVvZiBvYmpbMF0gIT09ICd1bmRlZmluZWQnIHx8ICFvd25zKG9iaiwgMCk7XG4gICAgfSgpKTtcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgICAgIHB1c2g6IGZ1bmN0aW9uIHB1c2goaXRlbSkge1xuICAgICAgICAgICAgaWYgKGlzQXJyYXkodGhpcykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXlfcHVzaC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHB1c2hTaGltLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICB9LCBwdXNoSXNOb3RHZW5lcmljKTtcblxuICAgIC8vIFRoaXMgZml4ZXMgYSB2ZXJ5IHdlaXJkIGJ1ZyBpbiBPcGVyYSAxMC42IHdoZW4gcHVzaGluZyBgdW5kZWZpbmVkXG4gICAgdmFyIHB1c2hVbmRlZmluZWRJc1dlaXJkID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyciA9IFtdO1xuICAgICAgICB2YXIgcmVzdWx0ID0gYXJyLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCAhPT0gMSB8fCBhcnIubGVuZ3RoICE9PSAxIHx8IHR5cGVvZiBhcnJbMF0gIT09ICd1bmRlZmluZWQnIHx8ICFvd25zKGFyciwgMCk7XG4gICAgfSgpKTtcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7IHB1c2g6IHB1c2hTaGltIH0sIHB1c2hVbmRlZmluZWRJc1dlaXJkKTtcblxuICAgIC8vIEVTNSAxNS4yLjMuMTRcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjQuNC4xMFxuICAgIC8vIEZpeCBib3hlZCBzdHJpbmcgYnVnXG4gICAgZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwge1xuICAgICAgICBzbGljZTogZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgICAgIHZhciBhcnIgPSBpc1N0cmluZyh0aGlzKSA/IHN0clNwbGl0KHRoaXMsICcnKSA6IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gYXJyYXlTbGljZUFwcGx5KGFyciwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH0sIHNwbGl0U3RyaW5nKTtcblxuICAgIHZhciBzb3J0SWdub3Jlc05vbkZ1bmN0aW9ucyA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBbMSwgMl0uc29ydChudWxsKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBbMSwgMl0uc29ydCh7fSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KCkpO1xuICAgIHZhciBzb3J0VGhyb3dzT25SZWdleCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIHRoaXMgaXMgYSBwcm9ibGVtIGluIEZpcmVmb3ggNCwgaW4gd2hpY2ggYHR5cGVvZiAvYS8gPT09ICdmdW5jdGlvbidgXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBbMSwgMl0uc29ydCgvYS8pO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KCkpO1xuICAgIHZhciBzb3J0SWdub3Jlc1VuZGVmaW5lZCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGFwcGxpZXMgaW4gSUUgOCwgZm9yIG9uZS5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIFsxLCAyXS5zb3J0KHVuZGVmaW5lZCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0oKSk7XG4gICAgZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwge1xuICAgICAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVGbikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb21wYXJlRm4gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5U29ydCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNDYWxsYWJsZShjb21wYXJlRm4pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkucHJvdG90eXBlLnNvcnQgY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXJyYXlTb3J0KHRoaXMsIGNvbXBhcmVGbik7XG4gICAgICAgIH1cbiAgICB9LCBzb3J0SWdub3Jlc05vbkZ1bmN0aW9ucyB8fCAhc29ydElnbm9yZXNVbmRlZmluZWQgfHwgIXNvcnRUaHJvd3NPblJlZ2V4KTtcblxuICAgIC8vXG4gICAgLy8gT2JqZWN0XG4gICAgLy8gPT09PT09XG4gICAgLy9cblxuICAgIC8vIEVTNSAxNS4yLjMuMTRcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4yLjMuMTRcblxuICAgIC8vIGh0dHA6Ly93aGF0dGhlaGVhZHNhaWQuY29tLzIwMTAvMTAvYS1zYWZlci1vYmplY3Qta2V5cy1jb21wYXRpYmlsaXR5LWltcGxlbWVudGF0aW9uXG4gICAgdmFyIGhhc0RvbnRFbnVtQnVnID0gIWlzRW51bSh7ICd0b1N0cmluZyc6IG51bGwgfSwgJ3RvU3RyaW5nJyk7IC8vIGpzY3M6aWdub3JlIGRpc2FsbG93UXVvdGVkS2V5c0luT2JqZWN0c1xuICAgIHZhciBoYXNQcm90b0VudW1CdWcgPSBpc0VudW0oZnVuY3Rpb24gKCkge30sICdwcm90b3R5cGUnKTtcbiAgICB2YXIgaGFzU3RyaW5nRW51bUJ1ZyA9ICFvd25zKCd4JywgJzAnKTtcbiAgICB2YXIgZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUgPSBmdW5jdGlvbiAobykge1xuICAgICAgICB2YXIgY3RvciA9IG8uY29uc3RydWN0b3I7XG4gICAgICAgIHJldHVybiBjdG9yICYmIGN0b3IucHJvdG90eXBlID09PSBvO1xuICAgIH07XG4gICAgdmFyIGV4Y2x1ZGVkS2V5cyA9IHtcbiAgICAgICAgJGFwcGxpY2F0aW9uQ2FjaGU6IHRydWUsXG4gICAgICAgICRjb25zb2xlOiB0cnVlLFxuICAgICAgICAkZXh0ZXJuYWw6IHRydWUsXG4gICAgICAgICRmcmFtZTogdHJ1ZSxcbiAgICAgICAgJGZyYW1lRWxlbWVudDogdHJ1ZSxcbiAgICAgICAgJGZyYW1lczogdHJ1ZSxcbiAgICAgICAgJGlubmVySGVpZ2h0OiB0cnVlLFxuICAgICAgICAkaW5uZXJXaWR0aDogdHJ1ZSxcbiAgICAgICAgJG9ubW96ZnVsbHNjcmVlbmNoYW5nZTogdHJ1ZSxcbiAgICAgICAgJG9ubW96ZnVsbHNjcmVlbmVycm9yOiB0cnVlLFxuICAgICAgICAkb3V0ZXJIZWlnaHQ6IHRydWUsXG4gICAgICAgICRvdXRlcldpZHRoOiB0cnVlLFxuICAgICAgICAkcGFnZVhPZmZzZXQ6IHRydWUsXG4gICAgICAgICRwYWdlWU9mZnNldDogdHJ1ZSxcbiAgICAgICAgJHBhcmVudDogdHJ1ZSxcbiAgICAgICAgJHNjcm9sbExlZnQ6IHRydWUsXG4gICAgICAgICRzY3JvbGxUb3A6IHRydWUsXG4gICAgICAgICRzY3JvbGxYOiB0cnVlLFxuICAgICAgICAkc2Nyb2xsWTogdHJ1ZSxcbiAgICAgICAgJHNlbGY6IHRydWUsXG4gICAgICAgICR3ZWJraXRJbmRleGVkREI6IHRydWUsXG4gICAgICAgICR3ZWJraXRTdG9yYWdlSW5mbzogdHJ1ZSxcbiAgICAgICAgJHdpbmRvdzogdHJ1ZSxcblxuICAgICAgICAkd2lkdGg6IHRydWUsXG4gICAgICAgICRoZWlnaHQ6IHRydWUsXG4gICAgICAgICR0b3A6IHRydWUsXG4gICAgICAgICRsb2NhbFN0b3JhZ2U6IHRydWVcbiAgICB9O1xuICAgIHZhciBoYXNBdXRvbWF0aW9uRXF1YWxpdHlCdWcgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAvKiBnbG9iYWxzIHdpbmRvdyAqL1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBrIGluIHdpbmRvdykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIWV4Y2x1ZGVkS2V5c1snJCcgKyBrXSAmJiBvd25zKHdpbmRvdywgaykgJiYgd2luZG93W2tdICE9PSBudWxsICYmIHR5cGVvZiB3aW5kb3dba10gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKHdpbmRvd1trXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KCkpO1xuICAgIHZhciBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZUlmTm90QnVnZ3kgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyB8fCAhaGFzQXV0b21hdGlvbkVxdWFsaXR5QnVnKSB7XG4gICAgICAgICAgICByZXR1cm4gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKG9iamVjdCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIGRvbnRFbnVtcyA9IFtcbiAgICAgICAgJ3RvU3RyaW5nJyxcbiAgICAgICAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgICAgICAgJ3ZhbHVlT2YnLFxuICAgICAgICAnaGFzT3duUHJvcGVydHknLFxuICAgICAgICAnaXNQcm90b3R5cGVPZicsXG4gICAgICAgICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG4gICAgICAgICdjb25zdHJ1Y3RvcidcbiAgICBdO1xuICAgIHZhciBkb250RW51bXNMZW5ndGggPSBkb250RW51bXMubGVuZ3RoO1xuXG4gICAgLy8gdGFrZW4gZGlyZWN0bHkgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbGpoYXJiL2lzLWFyZ3VtZW50cy9ibG9iL21hc3Rlci9pbmRleC5qc1xuICAgIC8vIGNhbiBiZSByZXBsYWNlZCB3aXRoIHJlcXVpcmUoJ2lzLWFyZ3VtZW50cycpIGlmIHdlIGV2ZXIgdXNlIGEgYnVpbGQgcHJvY2VzcyBpbnN0ZWFkXG4gICAgdmFyIGlzU3RhbmRhcmRBcmd1bWVudHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdG9TdHIodmFsdWUpID09PSAnW29iamVjdCBBcmd1bWVudHNdJztcbiAgICB9O1xuICAgIHZhciBpc0xlZ2FjeUFyZ3VtZW50cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbFxuICAgICAgICAgICAgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0J1xuICAgICAgICAgICAgJiYgdHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ251bWJlcidcbiAgICAgICAgICAgICYmIHZhbHVlLmxlbmd0aCA+PSAwXG4gICAgICAgICAgICAmJiAhaXNBcnJheSh2YWx1ZSlcbiAgICAgICAgICAgICYmIGlzQ2FsbGFibGUodmFsdWUuY2FsbGVlKTtcbiAgICB9O1xuICAgIHZhciBpc0FyZ3VtZW50cyA9IGlzU3RhbmRhcmRBcmd1bWVudHMoYXJndW1lbnRzKSA/IGlzU3RhbmRhcmRBcmd1bWVudHMgOiBpc0xlZ2FjeUFyZ3VtZW50cztcblxuICAgIGRlZmluZVByb3BlcnRpZXMoJE9iamVjdCwge1xuICAgICAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICAgICAgICAgICAgdmFyIGlzRm4gPSBpc0NhbGxhYmxlKG9iamVjdCk7XG4gICAgICAgICAgICB2YXIgaXNBcmdzID0gaXNBcmd1bWVudHMob2JqZWN0KTtcbiAgICAgICAgICAgIHZhciBpc09iamVjdCA9IG9iamVjdCAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JztcbiAgICAgICAgICAgIHZhciBpc1N0ciA9IGlzT2JqZWN0ICYmIGlzU3RyaW5nKG9iamVjdCk7XG5cbiAgICAgICAgICAgIGlmICghaXNPYmplY3QgJiYgIWlzRm4gJiYgIWlzQXJncykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5rZXlzIGNhbGxlZCBvbiBhIG5vbi1vYmplY3QnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHRoZUtleXMgPSBbXTtcbiAgICAgICAgICAgIHZhciBza2lwUHJvdG8gPSBoYXNQcm90b0VudW1CdWcgJiYgaXNGbjtcbiAgICAgICAgICAgIGlmICgoaXNTdHIgJiYgaGFzU3RyaW5nRW51bUJ1ZykgfHwgaXNBcmdzKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmplY3QubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgcHVzaENhbGwodGhlS2V5cywgJFN0cmluZyhpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWlzQXJncykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIG5hbWUgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHNraXBQcm90byAmJiBuYW1lID09PSAncHJvdG90eXBlJykgJiYgb3ducyhvYmplY3QsIG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwdXNoQ2FsbCh0aGVLZXlzLCAkU3RyaW5nKG5hbWUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGhhc0RvbnRFbnVtQnVnKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNraXBDb25zdHJ1Y3RvciA9IGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlSWZOb3RCdWdneShvYmplY3QpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZG9udEVudW1zTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRvbnRFbnVtID0gZG9udEVudW1zW2pdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShza2lwQ29uc3RydWN0b3IgJiYgZG9udEVudW0gPT09ICdjb25zdHJ1Y3RvcicpICYmIG93bnMob2JqZWN0LCBkb250RW51bSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHB1c2hDYWxsKHRoZUtleXMsIGRvbnRFbnVtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGVLZXlzO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIga2V5c1dvcmtzV2l0aEFyZ3VtZW50cyA9ICRPYmplY3Qua2V5cyAmJiAoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBTYWZhcmkgNS4wIGJ1Z1xuICAgICAgICByZXR1cm4gJE9iamVjdC5rZXlzKGFyZ3VtZW50cykubGVuZ3RoID09PSAyO1xuICAgIH0oMSwgMikpO1xuICAgIHZhciBrZXlzSGFzQXJndW1lbnRzTGVuZ3RoQnVnID0gJE9iamVjdC5rZXlzICYmIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdLZXlzID0gJE9iamVjdC5rZXlzKGFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoICE9PSAxIHx8IGFyZ0tleXMubGVuZ3RoICE9PSAxIHx8IGFyZ0tleXNbMF0gIT09IDE7XG4gICAgfSgxKSk7XG4gICAgdmFyIG9yaWdpbmFsS2V5cyA9ICRPYmplY3Qua2V5cztcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKCRPYmplY3QsIHtcbiAgICAgICAga2V5czogZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgICAgICAgICAgIGlmIChpc0FyZ3VtZW50cyhvYmplY3QpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsS2V5cyhhcnJheVNsaWNlKG9iamVjdCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxLZXlzKG9iamVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCAha2V5c1dvcmtzV2l0aEFyZ3VtZW50cyB8fCBrZXlzSGFzQXJndW1lbnRzTGVuZ3RoQnVnKTtcblxuICAgIC8vXG4gICAgLy8gRGF0ZVxuICAgIC8vID09PT1cbiAgICAvL1xuXG4gICAgdmFyIGhhc05lZ2F0aXZlTW9udGhZZWFyQnVnID0gbmV3IERhdGUoLTM1MDk4MjczMjk2MDAyOTIpLmdldFVUQ01vbnRoKCkgIT09IDA7XG4gICAgdmFyIGFOZWdhdGl2ZVRlc3REYXRlID0gbmV3IERhdGUoLTE1MDk4NDIyODk2MDAyOTIpO1xuICAgIHZhciBhUG9zaXRpdmVUZXN0RGF0ZSA9IG5ldyBEYXRlKDE0NDk2NjI0MDAwMDApO1xuICAgIHZhciBoYXNUb1VUQ1N0cmluZ0Zvcm1hdEJ1ZyA9IGFOZWdhdGl2ZVRlc3REYXRlLnRvVVRDU3RyaW5nKCkgIT09ICdNb24sIDAxIEphbiAtNDU4NzUgMTE6NTk6NTkgR01UJztcbiAgICB2YXIgaGFzVG9EYXRlU3RyaW5nRm9ybWF0QnVnO1xuICAgIHZhciBoYXNUb1N0cmluZ0Zvcm1hdEJ1ZztcbiAgICB2YXIgdGltZVpvbmVPZmZzZXQgPSBhTmVnYXRpdmVUZXN0RGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIGlmICh0aW1lWm9uZU9mZnNldCA8IC03MjApIHtcbiAgICAgICAgaGFzVG9EYXRlU3RyaW5nRm9ybWF0QnVnID0gYU5lZ2F0aXZlVGVzdERhdGUudG9EYXRlU3RyaW5nKCkgIT09ICdUdWUgSmFuIDAyIC00NTg3NSc7XG4gICAgICAgIGhhc1RvU3RyaW5nRm9ybWF0QnVnID0gISgvXlRodSBEZWMgMTAgMjAxNSBcXGRcXGQ6XFxkXFxkOlxcZFxcZCBHTVRbLStdXFxkXFxkXFxkXFxkKD86IHwkKS8pLnRlc3QoU3RyaW5nKGFQb3NpdGl2ZVRlc3REYXRlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaGFzVG9EYXRlU3RyaW5nRm9ybWF0QnVnID0gYU5lZ2F0aXZlVGVzdERhdGUudG9EYXRlU3RyaW5nKCkgIT09ICdNb24gSmFuIDAxIC00NTg3NSc7XG4gICAgICAgIGhhc1RvU3RyaW5nRm9ybWF0QnVnID0gISgvXldlZCBEZWMgMDkgMjAxNSBcXGRcXGQ6XFxkXFxkOlxcZFxcZCBHTVRbLStdXFxkXFxkXFxkXFxkKD86IHwkKS8pLnRlc3QoU3RyaW5nKGFQb3NpdGl2ZVRlc3REYXRlKSk7XG4gICAgfVxuXG4gICAgdmFyIG9yaWdpbmFsR2V0RnVsbFllYXIgPSBjYWxsLmJpbmQoRGF0ZS5wcm90b3R5cGUuZ2V0RnVsbFllYXIpO1xuICAgIHZhciBvcmlnaW5hbEdldE1vbnRoID0gY2FsbC5iaW5kKERhdGUucHJvdG90eXBlLmdldE1vbnRoKTtcbiAgICB2YXIgb3JpZ2luYWxHZXREYXRlID0gY2FsbC5iaW5kKERhdGUucHJvdG90eXBlLmdldERhdGUpO1xuICAgIHZhciBvcmlnaW5hbEdldFVUQ0Z1bGxZZWFyID0gY2FsbC5iaW5kKERhdGUucHJvdG90eXBlLmdldFVUQ0Z1bGxZZWFyKTtcbiAgICB2YXIgb3JpZ2luYWxHZXRVVENNb250aCA9IGNhbGwuYmluZChEYXRlLnByb3RvdHlwZS5nZXRVVENNb250aCk7XG4gICAgdmFyIG9yaWdpbmFsR2V0VVRDRGF0ZSA9IGNhbGwuYmluZChEYXRlLnByb3RvdHlwZS5nZXRVVENEYXRlKTtcbiAgICB2YXIgb3JpZ2luYWxHZXRVVENEYXkgPSBjYWxsLmJpbmQoRGF0ZS5wcm90b3R5cGUuZ2V0VVRDRGF5KTtcbiAgICB2YXIgb3JpZ2luYWxHZXRVVENIb3VycyA9IGNhbGwuYmluZChEYXRlLnByb3RvdHlwZS5nZXRVVENIb3Vycyk7XG4gICAgdmFyIG9yaWdpbmFsR2V0VVRDTWludXRlcyA9IGNhbGwuYmluZChEYXRlLnByb3RvdHlwZS5nZXRVVENNaW51dGVzKTtcbiAgICB2YXIgb3JpZ2luYWxHZXRVVENTZWNvbmRzID0gY2FsbC5iaW5kKERhdGUucHJvdG90eXBlLmdldFVUQ1NlY29uZHMpO1xuICAgIHZhciBvcmlnaW5hbEdldFVUQ01pbGxpc2Vjb25kcyA9IGNhbGwuYmluZChEYXRlLnByb3RvdHlwZS5nZXRVVENNaWxsaXNlY29uZHMpO1xuICAgIHZhciBkYXlOYW1lID0gWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXTtcbiAgICB2YXIgbW9udGhOYW1lID0gWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddO1xuICAgIHZhciBkYXlzSW5Nb250aCA9IGZ1bmN0aW9uIGRheXNJbk1vbnRoKG1vbnRoLCB5ZWFyKSB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbEdldERhdGUobmV3IERhdGUoeWVhciwgbW9udGgsIDApKTtcbiAgICB9O1xuXG4gICAgZGVmaW5lUHJvcGVydGllcyhEYXRlLnByb3RvdHlwZSwge1xuICAgICAgICBnZXRGdWxsWWVhcjogZnVuY3Rpb24gZ2V0RnVsbFllYXIoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMgfHwgISh0aGlzIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGlzIG5vdCBhIERhdGUgb2JqZWN0LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHllYXIgPSBvcmlnaW5hbEdldEZ1bGxZZWFyKHRoaXMpO1xuICAgICAgICAgICAgaWYgKHllYXIgPCAwICYmIG9yaWdpbmFsR2V0TW9udGgodGhpcykgPiAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB5ZWFyICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB5ZWFyO1xuICAgICAgICB9LFxuICAgICAgICBnZXRNb250aDogZnVuY3Rpb24gZ2V0TW9udGgoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMgfHwgISh0aGlzIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGlzIG5vdCBhIERhdGUgb2JqZWN0LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHllYXIgPSBvcmlnaW5hbEdldEZ1bGxZZWFyKHRoaXMpO1xuICAgICAgICAgICAgdmFyIG1vbnRoID0gb3JpZ2luYWxHZXRNb250aCh0aGlzKTtcbiAgICAgICAgICAgIGlmICh5ZWFyIDwgMCAmJiBtb250aCA+IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbW9udGg7XG4gICAgICAgIH0sXG4gICAgICAgIGdldERhdGU6IGZ1bmN0aW9uIGdldERhdGUoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMgfHwgISh0aGlzIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGlzIG5vdCBhIERhdGUgb2JqZWN0LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHllYXIgPSBvcmlnaW5hbEdldEZ1bGxZZWFyKHRoaXMpO1xuICAgICAgICAgICAgdmFyIG1vbnRoID0gb3JpZ2luYWxHZXRNb250aCh0aGlzKTtcbiAgICAgICAgICAgIHZhciBkYXRlID0gb3JpZ2luYWxHZXREYXRlKHRoaXMpO1xuICAgICAgICAgICAgaWYgKHllYXIgPCAwICYmIG1vbnRoID4gMTEpIHtcbiAgICAgICAgICAgICAgICBpZiAobW9udGggPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZGF5cyA9IGRheXNJbk1vbnRoKDAsIHllYXIgKyAxKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGRheXMgLSBkYXRlKSArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0VVRDRnVsbFllYXI6IGZ1bmN0aW9uIGdldFVUQ0Z1bGxZZWFyKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzIHx8ICEodGhpcyBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGhpcyBpcyBub3QgYSBEYXRlIG9iamVjdC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB5ZWFyID0gb3JpZ2luYWxHZXRVVENGdWxsWWVhcih0aGlzKTtcbiAgICAgICAgICAgIGlmICh5ZWFyIDwgMCAmJiBvcmlnaW5hbEdldFVUQ01vbnRoKHRoaXMpID4gMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geWVhciArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geWVhcjtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0VVRDTW9udGg6IGZ1bmN0aW9uIGdldFVUQ01vbnRoKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzIHx8ICEodGhpcyBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGhpcyBpcyBub3QgYSBEYXRlIG9iamVjdC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB5ZWFyID0gb3JpZ2luYWxHZXRVVENGdWxsWWVhcih0aGlzKTtcbiAgICAgICAgICAgIHZhciBtb250aCA9IG9yaWdpbmFsR2V0VVRDTW9udGgodGhpcyk7XG4gICAgICAgICAgICBpZiAoeWVhciA8IDAgJiYgbW9udGggPiAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1vbnRoO1xuICAgICAgICB9LFxuICAgICAgICBnZXRVVENEYXRlOiBmdW5jdGlvbiBnZXRVVENEYXRlKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzIHx8ICEodGhpcyBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGhpcyBpcyBub3QgYSBEYXRlIG9iamVjdC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB5ZWFyID0gb3JpZ2luYWxHZXRVVENGdWxsWWVhcih0aGlzKTtcbiAgICAgICAgICAgIHZhciBtb250aCA9IG9yaWdpbmFsR2V0VVRDTW9udGgodGhpcyk7XG4gICAgICAgICAgICB2YXIgZGF0ZSA9IG9yaWdpbmFsR2V0VVRDRGF0ZSh0aGlzKTtcbiAgICAgICAgICAgIGlmICh5ZWFyIDwgMCAmJiBtb250aCA+IDExKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1vbnRoID09PSAxMikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGRheXMgPSBkYXlzSW5Nb250aCgwLCB5ZWFyICsgMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChkYXlzIC0gZGF0ZSkgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgICAgIH1cbiAgICB9LCBoYXNOZWdhdGl2ZU1vbnRoWWVhckJ1Zyk7XG5cbiAgICBkZWZpbmVQcm9wZXJ0aWVzKERhdGUucHJvdG90eXBlLCB7XG4gICAgICAgIHRvVVRDU3RyaW5nOiBmdW5jdGlvbiB0b1VUQ1N0cmluZygpIHtcbiAgICAgICAgICAgIGlmICghdGhpcyB8fCAhKHRoaXMgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RoaXMgaXMgbm90IGEgRGF0ZSBvYmplY3QuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZGF5ID0gb3JpZ2luYWxHZXRVVENEYXkodGhpcyk7XG4gICAgICAgICAgICB2YXIgZGF0ZSA9IG9yaWdpbmFsR2V0VVRDRGF0ZSh0aGlzKTtcbiAgICAgICAgICAgIHZhciBtb250aCA9IG9yaWdpbmFsR2V0VVRDTW9udGgodGhpcyk7XG4gICAgICAgICAgICB2YXIgeWVhciA9IG9yaWdpbmFsR2V0VVRDRnVsbFllYXIodGhpcyk7XG4gICAgICAgICAgICB2YXIgaG91ciA9IG9yaWdpbmFsR2V0VVRDSG91cnModGhpcyk7XG4gICAgICAgICAgICB2YXIgbWludXRlID0gb3JpZ2luYWxHZXRVVENNaW51dGVzKHRoaXMpO1xuICAgICAgICAgICAgdmFyIHNlY29uZCA9IG9yaWdpbmFsR2V0VVRDU2Vjb25kcyh0aGlzKTtcbiAgICAgICAgICAgIHJldHVybiBkYXlOYW1lW2RheV0gKyAnLCAnXG4gICAgICAgICAgICAgICAgKyAoZGF0ZSA8IDEwID8gJzAnICsgZGF0ZSA6IGRhdGUpICsgJyAnXG4gICAgICAgICAgICAgICAgKyBtb250aE5hbWVbbW9udGhdICsgJyAnXG4gICAgICAgICAgICAgICAgKyB5ZWFyICsgJyAnXG4gICAgICAgICAgICAgICAgKyAoaG91ciA8IDEwID8gJzAnICsgaG91ciA6IGhvdXIpICsgJzonXG4gICAgICAgICAgICAgICAgKyAobWludXRlIDwgMTAgPyAnMCcgKyBtaW51dGUgOiBtaW51dGUpICsgJzonXG4gICAgICAgICAgICAgICAgKyAoc2Vjb25kIDwgMTAgPyAnMCcgKyBzZWNvbmQgOiBzZWNvbmQpICsgJyBHTVQnO1xuICAgICAgICB9XG4gICAgfSwgaGFzTmVnYXRpdmVNb250aFllYXJCdWcgfHwgaGFzVG9VVENTdHJpbmdGb3JtYXRCdWcpO1xuXG4gICAgLy8gT3BlcmEgMTIgaGFzIGAsYFxuICAgIGRlZmluZVByb3BlcnRpZXMoRGF0ZS5wcm90b3R5cGUsIHtcbiAgICAgICAgdG9EYXRlU3RyaW5nOiBmdW5jdGlvbiB0b0RhdGVTdHJpbmcoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMgfHwgISh0aGlzIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGlzIG5vdCBhIERhdGUgb2JqZWN0LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRheSA9IHRoaXMuZ2V0RGF5KCk7XG4gICAgICAgICAgICB2YXIgZGF0ZSA9IHRoaXMuZ2V0RGF0ZSgpO1xuICAgICAgICAgICAgdmFyIG1vbnRoID0gdGhpcy5nZXRNb250aCgpO1xuICAgICAgICAgICAgdmFyIHllYXIgPSB0aGlzLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgICByZXR1cm4gZGF5TmFtZVtkYXldICsgJyAnXG4gICAgICAgICAgICAgICAgKyBtb250aE5hbWVbbW9udGhdICsgJyAnXG4gICAgICAgICAgICAgICAgKyAoZGF0ZSA8IDEwID8gJzAnICsgZGF0ZSA6IGRhdGUpICsgJyAnXG4gICAgICAgICAgICAgICAgKyB5ZWFyO1xuICAgICAgICB9XG4gICAgfSwgaGFzTmVnYXRpdmVNb250aFllYXJCdWcgfHwgaGFzVG9EYXRlU3RyaW5nRm9ybWF0QnVnKTtcblxuICAgIC8vIGNhbid0IHVzZSBkZWZpbmVQcm9wZXJ0aWVzIGhlcmUgYmVjYXVzZSBvZiB0b1N0cmluZyBlbnVtZXJhdGlvbiBpc3N1ZSBpbiBJRSA8PSA4XG4gICAgaWYgKGhhc05lZ2F0aXZlTW9udGhZZWFyQnVnIHx8IGhhc1RvU3RyaW5nRm9ybWF0QnVnKSB7XG4gICAgICAgIERhdGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMgfHwgISh0aGlzIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGlzIG5vdCBhIERhdGUgb2JqZWN0LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRheSA9IHRoaXMuZ2V0RGF5KCk7XG4gICAgICAgICAgICB2YXIgZGF0ZSA9IHRoaXMuZ2V0RGF0ZSgpO1xuICAgICAgICAgICAgdmFyIG1vbnRoID0gdGhpcy5nZXRNb250aCgpO1xuICAgICAgICAgICAgdmFyIHllYXIgPSB0aGlzLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgICB2YXIgaG91ciA9IHRoaXMuZ2V0SG91cnMoKTtcbiAgICAgICAgICAgIHZhciBtaW51dGUgPSB0aGlzLmdldE1pbnV0ZXMoKTtcbiAgICAgICAgICAgIHZhciBzZWNvbmQgPSB0aGlzLmdldFNlY29uZHMoKTtcbiAgICAgICAgICAgIHZhciB0aW1lem9uZU9mZnNldCA9IHRoaXMuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgICAgICAgIHZhciBob3Vyc09mZnNldCA9IE1hdGguZmxvb3IoTWF0aC5hYnModGltZXpvbmVPZmZzZXQpIC8gNjApO1xuICAgICAgICAgICAgdmFyIG1pbnV0ZXNPZmZzZXQgPSBNYXRoLmZsb29yKE1hdGguYWJzKHRpbWV6b25lT2Zmc2V0KSAlIDYwKTtcbiAgICAgICAgICAgIHJldHVybiBkYXlOYW1lW2RheV0gKyAnICdcbiAgICAgICAgICAgICAgICArIG1vbnRoTmFtZVttb250aF0gKyAnICdcbiAgICAgICAgICAgICAgICArIChkYXRlIDwgMTAgPyAnMCcgKyBkYXRlIDogZGF0ZSkgKyAnICdcbiAgICAgICAgICAgICAgICArIHllYXIgKyAnICdcbiAgICAgICAgICAgICAgICArIChob3VyIDwgMTAgPyAnMCcgKyBob3VyIDogaG91cikgKyAnOidcbiAgICAgICAgICAgICAgICArIChtaW51dGUgPCAxMCA/ICcwJyArIG1pbnV0ZSA6IG1pbnV0ZSkgKyAnOidcbiAgICAgICAgICAgICAgICArIChzZWNvbmQgPCAxMCA/ICcwJyArIHNlY29uZCA6IHNlY29uZCkgKyAnIEdNVCdcbiAgICAgICAgICAgICAgICArICh0aW1lem9uZU9mZnNldCA+IDAgPyAnLScgOiAnKycpXG4gICAgICAgICAgICAgICAgKyAoaG91cnNPZmZzZXQgPCAxMCA/ICcwJyArIGhvdXJzT2Zmc2V0IDogaG91cnNPZmZzZXQpXG4gICAgICAgICAgICAgICAgKyAobWludXRlc09mZnNldCA8IDEwID8gJzAnICsgbWludXRlc09mZnNldCA6IG1pbnV0ZXNPZmZzZXQpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuICAgICAgICAgICAgJE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEYXRlLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywge1xuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBFUzUgMTUuOS41LjQzXG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuOS41LjQzXG4gICAgLy8gVGhpcyBmdW5jdGlvbiByZXR1cm5zIGEgU3RyaW5nIHZhbHVlIHJlcHJlc2VudCB0aGUgaW5zdGFuY2UgaW4gdGltZVxuICAgIC8vIHJlcHJlc2VudGVkIGJ5IHRoaXMgRGF0ZSBvYmplY3QuIFRoZSBmb3JtYXQgb2YgdGhlIFN0cmluZyBpcyB0aGUgRGF0ZSBUaW1lXG4gICAgLy8gc3RyaW5nIGZvcm1hdCBkZWZpbmVkIGluIDE1LjkuMS4xNS4gQWxsIGZpZWxkcyBhcmUgcHJlc2VudCBpbiB0aGUgU3RyaW5nLlxuICAgIC8vIFRoZSB0aW1lIHpvbmUgaXMgYWx3YXlzIFVUQywgZGVub3RlZCBieSB0aGUgc3VmZml4IFouIElmIHRoZSB0aW1lIHZhbHVlIG9mXG4gICAgLy8gdGhpcyBvYmplY3QgaXMgbm90IGEgZmluaXRlIE51bWJlciBhIFJhbmdlRXJyb3IgZXhjZXB0aW9uIGlzIHRocm93bi5cbiAgICB2YXIgbmVnYXRpdmVEYXRlID0gLTYyMTk4NzU1MjAwMDAwO1xuICAgIHZhciBuZWdhdGl2ZVllYXJTdHJpbmcgPSAnLTAwMDAwMSc7XG4gICAgdmFyIGhhc05lZ2F0aXZlRGF0ZUJ1ZyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nICYmIG5ldyBEYXRlKG5lZ2F0aXZlRGF0ZSkudG9JU09TdHJpbmcoKS5pbmRleE9mKG5lZ2F0aXZlWWVhclN0cmluZykgPT09IC0xOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG1heC1sZW5cbiAgICB2YXIgaGFzU2FmYXJpNTFEYXRlQnVnID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgJiYgbmV3IERhdGUoLTEpLnRvSVNPU3RyaW5nKCkgIT09ICcxOTY5LTEyLTMxVDIzOjU5OjU5Ljk5OVonO1xuXG4gICAgdmFyIGdldFRpbWUgPSBjYWxsLmJpbmQoRGF0ZS5wcm90b3R5cGUuZ2V0VGltZSk7XG5cbiAgICBkZWZpbmVQcm9wZXJ0aWVzKERhdGUucHJvdG90eXBlLCB7XG4gICAgICAgIHRvSVNPU3RyaW5nOiBmdW5jdGlvbiB0b0lTT1N0cmluZygpIHtcbiAgICAgICAgICAgIGlmICghaXNGaW5pdGUodGhpcykgfHwgIWlzRmluaXRlKGdldFRpbWUodGhpcykpKSB7XG4gICAgICAgICAgICAgICAgLy8gQWRvcGUgUGhvdG9zaG9wIHJlcXVpcmVzIHRoZSBzZWNvbmQgY2hlY2suXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0RhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nIGNhbGxlZCBvbiBub24tZmluaXRlIHZhbHVlLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgeWVhciA9IG9yaWdpbmFsR2V0VVRDRnVsbFllYXIodGhpcyk7XG5cbiAgICAgICAgICAgIHZhciBtb250aCA9IG9yaWdpbmFsR2V0VVRDTW9udGgodGhpcyk7XG4gICAgICAgICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xMTFcbiAgICAgICAgICAgIHllYXIgKz0gTWF0aC5mbG9vcihtb250aCAvIDEyKTtcbiAgICAgICAgICAgIG1vbnRoID0gKChtb250aCAlIDEyKSArIDEyKSAlIDEyO1xuXG4gICAgICAgICAgICAvLyB0aGUgZGF0ZSB0aW1lIHN0cmluZyBmb3JtYXQgaXMgc3BlY2lmaWVkIGluIDE1LjkuMS4xNS5cbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXG4gICAgICAgICAgICAgICAgbW9udGggKyAxLFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsR2V0VVRDRGF0ZSh0aGlzKSxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEdldFVUQ0hvdXJzKHRoaXMpLFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsR2V0VVRDTWludXRlcyh0aGlzKSxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEdldFVUQ1NlY29uZHModGhpcylcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICB5ZWFyID0gKFxuICAgICAgICAgICAgICAgICh5ZWFyIDwgMCA/ICctJyA6ICh5ZWFyID4gOTk5OSA/ICcrJyA6ICcnKSlcbiAgICAgICAgICAgICAgICArIHN0clNsaWNlKCcwMDAwMCcgKyBNYXRoLmFicyh5ZWFyKSwgKDAgPD0geWVhciAmJiB5ZWFyIDw9IDk5OTkpID8gLTQgOiAtNilcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgLy8gcGFkIG1vbnRocywgZGF5cywgaG91cnMsIG1pbnV0ZXMsIGFuZCBzZWNvbmRzIHRvIGhhdmUgdHdvIGRpZ2l0cy5cbiAgICAgICAgICAgICAgICByZXN1bHRbaV0gPSBzdHJTbGljZSgnMDAnICsgcmVzdWx0W2ldLCAtMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBwYWQgbWlsbGlzZWNvbmRzIHRvIGhhdmUgdGhyZWUgZGlnaXRzLlxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICB5ZWFyICsgJy0nICsgYXJyYXlTbGljZShyZXN1bHQsIDAsIDIpLmpvaW4oJy0nKVxuICAgICAgICAgICAgICAgICsgJ1QnICsgYXJyYXlTbGljZShyZXN1bHQsIDIpLmpvaW4oJzonKSArICcuJ1xuICAgICAgICAgICAgICAgICsgc3RyU2xpY2UoJzAwMCcgKyBvcmlnaW5hbEdldFVUQ01pbGxpc2Vjb25kcyh0aGlzKSwgLTMpICsgJ1onXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfSwgaGFzTmVnYXRpdmVEYXRlQnVnIHx8IGhhc1NhZmFyaTUxRGF0ZUJ1Zyk7XG5cbiAgICAvLyBFUzUgMTUuOS41LjQ0XG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuOS41LjQ0XG4gICAgLy8gVGhpcyBmdW5jdGlvbiBwcm92aWRlcyBhIFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIERhdGUgb2JqZWN0IGZvciB1c2UgYnlcbiAgICAvLyBKU09OLnN0cmluZ2lmeSAoMTUuMTIuMykuXG4gICAgdmFyIGRhdGVUb0pTT05Jc1N1cHBvcnRlZCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gRGF0ZS5wcm90b3R5cGUudG9KU09OXG4gICAgICAgICAgICAgICAgJiYgbmV3IERhdGUoTmFOKS50b0pTT04oKSA9PT0gbnVsbFxuICAgICAgICAgICAgICAgICYmIG5ldyBEYXRlKG5lZ2F0aXZlRGF0ZSkudG9KU09OKCkuaW5kZXhPZihuZWdhdGl2ZVllYXJTdHJpbmcpICE9PSAtMVxuICAgICAgICAgICAgICAgICYmIERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHsgLy8gZ2VuZXJpY1xuICAgICAgICAgICAgICAgICAgICB0b0lTT1N0cmluZzogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9KCkpO1xuICAgIGlmICghZGF0ZVRvSlNPTklzU3VwcG9ydGVkKSB7XG4gICAgICAgIERhdGUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHtcbiAgICAgICAgICAgIC8vIFdoZW4gdGhlIHRvSlNPTiBtZXRob2QgaXMgY2FsbGVkIHdpdGggYXJndW1lbnQga2V5LCB0aGUgZm9sbG93aW5nXG4gICAgICAgICAgICAvLyBzdGVwcyBhcmUgdGFrZW46XG5cbiAgICAgICAgICAgIC8vIDEuICBMZXQgTyBiZSB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgVG9PYmplY3QsIGdpdmluZyBpdCB0aGUgdGhpc1xuICAgICAgICAgICAgLy8gdmFsdWUgYXMgaXRzIGFyZ3VtZW50LlxuICAgICAgICAgICAgLy8gMi4gTGV0IHR2IGJlIEVTLlRvUHJpbWl0aXZlKE8sIGhpbnQgTnVtYmVyKS5cbiAgICAgICAgICAgIHZhciBPID0gJE9iamVjdCh0aGlzKTtcbiAgICAgICAgICAgIHZhciB0diA9IEVTLlRvUHJpbWl0aXZlKE8pO1xuICAgICAgICAgICAgLy8gMy4gSWYgdHYgaXMgYSBOdW1iZXIgYW5kIGlzIG5vdCBmaW5pdGUsIHJldHVybiBudWxsLlxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0diA9PT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHR2KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gNC4gTGV0IHRvSVNPIGJlIHRoZSByZXN1bHQgb2YgY2FsbGluZyB0aGUgW1tHZXRdXSBpbnRlcm5hbCBtZXRob2Qgb2ZcbiAgICAgICAgICAgIC8vIE8gd2l0aCBhcmd1bWVudCBcInRvSVNPU3RyaW5nXCIuXG4gICAgICAgICAgICB2YXIgdG9JU08gPSBPLnRvSVNPU3RyaW5nO1xuICAgICAgICAgICAgLy8gNS4gSWYgSXNDYWxsYWJsZSh0b0lTTykgaXMgZmFsc2UsIHRocm93IGEgVHlwZUVycm9yIGV4Y2VwdGlvbi5cbiAgICAgICAgICAgIGlmICghaXNDYWxsYWJsZSh0b0lTTykpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0b0lTT1N0cmluZyBwcm9wZXJ0eSBpcyBub3QgY2FsbGFibGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIDYuIFJldHVybiB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgdGhlIFtbQ2FsbF1dIGludGVybmFsIG1ldGhvZCBvZlxuICAgICAgICAgICAgLy8gIHRvSVNPIHdpdGggTyBhcyB0aGUgdGhpcyB2YWx1ZSBhbmQgYW4gZW1wdHkgYXJndW1lbnQgbGlzdC5cbiAgICAgICAgICAgIHJldHVybiB0b0lTTy5jYWxsKE8pO1xuXG4gICAgICAgICAgICAvLyBOT1RFIDEgVGhlIGFyZ3VtZW50IGlzIGlnbm9yZWQuXG5cbiAgICAgICAgICAgIC8vIE5PVEUgMiBUaGUgdG9KU09OIGZ1bmN0aW9uIGlzIGludGVudGlvbmFsbHkgZ2VuZXJpYzsgaXQgZG9lcyBub3RcbiAgICAgICAgICAgIC8vIHJlcXVpcmUgdGhhdCBpdHMgdGhpcyB2YWx1ZSBiZSBhIERhdGUgb2JqZWN0LiBUaGVyZWZvcmUsIGl0IGNhbiBiZVxuICAgICAgICAgICAgLy8gdHJhbnNmZXJyZWQgdG8gb3RoZXIga2luZHMgb2Ygb2JqZWN0cyBmb3IgdXNlIGFzIGEgbWV0aG9kLiBIb3dldmVyLFxuICAgICAgICAgICAgLy8gaXQgZG9lcyByZXF1aXJlIHRoYXQgYW55IHN1Y2ggb2JqZWN0IGhhdmUgYSB0b0lTT1N0cmluZyBtZXRob2QuIEFuXG4gICAgICAgICAgICAvLyBvYmplY3QgaXMgZnJlZSB0byB1c2UgdGhlIGFyZ3VtZW50IGtleSB0byBmaWx0ZXIgaXRzXG4gICAgICAgICAgICAvLyBzdHJpbmdpZmljYXRpb24uXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRVM1IDE1LjkuNC4yXG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuOS40LjJcbiAgICAvLyBiYXNlZCBvbiB3b3JrIHNoYXJlZCBieSBEYW5pZWwgRnJpZXNlbiAoZGFudG1hbilcbiAgICAvLyBodHRwOi8vZ2lzdC5naXRodWIuY29tLzMwMzI0OVxuICAgIHZhciBzdXBwb3J0c0V4dGVuZGVkWWVhcnMgPSBEYXRlLnBhcnNlKCcrMDMzNjU4LTA5LTI3VDAxOjQ2OjQwLjAwMFonKSA9PT0gMWUxNTtcbiAgICB2YXIgYWNjZXB0c0ludmFsaWREYXRlcyA9ICFpc05hTihEYXRlLnBhcnNlKCcyMDEyLTA0LTA0VDI0OjAwOjAwLjUwMFonKSkgfHwgIWlzTmFOKERhdGUucGFyc2UoJzIwMTItMTEtMzFUMjM6NTk6NTkuMDAwWicpKSB8fCAhaXNOYU4oRGF0ZS5wYXJzZSgnMjAxMi0xMi0zMVQyMzo1OTo2MC4wMDBaJykpO1xuICAgIHZhciBkb2VzTm90UGFyc2VZMktOZXdZZWFyID0gaXNOYU4oRGF0ZS5wYXJzZSgnMjAwMC0wMS0wMVQwMDowMDowMC4wMDBaJykpO1xuICAgIGlmIChkb2VzTm90UGFyc2VZMktOZXdZZWFyIHx8IGFjY2VwdHNJbnZhbGlkRGF0ZXMgfHwgIXN1cHBvcnRzRXh0ZW5kZWRZZWFycykge1xuICAgICAgICAvLyBYWFggZ2xvYmFsIGFzc2lnbm1lbnQgd29uJ3Qgd29yayBpbiBlbWJlZGRpbmdzIHRoYXQgdXNlXG4gICAgICAgIC8vIGFuIGFsdGVybmF0ZSBvYmplY3QgZm9yIHRoZSBjb250ZXh0LlxuICAgICAgICB2YXIgbWF4U2FmZVVuc2lnbmVkMzJCaXQgPSBNYXRoLnBvdygyLCAzMSkgLSAxO1xuICAgICAgICB2YXIgaGFzU2FmYXJpU2lnbmVkSW50QnVnID0gaXNBY3R1YWxOYU4obmV3IERhdGUoMTk3MCwgMCwgMSwgMCwgMCwgMCwgbWF4U2FmZVVuc2lnbmVkMzJCaXQgKyAxKS5nZXRUaW1lKCkpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW1wbGljaXQtZ2xvYmFscywgbm8tZ2xvYmFsLWFzc2lnblxuICAgICAgICBEYXRlID0gKGZ1bmN0aW9uIChOYXRpdmVEYXRlKSB7XG4gICAgICAgICAgICAvLyBEYXRlLmxlbmd0aCA9PT0gN1xuICAgICAgICAgICAgdmFyIERhdGVTaGltID0gZnVuY3Rpb24gRGF0ZShZLCBNLCBELCBoLCBtLCBzLCBtcykge1xuICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHZhciBkYXRlO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgTmF0aXZlRGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2Vjb25kcyA9IHM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtaWxsaXMgPSBtcztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc1NhZmFyaVNpZ25lZEludEJ1ZyAmJiBsZW5ndGggPj0gNyAmJiBtcyA+IG1heFNhZmVVbnNpZ25lZDMyQml0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3b3JrIGFyb3VuZCBhIFNhZmFyaSA4LzkgYnVnIHdoZXJlIGl0IHRyZWF0cyB0aGUgc2Vjb25kcyBhcyBzaWduZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtc1RvU2hpZnQgPSBNYXRoLmZsb29yKG1zIC8gbWF4U2FmZVVuc2lnbmVkMzJCaXQpICogbWF4U2FmZVVuc2lnbmVkMzJCaXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc1RvU2hpZnQgPSBNYXRoLmZsb29yKG1zVG9TaGlmdCAvIDFlMyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRzICs9IHNUb1NoaWZ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgbWlsbGlzIC09IHNUb1NoaWZ0ICogMWUzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRhdGUgPSBsZW5ndGggPT09IDEgJiYgJFN0cmluZyhZKSA9PT0gWSAvLyBpc1N0cmluZyhZKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgZXhwbGljaXRseSBwYXNzIGl0IHRocm91Z2ggcGFyc2U6XG4gICAgICAgICAgICAgICAgICAgICAgICA/IG5ldyBOYXRpdmVEYXRlKERhdGVTaGltLnBhcnNlKFkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSB0byBtYW51YWxseSBtYWtlIGNhbGxzIGRlcGVuZGluZyBvbiBhcmd1bWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGVuZ3RoIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbGVuZ3RoID49IDcgPyBuZXcgTmF0aXZlRGF0ZShZLCBNLCBELCBoLCBtLCBzZWNvbmRzLCBtaWxsaXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBsZW5ndGggPj0gNiA/IG5ldyBOYXRpdmVEYXRlKFksIE0sIEQsIGgsIG0sIHNlY29uZHMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbGVuZ3RoID49IDUgPyBuZXcgTmF0aXZlRGF0ZShZLCBNLCBELCBoLCBtKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBsZW5ndGggPj0gNCA/IG5ldyBOYXRpdmVEYXRlKFksIE0sIEQsIGgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBsZW5ndGggPj0gMyA/IG5ldyBOYXRpdmVEYXRlKFksIE0sIEQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbGVuZ3RoID49IDIgPyBuZXcgTmF0aXZlRGF0ZShZLCBNKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBsZW5ndGggPj0gMSA/IG5ldyBOYXRpdmVEYXRlKFkgaW5zdGFuY2VvZiBOYXRpdmVEYXRlID8gK1kgOiBZKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbmV3IE5hdGl2ZURhdGUoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkYXRlID0gTmF0aXZlRGF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWlzUHJpbWl0aXZlKGRhdGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgbWl4dXBzIHdpdGggdW5maXhlZCBEYXRlIG9iamVjdFxuICAgICAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKGRhdGUsIHsgY29uc3RydWN0b3I6IERhdGVTaGltIH0sIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIDE1LjkuMS4xNSBEYXRlIFRpbWUgU3RyaW5nIEZvcm1hdC5cbiAgICAgICAgICAgIHZhciBpc29EYXRlRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAoJ14nXG4gICAgICAgICAgICAgICAgKyAnKFxcXFxkezR9fFsrLV1cXFxcZHs2fSknIC8vIGZvdXItZGlnaXQgeWVhciBjYXB0dXJlIG9yIHNpZ24gKyA2LWRpZ2l0IGV4dGVuZGVkIHllYXJcbiAgICAgICAgICAgICAgICArICcoPzotKFxcXFxkezJ9KScgLy8gb3B0aW9uYWwgbW9udGggY2FwdHVyZVxuICAgICAgICAgICAgICAgICsgJyg/Oi0oXFxcXGR7Mn0pJyAvLyBvcHRpb25hbCBkYXkgY2FwdHVyZVxuICAgICAgICAgICAgICAgICsgJyg/OicgLy8gY2FwdHVyZSBob3VyczptaW51dGVzOnNlY29uZHMubWlsbGlzZWNvbmRzXG4gICAgICAgICAgICAgICAgICAgICsgJ1QoXFxcXGR7Mn0pJyAvLyBob3VycyBjYXB0dXJlXG4gICAgICAgICAgICAgICAgICAgICsgJzooXFxcXGR7Mn0pJyAvLyBtaW51dGVzIGNhcHR1cmVcbiAgICAgICAgICAgICAgICAgICAgKyAnKD86JyAvLyBvcHRpb25hbCA6c2Vjb25kcy5taWxsaXNlY29uZHNcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJzooXFxcXGR7Mn0pJyAvLyBzZWNvbmRzIGNhcHR1cmVcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJyg/OihcXFxcLlxcXFxkezEsfSkpPycgLy8gbWlsbGlzZWNvbmRzIGNhcHR1cmVcbiAgICAgICAgICAgICAgICAgICAgKyAnKT8nXG4gICAgICAgICAgICAgICAgKyAnKCcgLy8gY2FwdHVyZSBVVEMgb2Zmc2V0IGNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICArICdafCcgLy8gVVRDIGNhcHR1cmVcbiAgICAgICAgICAgICAgICAgICAgKyAnKD86JyAvLyBvZmZzZXQgc3BlY2lmaWVyICsvLWhvdXJzOm1pbnV0ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJyhbLStdKScgLy8gc2lnbiBjYXB0dXJlXG4gICAgICAgICAgICAgICAgICAgICAgICArICcoXFxcXGR7Mn0pJyAvLyBob3VycyBvZmZzZXQgY2FwdHVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgKyAnOihcXFxcZHsyfSknIC8vIG1pbnV0ZXMgb2Zmc2V0IGNhcHR1cmVcbiAgICAgICAgICAgICAgICAgICAgKyAnKSdcbiAgICAgICAgICAgICAgICArICcpPyk/KT8pPydcbiAgICAgICAgICAgICsgJyQnKTtcblxuICAgICAgICAgICAgdmFyIG1vbnRocyA9IFswLCAzMSwgNTksIDkwLCAxMjAsIDE1MSwgMTgxLCAyMTIsIDI0MywgMjczLCAzMDQsIDMzNCwgMzY1XTtcblxuICAgICAgICAgICAgdmFyIGRheUZyb21Nb250aCA9IGZ1bmN0aW9uIGRheUZyb21Nb250aCh5ZWFyLCBtb250aCkge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gbW9udGggPiAxID8gMSA6IDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgbW9udGhzW21vbnRoXVxuICAgICAgICAgICAgICAgICAgICArIE1hdGguZmxvb3IoKHllYXIgLSAxOTY5ICsgdCkgLyA0KVxuICAgICAgICAgICAgICAgICAgICAtIE1hdGguZmxvb3IoKHllYXIgLSAxOTAxICsgdCkgLyAxMDApXG4gICAgICAgICAgICAgICAgICAgICsgTWF0aC5mbG9vcigoeWVhciAtIDE2MDEgKyB0KSAvIDQwMClcbiAgICAgICAgICAgICAgICAgICAgKyAoMzY1ICogKHllYXIgLSAxOTcwKSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIHRvVVRDID0gZnVuY3Rpb24gdG9VVEModCkge1xuICAgICAgICAgICAgICAgIHZhciBzID0gMDtcbiAgICAgICAgICAgICAgICB2YXIgbXMgPSB0O1xuICAgICAgICAgICAgICAgIGlmIChoYXNTYWZhcmlTaWduZWRJbnRCdWcgJiYgbXMgPiBtYXhTYWZlVW5zaWduZWQzMkJpdCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB3b3JrIGFyb3VuZCBhIFNhZmFyaSA4LzkgYnVnIHdoZXJlIGl0IHRyZWF0cyB0aGUgc2Vjb25kcyBhcyBzaWduZWRcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1zVG9TaGlmdCA9IE1hdGguZmxvb3IobXMgLyBtYXhTYWZlVW5zaWduZWQzMkJpdCkgKiBtYXhTYWZlVW5zaWduZWQzMkJpdDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNUb1NoaWZ0ID0gTWF0aC5mbG9vcihtc1RvU2hpZnQgLyAxZTMpO1xuICAgICAgICAgICAgICAgICAgICBzICs9IHNUb1NoaWZ0O1xuICAgICAgICAgICAgICAgICAgICBtcyAtPSBzVG9TaGlmdCAqIDFlMztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICROdW1iZXIobmV3IE5hdGl2ZURhdGUoMTk3MCwgMCwgMSwgMCwgMCwgcywgbXMpKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIENvcHkgYW55IGN1c3RvbSBtZXRob2RzIGEgM3JkIHBhcnR5IGxpYnJhcnkgbWF5IGhhdmUgYWRkZWRcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBOYXRpdmVEYXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG93bnMoTmF0aXZlRGF0ZSwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBEYXRlU2hpbVtrZXldID0gTmF0aXZlRGF0ZVtrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ29weSBcIm5hdGl2ZVwiIG1ldGhvZHMgZXhwbGljaXRseTsgdGhleSBtYXkgYmUgbm9uLWVudW1lcmFibGVcbiAgICAgICAgICAgIGRlZmluZVByb3BlcnRpZXMoRGF0ZVNoaW0sIHtcbiAgICAgICAgICAgICAgICBub3c6IE5hdGl2ZURhdGUubm93LFxuICAgICAgICAgICAgICAgIFVUQzogTmF0aXZlRGF0ZS5VVENcbiAgICAgICAgICAgIH0sIHRydWUpO1xuICAgICAgICAgICAgRGF0ZVNoaW0ucHJvdG90eXBlID0gTmF0aXZlRGF0ZS5wcm90b3R5cGU7XG4gICAgICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKERhdGVTaGltLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogRGF0ZVNoaW0gfSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIC8vIFVwZ3JhZGUgRGF0ZS5wYXJzZSB0byBoYW5kbGUgc2ltcGxpZmllZCBJU08gODYwMSBzdHJpbmdzXG4gICAgICAgICAgICB2YXIgcGFyc2VTaGltID0gZnVuY3Rpb24gcGFyc2Uoc3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gaXNvRGF0ZUV4cHJlc3Npb24uZXhlYyhzdHJpbmcpO1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBwYXJzZSBtb250aHMsIGRheXMsIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBhbmQgbWlsbGlzZWNvbmRzXG4gICAgICAgICAgICAgICAgICAgIC8vIHByb3ZpZGUgZGVmYXVsdCB2YWx1ZXMgaWYgbmVjZXNzYXJ5XG4gICAgICAgICAgICAgICAgICAgIC8vIHBhcnNlIHRoZSBVVEMgb2Zmc2V0IGNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICB2YXIgeWVhciA9ICROdW1iZXIobWF0Y2hbMV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9udGggPSAkTnVtYmVyKG1hdGNoWzJdIHx8IDEpIC0gMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRheSA9ICROdW1iZXIobWF0Y2hbM10gfHwgMSkgLSAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgaG91ciA9ICROdW1iZXIobWF0Y2hbNF0gfHwgMCksXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW51dGUgPSAkTnVtYmVyKG1hdGNoWzVdIHx8IDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kID0gJE51bWJlcihtYXRjaFs2XSB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbGxpc2Vjb25kID0gTWF0aC5mbG9vcigkTnVtYmVyKG1hdGNoWzddIHx8IDApICogMTAwMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHRpbWUgem9uZSBpcyBtaXNzZWQsIGxvY2FsIG9mZnNldCBzaG91bGQgYmUgdXNlZFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gKEVTIDUuMSBidWcpXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZWUgaHR0cHM6Ly9idWdzLmVjbWFzY3JpcHQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMTJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzTG9jYWxUaW1lID0gQm9vbGVhbihtYXRjaFs0XSAmJiAhbWF0Y2hbOF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbk9mZnNldCA9IG1hdGNoWzldID09PSAnLScgPyAxIDogLTEsXG4gICAgICAgICAgICAgICAgICAgICAgICBob3VyT2Zmc2V0ID0gJE51bWJlcihtYXRjaFsxMF0gfHwgMCksXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW51dGVPZmZzZXQgPSAkTnVtYmVyKG1hdGNoWzExXSB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhc01pbnV0ZXNPclNlY29uZHNPck1pbGxpc2Vjb25kcyA9IG1pbnV0ZSA+IDAgfHwgc2Vjb25kID4gMCB8fCBtaWxsaXNlY29uZCA+IDA7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdXIgPCAoaGFzTWludXRlc09yU2Vjb25kc09yTWlsbGlzZWNvbmRzID8gMjQgOiAyNSlcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIG1pbnV0ZSA8IDYwICYmIHNlY29uZCA8IDYwICYmIG1pbGxpc2Vjb25kIDwgMTAwMFxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgbW9udGggPiAtMSAmJiBtb250aCA8IDEyICYmIGhvdXJPZmZzZXQgPCAyNFxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgbWludXRlT2Zmc2V0IDwgNjAgLy8gZGV0ZWN0IGludmFsaWQgb2Zmc2V0c1xuICAgICAgICAgICAgICAgICAgICAgICAgJiYgZGF5ID4gLTFcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIGRheSA8IChkYXlGcm9tTW9udGgoeWVhciwgbW9udGggKyAxKSAtIGRheUZyb21Nb250aCh5ZWFyLCBtb250aCkpXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoZGF5RnJvbU1vbnRoKHllYXIsIG1vbnRoKSArIGRheSkgKiAyNClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGhvdXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIChob3VyT2Zmc2V0ICogc2lnbk9mZnNldClcbiAgICAgICAgICAgICAgICAgICAgICAgICkgKiA2MDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9ICgoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKChyZXN1bHQgKyBtaW51dGUgKyAobWludXRlT2Zmc2V0ICogc2lnbk9mZnNldCkpICogNjApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBzZWNvbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICkgKiAxMDAwKSArIG1pbGxpc2Vjb25kO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdG9VVEMocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgtOC42NGUxNSA8PSByZXN1bHQgJiYgcmVzdWx0IDw9IDguNjRlMTUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBOYXRpdmVEYXRlLnBhcnNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZGVmaW5lUHJvcGVydGllcyhEYXRlU2hpbSwgeyBwYXJzZTogcGFyc2VTaGltIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gRGF0ZVNoaW07XG4gICAgICAgIH0oRGF0ZSkpO1xuICAgIH1cblxuICAgIC8vIEVTNSAxNS45LjQuNFxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjkuNC40XG4gICAgaWYgKCFEYXRlLm5vdykge1xuICAgICAgICBEYXRlLm5vdyA9IGZ1bmN0aW9uIG5vdygpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvL1xuICAgIC8vIE51bWJlclxuICAgIC8vID09PT09PVxuICAgIC8vXG5cbiAgICAvLyBFUzUuMSAxNS43LjQuNVxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjcuNC41XG4gICAgdmFyIGhhc1RvRml4ZWRCdWdzID0gTnVtYmVyUHJvdG90eXBlLnRvRml4ZWQgJiYgKFxuICAgICAgICAoMC4wMDAwOCkudG9GaXhlZCgzKSAhPT0gJzAuMDAwJ1xuICAgICAgICB8fCAoMC45KS50b0ZpeGVkKDApICE9PSAnMSdcbiAgICAgICAgfHwgKDEuMjU1KS50b0ZpeGVkKDIpICE9PSAnMS4yNSdcbiAgICAgICAgfHwgKDEwMDAwMDAwMDAwMDAwMDAxMjgpLnRvRml4ZWQoMCkgIT09ICcxMDAwMDAwMDAwMDAwMDAwMTI4J1xuICAgICk7XG5cbiAgICB2YXIgdG9GaXhlZEhlbHBlcnMgPSB7XG4gICAgICAgIGJhc2U6IDFlNyxcbiAgICAgICAgc2l6ZTogNixcbiAgICAgICAgZGF0YTogWzAsIDAsIDAsIDAsIDAsIDBdLFxuICAgICAgICBtdWx0aXBseTogZnVuY3Rpb24gbXVsdGlwbHkobiwgYykge1xuICAgICAgICAgICAgdmFyIGkgPSAtMTtcbiAgICAgICAgICAgIHZhciBjMiA9IGM7XG4gICAgICAgICAgICB3aGlsZSAoKytpIDwgdG9GaXhlZEhlbHBlcnMuc2l6ZSkge1xuICAgICAgICAgICAgICAgIGMyICs9IG4gKiB0b0ZpeGVkSGVscGVycy5kYXRhW2ldO1xuICAgICAgICAgICAgICAgIHRvRml4ZWRIZWxwZXJzLmRhdGFbaV0gPSBjMiAlIHRvRml4ZWRIZWxwZXJzLmJhc2U7XG4gICAgICAgICAgICAgICAgYzIgPSBNYXRoLmZsb29yKGMyIC8gdG9GaXhlZEhlbHBlcnMuYmFzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRpdmlkZTogZnVuY3Rpb24gZGl2aWRlKG4pIHtcbiAgICAgICAgICAgIHZhciBpID0gdG9GaXhlZEhlbHBlcnMuc2l6ZTtcbiAgICAgICAgICAgIHZhciBjID0gMDtcbiAgICAgICAgICAgIHdoaWxlICgtLWkgPj0gMCkge1xuICAgICAgICAgICAgICAgIGMgKz0gdG9GaXhlZEhlbHBlcnMuZGF0YVtpXTtcbiAgICAgICAgICAgICAgICB0b0ZpeGVkSGVscGVycy5kYXRhW2ldID0gTWF0aC5mbG9vcihjIC8gbik7XG4gICAgICAgICAgICAgICAgYyA9IChjICUgbikgKiB0b0ZpeGVkSGVscGVycy5iYXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBudW1Ub1N0cmluZzogZnVuY3Rpb24gbnVtVG9TdHJpbmcoKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHRvRml4ZWRIZWxwZXJzLnNpemU7XG4gICAgICAgICAgICB2YXIgcyA9ICcnO1xuICAgICAgICAgICAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHMgIT09ICcnIHx8IGkgPT09IDAgfHwgdG9GaXhlZEhlbHBlcnMuZGF0YVtpXSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdCA9ICRTdHJpbmcodG9GaXhlZEhlbHBlcnMuZGF0YVtpXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcyA9IHQ7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzICs9IHN0clNsaWNlKCcwMDAwMDAwJywgMCwgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgfSxcbiAgICAgICAgcG93OiBmdW5jdGlvbiBwb3coeCwgbiwgYWNjKSB7XG4gICAgICAgICAgICByZXR1cm4gKG4gPT09IDAgPyBhY2MgOiAobiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKSkpO1xuICAgICAgICB9LFxuICAgICAgICBsb2c6IGZ1bmN0aW9uIGxvZyh4KSB7XG4gICAgICAgICAgICB2YXIgbiA9IDA7XG4gICAgICAgICAgICB2YXIgeDIgPSB4O1xuICAgICAgICAgICAgd2hpbGUgKHgyID49IDQwOTYpIHtcbiAgICAgICAgICAgICAgICBuICs9IDEyO1xuICAgICAgICAgICAgICAgIHgyIC89IDQwOTY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoeDIgPj0gMikge1xuICAgICAgICAgICAgICAgIG4gKz0gMTtcbiAgICAgICAgICAgICAgICB4MiAvPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHRvRml4ZWRTaGltID0gZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cykge1xuICAgICAgICB2YXIgZiwgeCwgcywgbSwgZSwgeiwgaiwgaztcblxuICAgICAgICAvLyBUZXN0IGZvciBOYU4gYW5kIHJvdW5kIGZyYWN0aW9uRGlnaXRzIGRvd25cbiAgICAgICAgZiA9ICROdW1iZXIoZnJhY3Rpb25EaWdpdHMpO1xuICAgICAgICBmID0gaXNBY3R1YWxOYU4oZikgPyAwIDogTWF0aC5mbG9vcihmKTtcblxuICAgICAgICBpZiAoZiA8IDAgfHwgZiA+IDIwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignTnVtYmVyLnRvRml4ZWQgY2FsbGVkIHdpdGggaW52YWxpZCBudW1iZXIgb2YgZGVjaW1hbHMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHggPSAkTnVtYmVyKHRoaXMpO1xuXG4gICAgICAgIGlmIChpc0FjdHVhbE5hTih4KSkge1xuICAgICAgICAgICAgcmV0dXJuICdOYU4nO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgaXQgaXMgdG9vIGJpZyBvciBzbWFsbCwgcmV0dXJuIHRoZSBzdHJpbmcgdmFsdWUgb2YgdGhlIG51bWJlclxuICAgICAgICBpZiAoeCA8PSAtMWUyMSB8fCB4ID49IDFlMjEpIHtcbiAgICAgICAgICAgIHJldHVybiAkU3RyaW5nKHgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcyA9ICcnO1xuXG4gICAgICAgIGlmICh4IDwgMCkge1xuICAgICAgICAgICAgcyA9ICctJztcbiAgICAgICAgICAgIHggPSAteDtcbiAgICAgICAgfVxuXG4gICAgICAgIG0gPSAnMCc7XG5cbiAgICAgICAgaWYgKHggPiAxZS0yMSkge1xuICAgICAgICAgICAgLy8gMWUtMjEgPCB4IDwgMWUyMVxuICAgICAgICAgICAgLy8gLTcwIDwgbG9nMih4KSA8IDcwXG4gICAgICAgICAgICBlID0gdG9GaXhlZEhlbHBlcnMubG9nKHggKiB0b0ZpeGVkSGVscGVycy5wb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgICAgICAgeiA9IChlIDwgMCA/IHggKiB0b0ZpeGVkSGVscGVycy5wb3coMiwgLWUsIDEpIDogeCAvIHRvRml4ZWRIZWxwZXJzLnBvdygyLCBlLCAxKSk7XG4gICAgICAgICAgICB6ICo9IDB4MTAwMDAwMDAwMDAwMDA7IC8vIE1hdGgucG93KDIsIDUyKTtcbiAgICAgICAgICAgIGUgPSA1MiAtIGU7XG5cbiAgICAgICAgICAgIC8vIC0xOCA8IGUgPCAxMjJcbiAgICAgICAgICAgIC8vIHggPSB6IC8gMiBeIGVcbiAgICAgICAgICAgIGlmIChlID4gMCkge1xuICAgICAgICAgICAgICAgIHRvRml4ZWRIZWxwZXJzLm11bHRpcGx5KDAsIHopO1xuICAgICAgICAgICAgICAgIGogPSBmO1xuXG4gICAgICAgICAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgICAgICAgICAgICB0b0ZpeGVkSGVscGVycy5tdWx0aXBseSgxZTcsIDApO1xuICAgICAgICAgICAgICAgICAgICBqIC09IDc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdG9GaXhlZEhlbHBlcnMubXVsdGlwbHkodG9GaXhlZEhlbHBlcnMucG93KDEwLCBqLCAxKSwgMCk7XG4gICAgICAgICAgICAgICAgaiA9IGUgLSAxO1xuXG4gICAgICAgICAgICAgICAgd2hpbGUgKGogPj0gMjMpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9GaXhlZEhlbHBlcnMuZGl2aWRlKDEgPDwgMjMpO1xuICAgICAgICAgICAgICAgICAgICBqIC09IDIzO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRvRml4ZWRIZWxwZXJzLmRpdmlkZSgxIDw8IGopO1xuICAgICAgICAgICAgICAgIHRvRml4ZWRIZWxwZXJzLm11bHRpcGx5KDEsIDEpO1xuICAgICAgICAgICAgICAgIHRvRml4ZWRIZWxwZXJzLmRpdmlkZSgyKTtcbiAgICAgICAgICAgICAgICBtID0gdG9GaXhlZEhlbHBlcnMubnVtVG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdG9GaXhlZEhlbHBlcnMubXVsdGlwbHkoMCwgeik7XG4gICAgICAgICAgICAgICAgdG9GaXhlZEhlbHBlcnMubXVsdGlwbHkoMSA8PCAoLWUpLCAwKTtcbiAgICAgICAgICAgICAgICBtID0gdG9GaXhlZEhlbHBlcnMubnVtVG9TdHJpbmcoKSArIHN0clNsaWNlKCcwLjAwMDAwMDAwMDAwMDAwMDAwMDAwJywgMiwgMiArIGYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGYgPiAwKSB7XG4gICAgICAgICAgICBrID0gbS5sZW5ndGg7XG5cbiAgICAgICAgICAgIGlmIChrIDw9IGYpIHtcbiAgICAgICAgICAgICAgICBtID0gcyArIHN0clNsaWNlKCcwLjAwMDAwMDAwMDAwMDAwMDAwMDAnLCAwLCBmIC0gayArIDIpICsgbTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbSA9IHMgKyBzdHJTbGljZShtLCAwLCBrIC0gZikgKyAnLicgKyBzdHJTbGljZShtLCBrIC0gZik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtID0gcyArIG07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbTtcbiAgICB9O1xuICAgIGRlZmluZVByb3BlcnRpZXMoTnVtYmVyUHJvdG90eXBlLCB7IHRvRml4ZWQ6IHRvRml4ZWRTaGltIH0sIGhhc1RvRml4ZWRCdWdzKTtcblxuICAgIHZhciBoYXNUb1ByZWNpc2lvblVuZGVmaW5lZEJ1ZyA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gMS4wLnRvUHJlY2lzaW9uKHVuZGVmaW5lZCkgPT09ICcxJztcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9KCkpO1xuICAgIHZhciBvcmlnaW5hbFRvUHJlY2lzaW9uID0gTnVtYmVyUHJvdG90eXBlLnRvUHJlY2lzaW9uO1xuICAgIGRlZmluZVByb3BlcnRpZXMoTnVtYmVyUHJvdG90eXBlLCB7XG4gICAgICAgIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgcHJlY2lzaW9uID09PSAndW5kZWZpbmVkJyA/IG9yaWdpbmFsVG9QcmVjaXNpb24uY2FsbCh0aGlzKSA6IG9yaWdpbmFsVG9QcmVjaXNpb24uY2FsbCh0aGlzLCBwcmVjaXNpb24pO1xuICAgICAgICB9XG4gICAgfSwgaGFzVG9QcmVjaXNpb25VbmRlZmluZWRCdWcpO1xuXG4gICAgLy9cbiAgICAvLyBTdHJpbmdcbiAgICAvLyA9PT09PT1cbiAgICAvL1xuXG4gICAgLy8gRVM1IDE1LjUuNC4xNFxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjUuNC4xNFxuXG4gICAgLy8gW2J1Z2ZpeCwgSUUgbHQgOSwgZmlyZWZveCA0LCBLb25xdWVyb3IsIE9wZXJhLCBvYnNjdXJlIGJyb3dzZXJzXVxuICAgIC8vIE1hbnkgYnJvd3NlcnMgZG8gbm90IHNwbGl0IHByb3Blcmx5IHdpdGggcmVndWxhciBleHByZXNzaW9ucyBvciB0aGV5XG4gICAgLy8gZG8gbm90IHBlcmZvcm0gdGhlIHNwbGl0IGNvcnJlY3RseSB1bmRlciBvYnNjdXJlIGNvbmRpdGlvbnMuXG4gICAgLy8gU2VlIGh0dHA6Ly9ibG9nLnN0ZXZlbmxldml0aGFuLmNvbS9hcmNoaXZlcy9jcm9zcy1icm93c2VyLXNwbGl0XG4gICAgLy8gSSd2ZSB0ZXN0ZWQgaW4gbWFueSBicm93c2VycyBhbmQgdGhpcyBzZWVtcyB0byBjb3ZlciB0aGUgZGV2aWFudCBvbmVzOlxuICAgIC8vICAgICdhYicuc3BsaXQoLyg/OmFiKSovKSBzaG91bGQgYmUgW1wiXCIsIFwiXCJdLCBub3QgW1wiXCJdXG4gICAgLy8gICAgJy4nLnNwbGl0KC8oLj8pKC4/KS8pIHNob3VsZCBiZSBbXCJcIiwgXCIuXCIsIFwiXCIsIFwiXCJdLCBub3QgW1wiXCIsIFwiXCJdXG4gICAgLy8gICAgJ3Rlc3N0Jy5zcGxpdCgvKHMpKi8pIHNob3VsZCBiZSBbXCJ0XCIsIHVuZGVmaW5lZCwgXCJlXCIsIFwic1wiLCBcInRcIl0sIG5vdFxuICAgIC8vICAgICAgIFt1bmRlZmluZWQsIFwidFwiLCB1bmRlZmluZWQsIFwiZVwiLCAuLi5dXG4gICAgLy8gICAgJycuc3BsaXQoLy4/Lykgc2hvdWxkIGJlIFtdLCBub3QgW1wiXCJdXG4gICAgLy8gICAgJy4nLnNwbGl0KC8oKSgpLykgc2hvdWxkIGJlIFtcIi5cIl0sIG5vdCBbXCJcIiwgXCJcIiwgXCIuXCJdXG5cbiAgICBpZiAoXG4gICAgICAgICdhYicuc3BsaXQoLyg/OmFiKSovKS5sZW5ndGggIT09IDJcbiAgICAgICAgfHwgJy4nLnNwbGl0KC8oLj8pKC4/KS8pLmxlbmd0aCAhPT0gNFxuICAgICAgICB8fCAndGVzc3QnLnNwbGl0KC8ocykqLylbMV0gPT09ICd0J1xuICAgICAgICB8fCAndGVzdCcuc3BsaXQoLyg/OikvLCAtMSkubGVuZ3RoICE9PSA0XG4gICAgICAgIHx8ICcnLnNwbGl0KC8uPy8pLmxlbmd0aFxuICAgICAgICB8fCAnLicuc3BsaXQoLygpKCkvKS5sZW5ndGggPiAxXG4gICAgKSB7XG4gICAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY29tcGxpYW50RXhlY05wY2cgPSB0eXBlb2YgKC8oKT8/LykuZXhlYygnJylbMV0gPT09ICd1bmRlZmluZWQnOyAvLyBOUENHOiBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cFxuICAgICAgICAgICAgdmFyIG1heFNhZmUzMkJpdEludCA9IE1hdGgucG93KDIsIDMyKSAtIDE7XG5cbiAgICAgICAgICAgIFN0cmluZ1Byb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNlcGFyYXRvciA9PT0gJ3VuZGVmaW5lZCcgJiYgbGltaXQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICAgICAgICAgICAgaWYgKCFpc1JlZ2V4KHNlcGFyYXRvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0clNwbGl0KHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgLy8gaW4gRVM2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKSwgLy8gRmlyZWZveCAzKyBhbmQgRVM2XG4gICAgICAgICAgICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSAwLFxuICAgICAgICAgICAgICAgICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgICAgICAgICAgICAgICBzZXBhcmF0b3IyLCBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgICAgICAgICAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICAgICAgICAgICAgaWYgKCFjb21wbGlhbnRFeGVjTnBjZykge1xuICAgICAgICAgICAgICAgICAgICAvLyBEb2Vzbid0IG5lZWQgZmxhZ3MgZ3ksIGJ1dCB0aGV5IGRvbid0IGh1cnRcbiAgICAgICAgICAgICAgICAgICAgc2VwYXJhdG9yMiA9IG5ldyBSZWdFeHAoJ14nICsgc2VwYXJhdG9yQ29weS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLyogVmFsdWVzIGZvciBgbGltaXRgLCBwZXIgdGhlIHNwZWM6XG4gICAgICAgICAgICAgICAgICogSWYgdW5kZWZpbmVkOiA0Mjk0OTY3Mjk1IC8vIG1heFNhZmUzMkJpdEludFxuICAgICAgICAgICAgICAgICAqIElmIDAsIEluZmluaXR5LCBvciBOYU46IDBcbiAgICAgICAgICAgICAgICAgKiBJZiBwb3NpdGl2ZSBudW1iZXI6IGxpbWl0ID0gTWF0aC5mbG9vcihsaW1pdCk7IGlmIChsaW1pdCA+IDQyOTQ5NjcyOTUpIGxpbWl0IC09IDQyOTQ5NjcyOTY7XG4gICAgICAgICAgICAgICAgICogSWYgbmVnYXRpdmUgbnVtYmVyOiA0Mjk0OTY3Mjk2IC0gTWF0aC5mbG9vcihNYXRoLmFicyhsaW1pdCkpXG4gICAgICAgICAgICAgICAgICogSWYgb3RoZXI6IFR5cGUtY29udmVydCwgdGhlbiB1c2UgdGhlIGFib3ZlIHJ1bGVzXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdmFyIHNwbGl0TGltaXQgPSB0eXBlb2YgbGltaXQgPT09ICd1bmRlZmluZWQnID8gbWF4U2FmZTMyQml0SW50IDogRVMuVG9VaW50MzIobGltaXQpO1xuICAgICAgICAgICAgICAgIG1hdGNoID0gc2VwYXJhdG9yQ29weS5leGVjKHN0cmluZyk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleGAgaXMgbm90IHJlbGlhYmxlIGNyb3NzLWJyb3dzZXJcbiAgICAgICAgICAgICAgICAgICAgbGFzdEluZGV4ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwdXNoQ2FsbChvdXRwdXQsIHN0clNsaWNlKHN0cmluZywgbGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgIGZvclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXBzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbXBsaWFudEV4ZWNOcGNnICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFswXS5yZXBsYWNlKHNlcGFyYXRvcjIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1tpXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFtpXSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gubGVuZ3RoID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheV9wdXNoLmFwcGx5KG91dHB1dCwgYXJyYXlTbGljZShtYXRjaCwgMSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3V0cHV0Lmxlbmd0aCA+PSBzcGxpdExpbWl0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlcGFyYXRvckNvcHkubGFzdEluZGV4ID09PSBtYXRjaC5pbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VwYXJhdG9yQ29weS5sYXN0SW5kZXgrKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoID0gc2VwYXJhdG9yQ29weS5leGVjKHN0cmluZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwdXNoQ2FsbChvdXRwdXQsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHB1c2hDYWxsKG91dHB1dCwgc3RyU2xpY2Uoc3RyaW5nLCBsYXN0TGFzdEluZGV4KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvdXRwdXQubGVuZ3RoID4gc3BsaXRMaW1pdCA/IGFycmF5U2xpY2Uob3V0cHV0LCAwLCBzcGxpdExpbWl0KSA6IG91dHB1dDtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0oKSk7XG5cbiAgICAvLyBbYnVnZml4LCBjaHJvbWVdXG4gICAgLy8gSWYgc2VwYXJhdG9yIGlzIHVuZGVmaW5lZCwgdGhlbiB0aGUgcmVzdWx0IGFycmF5IGNvbnRhaW5zIGp1c3Qgb25lIFN0cmluZyxcbiAgICAvLyB3aGljaCBpcyB0aGUgdGhpcyB2YWx1ZSAoY29udmVydGVkIHRvIGEgU3RyaW5nKS4gSWYgbGltaXQgaXMgbm90IHVuZGVmaW5lZCxcbiAgICAvLyB0aGVuIHRoZSBvdXRwdXQgYXJyYXkgaXMgdHJ1bmNhdGVkIHNvIHRoYXQgaXQgY29udGFpbnMgbm8gbW9yZSB0aGFuIGxpbWl0XG4gICAgLy8gZWxlbWVudHMuXG4gICAgLy8gXCIwXCIuc3BsaXQodW5kZWZpbmVkLCAwKSAtPiBbXVxuICAgIH0gZWxzZSBpZiAoJzAnLnNwbGl0KHZvaWQgMCwgMCkubGVuZ3RoKSB7XG4gICAgICAgIFN0cmluZ1Byb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VwYXJhdG9yID09PSAndW5kZWZpbmVkJyAmJiBsaW1pdCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdHJTcGxpdCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgc3RyX3JlcGxhY2UgPSBTdHJpbmdQcm90b3R5cGUucmVwbGFjZTtcbiAgICB2YXIgcmVwbGFjZVJlcG9ydHNHcm91cHNDb3JyZWN0bHkgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZ3JvdXBzID0gW107XG4gICAgICAgICd4Jy5yZXBsYWNlKC94KC4pPy9nLCBmdW5jdGlvbiAobWF0Y2gsIGdyb3VwKSB7XG4gICAgICAgICAgICBwdXNoQ2FsbChncm91cHMsIGdyb3VwKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBncm91cHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBncm91cHNbMF0gPT09ICd1bmRlZmluZWQnO1xuICAgIH0oKSk7XG5cbiAgICBpZiAoIXJlcGxhY2VSZXBvcnRzR3JvdXBzQ29ycmVjdGx5KSB7XG4gICAgICAgIFN0cmluZ1Byb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgaXNGbiA9IGlzQ2FsbGFibGUocmVwbGFjZVZhbHVlKTtcbiAgICAgICAgICAgIHZhciBoYXNDYXB0dXJpbmdHcm91cHMgPSBpc1JlZ2V4KHNlYXJjaFZhbHVlKSAmJiAoL1xcKVsqP10vKS50ZXN0KHNlYXJjaFZhbHVlLnNvdXJjZSk7XG4gICAgICAgICAgICBpZiAoIWlzRm4gfHwgIWhhc0NhcHR1cmluZ0dyb3Vwcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHJfcmVwbGFjZS5jYWxsKHRoaXMsIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgd3JhcHBlZFJlcGxhY2VWYWx1ZSA9IGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdpbmFsTGFzdEluZGV4ID0gc2VhcmNoVmFsdWUubGFzdEluZGV4O1xuICAgICAgICAgICAgICAgICAgICBzZWFyY2hWYWx1ZS5sYXN0SW5kZXggPSAwOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gc2VhcmNoVmFsdWUuZXhlYyhtYXRjaCkgfHwgW107XG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaFZhbHVlLmxhc3RJbmRleCA9IG9yaWdpbmFsTGFzdEluZGV4OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICAgICAgICAgIHB1c2hDYWxsKGFyZ3MsIGFyZ3VtZW50c1tsZW5ndGggLSAyXSwgYXJndW1lbnRzW2xlbmd0aCAtIDFdKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcGxhY2VWYWx1ZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHJfcmVwbGFjZS5jYWxsKHRoaXMsIHNlYXJjaFZhbHVlLCB3cmFwcGVkUmVwbGFjZVZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBFQ01BLTI2MiwgM3JkIEIuMi4zXG4gICAgLy8gTm90IGFuIEVDTUFTY3JpcHQgc3RhbmRhcmQsIGFsdGhvdWdoIEVDTUFTY3JpcHQgM3JkIEVkaXRpb24gaGFzIGFcbiAgICAvLyBub24tbm9ybWF0aXZlIHNlY3Rpb24gc3VnZ2VzdGluZyB1bmlmb3JtIHNlbWFudGljcyBhbmQgaXQgc2hvdWxkIGJlXG4gICAgLy8gbm9ybWFsaXplZCBhY3Jvc3MgYWxsIGJyb3dzZXJzXG4gICAgLy8gW2J1Z2ZpeCwgSUUgbHQgOV0gSUUgPCA5IHN1YnN0cigpIHdpdGggbmVnYXRpdmUgdmFsdWUgbm90IHdvcmtpbmcgaW4gSUVcbiAgICB2YXIgc3RyaW5nX3N1YnN0ciA9IFN0cmluZ1Byb3RvdHlwZS5zdWJzdHI7XG4gICAgdmFyIGhhc05lZ2F0aXZlU3Vic3RyQnVnID0gJycuc3Vic3RyICYmICcwYicuc3Vic3RyKC0xKSAhPT0gJ2InO1xuICAgIGRlZmluZVByb3BlcnRpZXMoU3RyaW5nUHJvdG90eXBlLCB7XG4gICAgICAgIHN1YnN0cjogZnVuY3Rpb24gc3Vic3RyKHN0YXJ0LCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBub3JtYWxpemVkU3RhcnQgPSBzdGFydDtcbiAgICAgICAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkU3RhcnQgPSBtYXgodGhpcy5sZW5ndGggKyBzdGFydCwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nX3N1YnN0ci5jYWxsKHRoaXMsIG5vcm1hbGl6ZWRTdGFydCwgbGVuZ3RoKTtcbiAgICAgICAgfVxuICAgIH0sIGhhc05lZ2F0aXZlU3Vic3RyQnVnKTtcblxuICAgIC8vIEVTNSAxNS41LjQuMjBcbiAgICAvLyB3aGl0ZXNwYWNlIGZyb206IGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuNS40LjIwXG4gICAgdmFyIHdzID0gJ1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJ1xuICAgICAgICArICdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOCdcbiAgICAgICAgKyAnXFx1MjAyOVxcdUZFRkYnO1xuICAgIHZhciB6ZXJvV2lkdGggPSAnXFx1MjAwYic7XG4gICAgdmFyIHdzUmVnZXhDaGFycyA9ICdbJyArIHdzICsgJ10nO1xuICAgIHZhciB0cmltQmVnaW5SZWdleHAgPSBuZXcgUmVnRXhwKCdeJyArIHdzUmVnZXhDaGFycyArIHdzUmVnZXhDaGFycyArICcqJyk7XG4gICAgdmFyIHRyaW1FbmRSZWdleHAgPSBuZXcgUmVnRXhwKHdzUmVnZXhDaGFycyArIHdzUmVnZXhDaGFycyArICcqJCcpO1xuICAgIHZhciBoYXNUcmltV2hpdGVzcGFjZUJ1ZyA9IFN0cmluZ1Byb3RvdHlwZS50cmltICYmICh3cy50cmltKCkgfHwgIXplcm9XaWR0aC50cmltKCkpO1xuICAgIGRlZmluZVByb3BlcnRpZXMoU3RyaW5nUHJvdG90eXBlLCB7XG4gICAgICAgIC8vIGh0dHA6Ly9ibG9nLnN0ZXZlbmxldml0aGFuLmNvbS9hcmNoaXZlcy9mYXN0ZXItdHJpbS1qYXZhc2NyaXB0XG4gICAgICAgIC8vIGh0dHA6Ly9wZXJmZWN0aW9ua2lsbHMuY29tL3doaXRlc3BhY2UtZGV2aWF0aW9ucy9cbiAgICAgICAgdHJpbTogZnVuY3Rpb24gdHJpbSgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcyA9PT0gJ3VuZGVmaW5lZCcgfHwgdGhpcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYW4ndCBjb252ZXJ0IFwiICsgdGhpcyArICcgdG8gb2JqZWN0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJFN0cmluZyh0aGlzKS5yZXBsYWNlKHRyaW1CZWdpblJlZ2V4cCwgJycpLnJlcGxhY2UodHJpbUVuZFJlZ2V4cCwgJycpO1xuICAgICAgICB9XG4gICAgfSwgaGFzVHJpbVdoaXRlc3BhY2VCdWcpO1xuICAgIHZhciB0cmltID0gY2FsbC5iaW5kKFN0cmluZy5wcm90b3R5cGUudHJpbSk7XG5cbiAgICB2YXIgaGFzTGFzdEluZGV4QnVnID0gU3RyaW5nUHJvdG90eXBlLmxhc3RJbmRleE9mICYmICdhYmPjgYLjgYQnLmxhc3RJbmRleE9mKCfjgYLjgYQnLCAyKSAhPT0gLTE7XG4gICAgZGVmaW5lUHJvcGVydGllcyhTdHJpbmdQcm90b3R5cGUsIHtcbiAgICAgICAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaFN0cmluZykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzID09PSAndW5kZWZpbmVkJyB8fCB0aGlzID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbid0IGNvbnZlcnQgXCIgKyB0aGlzICsgJyB0byBvYmplY3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBTID0gJFN0cmluZyh0aGlzKTtcbiAgICAgICAgICAgIHZhciBzZWFyY2hTdHIgPSAkU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgICAgICAgICB2YXIgbnVtUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyAkTnVtYmVyKGFyZ3VtZW50c1sxXSkgOiBOYU47XG4gICAgICAgICAgICB2YXIgcG9zID0gaXNBY3R1YWxOYU4obnVtUG9zKSA/IEluZmluaXR5IDogRVMuVG9JbnRlZ2VyKG51bVBvcyk7XG4gICAgICAgICAgICB2YXIgc3RhcnQgPSBtaW4obWF4KHBvcywgMCksIFMubGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciBzZWFyY2hMZW4gPSBzZWFyY2hTdHIubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGsgPSBzdGFydCArIHNlYXJjaExlbjtcbiAgICAgICAgICAgIHdoaWxlIChrID4gMCkge1xuICAgICAgICAgICAgICAgIGsgPSBtYXgoMCwgayAtIHNlYXJjaExlbik7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gc3RySW5kZXhPZihzdHJTbGljZShTLCBrLCBzdGFydCArIHNlYXJjaExlbiksIHNlYXJjaFN0cik7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gayArIGluZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgIH0sIGhhc0xhc3RJbmRleEJ1Zyk7XG5cbiAgICB2YXIgb3JpZ2luYWxMYXN0SW5kZXhPZiA9IFN0cmluZ1Byb3RvdHlwZS5sYXN0SW5kZXhPZjtcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKFN0cmluZ1Byb3RvdHlwZSwge1xuICAgICAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoU3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxMYXN0SW5kZXhPZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgfSwgU3RyaW5nUHJvdG90eXBlLmxhc3RJbmRleE9mLmxlbmd0aCAhPT0gMSk7XG5cbiAgICAvLyBFUy01IDE1LjEuMi4yXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJhZGl4XG4gICAgaWYgKHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMikge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZ2xvYmFsLWFzc2lnbiwgbm8taW1wbGljaXQtZ2xvYmFsc1xuICAgICAgICBwYXJzZUludCA9IChmdW5jdGlvbiAob3JpZ1BhcnNlSW50KSB7XG4gICAgICAgICAgICB2YXIgaGV4UmVnZXggPSAvXlstK10/MFt4WF0vO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHN0ciA9PT0gJ3N5bWJvbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxlIFN5bWJvbHMgaW4gbm9kZSA4LjMvOC40XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1pbXBsaWNpdC1jb2VyY2lvbiwgbm8tdW51c2VkLWV4cHJlc3Npb25zXG4gICAgICAgICAgICAgICAgICAgICcnICsgc3RyOyAvLyBqc2NzOmlnbm9yZSBkaXNhbGxvd0ltcGxpY2l0VHlwZUNvbnZlcnNpb25cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgc3RyaW5nID0gdHJpbShTdHJpbmcoc3RyKSk7XG4gICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRlZFJhZGl4ID0gJE51bWJlcihyYWRpeCkgfHwgKGhleFJlZ2V4LnRlc3Qoc3RyaW5nKSA/IDE2IDogMTApO1xuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnUGFyc2VJbnQoc3RyaW5nLCBkZWZhdWx0ZWRSYWRpeCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KHBhcnNlSW50KSk7XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMS4yLjNcbiAgICBpZiAoMSAvIHBhcnNlRmxvYXQoJy0wJykgIT09IC1JbmZpbml0eSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZ2xvYmFsLWFzc2lnbiwgbm8taW1wbGljaXQtZ2xvYmFscywgbm8tbmF0aXZlLXJlYXNzaWduXG4gICAgICAgIHBhcnNlRmxvYXQgPSAoZnVuY3Rpb24gKG9yaWdQYXJzZUZsb2F0KSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gcGFyc2VGbG9hdChzdHJpbmcpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXRTdHJpbmcgPSB0cmltKFN0cmluZyhzdHJpbmcpKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gb3JpZ1BhcnNlRmxvYXQoaW5wdXRTdHJpbmcpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgPT09IDAgJiYgc3RyU2xpY2UoaW5wdXRTdHJpbmcsIDAsIDEpID09PSAnLScgPyAtMCA6IHJlc3VsdDtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0ocGFyc2VGbG9hdCkpO1xuICAgIH1cblxuICAgIGlmIChTdHJpbmcobmV3IFJhbmdlRXJyb3IoJ3Rlc3QnKSkgIT09ICdSYW5nZUVycm9yOiB0ZXN0Jykge1xuICAgICAgICB2YXIgZXJyb3JUb1N0cmluZ1NoaW0gPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcyA9PT0gJ3VuZGVmaW5lZCcgfHwgdGhpcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYW4ndCBjb252ZXJ0IFwiICsgdGhpcyArICcgdG8gb2JqZWN0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbmFtZSA9IHRoaXMubmFtZTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBuYW1lID0gJ0Vycm9yJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgbmFtZSA9ICRTdHJpbmcobmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbXNnID0gdGhpcy5tZXNzYWdlO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBtc2cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgbXNnID0gJyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBtc2cgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgbXNnID0gJFN0cmluZyhtc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFuYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1zZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbXNnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmFtZSArICc6ICcgKyBtc2c7XG4gICAgICAgIH07XG4gICAgICAgIC8vIGNhbid0IHVzZSBkZWZpbmVQcm9wZXJ0aWVzIGhlcmUgYmVjYXVzZSBvZiB0b1N0cmluZyBlbnVtZXJhdGlvbiBpc3N1ZSBpbiBJRSA8PSA4XG4gICAgICAgIEVycm9yLnByb3RvdHlwZS50b1N0cmluZyA9IGVycm9yVG9TdHJpbmdTaGltO1xuICAgIH1cblxuICAgIGlmIChzdXBwb3J0c0Rlc2NyaXB0b3JzKSB7XG4gICAgICAgIHZhciBlbnN1cmVOb25FbnVtZXJhYmxlID0gZnVuY3Rpb24gKG9iaiwgcHJvcCkge1xuICAgICAgICAgICAgaWYgKGlzRW51bShvYmosIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwgcHJvcCk7XG4gICAgICAgICAgICAgICAgaWYgKGRlc2MuY29uZmlndXJhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc2MuZW51bWVyYWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBwcm9wLCBkZXNjKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGVuc3VyZU5vbkVudW1lcmFibGUoRXJyb3IucHJvdG90eXBlLCAnbWVzc2FnZScpO1xuICAgICAgICBpZiAoRXJyb3IucHJvdG90eXBlLm1lc3NhZ2UgIT09ICcnKSB7XG4gICAgICAgICAgICBFcnJvci5wcm90b3R5cGUubWVzc2FnZSA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIGVuc3VyZU5vbkVudW1lcmFibGUoRXJyb3IucHJvdG90eXBlLCAnbmFtZScpO1xuICAgIH1cblxuICAgIGlmIChTdHJpbmcoL2EvbWlnKSAhPT0gJy9hL2dpbScpIHtcbiAgICAgICAgdmFyIHJlZ2V4VG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgICAgIHZhciBzdHIgPSAnLycgKyB0aGlzLnNvdXJjZSArICcvJztcbiAgICAgICAgICAgIGlmICh0aGlzLmdsb2JhbCkge1xuICAgICAgICAgICAgICAgIHN0ciArPSAnZyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5pZ25vcmVDYXNlKSB7XG4gICAgICAgICAgICAgICAgc3RyICs9ICdpJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLm11bHRpbGluZSkge1xuICAgICAgICAgICAgICAgIHN0ciArPSAnbSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgICB9O1xuICAgICAgICAvLyBjYW4ndCB1c2UgZGVmaW5lUHJvcGVydGllcyBoZXJlIGJlY2F1c2Ugb2YgdG9TdHJpbmcgZW51bWVyYXRpb24gaXNzdWUgaW4gSUUgPD0gOFxuICAgICAgICBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nID0gcmVnZXhUb1N0cmluZztcbiAgICB9XG59KSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1BcnJheVByb3RvdHlwZU1hcCgpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKFxuXHRcdEFycmF5LnByb3RvdHlwZSxcblx0XHR7IG1hcDogcG9seWZpbGwgfSxcblx0XHR7IG1hcDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQXJyYXkucHJvdG90eXBlLm1hcCAhPT0gcG9seWZpbGw7IH0gfVxuXHQpO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltRmxhdE1hcCgpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKFxuXHRcdEFycmF5LnByb3RvdHlwZSxcblx0XHR7IGZsYXRNYXA6IHBvbHlmaWxsIH0sXG5cdFx0eyBmbGF0TWFwOiBmdW5jdGlvbiAoKSB7IHJldHVybiBBcnJheS5wcm90b3R5cGUuZmxhdE1hcCAhPT0gcG9seWZpbGw7IH0gfVxuXHQpO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9BcnJheVNwZWNpZXNDcmVhdGUnKTtcbnZhciBGbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9GbGF0dGVuSW50b0FycmF5Jyk7XG52YXIgR2V0ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9HZXQnKTtcbnZhciBUb0ludGVnZXIgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1RvSW50ZWdlcicpO1xudmFyIFRvTGVuZ3RoID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Ub0xlbmd0aCcpO1xudmFyIFRvT2JqZWN0ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Ub09iamVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZsYXQoKSB7XG5cdHZhciBPID0gVG9PYmplY3QodGhpcyk7XG5cdHZhciBzb3VyY2VMZW4gPSBUb0xlbmd0aChHZXQoTywgJ2xlbmd0aCcpKTtcblxuXHR2YXIgZGVwdGhOdW0gPSAxO1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIGFyZ3VtZW50c1swXSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRkZXB0aE51bSA9IFRvSW50ZWdlcihhcmd1bWVudHNbMF0pO1xuXHR9XG5cblx0dmFyIEEgPSBBcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG5cdEZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgc291cmNlTGVuLCAwLCBkZXB0aE51bSk7XG5cdHJldHVybiBBO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi9zaGltJykoKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1pc2NvbnN0cnVjdG9yXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkge1xuXHRyZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09PSAnZnVuY3Rpb24nICYmICEhYXJndW1lbnQucHJvdG90eXBlOyAvLyB1bmZvcnR1bmF0ZWx5IHRoZXJlJ3Mgbm8gd2F5IHRvIHRydWx5IGNoZWNrIHRoaXMgd2l0aG91dCB0cnkvY2F0Y2ggYG5ldyBhcmd1bWVudGBcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJ2VzLXRvLXByaW1pdGl2ZS9lczIwMTUnKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b3ByaW1pdGl2ZVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvUHJpbWl0aXZlKGlucHV0KSB7XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdHJldHVybiB0b1ByaW1pdGl2ZShpbnB1dCwgYXJndW1lbnRzWzFdKTtcblx0fVxuXHRyZXR1cm4gdG9QcmltaXRpdmUoaW5wdXQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnZXMtdG8tcHJpbWl0aXZlL2VzMjAxNScpO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXRvcHJpbWl0aXZlXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVG9QcmltaXRpdmUoaW5wdXQpIHtcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG5cdFx0cmV0dXJuIHRvUHJpbWl0aXZlKGlucHV0LCBhcmd1bWVudHNbMV0pO1xuXHR9XG5cdHJldHVybiB0b1ByaW1pdGl2ZShpbnB1dCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzU3ltYm9scyA9IHJlcXVpcmUoJ2hhcy1zeW1ib2xzJykoKTtcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlc2NyaXB0aW9uUG9seWZpbGwoKSB7XG5cdGlmICghaGFzU3ltYm9scyB8fCB0eXBlb2YgZ09QRCAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0dmFyIGRlc2MgPSBnT1BEKFN5bWJvbC5wcm90b3R5cGUsICdkZXNjcmlwdGlvbicpO1xuXHRpZiAoIWRlc2MgfHwgdHlwZW9mIGRlc2MuZ2V0ICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0cmV0dXJuIGltcGxlbWVudGF0aW9uO1xuXHR9XG5cblx0dmFyIGVtcHR5U3ltYm9sRGVzYyA9IGRlc2MuZ2V0LmNhbGwoU3ltYm9sKCkpO1xuXHR2YXIgZW1wdHlEZXNjVmFsaWQgPSB0eXBlb2YgZW1wdHlTeW1ib2xEZXNjID09PSAndW5kZWZpbmVkJyB8fCBlbXB0eVN5bWJvbERlc2MgPT09ICcnO1xuXHRpZiAoIWVtcHR5RGVzY1ZhbGlkIHx8IGRlc2MuZ2V0LmNhbGwoU3ltYm9sKCdhJykpICE9PSAnYScpIHtcblx0XHRyZXR1cm4gaW1wbGVtZW50YXRpb247XG5cdH1cblx0cmV0dXJuIGRlc2MuZ2V0O1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=