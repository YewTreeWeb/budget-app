(window.webpackJsonp=window.webpackJsonp||[]).push([["vendors"],{"+71H":function(t,e,r){"use strict";var n=r("qjSr"),o=r("aTj1"),i=r("UBAn"),a=r("2GRh"),u=r("RJ/z"),c=r("hemD"),s=r("XsaD"),f=r("TU3P"),l=r("R5T6"),p=r("Khql"),y=r("VbLK"),h=Object("a"),v="a"!==h[0]||!(0 in h),d=p("String.prototype.split");t.exports=function(t){var e,r=f(this),p=v&&y(r)?d(r,""):r,h=s(p.length);if(!c(t))throw new TypeError("Array.prototype.map callback must be a function");arguments.length>1&&(e=arguments[1]);for(var b=n(r,h),g=0;g<h;){var m=l(g),w=u(r,m);if(w){var O=a(r,m),j=o(t,e,[O,g,r]);i(b,m,j)}g+=1}return b}},"+7c2":function(t,e,r){"use strict";var n=r("7r9i"),o=r("aOl1"),i=r("82c2");t.exports=function(){n();var t=o();return i(Promise,{allSettled:t},{allSettled:function(){return Promise.allSettled!==t}}),t}},"+85J":function(t,e,r){"use strict";var n=r("XhRf"),o=r("82c2");t.exports=function(){var t=n();return o(String.prototype,{padEnd:t},{padEnd:function(){return String.prototype.padEnd!==t}}),t}},"+IY2":function(t,e,r){"use strict";var n=r("aJg2");t.exports=function(){return"function"==typeof Object.entries?Object.entries:n}},"+okW":function(t,e,r){"use strict";var n=r("2GRh"),o=r("1SyS"),i=r("6ll1"),a=r("ciGR"),u=r("R5T6"),c=r("RIFg"),s=r("5xAX"),f=r("Zoej"),l=RegExp,p="flags"in RegExp.prototype,y=function(t){var e=this;if("Object"!==c(e))throw new TypeError('"this" value must be an Object');var r=u(t),y=function(t,e){var r="flags"in e?n(e,"flags"):u(s(e));return{flags:r,matcher:new t(p&&"string"==typeof r?e:t===l?e.source:e,r)}}(i(e,l),e),h=y.flags,v=y.matcher,d=a(n(e,"lastIndex"));return o(v,"lastIndex",d,!0),function(t,e,r,n){if("String"!==c(e))throw new TypeError('"S" value must be a String');if("Boolean"!==c(r))throw new TypeError('"global" value must be a Boolean');if("Boolean"!==c(n))throw new TypeError('"fullUnicode" value must be a Boolean');return new f(t,e,r,n)}(v,r,h.indexOf("g")>-1,h.indexOf("u")>-1)},h=Object.defineProperty,v=Object.getOwnPropertyDescriptor;if(h&&v){var d=v(y,"name");d&&d.configurable&&h(y,"name",{value:"[Symbol.matchAll]"})}t.exports=y},"/RMt":function(t,e,r){"use strict";var n,o="function"==typeof Map&&Map.prototype?Map:null,i="function"==typeof Set&&Set.prototype?Set:null;o||(n=function(t){return!1});var a=o?Map.prototype.has:null,u=i?Set.prototype.has:null;n||a||(n=function(t){return!1}),t.exports=n||function(t){if(!t||"object"!=typeof t)return!1;try{if(a.call(t),u)try{u.call(t)}catch(t){return!0}return t instanceof o}catch(t){}return!1}},"/sVA":function(t,e,r){"use strict";var n=Object.prototype.toString;if(r("UVaH")()){var o=Symbol.prototype.toString,i=/^Symbol\(.*\)$/;t.exports=function(t){if("symbol"==typeof t)return!0;if("[object Symbol]"!==n.call(t))return!1;try{return function(t){return"symbol"==typeof t.valueOf()&&i.test(o.call(t))}(t)}catch(t){return!1}}}else t.exports=function(t){return!1}},"03Sc":function(t,e,r){"use strict";var n=r("HvP7"),o=r("82c2");t.exports=function(){var t=n();return o(Object,{fromEntries:t},{fromEntries:function(){return Object.fromEntries!==t}}),t}},"0QyR":function(t,e,r){"use strict";r("ib7Q")(),r("HdW7")(),r("baqT")(),r("+85J")(),r("dEfh")(),r("GQul")},"0nHT":function(t,e,r){"use strict";(function(t){r("szxn"),r("D2IK"),r("570s"),r("bZMm"),"undefined"!=typeof window&&(r("7K3S"),r("hJwt"),r("dwco").polyfill(),r("7cND"),r("1yfs"),r("rTV3"),r("eYmq"),r("Wr5T"),r("lt0f")),r("lfCk"),r("DpIS"),t.requestIdleCallback=r("ucYh"),t.cancelIdleCallback=t.requestIdleCallback.cancelIdleCallback,"function"==typeof Symbol&&Symbol.iterator&&"function"==typeof TouchList&&"function"!=typeof TouchList.prototype[Symbol.iterator]&&(TouchList.prototype[Symbol.iterator]=Array.prototype[Symbol.iterator])}).call(this,r("yLpj"))},"0yco":function(t,e,r){"use strict";var n=r("6ayh")("%Math%"),o=r("u1xu"),i=r("IFfy"),a=r("xhJ2"),u=r("WXWk"),c=n.floor,s=n.abs;t.exports=function(t){var e=o(t);return i(e)?0:0!==e&&a(e)?u(e)*c(s(e)):e}},"1Fze":function(t,e,r){"use strict";var n=r("6ayh"),o=n("%TypeError%"),i=n("%Number%"),a=n("%RegExp%"),u=n("%parseInt%"),c=r("Khql"),s=r("D6qd"),f=r("E1iy"),l=c("String.prototype.slice"),p=s(/^0b[01]+$/i),y=s(/^0o[0-7]+$/i),h=s(/^[-+]0x[0-9a-f]+$/i),v=s(new a("["+["","​","￾"].join("")+"]","g")),d=["\t\n\v\f\r   ᠎    ","         　\u2028","\u2029\ufeff"].join(""),b=new RegExp("(^["+d+"]+)|(["+d+"]+$)","g"),g=c("String.prototype.replace"),m=r("zkC3");t.exports=function t(e){var r=f(e)?e:m(e,i);if("symbol"==typeof r)throw new o("Cannot convert a Symbol value to a number");if("string"==typeof r){if(p(r))return t(u(l(r,2),2));if(y(r))return t(u(l(r,2),8));if(v(r)||h(r))return NaN;var n=function(t){return g(t,b,"")}(r);if(n!==r)return t(n)}return i(r)}},"1KsK":function(t,e,r){"use strict";var n=Object.prototype.toString;t.exports=function(t){var e=n.call(t),r="[object Arguments]"===e;return r||(r="[object Array]"!==e&&null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Function]"===n.call(t.callee)),r}},"1Soo":function(t,e,r){"use strict";var n=r("6ayh")("%Array%"),o=!n.isArray&&r("Khql")("Object.prototype.toString");t.exports=n.isArray||function(t){return"[object Array]"===o(t)}},"1SyS":function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("rCmP"),i=r("RIFg");t.exports=function(t,e,r,a){if("Object"!==i(t))throw new n("Assertion failed: `O` must be an Object");if(!o(e))throw new n("Assertion failed: `P` must be a Property Key");if("Boolean"!==i(a))throw new n("Assertion failed: `Throw` must be a Boolean");if(a)return t[e]=r,!0;try{t[e]=r}catch(t){return!1}}},"1l3A":function(t,e,r){"use strict";var n=r("6ayh")("%Math%"),o=n.floor,i=n.abs,a=r("IFfy"),u=r("xhJ2");t.exports=function(t){if("number"!=typeof t||a(t)||!u(t))return!1;var e=i(t);return o(e)===e}},"1seS":function(t,e,r){"use strict";var n=Array.prototype.slice,o=r("1KsK"),i=Object.keys,a=i?function(t){return i(t)}:r("sYn3"),u=Object.keys;a.shim=function(){Object.keys?function(){var t=Object.keys(arguments);return t&&t.length===arguments.length}(1,2)||(Object.keys=function(t){return o(t)?u(n.call(t)):u(t)}):Object.keys=a;return Object.keys||a},t.exports=a},"1yfs":function(t,e){!function(){if(window.matchMedia&&window.matchMedia("all").addListener)return!1;var t=window.matchMedia,e=t("only all").matches,r=!1,n=0,o=[],i=function(e){clearTimeout(n),n=setTimeout((function(){for(var e=0,r=o.length;e<r;e++){var n=o[e].mql,i=o[e].listeners||[],a=t(n.media).matches;if(a!==n.matches){n.matches=a;for(var u=0,c=i.length;u<c;u++)i[u].call(window,n)}}}),30)};window.matchMedia=function(n){var a=t(n),u=[],c=0;return a.addListener=function(t){e&&(r||(r=!0,window.addEventListener("resize",i,!0)),0===c&&(c=o.push({mql:a,listeners:u})),u.push(t))},a.removeListener=function(t){for(var e=0,r=u.length;e<r;e++)u[e]===t&&u.splice(e,1)},a}}()},"22yB":function(t,e,r){"use strict";var n=r("yN6O");t.exports=function(){return Array.prototype.flat||n}},"2GRh":function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("JxQ3"),i=r("rCmP"),a=r("RIFg");t.exports=function(t,e){if("Object"!==a(t))throw new n("Assertion failed: Type(O) is not Object");if(!i(e))throw new n("Assertion failed: IsPropertyKey(P) is not true, got "+o(e));return t[e]}},"2Nju":function(t,e,r){"use strict";var n=r("oNNP"),o=RegExp.prototype.exec,i=Object.getOwnPropertyDescriptor,a=Object.prototype.toString,u="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;t.exports=function(t){if(!t||"object"!=typeof t)return!1;if(!u)return"[object RegExp]"===a.call(t);var e=i(t,"lastIndex");return!(!e||!n(e,"value"))&&function(t){try{var e=t.lastIndex;return t.lastIndex=0,o.call(t),!0}catch(t){return!1}finally{t.lastIndex=e}}(t)}},"2fPq":function(t,e,r){"use strict";r("y14U"),r("fpfb"),r("V5gn")},"3hvG":function(t,e,r){"use strict";var n=r("6ayh")("%String%"),o=r("zkC3"),i=r("R5T6");t.exports=function(t){var e=o(t,n);return"symbol"==typeof e?e:i(e)}},"45zb":function(t,e,r){"use strict";var n="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag,o=Object.prototype.toString,i=function(t){return!(n&&t&&"object"==typeof t&&Symbol.toStringTag in t)&&"[object Arguments]"===o.call(t)},a=function(t){return!!i(t)||null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Array]"!==o.call(t)&&"[object Function]"===o.call(t.callee)},u=function(){return i(arguments)}();i.isLegacyArguments=a,t.exports=u?i:a},"4GK0":function(t,e,r){"use strict";r("xmva"),r("yNSe"),r("nvDk"),r("FhVV"),r("b+qZ")},"570s":function(t,e){!function(t){"use strict";t.console||(t.console={});for(var e,r,n=t.console,o=function(){},i=["memory"],a="assert,clear,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,markTimeline,profile,profiles,profileEnd,show,table,time,timeEnd,timeline,timelineEnd,timeStamp,trace,warn".split(",");e=i.pop();)n[e]||(n[e]={});for(;r=a.pop();)n[r]||(n[r]=o)}("undefined"==typeof window?this:window)},"5xAX":function(t,e,r){"use strict";var n=r("82c2"),o=r("RLeF"),i=r("VwiP"),a=r("V+xs"),u=r("HH6Z"),c=o(i);n(c,{getPolyfill:a,implementation:i,shim:u}),t.exports=c},"5yQQ":function(t,e,r){"use strict";var n=r("nRDI");t.exports=function(){if("undefined"!=typeof document){if(document.contains)return document.contains;if(document.body&&document.body.contains)return document.body.contains}return n}},"6B6L":function(t,e,r){"use strict";var n=r("JxQ3"),o=r("6ayh")("%TypeError%"),i=r("aTj1"),a=r("2GRh"),u=r("xby5"),c=r("hemD"),s=r("JwX2"),f=r("m2++"),l=r("p2h6"),p=r("RIFg");t.exports=function(t,e,r){if(!c(r))throw new o("Assertion failed: `adder` is not callable");if(null==e)throw new o("Assertion failed: `iterable` is present, and not nullish");for(var y=u(e);;){var h=f(y);if(!h)return t;var v=l(h);if("Object"!==p(v)){var d=new o("iterator next must return an Object, got "+n(v));return s(y,(function(){throw d}))}try{var b=a(v,"0"),g=a(v,"1");i(r,t,[b,g])}catch(t){return s(y,(function(){throw t}))}}}},"6ayh":function(t,e,r){"use strict";var n=TypeError,o=Object.getOwnPropertyDescriptor;if(o)try{o({},"")}catch(t){o=null}var i=function(){throw new n},a=o?function(){try{return i}catch(t){try{return o(arguments,"callee").get}catch(t){return i}}}():i,u=r("UVaH")(),c=Object.getPrototypeOf||function(t){return t.__proto__},s=void 0,f="undefined"==typeof Uint8Array?void 0:c(Uint8Array),l={"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer,"%ArrayBufferPrototype%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer.prototype,"%ArrayIteratorPrototype%":u?c([][Symbol.iterator]()):void 0,"%ArrayPrototype%":Array.prototype,"%ArrayProto_entries%":Array.prototype.entries,"%ArrayProto_forEach%":Array.prototype.forEach,"%ArrayProto_keys%":Array.prototype.keys,"%ArrayProto_values%":Array.prototype.values,"%AsyncFromSyncIteratorPrototype%":void 0,"%AsyncFunction%":void 0,"%AsyncFunctionPrototype%":void 0,"%AsyncGenerator%":void 0,"%AsyncGeneratorFunction%":void 0,"%AsyncGeneratorPrototype%":void 0,"%AsyncIteratorPrototype%":s&&u&&Symbol.asyncIterator?s[Symbol.asyncIterator]():void 0,"%Atomics%":"undefined"==typeof Atomics?void 0:Atomics,"%Boolean%":Boolean,"%BooleanPrototype%":Boolean.prototype,"%DataView%":"undefined"==typeof DataView?void 0:DataView,"%DataViewPrototype%":"undefined"==typeof DataView?void 0:DataView.prototype,"%Date%":Date,"%DatePrototype%":Date.prototype,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%ErrorPrototype%":Error.prototype,"%eval%":eval,"%EvalError%":EvalError,"%EvalErrorPrototype%":EvalError.prototype,"%Float32Array%":"undefined"==typeof Float32Array?void 0:Float32Array,"%Float32ArrayPrototype%":"undefined"==typeof Float32Array?void 0:Float32Array.prototype,"%Float64Array%":"undefined"==typeof Float64Array?void 0:Float64Array,"%Float64ArrayPrototype%":"undefined"==typeof Float64Array?void 0:Float64Array.prototype,"%Function%":Function,"%FunctionPrototype%":Function.prototype,"%Generator%":void 0,"%GeneratorFunction%":void 0,"%GeneratorPrototype%":void 0,"%Int8Array%":"undefined"==typeof Int8Array?void 0:Int8Array,"%Int8ArrayPrototype%":"undefined"==typeof Int8Array?void 0:Int8Array.prototype,"%Int16Array%":"undefined"==typeof Int16Array?void 0:Int16Array,"%Int16ArrayPrototype%":"undefined"==typeof Int16Array?void 0:Int8Array.prototype,"%Int32Array%":"undefined"==typeof Int32Array?void 0:Int32Array,"%Int32ArrayPrototype%":"undefined"==typeof Int32Array?void 0:Int32Array.prototype,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":u?c(c([][Symbol.iterator]())):void 0,"%JSON%":"object"==typeof JSON?JSON:void 0,"%JSONParse%":"object"==typeof JSON?JSON.parse:void 0,"%Map%":"undefined"==typeof Map?void 0:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&u?c((new Map)[Symbol.iterator]()):void 0,"%MapPrototype%":"undefined"==typeof Map?void 0:Map.prototype,"%Math%":Math,"%Number%":Number,"%NumberPrototype%":Number.prototype,"%Object%":Object,"%ObjectPrototype%":Object.prototype,"%ObjProto_toString%":Object.prototype.toString,"%ObjProto_valueOf%":Object.prototype.valueOf,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?void 0:Promise,"%PromisePrototype%":"undefined"==typeof Promise?void 0:Promise.prototype,"%PromiseProto_then%":"undefined"==typeof Promise?void 0:Promise.prototype.then,"%Promise_all%":"undefined"==typeof Promise?void 0:Promise.all,"%Promise_reject%":"undefined"==typeof Promise?void 0:Promise.reject,"%Promise_resolve%":"undefined"==typeof Promise?void 0:Promise.resolve,"%Proxy%":"undefined"==typeof Proxy?void 0:Proxy,"%RangeError%":RangeError,"%RangeErrorPrototype%":RangeError.prototype,"%ReferenceError%":ReferenceError,"%ReferenceErrorPrototype%":ReferenceError.prototype,"%Reflect%":"undefined"==typeof Reflect?void 0:Reflect,"%RegExp%":RegExp,"%RegExpPrototype%":RegExp.prototype,"%Set%":"undefined"==typeof Set?void 0:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&u?c((new Set)[Symbol.iterator]()):void 0,"%SetPrototype%":"undefined"==typeof Set?void 0:Set.prototype,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer,"%SharedArrayBufferPrototype%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer.prototype,"%String%":String,"%StringIteratorPrototype%":u?c(""[Symbol.iterator]()):void 0,"%StringPrototype%":String.prototype,"%Symbol%":u?Symbol:void 0,"%SymbolPrototype%":u?Symbol.prototype:void 0,"%SyntaxError%":SyntaxError,"%SyntaxErrorPrototype%":SyntaxError.prototype,"%ThrowTypeError%":a,"%TypedArray%":f,"%TypedArrayPrototype%":f?f.prototype:void 0,"%TypeError%":n,"%TypeErrorPrototype%":n.prototype,"%Uint8Array%":"undefined"==typeof Uint8Array?void 0:Uint8Array,"%Uint8ArrayPrototype%":"undefined"==typeof Uint8Array?void 0:Uint8Array.prototype,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray,"%Uint8ClampedArrayPrototype%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray.prototype,"%Uint16Array%":"undefined"==typeof Uint16Array?void 0:Uint16Array,"%Uint16ArrayPrototype%":"undefined"==typeof Uint16Array?void 0:Uint16Array.prototype,"%Uint32Array%":"undefined"==typeof Uint32Array?void 0:Uint32Array,"%Uint32ArrayPrototype%":"undefined"==typeof Uint32Array?void 0:Uint32Array.prototype,"%URIError%":URIError,"%URIErrorPrototype%":URIError.prototype,"%WeakMap%":"undefined"==typeof WeakMap?void 0:WeakMap,"%WeakMapPrototype%":"undefined"==typeof WeakMap?void 0:WeakMap.prototype,"%WeakSet%":"undefined"==typeof WeakSet?void 0:WeakSet,"%WeakSetPrototype%":"undefined"==typeof WeakSet?void 0:WeakSet.prototype},p=r("D3zA").call(Function.call,String.prototype.replace),y=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,h=/\\(\\)?/g,v=function(t){var e=[];return p(t,y,(function(t,r,n,o){e[e.length]=n?p(o,h,"$1"):r||t})),e},d=function(t,e){if(!(t in l))throw new SyntaxError("intrinsic "+t+" does not exist!");if(void 0===l[t]&&!e)throw new n("intrinsic "+t+" exists, but is not available. Please file an issue!");return l[t]};t.exports=function(t,e){if("string"!=typeof t||0===t.length)throw new TypeError("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof e)throw new TypeError('"allowMissing" argument must be a boolean');for(var r=v(t),i=d("%"+(r.length>0?r[0]:"")+"%",e),a=1;a<r.length;a+=1)if(null!=i)if(o&&a+1>=r.length){var u=o(i,r[a]);if(!e&&!(r[a]in i))throw new n("base intrinsic for "+t+" exists, but the property is not available.");i=u?u.get||u.value:i[r[a]]}else i=i[r[a]];return i}},"6iti":function(t,e,r){"use strict";var n=r("6B6L"),o=r("UBAn"),i=r("2GRh"),a=r("1Soo"),u=r("Ii9V"),c=r("3hvG"),s=r("RIFg"),f=function(t,e){var r=c(t);o(this,r,e)},l="function"==typeof Symbol&&"symbol"==typeof Symbol("foo");t.exports=function(t){u(t);var e={};if(!l){if(!a(t))throw new TypeError("this environment lacks native Symbols, and can not support non-Array iterables");return function(t,e){for(var r=0;r<e.length;++r){var n=e[r];if("Object"!==s(n))throw new TypeError("iterator returned a non-object; entry expected");var a=i(n,"0"),u=i(n,"1"),f=c(a);o(t,f,u)}}(e,t),e}return n(e,t,f)}},"6ll1":function(t,e,r){"use strict";var n=r("6ayh"),o=n("%Symbol.species%",!0),i=n("%TypeError%"),a=r("zODz"),u=r("RIFg");t.exports=function(t,e){if("Object"!==u(t))throw new i("Assertion failed: Type(O) is not Object");var r=t.constructor;if(void 0===r)return e;if("Object"!==u(r))throw new i("O.constructor is not an Object");var n=o?r[o]:void 0;if(null==n)return e;if(a(n))return n;throw new i("no constructor found")}},"7IBh":function(t,e,r){"use strict";var n=r("xG2L"),o=r("RIFg");t.exports=function(t){if(void 0===t)return t;n(o,"Property Descriptor","Desc",t);var e={};return"[[Value]]"in t&&(e.value=t["[[Value]]"]),"[[Writable]]"in t&&(e.writable=t["[[Writable]]"]),"[[Get]]"in t&&(e.get=t["[[Get]]"]),"[[Set]]"in t&&(e.set=t["[[Set]]"]),"[[Enumerable]]"in t&&(e.enumerable=t["[[Enumerable]]"]),"[[Configurable]]"in t&&(e.configurable=t["[[Configurable]]"]),e}},"7K3S":function(t,e){"document"in window.self&&((!("classList"in document.createElement("_"))||document.createElementNS&&!("classList"in document.createElementNS("http://www.w3.org/2000/svg","g")))&&function(t){"use strict";if("Element"in t){var e=t.Element.prototype,r=Object,n=String.prototype.trim||function(){return this.replace(/^\s+|\s+$/g,"")},o=Array.prototype.indexOf||function(t){for(var e=0,r=this.length;e<r;e++)if(e in this&&this[e]===t)return e;return-1},i=function(t,e){this.name=t,this.code=DOMException[t],this.message=e},a=function(t,e){if(""===e)throw new i("SYNTAX_ERR","An invalid or illegal string was specified");if(/\s/.test(e))throw new i("INVALID_CHARACTER_ERR","String contains an invalid character");return o.call(t,e)},u=function(t){for(var e=n.call(t.getAttribute("class")||""),r=e?e.split(/\s+/):[],o=0,i=r.length;o<i;o++)this.push(r[o]);this._updateClassName=function(){t.setAttribute("class",this.toString())}},c=u.prototype=[],s=function(){return new u(this)};if(i.prototype=Error.prototype,c.item=function(t){return this[t]||null},c.contains=function(t){return-1!==a(this,t+="")},c.add=function(){var t,e=arguments,r=0,n=e.length,o=!1;do{t=e[r]+"",-1===a(this,t)&&(this.push(t),o=!0)}while(++r<n);o&&this._updateClassName()},c.remove=function(){var t,e,r=arguments,n=0,o=r.length,i=!1;do{for(t=r[n]+"",e=a(this,t);-1!==e;)this.splice(e,1),i=!0,e=a(this,t)}while(++n<o);i&&this._updateClassName()},c.toggle=function(t,e){t+="";var r=this.contains(t),n=r?!0!==e&&"remove":!1!==e&&"add";return n&&this[n](t),!0===e||!1===e?e:!r},c.toString=function(){return this.join(" ")},r.defineProperty){var f={get:s,enumerable:!0,configurable:!0};try{r.defineProperty(e,"classList",f)}catch(t){void 0!==t.number&&-2146823252!==t.number||(f.enumerable=!1,r.defineProperty(e,"classList",f))}}else r.prototype.__defineGetter__&&e.__defineGetter__("classList",s)}}(window.self),function(){"use strict";var t=document.createElement("_");if(t.classList.add("c1","c2"),!t.classList.contains("c2")){var e=function(t){var e=DOMTokenList.prototype[t];DOMTokenList.prototype[t]=function(t){var r,n=arguments.length;for(r=0;r<n;r++)t=arguments[r],e.call(this,t)}};e("add"),e("remove")}if(t.classList.toggle("c3",!1),t.classList.contains("c3")){var r=DOMTokenList.prototype.toggle;DOMTokenList.prototype.toggle=function(t,e){return 1 in arguments&&!this.contains(t)==!e?e:r.call(this,t)}}t=null}())},"7KAz":function(t,e,r){"use strict";var n=r("srjY"),o=TypeError,i=r("ZySq");t.exports=function(t){var e=n(t);if(!e)throw new o("non-iterable value provided");return arguments.length>1?i(e,arguments[1]):i(e)}},"7cND":function(t,e){window.matchMedia||(window.matchMedia=function(){"use strict";var t=window.styleMedia||window.media;if(!t){var e,r=document.createElement("style"),n=document.getElementsByTagName("script")[0];r.type="text/css",r.id="matchmediajs-test",n?n.parentNode.insertBefore(r,n):document.head.appendChild(r),e="getComputedStyle"in window&&window.getComputedStyle(r,null)||r.currentStyle,t={matchMedium:function(t){var n="@media "+t+"{ #matchmediajs-test { width: 1px; } }";return r.styleSheet?r.styleSheet.cssText=n:r.textContent=n,"1px"===e.width}}}return function(e){return{matches:t.matchMedium(e||"all"),media:e||"all"}}}())},"7r9i":function(t,e,r){"use strict";t.exports=function(){if("function"!=typeof Promise)throw new TypeError("`Promise.allSettled` requires a global `Promise` be available.")}},"82c2":function(t,e,r){"use strict";var n=r("1seS"),o="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),i=Object.prototype.toString,a=Array.prototype.concat,u=Object.defineProperty,c=u&&function(){var t={};try{for(var e in u(t,"x",{enumerable:!1,value:t}),t)return!1;return t.x===t}catch(t){return!1}}(),s=function(t,e,r,n){var o;(!(e in t)||"function"==typeof(o=n)&&"[object Function]"===i.call(o)&&n())&&(c?u(t,e,{configurable:!0,enumerable:!1,value:r,writable:!0}):t[e]=r)},f=function(t,e){var r=arguments.length>2?arguments[2]:{},i=n(e);o&&(i=a.call(i,Object.getOwnPropertySymbols(e)));for(var u=0;u<i.length;u+=1)s(t,i[u],e[i[u]],r[i[u]])};f.supportsDescriptors=!!c,t.exports=f},"8oxB":function(t,e){var r,n,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(t){if(r===setTimeout)return setTimeout(t,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(t){r=i}try{n="function"==typeof clearTimeout?clearTimeout:a}catch(t){n=a}}();var c,s=[],f=!1,l=-1;function p(){f&&c&&(f=!1,c.length?s=c.concat(s):l=-1,s.length&&y())}function y(){if(!f){var t=u(p);f=!0;for(var e=s.length;e;){for(c=s,s=[];++l<e;)c&&c[l].run();l=-1,e=s.length}c=null,f=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===a||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function h(t,e){this.fun=t,this.array=e}function v(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];s.push(new h(t,e)),1!==s.length||f||u(y)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},"9F/A":function(t,e,r){"use strict";var n=r("Khql")("Promise.resolve",!0);t.exports=function(t,e){if(!n)throw new SyntaxError("This environment does not support Promises.");return n(t,e)}},"9sGd":function(t,e,r){"use strict";var n=r("IFfy");t.exports=function(t,e){return t===e?0!==t||1/t==1/e:n(t)&&n(e)}},D2IK:function(t,e,r){"use strict";r("Kz4e")},D3zA:function(t,e,r){"use strict";var n=r("aI7X");t.exports=Function.prototype.bind||n},D6qd:function(t,e,r){"use strict";var n=r("6ayh")("RegExp.prototype.test"),o=r("RLeF");t.exports=function(t){return o(n,t)}},DmXP:function(t,e,r){"use strict";var n=Date.prototype.getDay,o=Object.prototype.toString,i="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;t.exports=function(t){return"object"==typeof t&&null!==t&&(i?function(t){try{return n.call(t),!0}catch(t){return!1}}(t):"[object Date]"===o.call(t))}},DpIS:function(t,e,r){r("xEkU").polyfill()},E1iy:function(t,e,r){"use strict";t.exports=function(t){return null===t||"function"!=typeof t&&"object"!=typeof t}},FHRK:function(t,e,r){"use strict";var n=r("uuTH");t.exports=function(){return Array.prototype.includes||n}},Fgxp:function(t,e,r){"use strict";r("7r9i")();var n=r("9F/A"),o=r("RIFg"),i=r("7KAz"),a=r("owxQ"),u=r("6ayh"),c=r("D3zA"),s=c.call(Function.call,u("%Promise_all%")),f=c.call(Function.call,u("%Promise_reject%"));t.exports=function(t){var e=this;if("Object"!==o(e))throw new TypeError("`this` value must be an object");var r=i(t);return s(e,a(r,(function(t){var r=n(e,t);try{return r.then((function(t){return{status:"fulfilled",value:t}}),(function(t){return{status:"rejected",reason:t}}))}catch(t){return f(e,t)}})))}},FhVV:function(t,e,r){"use strict";r("03Sc")()},FpZJ:function(t,e,r){"use strict";t.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var t={},e=Symbol("test"),r=Object(e);if("string"==typeof e)return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;for(e in t[e]=42,t)return!1;if("function"==typeof Object.keys&&0!==Object.keys(t).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(t).length)return!1;var n=Object.getOwnPropertySymbols(t);if(1!==n.length||n[0]!==e)return!1;if(!Object.prototype.propertyIsEnumerable.call(t,e))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var o=Object.getOwnPropertyDescriptor(t,e);if(42!==o.value||!0!==o.enumerable)return!1}return!0}},GPGZ:function(t,e,r){"use strict";var n=r("oNNP"),o=r("6ayh")("%TypeError%"),i=r("RIFg"),a=r("XnxE"),u=r("hemD");t.exports=function(t){if("Object"!==i(t))throw new o("ToPropertyDescriptor requires an object");var e={};if(n(t,"enumerable")&&(e["[[Enumerable]]"]=a(t.enumerable)),n(t,"configurable")&&(e["[[Configurable]]"]=a(t.configurable)),n(t,"value")&&(e["[[Value]]"]=t.value),n(t,"writable")&&(e["[[Writable]]"]=a(t.writable)),n(t,"get")){var r=t.get;if(void 0!==r&&!u(r))throw new TypeError("getter must be a function");e["[[Get]]"]=r}if(n(t,"set")){var c=t.set;if(void 0!==c&&!u(c))throw new o("setter must be a function");e["[[Set]]"]=c}if((n(e,"[[Get]]")||n(e,"[[Set]]"))&&(n(e,"[[Value]]")||n(e,"[[Writable]]")))throw new o("Invalid property descriptor. Cannot both specify accessors and a value or writable attribute");return e}},GQul:function(t,e,r){"use strict";"function"==typeof Promise&&r("NUvg"),r("4GK0")},Gn0q:function(t,e,r){"use strict";var n=r("82c2"),o=r("5yQQ");t.exports=function(){var t=o();return"undefined"!=typeof document&&(n(document,{contains:t},{contains:function(){return document.contains!==t}}),"undefined"!=typeof Element&&n(Element.prototype,{contains:t},{contains:function(){return Element.prototype.contains!==t}})),t}},H8rg:function(t,e,r){"use strict";var n=r("rGdr");t.exports=function(){return"function"==typeof Object.getOwnPropertyDescriptors?Object.getOwnPropertyDescriptors:n}},HH6Z:function(t,e,r){"use strict";var n=r("82c2").supportsDescriptors,o=r("V+xs"),i=Object.getOwnPropertyDescriptor,a=Object.defineProperty,u=TypeError,c=Object.getPrototypeOf,s=/a/;t.exports=function(){if(!n||!c)throw new u("RegExp.prototype.flags requires a true ES5 environment that supports property descriptors");var t=o(),e=c(s),r=i(e,"flags");return r&&r.get===t||a(e,"flags",{configurable:!0,enumerable:!1,get:t}),t}},HYxC:function(t,e,r){"use strict";var n=r("qjSr"),o=r("mJ3t"),i=r("2GRh"),a=r("hemD"),u=r("ciGR"),c=r("TU3P");t.exports=function(t){var e,r=c(this),s=u(i(r,"length"));if(!a(t))throw new TypeError("mapperFunction must be a function");arguments.length>1&&(e=arguments[1]);var f=n(r,0);return o(f,r,s,0,1,t,e),f}},HdHG:function(t,e,r){"use strict";var n=r("6ayh")("%Object.getOwnPropertyDescriptor%");if(n)try{n([],"length")}catch(t){n=null}t.exports=n},HdW7:function(t,e,r){"use strict";var n=r("+IY2"),o=r("82c2");t.exports=function(){var t=n();return o(Object,{entries:t},{entries:function(){return Object.entries!==t}}),t}},HgV8:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("Km29"),i=r("7IBh"),a=r("fyQZ"),u=r("hNTQ"),c=r("NjaY"),s=r("rCmP"),f=r("9sGd"),l=r("RIFg");t.exports=function(t,e,r){if("Object"!==l(t))throw new n("Assertion failed: Type(O) is not Object");if(!s(e))throw new n("Assertion failed: IsPropertyKey(P) is not true");var p=a(t,e),y=!p||c(t);return!(p&&(!p["[[Writable]]"]||!p["[[Configurable]]"])||!y)&&o(u,f,i,t,e,{"[[Configurable]]":!0,"[[Enumerable]]":!0,"[[Value]]":r,"[[Writable]]":!0})}},"Ho/E":function(t,e,r){"use strict";r("nIg7")()},HvP7:function(t,e,r){"use strict";var n=r("6iti");t.exports=function(){return"function"==typeof Object.fromEntries?Object.fromEntries:n}},IFfy:function(t,e,r){"use strict";t.exports=Number.isNaN||function(t){return t!=t}},IdCN:function(t,e,r){"use strict";var n=Function.prototype.toString,o=/^\s*class\b/,i=function(t){try{var e=n.call(t);return o.test(e)}catch(t){return!1}},a=Object.prototype.toString,u="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;t.exports=function(t){if(!t)return!1;if("function"!=typeof t&&"object"!=typeof t)return!1;if("function"==typeof t&&!t.prototype)return!0;if(u)return function(t){try{return!i(t)&&(n.call(t),!0)}catch(t){return!1}}(t);if(i(t))return!1;var e=a.call(t);return"[object Function]"===e||"[object GeneratorFunction]"===e}},Ii9V:function(t,e,r){"use strict";t.exports=r("TVLE")},JQAW:function(t,e,r){"use strict";var n=function(){return"string"==typeof function(){}.name},o=Object.getOwnPropertyDescriptor;if(o)try{o([],"length")}catch(t){o=null}n.functionsHaveConfigurableNames=function(){return n()&&o&&!!o((function(){}),"name").configurable};var i=Function.prototype.bind;n.boundFunctionsHaveNames=function(){return n()&&"function"==typeof i&&""!==function(){}.bind().name},t.exports=n},JwX2:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("aTj1"),i=r("XDGy"),a=r("hemD"),u=r("RIFg");t.exports=function(t,e){if("Object"!==u(t))throw new n("Assertion failed: Type(iterator) is not Object");if(!a(e))throw new n("Assertion failed: completion is not a thunk for a Completion Record");var r,c=e,s=i(t,"return");if(void 0===s)return c();try{var f=o(s,t,[])}catch(t){throw c(),c=null,t}if(r=c(),c=null,"Object"!==u(f))throw new n("iterator .return must return an object");return r}},JxQ3:function(t,e,r){var n="function"==typeof Map&&Map.prototype,o=Object.getOwnPropertyDescriptor&&n?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,i=n&&o&&"function"==typeof o.get?o.get:null,a=n&&Map.prototype.forEach,u="function"==typeof Set&&Set.prototype,c=Object.getOwnPropertyDescriptor&&u?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,s=u&&c&&"function"==typeof c.get?c.get:null,f=u&&Set.prototype.forEach,l="function"==typeof WeakMap&&WeakMap.prototype?WeakMap.prototype.has:null,p="function"==typeof WeakSet&&WeakSet.prototype?WeakSet.prototype.has:null,y=Boolean.prototype.valueOf,h=Object.prototype.toString,v=String.prototype.match,d="function"==typeof BigInt?BigInt.prototype.valueOf:null,b=r(1).custom,g=b&&j(b)?b:null;function m(t,e,r){var n="double"===(r.quoteStyle||e)?'"':"'";return n+t+n}function w(t){return String(t).replace(/"/g,"&quot;")}function O(t){return"[object Array]"===T(t)}function j(t){return"[object Symbol]"===T(t)}t.exports=function t(e,r,n,o){var u=r||{};if(E(u,"quoteStyle")&&"single"!==u.quoteStyle&&"double"!==u.quoteStyle)throw new TypeError('option "quoteStyle" must be "single" or "double"');if(void 0===e)return"undefined";if(null===e)return"null";if("boolean"==typeof e)return e?"true":"false";if("string"==typeof e)return function(t,e){return m(t.replace(/(['\\])/g,"\\$1").replace(/[\x00-\x1f]/g,x),"single",e)}(e,u);if("number"==typeof e)return 0===e?1/0/e>0?"0":"-0":String(e);if("bigint"==typeof e)return String(e)+"n";var c=void 0===u.depth?5:u.depth;if(void 0===n&&(n=0),n>=c&&c>0&&"object"==typeof e)return"[Object]";if(void 0===o)o=[];else if(function(t,e){if(t.indexOf)return t.indexOf(e);for(var r=0,n=t.length;r<n;r++)if(t[r]===e)return r;return-1}(o,e)>=0)return"[Circular]";function h(e,r){return r&&(o=o.slice()).push(r),t(e,u,n+1,o)}if("function"==typeof e){var b=function(t){if(t.name)return t.name;var e=v.call(t,/^function\s*([\w$]+)/);if(e)return e[1];return null}(e);return"[Function"+(b?": "+b:"")+"]"}if(j(e)){var S=Symbol.prototype.toString.call(e);return"object"==typeof e?P(S):S}if(function(t){if(!t||"object"!=typeof t)return!1;if("undefined"!=typeof HTMLElement&&t instanceof HTMLElement)return!0;return"string"==typeof t.nodeName&&"function"==typeof t.getAttribute}(e)){for(var R="<"+String(e.nodeName).toLowerCase(),M=e.attributes||[],N=0;N<M.length;N++)R+=" "+M[N].name+"="+m(w(M[N].value),"double",u);return R+=">",e.childNodes&&e.childNodes.length&&(R+="..."),R+="</"+String(e.nodeName).toLowerCase()+">"}if(O(e))return 0===e.length?"[]":"[ "+_(e,h).join(", ")+" ]";if(function(t){return"[object Error]"===T(t)}(e)){var C=_(e,h);return 0===C.length?"["+String(e)+"]":"{ ["+String(e)+"] "+C.join(", ")+" }"}if("object"==typeof e){if(g&&"function"==typeof e[g])return e[g]();if("function"==typeof e.inspect)return e.inspect()}if(function(t){if(!i||!t||"object"!=typeof t)return!1;try{i.call(t);try{s.call(t)}catch(t){return!0}return t instanceof Map}catch(t){}return!1}(e)){var D=[];return a.call(e,(function(t,r){D.push(h(r,e)+" => "+h(t,e))})),A("Map",i.call(e),D)}if(function(t){if(!s||!t||"object"!=typeof t)return!1;try{s.call(t);try{i.call(t)}catch(t){return!0}return t instanceof Set}catch(t){}return!1}(e)){var F=[];return f.call(e,(function(t){F.push(h(t,e))})),A("Set",s.call(e),F)}if(function(t){if(!l||!t||"object"!=typeof t)return!1;try{l.call(t,l);try{p.call(t,p)}catch(t){return!0}return t instanceof WeakMap}catch(t){}return!1}(e))return I("WeakMap");if(function(t){if(!p||!t||"object"!=typeof t)return!1;try{p.call(t,p);try{l.call(t,l)}catch(t){return!0}return t instanceof WeakSet}catch(t){}return!1}(e))return I("WeakSet");if(function(t){return"[object Number]"===T(t)}(e))return P(h(Number(e)));if(function(t){return"[object BigInt]"===T(t)}(e))return P(h(d.call(e)));if(function(t){return"[object Boolean]"===T(t)}(e))return P(y.call(e));if(function(t){return"[object String]"===T(t)}(e))return P(h(String(e)));if(!function(t){return"[object Date]"===T(t)}(e)&&!function(t){return"[object RegExp]"===T(t)}(e)){var k=_(e,h);return 0===k.length?"{}":"{ "+k.join(", ")+" }"}return String(e)};var S=Object.prototype.hasOwnProperty||function(t){return t in this};function E(t,e){return S.call(t,e)}function T(t){return h.call(t)}function x(t){var e=t.charCodeAt(0),r={8:"b",9:"t",10:"n",12:"f",13:"r"}[e];return r?"\\"+r:"\\x"+(e<16?"0":"")+e.toString(16)}function P(t){return"Object("+t+")"}function I(t){return t+" { ? }"}function A(t,e,r){return t+" ("+e+") {"+r.join(", ")+"}"}function _(t,e){var r=O(t),n=[];if(r){n.length=t.length;for(var o=0;o<t.length;o++)n[o]=E(t,o)?e(t[o],t):""}for(var i in t)E(t,i)&&(r&&String(Number(i))===i&&i<t.length||(/[^\w$]/.test(i)?n.push(e(i,t)+": "+e(t[i],t)):n.push(i+": "+e(t[i],t))));return n}},KFgS:function(t,e,r){"use strict";t.exports=r("TVLE")},KUT7:function(t,e,r){"use strict";var n=r("SrsA");t.exports=function(){return n(this)}},Khql:function(t,e,r){"use strict";var n=r("6ayh"),o=r("RLeF"),i=o(n("String.prototype.indexOf"));t.exports=function(t,e){var r=n(t,!!e);return"function"==typeof r&&i(t,".prototype.")?o(r):r}},Km29:function(t,e,r){"use strict";var n=r("6ayh")("%Object.defineProperty%",!0);if(n)try{n({},"a",{value:1})}catch(t){n=null}var o=r("Khql")("Object.prototype.propertyIsEnumerable");t.exports=function(t,e,r,i,a,u){if(!n){if(!t(u))return!1;if(!u["[[Configurable]]"]||!u["[[Writable]]"])return!1;if(a in i&&o(i,a)!==!!u["[[Enumerable]]"])return!1;var c=u["[[Value]]"];return i[a]=c,e(i[a],c)}return n(i,a,r(u)),!0}},Kz4e:function(t,e,r){"use strict";r("Gn0q")()},LJJ4:function(t,e,r){"use strict";t.exports=function(t){return"function"==typeof t&&!!t.prototype}},Lcws:function(t,e,r){"use strict";var n=r("0yco"),o=r("gvBt");t.exports=function(t){var e=o(t);return n(e)}},NKaP:function(t,e,r){"use strict";var n=r("IFfy");t.exports=function(t,e){return t===e||n(t)&&n(e)}},NUgV:function(t,e,r){"use strict";var n=r("82c2").supportsDescriptors,o=r("JQAW")(),i=r("gaAG"),a=Object.defineProperty,u=TypeError;t.exports=function(){var t=i();if(o)return t;if(!n)throw new u("Shimming Function.prototype.name support requires ES5 property descriptor support.");var e=Function.prototype;return a(e,"name",{configurable:!0,enumerable:!1,get:function(){var r=t.call(this);return this!==e&&a(this,"name",{configurable:!0,enumerable:!1,value:r,writable:!1}),r}}),t}},NUvg:function(t,e,r){"use strict";r("Ui0A")()},NjaY:function(t,e,r){"use strict";var n=r("6ayh")("%Object%"),o=r("E1iy"),i=n.preventExtensions,a=n.isExtensible;t.exports=i?function(t){return!o(t)&&a(t)}:function(t){return!o(t)}},OuUZ:function(t,e,r){"use strict";r("Pgtx"),r("0nHT")},P5mh:function(t,e,r){"use strict";var n=r("ciGR"),o=r("R5T6"),i=r("Ii9V"),a=r("Khql")("String.prototype.slice");t.exports=function(t){var e,r=i(this),u=o(r),c=n(u.length);arguments.length>1&&(e=arguments[1]);var s=void 0===e?"":o(e);""===s&&(s=" ");var f=n(t);if(f<=c)return u;for(var l=f-c;s.length<l;){var p=s.length,y=l-p;s+=p>y?a(s,0,y):s}var h=s.length>l?a(s,0,l):s;return h+u}},PScO:function(t,e,r){"use strict";var n=r("UYO7");t.exports=function(t){return"symbol"==typeof t?"Symbol":n(t)}},Pgtx:function(t,e,r){"use strict";r("2fPq")},PyeM:function(t,e,r){"use strict";var n=r("6ayh")("%Symbol.match%",!0),o=r("2Nju"),i=r("XnxE");t.exports=function(t){if(!t||"object"!=typeof t)return!1;if(n){var e=t[n];if(void 0!==e)return i(e)}return o(t)}},R5T6:function(t,e,r){"use strict";var n=r("6ayh"),o=n("%String%"),i=n("%TypeError%");t.exports=function(t){if("symbol"==typeof t)throw new i("Cannot convert a Symbol value to a string");return o(t)}},RIFg:function(t,e,r){"use strict";var n=r("UYO7");t.exports=function(t){return"symbol"==typeof t?"Symbol":n(t)}},"RJ/z":function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("rCmP"),i=r("RIFg");t.exports=function(t,e){if("Object"!==i(t))throw new n("Assertion failed: `O` must be an Object");if(!o(e))throw new n("Assertion failed: `P` must be a Property Key");return e in t}},RLeF:function(t,e,r){"use strict";var n=r("D3zA"),o=r("6ayh")("%Function%"),i=o.apply,a=o.call;t.exports=function(){return n.apply(a,arguments)},t.exports.apply=function(){return n.apply(i,arguments)}},"Ro/O":function(t,e,r){"use strict";var n=r("6ayh"),o=n("%Object.create%",!0),i=n("%TypeError%"),a=n("%SyntaxError%"),u=r("RIFg"),c=!({__proto__:null}instanceof Object);t.exports=function(t,e){if(null!==t&&"Object"!==u(t))throw new i("Assertion failed: `proto` must be null or an object");var r=arguments.length<2?[]:e;if(r.length>0)throw new a("es-abstract does not yet support internal slots");if(o)return o(t);if(c)return{__proto__:t};if(null===t)throw new a("native Object.create support is required to create null objects");var n=function(){};return n.prototype=t,new n}},SrsA:function(t,e,r){"use strict";var n=r("6ayh"),o=r("Khql"),i=n("%SyntaxError%"),a=o("Symbol.prototype.toString",!0),u=r("gvzj");t.exports=function(t){if(!a)throw new i("Symbols are not supported in this environment");var e=a(t);if(u){var r=u(t);if(""===r)return;return r.slice(1,-1)}var n=e.slice(7,-1);if(n)return n}},TU3P:function(t,e,r){"use strict";var n=r("6ayh")("%Object%"),o=r("Ii9V");t.exports=function(t){return o(t),n(t)}},TVLE:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%");t.exports=function(t,e){if(null==t)throw new n(e||"Cannot call method on "+t);return t}},Teho:function(t,e,r){"use strict";t.exports=function(t){return null===t||"function"!=typeof t&&"object"!=typeof t}},"U/4o":function(t,e,r){"use strict";var n=r("UVaH")(),o=r("zpJY"),i=r("gvzj"),a=Object.getOwnPropertyDescriptor,u=Object.defineProperty,c=Object.setPrototypeOf,s=function(t){u(Symbol.prototype,"description",{configurable:!0,enumerable:!1,get:t})};t.exports=function(){if(!n)return!1;var t=a(Symbol.prototype,"description"),e=o(),r=!t||"function"!=typeof t.get,u=!r&&(void 0!==Symbol().description||""!==Symbol("").description);if(r||u){if(!i)return function(t){var e=Function.apply.bind(Symbol),r=Object.create?Object.create(null):{},n=function(){var t=e(this,arguments);return arguments.length>0&&""===arguments[0]&&(r[t]=!0),t};n.prototype=Symbol.prototype,c(n,Symbol),Symbol=n;var o=Function.call.bind(t),i=function(){var t=o(this);return r[this]?"":t};return s(i),i}(e);s(e)}return e}},UBAn:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("HgV8"),i=r("rCmP"),a=r("RIFg");t.exports=function(t,e,r){if("Object"!==a(t))throw new n("Assertion failed: Type(O) is not Object");if(!i(e))throw new n("Assertion failed: IsPropertyKey(P) is not true");var u=o(t,e,r);if(!u)throw new n("unable to create data property");return u}},UBBE:function(t,e,r){"use strict";var n=r("sqVN"),o=r("Lcws");t.exports=function(t){var e=o(t);return e<=0?0:e>n?n:e}},UMYc:function(t,e,r){"use strict";var n=r("l+XD"),o=r("+71H");t.exports=function(){var t=Array.prototype.map;return n(t)?t:o}},UVaH:function(t,e,r){"use strict";(function(e){var n=e.Symbol,o=r("FpZJ");t.exports=function(){return"function"==typeof n&&("function"==typeof Symbol&&("symbol"==typeof n("foo")&&("symbol"==typeof Symbol("bar")&&o())))}}).call(this,r("yLpj"))},UYO7:function(t,e,r){"use strict";t.exports=function(t){return null===t?"Null":void 0===t?"Undefined":"function"==typeof t||"object"==typeof t?"Object":"number"==typeof t?"Number":"boolean"==typeof t?"Boolean":"string"==typeof t?"String":void 0}},Ufkg:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("RIFg");t.exports=function(t,e){if("Boolean"!==o(e))throw new n("Assertion failed: Type(done) is not Boolean");return{value:t,done:e}}},Ui0A:function(t,e,r){"use strict";var n=r("vndB"),o=r("iSaG"),i=r("82c2");t.exports=function(){n();var t=o();return i(Promise.prototype,{finally:t},{finally:function(){return Promise.prototype.finally!==t}}),t}},UsSR:function(t,e,r){"use strict";var n=r("UVaH")(),o=r("6ayh"),i=r("Khql"),a=o("%Symbol.iterator%",!0),u=i("String.prototype.slice");t.exports=function(t,e){var r;return n?r=t.GetMethod(e,a):t.IsArray(e)?r=function(){var t=-1,e=this;return{next:function(){return{done:(t+=1)>=e.length,value:e[t]}}}}:"String"===t.Type(e)&&(r=function(){var r=0;return{next:function(){var n=t.AdvanceStringIndex(e,r,!0),o=u(e,r,n);return r=n,{done:n>e.length,value:o}}}}),r}},"V+xs":function(t,e,r){"use strict";var n=r("VwiP"),o=r("82c2").supportsDescriptors,i=Object.getOwnPropertyDescriptor,a=TypeError;t.exports=function(){if(!o)throw new a("RegExp.prototype.flags requires a true ES5 environment that supports property descriptors");if("gim"===/a/gim.flags){var t=i(RegExp.prototype,"flags");if(t&&"function"==typeof t.get&&"boolean"==typeof/a/.dotAll)return t.get}return n}},V5gn:function(t,e,r){"use strict";r("qv/t"),r("NUgV")(),r("dzgB")},VAJa:function(t,e,r){"use strict";var n=r("6ayh"),o=r("Khql"),i=r("JxQ3"),a=n("%TypeError%"),u=n("%WeakMap%",!0),c=n("%Map%",!0),s=o("Array.prototype.push"),f=o("WeakMap.prototype.get",!0),l=o("WeakMap.prototype.set",!0),p=o("WeakMap.prototype.has",!0),y=o("Map.prototype.get",!0),h=o("Map.prototype.set",!0),v=o("Map.prototype.has",!0);t.exports=function(){var t,e,r,n={assert:function(t){if(!n.has(t))throw new a("Side channel does not contain "+i(t))},get:function(n){if(u&&n&&("object"==typeof n||"function"==typeof n)){if(t)return f(t,n)}else if(c){if(e)return y(e,n)}else if(r)return function(t,e){for(var r=0;r<t.length;r+=1)if(t[r].key===e)return t[r].value}(r,n)},has:function(n){if(u&&n&&("object"==typeof n||"function"==typeof n)){if(t)return p(t,n)}else if(c){if(e)return v(e,n)}else if(r)return function(t,e){for(var r=0;r<t.length;r+=1)if(t[r].key===e)return!0;return!1}(r,n);return!1},set:function(n,o){u&&n&&("object"==typeof n||"function"==typeof n)?(t||(t=new u),l(t,n,o)):c?(e||(e=new c),h(e,n,o)):(r||(r=[]),function(t,e,r){for(var n=0;n<t.length;n+=1)if(t[n].key===e)return void(t[n].value=r);s(t,{key:e,value:r})}(r,n,o))}};return n}},VbLK:function(t,e,r){"use strict";var n=String.prototype.valueOf,o=Object.prototype.toString,i="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;t.exports=function(t){return"string"==typeof t||"object"==typeof t&&(i?function(t){try{return n.call(t),!0}catch(t){return!1}}(t):"[object String]"===o.call(t))}},VwiP:function(t,e,r){"use strict";var n=Object,o=TypeError;t.exports=function(){if(null!=this&&this!==n(this))throw new o("RegExp.prototype.flags getter called on non-object");var t="";return this.global&&(t+="g"),this.ignoreCase&&(t+="i"),this.multiline&&(t+="m"),this.dotAll&&(t+="s"),this.unicode&&(t+="u"),this.sticky&&(t+="y"),t}},W8MJ:function(t,e){function r(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}t.exports=function(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t}},WXWk:function(t,e,r){"use strict";t.exports=function(t){return t>=0?1:-1}},WZeS:function(t,e,r){"use strict";var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator,o=r("Teho"),i=r("IdCN"),a=r("DmXP"),u=r("/sVA"),c=function(t,e){if(null==t)throw new TypeError("Cannot call method on "+t);if("string"!=typeof e||"number"!==e&&"string"!==e)throw new TypeError('hint must be "string" or "number"');var r,n,a,u="string"===e?["toString","valueOf"]:["valueOf","toString"];for(a=0;a<u.length;++a)if(r=t[u[a]],i(r)&&(n=r.call(t),o(n)))return n;throw new TypeError("No default value")},s=function(t,e){var r=t[e];if(null!=r){if(!i(r))throw new TypeError(r+" returned for property "+e+" of object "+t+" is not a function");return r}};t.exports=function(t){if(o(t))return t;var e,r="default";if(arguments.length>1&&(arguments[1]===String?r="string":arguments[1]===Number&&(r="number")),n&&(Symbol.toPrimitive?e=s(t,Symbol.toPrimitive):u(t)&&(e=Symbol.prototype.valueOf)),void 0!==e){var i=e.call(t,r);if(o(i))return i;throw new TypeError("unable to convert exotic object to primitive")}return"default"===r&&(a(t)||u(t))&&(r="string"),c(t,"default"===r?"number":r)}},Wr5T:function(t,e){!function(t,e){"use strict";if("IntersectionObserver"in t&&"IntersectionObserverEntry"in t&&"intersectionRatio"in t.IntersectionObserverEntry.prototype)"isIntersecting"in t.IntersectionObserverEntry.prototype||Object.defineProperty(t.IntersectionObserverEntry.prototype,"isIntersecting",{get:function(){return this.intersectionRatio>0}});else{var r=[];o.prototype.THROTTLE_TIMEOUT=100,o.prototype.POLL_INTERVAL=null,o.prototype.USE_MUTATION_OBSERVER=!0,o.prototype.observe=function(t){if(!this._observationTargets.some((function(e){return e.element==t}))){if(!t||1!=t.nodeType)throw new Error("target must be an Element");this._registerInstance(),this._observationTargets.push({element:t,entry:null}),this._monitorIntersections(),this._checkForIntersections()}},o.prototype.unobserve=function(t){this._observationTargets=this._observationTargets.filter((function(e){return e.element!=t})),this._observationTargets.length||(this._unmonitorIntersections(),this._unregisterInstance())},o.prototype.disconnect=function(){this._observationTargets=[],this._unmonitorIntersections(),this._unregisterInstance()},o.prototype.takeRecords=function(){var t=this._queuedEntries.slice();return this._queuedEntries=[],t},o.prototype._initThresholds=function(t){var e=t||[0];return Array.isArray(e)||(e=[e]),e.sort().filter((function(t,e,r){if("number"!=typeof t||isNaN(t)||t<0||t>1)throw new Error("threshold must be a number between 0 and 1 inclusively");return t!==r[e-1]}))},o.prototype._parseRootMargin=function(t){var e=(t||"0px").split(/\s+/).map((function(t){var e=/^(-?\d*\.?\d+)(px|%)$/.exec(t);if(!e)throw new Error("rootMargin must be specified in pixels or percent");return{value:parseFloat(e[1]),unit:e[2]}}));return e[1]=e[1]||e[0],e[2]=e[2]||e[0],e[3]=e[3]||e[1],e},o.prototype._monitorIntersections=function(){this._monitoringIntersections||(this._monitoringIntersections=!0,this.POLL_INTERVAL?this._monitoringInterval=setInterval(this._checkForIntersections,this.POLL_INTERVAL):(i(t,"resize",this._checkForIntersections,!0),i(e,"scroll",this._checkForIntersections,!0),this.USE_MUTATION_OBSERVER&&"MutationObserver"in t&&(this._domObserver=new MutationObserver(this._checkForIntersections),this._domObserver.observe(e,{attributes:!0,childList:!0,characterData:!0,subtree:!0}))))},o.prototype._unmonitorIntersections=function(){this._monitoringIntersections&&(this._monitoringIntersections=!1,clearInterval(this._monitoringInterval),this._monitoringInterval=null,a(t,"resize",this._checkForIntersections,!0),a(e,"scroll",this._checkForIntersections,!0),this._domObserver&&(this._domObserver.disconnect(),this._domObserver=null))},o.prototype._checkForIntersections=function(){var e=this._rootIsInDom(),r=e?this._getRootRect():{top:0,bottom:0,left:0,right:0,width:0,height:0};this._observationTargets.forEach((function(o){var i=o.element,a=u(i),c=this._rootContainsTarget(i),s=o.entry,f=e&&c&&this._computeTargetAndRootIntersection(i,r),l=o.entry=new n({time:t.performance&&performance.now&&performance.now(),target:i,boundingClientRect:a,rootBounds:r,intersectionRect:f});s?e&&c?this._hasCrossedThreshold(s,l)&&this._queuedEntries.push(l):s&&s.isIntersecting&&this._queuedEntries.push(l):this._queuedEntries.push(l)}),this),this._queuedEntries.length&&this._callback(this.takeRecords(),this)},o.prototype._computeTargetAndRootIntersection=function(r,n){if("none"!=t.getComputedStyle(r).display){for(var o,i,a,c,f,l,p,y,h=u(r),v=s(r),d=!1;!d;){var b=null,g=1==v.nodeType?t.getComputedStyle(v):{};if("none"==g.display)return;if(v==this.root||v==e?(d=!0,b=n):v!=e.body&&v!=e.documentElement&&"visible"!=g.overflow&&(b=u(v)),b&&(o=b,i=h,a=void 0,c=void 0,f=void 0,l=void 0,p=void 0,y=void 0,a=Math.max(o.top,i.top),c=Math.min(o.bottom,i.bottom),f=Math.max(o.left,i.left),l=Math.min(o.right,i.right),y=c-a,!(h=(p=l-f)>=0&&y>=0&&{top:a,bottom:c,left:f,right:l,width:p,height:y})))break;v=s(v)}return h}},o.prototype._getRootRect=function(){var t;if(this.root)t=u(this.root);else{var r=e.documentElement,n=e.body;t={top:0,left:0,right:r.clientWidth||n.clientWidth,width:r.clientWidth||n.clientWidth,bottom:r.clientHeight||n.clientHeight,height:r.clientHeight||n.clientHeight}}return this._expandRectByRootMargin(t)},o.prototype._expandRectByRootMargin=function(t){var e=this._rootMarginValues.map((function(e,r){return"px"==e.unit?e.value:e.value*(r%2?t.width:t.height)/100})),r={top:t.top-e[0],right:t.right+e[1],bottom:t.bottom+e[2],left:t.left-e[3]};return r.width=r.right-r.left,r.height=r.bottom-r.top,r},o.prototype._hasCrossedThreshold=function(t,e){var r=t&&t.isIntersecting?t.intersectionRatio||0:-1,n=e.isIntersecting?e.intersectionRatio||0:-1;if(r!==n)for(var o=0;o<this.thresholds.length;o++){var i=this.thresholds[o];if(i==r||i==n||i<r!=i<n)return!0}},o.prototype._rootIsInDom=function(){return!this.root||c(e,this.root)},o.prototype._rootContainsTarget=function(t){return c(this.root||e,t)},o.prototype._registerInstance=function(){r.indexOf(this)<0&&r.push(this)},o.prototype._unregisterInstance=function(){var t=r.indexOf(this);-1!=t&&r.splice(t,1)},t.IntersectionObserver=o,t.IntersectionObserverEntry=n}function n(t){this.time=t.time,this.target=t.target,this.rootBounds=t.rootBounds,this.boundingClientRect=t.boundingClientRect,this.intersectionRect=t.intersectionRect||{top:0,bottom:0,left:0,right:0,width:0,height:0},this.isIntersecting=!!t.intersectionRect;var e=this.boundingClientRect,r=e.width*e.height,n=this.intersectionRect,o=n.width*n.height;this.intersectionRatio=r?Number((o/r).toFixed(4)):this.isIntersecting?1:0}function o(t,e){var r,n,o,i=e||{};if("function"!=typeof t)throw new Error("callback must be a function");if(i.root&&1!=i.root.nodeType)throw new Error("root must be an Element");this._checkForIntersections=(r=this._checkForIntersections.bind(this),n=this.THROTTLE_TIMEOUT,o=null,function(){o||(o=setTimeout((function(){r(),o=null}),n))}),this._callback=t,this._observationTargets=[],this._queuedEntries=[],this._rootMarginValues=this._parseRootMargin(i.rootMargin),this.thresholds=this._initThresholds(i.threshold),this.root=i.root||null,this.rootMargin=this._rootMarginValues.map((function(t){return t.value+t.unit})).join(" ")}function i(t,e,r,n){"function"==typeof t.addEventListener?t.addEventListener(e,r,n||!1):"function"==typeof t.attachEvent&&t.attachEvent("on"+e,r)}function a(t,e,r,n){"function"==typeof t.removeEventListener?t.removeEventListener(e,r,n||!1):"function"==typeof t.detatchEvent&&t.detatchEvent("on"+e,r)}function u(t){var e;try{e=t.getBoundingClientRect()}catch(t){}return e?(e.width&&e.height||(e={top:e.top,right:e.right,bottom:e.bottom,left:e.left,width:e.right-e.left,height:e.bottom-e.top}),e):{top:0,bottom:0,left:0,right:0,width:0,height:0}}function c(t,e){for(var r=e;r;){if(r==t)return!0;r=s(r)}return!1}function s(t){var e=t.parentNode;return e&&11==e.nodeType&&e.host?e.host:e}}(window,document)},XDGy:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("tihr"),i=r("hemD"),a=r("rCmP");t.exports=function(t,e){if(!a(e))throw new n("Assertion failed: IsPropertyKey(P) is not true");var r=o(t,e);if(null!=r){if(!i(r))throw new n(e+"is not a function");return r}}},XhRf:function(t,e,r){"use strict";var n=r("s+gD");t.exports=function(){return"function"==typeof String.prototype.padEnd?String.prototype.padEnd:n}},XnxE:function(t,e,r){"use strict";t.exports=function(t){return!!t}},XsaD:function(t,e,r){"use strict";var n=r("1Fze");t.exports=function(t){return n(t)>>>0}},Zesl:function(t,e,r){"use strict";var n=r("6ayh"),o=r("oNNP"),i=r("VAJa")(),a=n("%TypeError%"),u={assert:function(t,e){if(!t||"object"!=typeof t&&"function"!=typeof t)throw new a("`O` is not an object");if("string"!=typeof e)throw new a("`slot` must be a string");i.assert(t)},get:function(t,e){if(!t||"object"!=typeof t&&"function"!=typeof t)throw new a("`O` is not an object");if("string"!=typeof e)throw new a("`slot` must be a string");var r=i.get(t);return r&&r["$"+e]},has:function(t,e){if(!t||"object"!=typeof t&&"function"!=typeof t)throw new a("`O` is not an object");if("string"!=typeof e)throw new a("`slot` must be a string");var r=i.get(t);return!!r&&o(r,"$"+e)},set:function(t,e,r){if(!t||"object"!=typeof t&&"function"!=typeof t)throw new a("`O` is not an object");if("string"!=typeof e)throw new a("`slot` must be a string");var n=i.get(t);n||(n={},i.set(t,n)),n["$"+e]=r}};Object.freeze&&Object.freeze(u),t.exports=u},Zoej:function(t,e,r){"use strict";var n=r("82c2"),o=r("b0r7"),i=r("Ufkg"),a=r("2GRh"),u=r("6ayh"),c=r("Ro/O"),s=r("xdJO"),f=r("1SyS"),l=r("ciGR"),p=r("R5T6"),y=r("RIFg"),h=r("UVaH")(),v=r("Zesl"),d=function(t,e,r,n){if("String"!==y(e))throw new TypeError("S must be a string");if("Boolean"!==y(r))throw new TypeError("global must be a boolean");if("Boolean"!==y(n))throw new TypeError("fullUnicode must be a boolean");v.set(this,"[[IteratingRegExp]]",t),v.set(this,"[[IteratedString]]",e),v.set(this,"[[Global]]",r),v.set(this,"[[Unicode]]",n),v.set(this,"[[Done]]",!1)},b=u("%IteratorPrototype%",!0);if(b&&(d.prototype=c(b)),n(d.prototype,{next:function(){var t=this;if("Object"!==y(t))throw new TypeError("receiver must be an object");if(!(t instanceof d&&v.has(t,"[[IteratingRegExp]]")&&v.has(t,"[[IteratedString]]")&&v.has(t,"[[Global]]")&&v.has(t,"[[Unicode]]")&&v.has(t,"[[Done]]")))throw new TypeError('"this" value must be a RegExpStringIterator instance');if(v.get(t,"[[Done]]"))return i(void 0,!0);var e=v.get(t,"[[IteratingRegExp]]"),r=v.get(t,"[[IteratedString]]"),n=v.get(t,"[[Global]]"),u=v.get(t,"[[Unicode]]"),c=s(e,r);if(null===c)return v.set(t,"[[Done]]",!0),i(void 0,!0);if(n){if(""===p(a(c,"0"))){var h=l(a(e,"lastIndex")),b=o(r,h,u);f(e,"lastIndex",b,!0)}return i(c,!1)}return v.set(t,"[[Done]]",!0),i(c,!1)}}),h){var g=Object.defineProperty;if(Symbol.toStringTag&&(g?g(d.prototype,Symbol.toStringTag,{configurable:!0,enumerable:!1,value:"RegExp String Iterator",writable:!1}):d.prototype[Symbol.toStringTag]="RegExp String Iterator"),!b&&Symbol.iterator){var m={};m[Symbol.iterator]=d.prototype[Symbol.iterator]||function(){return this};var w={};w[Symbol.iterator]=function(){return d.prototype[Symbol.iterator]!==m[Symbol.iterator]},n(d.prototype,m,w)}}t.exports=d},ZySq:function(t,e,r){"use strict";var n=TypeError;t.exports=function(t){if(!t||"function"!=typeof t.next)throw new n("iterator must be an object with a `next` method");if(arguments.length>1){var e=arguments[1];if("function"!=typeof e)throw new n("`callback`, if provided, must be a function")}for(var r,o=e||[];(r=t.next())&&!r.done;)e?e(r.value):o.push(r.value);if(!e)return o}},aI7X:function(t,e,r){"use strict";var n="Function.prototype.bind called on incompatible ",o=Array.prototype.slice,i=Object.prototype.toString;t.exports=function(t){var e=this;if("function"!=typeof e||"[object Function]"!==i.call(e))throw new TypeError(n+e);for(var r,a=o.call(arguments,1),u=function(){if(this instanceof r){var n=e.apply(this,a.concat(o.call(arguments)));return Object(n)===n?n:this}return e.apply(t,a.concat(o.call(arguments)))},c=Math.max(0,e.length-a.length),s=[],f=0;f<c;f++)s.push("$"+f);if(r=Function("binder","return function ("+s.join(",")+"){ return binder.apply(this,arguments); }")(u),e.prototype){var l=function(){};l.prototype=e.prototype,r.prototype=new l,l.prototype=null}return r}},aJg2:function(t,e,r){"use strict";var n=r("Ii9V"),o=r("oNNP"),i=r("Khql")("Object.prototype.propertyIsEnumerable");t.exports=function(t){var e=n(t),r=[];for(var a in e)o(e,a)&&i(e,a)&&r.push([a,e[a]]);return r}},aOl1:function(t,e,r){"use strict";var n=r("7r9i"),o=r("Fgxp");t.exports=function(){return n(),"function"==typeof Promise.allSettled?Promise.allSettled:o}},aTj1:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("JxQ3"),i=r("hemD");t.exports=function(t,e){var r=arguments.length>2?arguments[2]:[];if(!i(t))throw new n(o(t)+" is not a function");return t.apply(e,r)}},abtl:function(t,e,r){"use strict";r("+7c2")()},aqn5:function(t,e,r){"use strict";var n=r("82c2"),o=r("vzKJ");t.exports=function(){var t=o();if(n.supportsDescriptors){var e=Object.getOwnPropertyDescriptor(t,"globalThis");(!e||e.configurable&&(e.enumerable||e.writable||globalThis!==t))&&Object.defineProperty(t,"globalThis",{configurable:!0,enumerable:!1,value:t,writable:!1})}else"object"==typeof globalThis&&globalThis===t||(t.globalThis=t);return t}},"b+qZ":function(t,e,r){"use strict";r("Ho/E"),r("kx12"),r("abtl")},b0r7:function(t,e,r){"use strict";var n=r("6ayh"),o=r("1l3A"),i=r("RIFg"),a=r("sqVN"),u=n("%TypeError%"),c=r("Khql")("String.prototype.charCodeAt");t.exports=function(t,e,r){if("String"!==i(t))throw new u("Assertion failed: `S` must be a String");if(!o(e)||e<0||e>a)throw new u("Assertion failed: `length` must be an integer >= 0 and <= 2**53");if("Boolean"!==i(r))throw new u("Assertion failed: `unicode` must be a Boolean");if(!r)return e+1;if(e+1>=t.length)return e+1;var n=c(t,e);if(n<55296||n>56319)return e+1;var s=c(t,e+1);return s<56320||s>57343?e+1:e+2}},bBhT:function(t,e,r){"use strict";var n=r("UVaH")(),o=r("+okW");t.exports=function(){return n&&"symbol"==typeof Symbol.matchAll&&"function"==typeof RegExp.prototype[Symbol.matchAll]?RegExp.prototype[Symbol.matchAll]:o}},bQgK:function(t,e,r){(function(e){(function(){var r,n,o,i,a,u;"undefined"!=typeof performance&&null!==performance&&performance.now?t.exports=function(){return performance.now()}:null!=e&&e.hrtime?(t.exports=function(){return(r()-a)/1e6},n=e.hrtime,i=(r=function(){var t;return 1e9*(t=n())[0]+t[1]})(),u=1e9*e.uptime(),a=i-u):Date.now?(t.exports=function(){return Date.now()-o},o=Date.now()):(t.exports=function(){return(new Date).getTime()-o},o=(new Date).getTime())}).call(this)}).call(this,r("8oxB"))},bZMm:function(t,e){!function(t){"use strict";if(!t.fetch){c.prototype.append=function(t,e){t=a(t),e=u(e);var r=this.map[t];r||(r=[],this.map[t]=r),r.push(e)},c.prototype.delete=function(t){delete this.map[a(t)]},c.prototype.get=function(t){var e=this.map[a(t)];return e?e[0]:null},c.prototype.getAll=function(t){return this.map[a(t)]||[]},c.prototype.has=function(t){return this.map.hasOwnProperty(a(t))},c.prototype.set=function(t,e){this.map[a(t)]=[u(e)]},c.prototype.forEach=function(t,e){Object.getOwnPropertyNames(this.map).forEach((function(r){this.map[r].forEach((function(n){t.call(e,n,r,this)}),this)}),this)};var e="FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),r="FormData"in t,n="ArrayBuffer"in t,o=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];y.prototype.clone=function(){return new y(this)},p.call(y.prototype),p.call(d.prototype),d.prototype.clone=function(){return new d(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new c(this.headers),url:this.url})},d.error=function(){var t=new d(null,{status:0,statusText:""});return t.type="error",t};var i=[301,302,303,307,308];d.redirect=function(t,e){if(-1===i.indexOf(e))throw new RangeError("Invalid status code");return new d(null,{status:e,headers:{location:t}})},t.Headers=c,t.Request=y,t.Response=d,t.fetch=function(t,r){return new Promise((function(n,o){var i;i=y.prototype.isPrototypeOf(t)&&!r?t:new y(t,r);var a=new XMLHttpRequest;a.onload=function(){var t=1223===a.status?204:a.status;if(t<100||t>599)o(new TypeError("Network request failed"));else{var e={status:t,statusText:a.statusText,headers:v(a),url:"responseURL"in a?a.responseURL:/^X-Request-URL:/m.test(a.getAllResponseHeaders())?a.getResponseHeader("X-Request-URL"):void 0},r="response"in a?a.response:a.responseText;n(new d(r,e))}},a.onerror=function(){o(new TypeError("Network request failed"))},a.ontimeout=function(){o(new TypeError("Network request failed"))},a.open(i.method,i.url,!0),"include"===i.credentials&&(a.withCredentials=!0),"responseType"in a&&e&&(a.responseType="blob"),i.headers.forEach((function(t,e){a.setRequestHeader(e,t)})),a.send(void 0===i._bodyInit?null:i._bodyInit)}))},t.fetch.polyfill=!0}function a(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function u(t){return"string"!=typeof t&&(t=String(t)),t}function c(t){this.map={},t instanceof c?t.forEach((function(t,e){this.append(e,t)}),this):t&&Object.getOwnPropertyNames(t).forEach((function(e){this.append(e,t[e])}),this)}function s(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function f(t){return new Promise((function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}}))}function l(t){var e=new FileReader;return e.readAsArrayBuffer(t),f(e)}function p(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t,"string"==typeof t)this._bodyText=t;else if(e&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(r&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(t){if(!n||!ArrayBuffer.prototype.isPrototypeOf(t))throw new Error("unsupported BodyInit type")}else this._bodyText="";this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type&&this.headers.set("content-type",this._bodyBlob.type))},e?(this.blob=function(){var t=s(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this.blob().then(l)},this.text=function(){var t,e,r=s(this);if(r)return r;if(this._bodyBlob)return t=this._bodyBlob,(e=new FileReader).readAsText(t),f(e);if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)}):this.text=function(){var t=s(this);return t||Promise.resolve(this._bodyText)},r&&(this.formData=function(){return this.text().then(h)}),this.json=function(){return this.text().then(JSON.parse)},this}function y(t,e){var r,n,i=(e=e||{}).body;if(y.prototype.isPrototypeOf(t)){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new c(t.headers)),this.method=t.method,this.mode=t.mode,i||(i=t._bodyInit,t.bodyUsed=!0)}else this.url=t;if(this.credentials=e.credentials||this.credentials||"omit",!e.headers&&this.headers||(this.headers=new c(e.headers)),this.method=(r=e.method||this.method||"GET",n=r.toUpperCase(),o.indexOf(n)>-1?n:r),this.mode=e.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&i)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(i)}function h(t){var e=new FormData;return t.trim().split("&").forEach((function(t){if(t){var r=t.split("="),n=r.shift().replace(/\+/g," "),o=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(o))}})),e}function v(t){var e=new c;return(t.getAllResponseHeaders()||"").trim().split("\n").forEach((function(t){var r=t.trim().split(":"),n=r.shift().trim(),o=r.join(":").trim();e.append(n,o)})),e}function d(t,e){e||(e={}),this.type="default",this.status=e.status,this.ok=this.status>=200&&this.status<300,this.statusText=e.statusText,this.headers=e.headers instanceof c?e.headers:new c(e.headers),this.url=e.url||"",this._initBody(t)}}("undefined"!=typeof self?self:this)},baqT:function(t,e,r){"use strict";var n=r("s+g2"),o=r("82c2");t.exports=function(){var t=n();return o(String.prototype,{padStart:t},{padStart:function(){return String.prototype.padStart!==t}}),t}},cCsD:function(t,e,r){"use strict";var n=r("6ayh")("%Object%"),o=r("KFgS");t.exports=function(t){return o(t),n(t)}},cDf5:function(t,e){function r(e){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?t.exports=r=function(t){return typeof t}:t.exports=r=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(e)}t.exports=r},ciGR:function(t,e,r){"use strict";var n=r("sqVN"),o=r("wrft");t.exports=function(t){var e=o(t);return e<=0?0:e>n?n:e}},dEfh:function(t,e,r){"use strict";var n=r("H8rg"),o=r("82c2");t.exports=function(){var t=n();return o(Object,{getOwnPropertyDescriptors:t},{getOwnPropertyDescriptors:function(){return Object.getOwnPropertyDescriptors!==t}}),t}},dwco:function(t,e,r){!function(e,r,n){"use strict";t.exports={polyfill:function(){if(!("scrollBehavior"in r.documentElement.style)){var t=e.HTMLElement||e.Element,n={scroll:e.scroll||e.scrollTo,scrollBy:e.scrollBy,elScroll:t.prototype.scroll||i,scrollIntoView:t.prototype.scrollIntoView},o=e.performance&&e.performance.now?e.performance.now.bind(e.performance):Date.now;e.scroll=e.scrollTo=function(){a(arguments[0])?n.scroll.call(e,arguments[0].left||arguments[0],arguments[0].top||arguments[1]):s.call(e,r.body,~~arguments[0].left,~~arguments[0].top)},e.scrollBy=function(){a(arguments[0])?n.scrollBy.call(e,arguments[0].left||arguments[0],arguments[0].top||arguments[1]):s.call(e,r.body,~~arguments[0].left+(e.scrollX||e.pageXOffset),~~arguments[0].top+(e.scrollY||e.pageYOffset))},t.prototype.scroll=t.prototype.scrollTo=function(){if(a(arguments[0]))n.elScroll.call(this,arguments[0].left||arguments[0],arguments[0].top||arguments[1]);else{var t=arguments[0].left,e=arguments[0].top;s.call(this,this,"number"==typeof t?t:this.scrollLeft,"number"==typeof e?e:this.scrollTop)}},t.prototype.scrollBy=function(){var t=arguments[0];"object"==typeof t?this.scroll({left:t.left+this.scrollLeft,top:t.top+this.scrollTop,behavior:t.behavior}):this.scroll(this.scrollLeft+t,this.scrollTop+arguments[1])},t.prototype.scrollIntoView=function(){if(a(arguments[0]))n.scrollIntoView.call(this,void 0===arguments[0]||arguments[0]);else{var t=u(this),o=t.getBoundingClientRect(),i=this.getBoundingClientRect();t!==r.body?(s.call(this,t,t.scrollLeft+i.left-o.left,t.scrollTop+i.top-o.top),e.scrollBy({left:o.left,top:o.top,behavior:"smooth"})):e.scrollBy({left:i.left,top:i.top,behavior:"smooth"})}}}function i(t,e){this.scrollLeft=t,this.scrollTop=e}function a(t){if("object"!=typeof t||null===t||void 0===t.behavior||"auto"===t.behavior||"instant"===t.behavior)return!0;if("object"==typeof t&&"smooth"===t.behavior)return!1;throw new TypeError("behavior not valid")}function u(t){var n,o,i;do{n=(t=t.parentNode)===r.body,o=t.clientHeight<t.scrollHeight||t.clientWidth<t.scrollWidth,i="visible"===e.getComputedStyle(t,null).overflow}while(!n&&(!o||i));return n=o=i=null,t}function c(t){var r,n,i,a,u=(o()-t.startTime)/468;a=u=u>1?1:u,r=.5*(1-Math.cos(Math.PI*a)),n=t.startX+(t.x-t.startX)*r,i=t.startY+(t.y-t.startY)*r,t.method.call(t.scrollable,n,i),n===t.x&&i===t.y||e.requestAnimationFrame(c.bind(e,t))}function s(t,a,u){var s,f,l,p,y=o();t===r.body?(s=e,f=e.scrollX||e.pageXOffset,l=e.scrollY||e.pageYOffset,p=n.scroll):(s=t,f=t.scrollLeft,l=t.scrollTop,p=i),c({scrollable:s,method:p,startTime:y,startX:f,startY:l,x:a,y:u})}}}}(window,document)},dzgB:function(t,e,r){"use strict";r("iNmR")(),r("0QyR")},eYmq:function(t,e){function r(t){target=t.currentTarget?t.currentTarget:t.srcElement,target.value==target.getAttribute("placeholder")&&(target.value="")}function n(t){target=t.currentTarget?t.currentTarget:t.srcElement,""==target.value&&(target.value=target.getAttribute("placeholder"))}if(!("placeholder"in document.createElement("input")))for(var o=document.getElementsByTagName("input"),i=0;i<o.length;i++)o[i].value||(o[i].value=o[i].getAttribute("placeholder")),o[i].addEventListener?(o[i].addEventListener("click",r,!1),o[i].addEventListener("blur",n,!1)):o[i].attachEvent&&(o[i].attachEvent("onclick",r),o[i].attachEvent("onblur",n))},exP7:function(t,e,r){"use strict";r("vndB")();var n=r("f3PD"),o=r("glNi"),i=r("PScO"),a=function(t,e){return new t((function(t){t(e)}))},u=Promise,c=function(t){if("Object"!==i(this))throw new TypeError("receiver is not an Object");var e=o(this,u),r=t,c=t;return n(t)&&(r=function(t,e){return function(r){var n=e();return a(t,n).then((function(){return r}))}}(e,t),c=function(t,e){return function(r){var n=e();return a(t,n).then((function(){throw r}))}}(e,t)),this.then(r,c)};if(Object.getOwnPropertyDescriptor){var s=Object.getOwnPropertyDescriptor(c,"name");s&&s.configurable&&Object.defineProperty(c,"name",{configurable:!0,value:"finally"})}t.exports=c},f3PD:function(t,e,r){"use strict";t.exports=r("IdCN")},fpfb:function(t,e,r){var n,o;!function(i,a){"use strict";void 0===(o="function"==typeof(n=function(){var t,e,r,n,o=Function.call,i=Object.prototype,a=o.bind(i.hasOwnProperty),u=o.bind(i.propertyIsEnumerable),c=o.bind(i.toString),s=a(i,"__defineGetter__");s&&(t=o.bind(i.__defineGetter__),e=o.bind(i.__defineSetter__),r=o.bind(i.__lookupGetter__),n=o.bind(i.__lookupSetter__));var f=function(t){return null==t||"object"!=typeof t&&"function"!=typeof t};Object.getPrototypeOf||(Object.getPrototypeOf=function(t){var e=t.__proto__;return e||null===e?e:"[object Function]"===c(t.constructor)?t.constructor.prototype:t instanceof Object?i:null});if(Object.defineProperty){var l=function(t){try{return t.sentinel=0,0===Object.getOwnPropertyDescriptor(t,"sentinel").value}catch(t){return!1}},p=l({});if(!("undefined"==typeof document||l(document.createElement("div")))||!p)var y=Object.getOwnPropertyDescriptor}if(!Object.getOwnPropertyDescriptor||y){Object.getOwnPropertyDescriptor=function(t,e){if(f(t))throw new TypeError("Object.getOwnPropertyDescriptor called on a non-object: "+t);if(y)try{return y.call(Object,t,e)}catch(t){}var o;if(!a(t,e))return o;if(o={enumerable:u(t,e),configurable:!0},s){var c=t.__proto__,l=t!==i;l&&(t.__proto__=i);var p=r(t,e),h=n(t,e);if(l&&(t.__proto__=c),p||h)return p&&(o.get=p),h&&(o.set=h),o}return o.value=t[e],o.writable=!0,o}}Object.getOwnPropertyNames||(Object.getOwnPropertyNames=function(t){return Object.keys(t)});if(!Object.create){var h;h=!({__proto__:null}instanceof Object)||"undefined"==typeof document?function(){return{__proto__:null}}:function(){var t=function(){if(!document.domain)return!1;try{return!!new ActiveXObject("htmlfile")}catch(t){return!1}}()?function(){var t,e;return(e=new ActiveXObject("htmlfile")).write("<script><\/script>"),e.close(),t=e.parentWindow.Object.prototype,e=null,t}():function(){var t,e=document.createElement("iframe"),r=document.body||document.documentElement;return e.style.display="none",r.appendChild(e),e.src="javascript:",t=e.contentWindow.Object.prototype,r.removeChild(e),e=null,t}();delete t.constructor,delete t.hasOwnProperty,delete t.propertyIsEnumerable,delete t.isPrototypeOf,delete t.toLocaleString,delete t.toString,delete t.valueOf;var e=function(){};return e.prototype=t,h=function(){return new e},new e},Object.create=function(t,e){var r,n=function(){};if(null===t)r=h();else{if(f(t))throw new TypeError("Object prototype may only be an Object or null");n.prototype=t,(r=new n).__proto__=t}return void 0!==e&&Object.defineProperties(r,e),r}}var v=function(t){try{return Object.defineProperty(t,"sentinel",{}),"sentinel"in t}catch(t){return!1}};if(Object.defineProperty){var d=v({}),b="undefined"==typeof document||v(document.createElement("div"));if(!d||!b)var g=Object.defineProperty,m=Object.defineProperties}if(!Object.defineProperty||g){Object.defineProperty=function(o,a,u){if(f(o))throw new TypeError("Object.defineProperty called on non-object: "+o);if(f(u))throw new TypeError("Property description must be an object: "+u);if(g)try{return g.call(Object,o,a,u)}catch(t){}if("value"in u)if(s&&(r(o,a)||n(o,a))){var c=o.__proto__;o.__proto__=i,delete o[a],o[a]=u.value,o.__proto__=c}else o[a]=u.value;else{var l="get"in u,p="set"in u;if(!s&&(l||p))throw new TypeError("getters & setters can not be defined on this javascript engine");l&&t(o,a,u.get),p&&e(o,a,u.set)}return o}}Object.defineProperties&&!m||(Object.defineProperties=function(t,e){if(m)try{return m.call(Object,t,e)}catch(t){}return Object.keys(e).forEach((function(r){"__proto__"!==r&&Object.defineProperty(t,r,e[r])})),t});Object.seal||(Object.seal=function(t){if(Object(t)!==t)throw new TypeError("Object.seal can only be called on Objects.");return t});Object.freeze||(Object.freeze=function(t){if(Object(t)!==t)throw new TypeError("Object.freeze can only be called on Objects.");return t});try{Object.freeze((function(){}))}catch(t){Object.freeze=(w=Object.freeze,function(t){return"function"==typeof t?t:w(t)})}var w;Object.preventExtensions||(Object.preventExtensions=function(t){if(Object(t)!==t)throw new TypeError("Object.preventExtensions can only be called on Objects.");return t});Object.isSealed||(Object.isSealed=function(t){if(Object(t)!==t)throw new TypeError("Object.isSealed can only be called on Objects.");return!1});Object.isFrozen||(Object.isFrozen=function(t){if(Object(t)!==t)throw new TypeError("Object.isFrozen can only be called on Objects.");return!1});Object.isExtensible||(Object.isExtensible=function(t){if(Object(t)!==t)throw new TypeError("Object.isExtensible can only be called on Objects.");for(var e="";a(t,e);)e+="?";t[e]=!0;var r=a(t,e);return delete t[e],r})})?n.call(e,r,e,t):n)||(t.exports=o)}()},fyQZ:function(t,e,r){"use strict";var n=r("6ayh"),o=r("HdHG"),i=n("%TypeError%"),a=r("Khql")("Object.prototype.propertyIsEnumerable"),u=r("oNNP"),c=r("1Soo"),s=r("rCmP"),f=r("PyeM"),l=r("GPGZ"),p=r("RIFg");t.exports=function(t,e){if("Object"!==p(t))throw new i("Assertion failed: O must be an Object");if(!s(e))throw new i("Assertion failed: P must be a Property Key");if(u(t,e)){if(!o){var r=c(t)&&"length"===e,n=f(t)&&"lastIndex"===e;return{"[[Configurable]]":!(r||n),"[[Enumerable]]":a(t,e),"[[Value]]":t[e],"[[Writable]]":!0}}return l(o(t,e))}}},gaAG:function(t,e,r){"use strict";var n=r("l4Qr");t.exports=function(){return n}},glNi:function(t,e,r){"use strict";var n=r("6ayh"),o=n("%Symbol.species%",!0),i=n("%TypeError%"),a=r("LJJ4"),u=r("PScO");t.exports=function(t,e){if("Object"!==u(t))throw new i("Assertion failed: Type(O) is not Object");var r=t.constructor;if(void 0===r)return e;if("Object"!==u(r))throw new i("O.constructor is not an Object");var n=o?r[o]:void 0;if(null==n)return e;if(a(n))return n;throw new i("no constructor found")}},gvBt:function(t,e,r){"use strict";var n=r("6ayh"),o=n("%TypeError%"),i=n("%Number%"),a=n("%RegExp%"),u=n("%parseInt%"),c=r("Khql"),s=r("D6qd"),f=r("E1iy"),l=c("String.prototype.slice"),p=s(/^0b[01]+$/i),y=s(/^0o[0-7]+$/i),h=s(/^[-+]0x[0-9a-f]+$/i),v=s(new a("["+["","​","￾"].join("")+"]","g")),d=["\t\n\v\f\r   ᠎    ","         　\u2028","\u2029\ufeff"].join(""),b=new RegExp("(^["+d+"]+)|(["+d+"]+$)","g"),g=c("String.prototype.replace"),m=r("zWG1");t.exports=function t(e){var r=f(e)?e:m(e,i);if("symbol"==typeof r)throw new o("Cannot convert a Symbol value to a number");if("string"==typeof r){if(p(r))return t(u(l(r,2),2));if(y(r))return t(u(l(r,2),8));if(v(r)||h(r))return NaN;var n=function(t){return g(t,b,"")}(r);if(n!==r)return t(n)}return i(r)}},gvzj:function(t,e,r){"use strict";var n;try{n=Function("s","return { [s]() {} }[s].name;")}catch(t){}t.exports=n&&"inferred"===function(){}.name?n:null},hBby:function(t,e,r){"use strict";"undefined"!=typeof self?t.exports=self:"undefined"!=typeof window?t.exports=window:t.exports=Function("return this")()},hJwt:function(t,e){var r;"function"!=typeof(r=window.Element.prototype).matches&&(r.matches=r.msMatchesSelector||r.mozMatchesSelector||r.webkitMatchesSelector||function(t){for(var e=(this.document||this.ownerDocument).querySelectorAll(t),r=0;e[r]&&e[r]!==this;)++r;return Boolean(e[r])}),"function"!=typeof r.closest&&(r.closest=function(t){for(var e=this;e&&1===e.nodeType;){if(e.matches(t))return e;e=e.parentNode}return null})},hLiU:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("Khql")("Array.prototype.slice"),i=r("aTj1"),a=r("tihr"),u=r("rCmP");t.exports=function(t,e){if(!u(e))throw new n("P must be a Property Key");var r=o(arguments,2),c=a(t,e);return i(c,t,r)}},hNTQ:function(t,e,r){"use strict";var n=r("oNNP"),o=r("xG2L"),i=r("RIFg");t.exports=function(t){return void 0!==t&&(o(i,"Property Descriptor","Desc",t),!(!n(t,"[[Value]]")&&!n(t,"[[Writable]]")))}},hemD:function(t,e,r){"use strict";t.exports=r("IdCN")},iNmR:function(t,e,r){"use strict";var n=r("82c2"),o=r("FHRK");t.exports=function(){var t=o();return n(Array.prototype,{includes:t},{includes:function(){return Array.prototype.includes!==t}}),t}},iSaG:function(t,e,r){"use strict";var n=r("vndB"),o=r("exP7");t.exports=function(){return n(),"function"==typeof Promise.prototype.finally?Promise.prototype.finally:o}},ib7Q:function(t,e,r){"use strict";var n=r("xoj2"),o=r("82c2");t.exports=function(){var t=n();return o(Object,{values:t},{values:function(){return Object.values!==t}}),t}},kx12:function(t,e,r){"use strict";r("aqn5")()},"l+XD":function(t,e){t.exports=function(t){var e=!0,r=!0,n=!1;if("function"==typeof t){try{t.call("f",(function(t,r,n){"object"!=typeof n&&(e=!1)})),t.call([null],(function(){"use strict";r="string"==typeof this}),"x")}catch(t){n=!0}return!n&&e&&r}return!1}},"l1+S":function(t,e,r){"use strict";var n=r("HYxC");t.exports=function(){return Array.prototype.flatMap||n}},l4Qr:function(t,e,r){"use strict";var n=r("hemD"),o=r("JQAW")(),i=r("Khql"),a=i("Function.prototype.toString"),u=i("String.prototype.match"),c=/^class /,s=/\s*function\s+([^(\s]*)\s*/,f=Function.prototype;t.exports=function(){if(!function(t){if(n(t))return!1;if("function"!=typeof t)return!1;try{return!!u(a(t),c)}catch(t){}return!1}(this)&&!n(this))throw new TypeError("Function.prototype.name sham getter called on non-function");if(o)return this.name;if(this===f)return"";var t=a(this),e=u(t,s);return e&&e[1]}},lfCk:function(t,e,r){!function(){"use strict";function t(t){var e=!0,r=!1,n=null,o={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function i(t){return!!(t&&t!==document&&"HTML"!==t.nodeName&&"BODY"!==t.nodeName&&"classList"in t&&"contains"in t.classList)}function a(t){t.classList.contains("focus-visible")||(t.classList.add("focus-visible"),t.setAttribute("data-focus-visible-added",""))}function u(t){e=!1}function c(){document.addEventListener("mousemove",s),document.addEventListener("mousedown",s),document.addEventListener("mouseup",s),document.addEventListener("pointermove",s),document.addEventListener("pointerdown",s),document.addEventListener("pointerup",s),document.addEventListener("touchmove",s),document.addEventListener("touchstart",s),document.addEventListener("touchend",s)}function s(t){t.target.nodeName&&"html"===t.target.nodeName.toLowerCase()||(e=!1,document.removeEventListener("mousemove",s),document.removeEventListener("mousedown",s),document.removeEventListener("mouseup",s),document.removeEventListener("pointermove",s),document.removeEventListener("pointerdown",s),document.removeEventListener("pointerup",s),document.removeEventListener("touchmove",s),document.removeEventListener("touchstart",s),document.removeEventListener("touchend",s))}document.addEventListener("keydown",(function(r){r.metaKey||r.altKey||r.ctrlKey||(i(t.activeElement)&&a(t.activeElement),e=!0)}),!0),document.addEventListener("mousedown",u,!0),document.addEventListener("pointerdown",u,!0),document.addEventListener("touchstart",u,!0),document.addEventListener("visibilitychange",(function(t){"hidden"===document.visibilityState&&(r&&(e=!0),c())}),!0),c(),t.addEventListener("focus",(function(t){var r,n,u;i(t.target)&&(e||(r=t.target,n=r.type,"INPUT"===(u=r.tagName)&&o[n]&&!r.readOnly||"TEXTAREA"===u&&!r.readOnly||r.isContentEditable))&&a(t.target)}),!0),t.addEventListener("blur",(function(t){var e;i(t.target)&&(t.target.classList.contains("focus-visible")||t.target.hasAttribute("data-focus-visible-added"))&&(r=!0,window.clearTimeout(n),n=window.setTimeout((function(){r=!1}),100),(e=t.target).hasAttribute("data-focus-visible-added")&&(e.classList.remove("focus-visible"),e.removeAttribute("data-focus-visible-added")))}),!0),t.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&t.host?t.host.setAttribute("data-js-focus-visible",""):t.nodeType===Node.DOCUMENT_NODE&&(document.documentElement.classList.add("js-focus-visible"),document.documentElement.setAttribute("data-js-focus-visible",""))}if("undefined"!=typeof window&&"undefined"!=typeof document){var e;window.applyFocusVisiblePolyfill=t;try{e=new CustomEvent("focus-visible-polyfill-ready")}catch(t){(e=document.createEvent("CustomEvent")).initCustomEvent("focus-visible-polyfill-ready",!1,!1,{})}window.dispatchEvent(e)}"undefined"!=typeof document&&t(document)}()},lmVY:function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},ls82:function(t,e,r){var n=function(t){"use strict";var e=Object.prototype,r=e.hasOwnProperty,n="function"==typeof Symbol?Symbol:{},o=n.iterator||"@@iterator",i=n.asyncIterator||"@@asyncIterator",a=n.toStringTag||"@@toStringTag";function u(t,e,r,n){var o=e&&e.prototype instanceof f?e:f,i=Object.create(o.prototype),a=new j(n||[]);return i._invoke=function(t,e,r){var n="suspendedStart";return function(o,i){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw i;return E()}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var u=m(a,r);if(u){if(u===s)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var f=c(t,e,r);if("normal"===f.type){if(n=r.done?"completed":"suspendedYield",f.arg===s)continue;return{value:f.arg,done:r.done}}"throw"===f.type&&(n="completed",r.method="throw",r.arg=f.arg)}}}(t,r,a),i}function c(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var s={};function f(){}function l(){}function p(){}var y={};y[o]=function(){return this};var h=Object.getPrototypeOf,v=h&&h(h(S([])));v&&v!==e&&r.call(v,o)&&(y=v);var d=p.prototype=f.prototype=Object.create(y);function b(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function g(t,e){var n;this._invoke=function(o,i){function a(){return new e((function(n,a){!function n(o,i,a,u){var s=c(t[o],t,i);if("throw"!==s.type){var f=s.arg,l=f.value;return l&&"object"==typeof l&&r.call(l,"__await")?e.resolve(l.__await).then((function(t){n("next",t,a,u)}),(function(t){n("throw",t,a,u)})):e.resolve(l).then((function(t){f.value=t,a(f)}),(function(t){return n("throw",t,a,u)}))}u(s.arg)}(o,i,n,a)}))}return n=n?n.then(a,a):a()}}function m(t,e){var r=t.iterator[e.method];if(void 0===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,m(t,e),"throw"===e.method))return s;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return s}var n=c(r,t.iterator,e.arg);if("throw"===n.type)return e.method="throw",e.arg=n.arg,e.delegate=null,s;var o=n.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,s):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,s)}function w(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function j(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(w,this),this.reset(!0)}function S(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,i=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:E}}function E(){return{value:void 0,done:!0}}return l.prototype=d.constructor=p,p.constructor=l,p[a]=l.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===l||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,p):(t.__proto__=p,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(d),t},t.awrap=function(t){return{__await:t}},b(g.prototype),g.prototype[i]=function(){return this},t.AsyncIterator=g,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new g(u(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},b(d),d[a]="Generator",d[o]=function(){return this},d.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=S,j.prototype={constructor:j,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(O),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return a.type="throw",a.arg=t,e.next=r,n&&(e.method="next",e.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),c=r.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,s):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),s},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),O(r),s}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;O(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:S(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),s}},t}(t.exports);try{regeneratorRuntime=n}catch(t){Function("r","regeneratorRuntime = r")(n)}},lt0f:function(t,e){!function(){"use strict";if(self.document){var t=KeyboardEvent.prototype,e=Object.getOwnPropertyDescriptor(t,"key");if(e){var r={Win:"Meta",Scroll:"ScrollLock",Spacebar:" ",Down:"ArrowDown",Left:"ArrowLeft",Right:"ArrowRight",Up:"ArrowUp",Del:"Delete",Apps:"ContextMenu",Esc:"Escape",Multiply:"*",Add:"+",Subtract:"-",Decimal:".",Divide:"/"};Object.defineProperty(t,"key",{get:function(){var t=e.get.call(this);return r.hasOwnProperty(t)?r[t]:t}})}}}()},lwsE:function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},"m2++":function(t,e,r){"use strict";var n=r("oM6l"),o=r("tPqs");t.exports=function(t){var e=o(t);return!0!==n(e)&&e}},mJ3t:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("sqVN"),i=r("aTj1"),a=r("UBAn"),u=r("2GRh"),c=r("RJ/z"),s=r("1Soo"),f=r("ciGR"),l=r("R5T6");t.exports=function t(e,r,p,y,h){var v;arguments.length>5&&(v=arguments[5]);for(var d=y,b=0;b<p;){var g=l(b),m=c(r,g);if(!0===m){var w=u(r,g);if(void 0!==v){if(arguments.length<=6)throw new n("Assertion failed: thisArg is required when mapperFunction is provided");w=i(v,arguments[6],[w,b,r])}var O=!1;if(h>0&&(O=s(w)),O){var j=f(u(w,"length"));d=t(e,w,j,d,h-1)}else{if(d>=o)throw new n("index too large");a(e,l(d),w),d+=1}}b+=1}return d}},nIg7:function(t,e,r){"use strict";var n=r("82c2"),o=r("UVaH")(),i=r("uKH6"),a=r("bBhT"),u=Object.defineProperty,c=Object.getOwnPropertyDescriptor;t.exports=function(){var t=i();if(n(String.prototype,{matchAll:t},{matchAll:function(){return String.prototype.matchAll!==t}}),o){var e=Symbol.matchAll||(Symbol.for?Symbol.for("Symbol.matchAll"):Symbol("Symbol.matchAll"));if(n(Symbol,{matchAll:e},{matchAll:function(){return Symbol.matchAll!==e}}),u&&c){var r=c(Symbol,e);r&&!r.configurable||u(Symbol,e,{configurable:!1,enumerable:!1,value:e,writable:!1})}var s=a(),f={};f[e]=s;var l={};l[e]=function(){return RegExp.prototype[e]!==s},n(RegExp.prototype,f,l)}return t}},nRDI:function(t,e,r){"use strict";t.exports=function(t){if(arguments.length<1)throw new TypeError("1 argument is required");if("object"!=typeof t)throw new TypeError("Argument 1 (”other“) to Node.contains must be an instance of Node");var e=t;do{if(this===e)return!0;e&&(e=e.parentNode)}while(e);return!1}},nvDk:function(t,e,r){"use strict";r("U/4o")()},o0o1:function(t,e,r){t.exports=r("ls82")},oM6l:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("2GRh"),i=r("XnxE"),a=r("RIFg");t.exports=function(t){if("Object"!==a(t))throw new n("Assertion failed: Type(iterResult) is not Object");return i(o(t,"done"))}},oNNP:function(t,e,r){"use strict";var n=r("D3zA");t.exports=n.call(Function.call,Object.prototype.hasOwnProperty)},owxQ:function(t,e,r){"use strict";var n=r("82c2"),o=r("Ii9V"),i=r("Khql"),a=r("+71H"),u=r("UMYc"),c=u(),s=r("yBRW"),f=i("Array.prototype.slice"),l=function(t,e){return o(t),c.apply(t,f(arguments,1))};n(l,{getPolyfill:u,implementation:a,shim:s}),t.exports=l},p2h6:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("2GRh"),i=r("RIFg");t.exports=function(t){if("Object"!==i(t))throw new n("Assertion failed: Type(iterResult) is not Object");return o(t,"value")}},qjSr:function(t,e,r){"use strict";var n=r("6ayh"),o=n("%Array%"),i=n("%Symbol.species%",!0),a=n("%TypeError%"),u=r("2GRh"),c=r("1Soo"),s=r("zODz"),f=r("1l3A"),l=r("RIFg");t.exports=function(t,e){if(!f(e)||e<0)throw new a("Assertion failed: length must be an integer >= 0");var r,n=0===e?0:e;if(c(t)&&(r=u(t,"constructor"),i&&"Object"===l(r)&&null===(r=u(r,i))&&(r=void 0)),void 0===r)return o(n);if(!s(r))throw new a("C must be a constructor");return new r(n)}},"qv/t":function(t,e,r){(function(n,o){var i,a;void 0===(a="function"==typeof(i=function(){"use strict";var t,e=Function.call.bind(Function.apply),r=Function.call.bind(Function.call),i=Array.isArray,a=Object.keys,u=function(t){return function(){return!e(t,this,arguments)}},c=function(t){try{return t(),!1}catch(t){return!0}},s=function(t){try{return t()}catch(t){return!1}},f=u(c),l=function(){return!c((function(){return Object.defineProperty({},"x",{get:function(){}})}))},p=!!Object.defineProperty&&l(),y="foo"===function(){}.name,h=Function.call.bind(Array.prototype.forEach),v=Function.call.bind(Array.prototype.reduce),d=Function.call.bind(Array.prototype.filter),b=Function.call.bind(Array.prototype.some),g=function(t,e,r,n){!n&&e in t||(p?Object.defineProperty(t,e,{configurable:!0,enumerable:!1,writable:!0,value:r}):t[e]=r)},m=function(t,e,r){h(a(e),(function(n){var o=e[n];g(t,n,o,!!r)}))},w=Function.call.bind(Object.prototype.toString),O=function(t){return"function"==typeof t},j={getter:function(t,e,r){if(!p)throw new TypeError("getters require true ES5 support");Object.defineProperty(t,e,{configurable:!0,enumerable:!1,get:r})},proxy:function(t,e,r){if(!p)throw new TypeError("getters require true ES5 support");var n=Object.getOwnPropertyDescriptor(t,e);Object.defineProperty(r,e,{configurable:n.configurable,enumerable:n.enumerable,get:function(){return t[e]},set:function(r){t[e]=r}})},redefine:function(t,e,r){if(p){var n=Object.getOwnPropertyDescriptor(t,e);n.value=r,Object.defineProperty(t,e,n)}else t[e]=r},defineByDescriptor:function(t,e,r){p?Object.defineProperty(t,e,r):"value"in r&&(t[e]=r.value)},preserveToString:function(t,e){e&&O(e.toString)&&g(t,"toString",e.toString.bind(e),!0)}},S=Object.create||function(t,e){var r=function(){};r.prototype=t;var n=new r;return void 0!==e&&a(e).forEach((function(t){j.defineByDescriptor(n,t,e[t])})),n},E=function(t,e){return!!Object.setPrototypeOf&&s((function(){var r=function e(r){var n=new t(r);return Object.setPrototypeOf(n,e.prototype),n};return Object.setPrototypeOf(r,t),r.prototype=S(t.prototype,{constructor:{value:r}}),e(r)}))},T=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n)return n;throw new Error("unable to locate global object")},x=T(),P=x.isFinite,I=Function.call.bind(String.prototype.indexOf),A=Function.apply.bind(Array.prototype.indexOf),_=Function.call.bind(Array.prototype.concat),R=Function.call.bind(String.prototype.slice),M=Function.call.bind(Array.prototype.push),N=Function.apply.bind(Array.prototype.push),C=Function.call.bind(Array.prototype.shift),D=Math.max,F=Math.min,k=Math.floor,L=Math.abs,U=Math.exp,B=Math.log,q=Math.sqrt,G=Function.call.bind(Object.prototype.hasOwnProperty),V=function(){},z=x.Map,H=z&&z.prototype.delete,W=z&&z.prototype.get,$=z&&z.prototype.has,K=z&&z.prototype.set,J=x.Symbol||{},X=J.species||"@@species",Y=Number.isNaN||function(t){return t!=t},Z=Number.isFinite||function(t){return"number"==typeof t&&P(t)},Q=O(Math.sign)?Math.sign:function(t){var e=Number(t);return 0===e||Y(e)?e:e<0?-1:1},tt=function(t){var e=Number(t);return e<-1||Y(e)?NaN:0===e||e===1/0?e:-1===e?-1/0:1+e-1==0?e:e*(B(1+e)/(1+e-1))},et=function(t){return"[object Arguments]"===w(t)},rt=function(t){return null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Array]"!==w(t)&&"[object Function]"===w(t.callee)},nt=et(arguments)?et:rt,ot={primitive:function(t){return null===t||"function"!=typeof t&&"object"!=typeof t},string:function(t){return"[object String]"===w(t)},regex:function(t){return"[object RegExp]"===w(t)},symbol:function(t){return"function"==typeof x.Symbol&&"symbol"==typeof t}},it=function(t,e,r){var n=t[e];g(t,e,r,!0),j.preserveToString(t[e],n)},at="function"==typeof J&&"function"==typeof J.for&&ot.symbol(J()),ut=ot.symbol(J.iterator)?J.iterator:"_es6-shim iterator_";x.Set&&"function"==typeof(new x.Set)["@@iterator"]&&(ut="@@iterator"),x.Reflect||g(x,"Reflect",{},!0);var ct,st=x.Reflect,ft=String,lt="undefined"!=typeof document&&document?document.all:null,pt=null==lt?function(t){return null==t}:function(t){return null==t&&t!==lt},yt={Call:function(t,r){var n=arguments.length>2?arguments[2]:[];if(!yt.IsCallable(t))throw new TypeError(t+" is not a function");return e(t,r,n)},RequireObjectCoercible:function(t,e){if(pt(t))throw new TypeError(e||"Cannot call method on "+t);return t},TypeIsObject:function(t){return null!=t&&!0!==t&&!1!==t&&("function"==typeof t||"object"==typeof t||t===lt)},ToObject:function(t,e){return Object(yt.RequireObjectCoercible(t,e))},IsCallable:O,IsConstructor:function(t){return yt.IsCallable(t)},ToInt32:function(t){return yt.ToNumber(t)>>0},ToUint32:function(t){return yt.ToNumber(t)>>>0},ToNumber:function(t){if("[object Symbol]"===w(t))throw new TypeError("Cannot convert a Symbol value to a number");return+t},ToInteger:function(t){var e=yt.ToNumber(t);return Y(e)?0:0!==e&&Z(e)?(e>0?1:-1)*k(L(e)):e},ToLength:function(t){var e=yt.ToInteger(t);return e<=0?0:e>Number.MAX_SAFE_INTEGER?Number.MAX_SAFE_INTEGER:e},SameValue:function(t,e){return t===e?0!==t||1/t==1/e:Y(t)&&Y(e)},SameValueZero:function(t,e){return t===e||Y(t)&&Y(e)},IsIterable:function(t){return yt.TypeIsObject(t)&&(void 0!==t[ut]||nt(t))},GetIterator:function(e){if(nt(e))return new t(e,"value");var r=yt.GetMethod(e,ut);if(!yt.IsCallable(r))throw new TypeError("value is not an iterable");var n=yt.Call(r,e);if(!yt.TypeIsObject(n))throw new TypeError("bad iterator");return n},GetMethod:function(t,e){var r=yt.ToObject(t)[e];if(!pt(r)){if(!yt.IsCallable(r))throw new TypeError("Method not callable: "+e);return r}},IteratorComplete:function(t){return!!t.done},IteratorClose:function(t,e){var r=yt.GetMethod(t,"return");if(void 0!==r){var n,o;try{n=yt.Call(r,t)}catch(t){o=t}if(!e){if(o)throw o;if(!yt.TypeIsObject(n))throw new TypeError("Iterator's return method returned a non-object.")}}},IteratorNext:function(t){var e=arguments.length>1?t.next(arguments[1]):t.next();if(!yt.TypeIsObject(e))throw new TypeError("bad iterator");return e},IteratorStep:function(t){var e=yt.IteratorNext(t);return!yt.IteratorComplete(e)&&e},Construct:function(t,e,r,n){var o=void 0===r?t:r;if(!n&&st.construct)return st.construct(t,e,o);var i=o.prototype;yt.TypeIsObject(i)||(i=Object.prototype);var a=S(i),u=yt.Call(t,a,e);return yt.TypeIsObject(u)?u:a},SpeciesConstructor:function(t,e){var r=t.constructor;if(void 0===r)return e;if(!yt.TypeIsObject(r))throw new TypeError("Bad constructor");var n=r[X];if(pt(n))return e;if(!yt.IsConstructor(n))throw new TypeError("Bad @@species");return n},CreateHTML:function(t,e,r,n){var o=yt.ToString(t),i="<"+e;return""!==r&&(i+=" "+r+'="'+yt.ToString(n).replace(/"/g,"&quot;")+'"'),i+">"+o+"</"+e+">"},IsRegExp:function(t){if(!yt.TypeIsObject(t))return!1;var e=t[J.match];return void 0!==e?!!e:ot.regex(t)},ToString:function(t){return ft(t)}};if(p&&at){var ht=function(t){if(ot.symbol(J[t]))return J[t];var e=J.for("Symbol."+t);return Object.defineProperty(J,t,{configurable:!1,enumerable:!1,writable:!1,value:e}),e};if(!ot.symbol(J.search)){var vt=ht("search"),dt=String.prototype.search;g(RegExp.prototype,vt,(function(t){return yt.Call(dt,t,[this])}));var bt=function(t){var e=yt.RequireObjectCoercible(this);if(!pt(t)){var r=yt.GetMethod(t,vt);if(void 0!==r)return yt.Call(r,t,[e])}return yt.Call(dt,e,[yt.ToString(t)])};it(String.prototype,"search",bt)}if(!ot.symbol(J.replace)){var gt=ht("replace"),mt=String.prototype.replace;g(RegExp.prototype,gt,(function(t,e){return yt.Call(mt,t,[this,e])}));var wt=function(t,e){var r=yt.RequireObjectCoercible(this);if(!pt(t)){var n=yt.GetMethod(t,gt);if(void 0!==n)return yt.Call(n,t,[r,e])}return yt.Call(mt,r,[yt.ToString(t),e])};it(String.prototype,"replace",wt)}if(!ot.symbol(J.split)){var Ot=ht("split"),jt=String.prototype.split;g(RegExp.prototype,Ot,(function(t,e){return yt.Call(jt,t,[this,e])}));var St=function(t,e){var r=yt.RequireObjectCoercible(this);if(!pt(t)){var n=yt.GetMethod(t,Ot);if(void 0!==n)return yt.Call(n,t,[r,e])}return yt.Call(jt,r,[yt.ToString(t),e])};it(String.prototype,"split",St)}var Et=ot.symbol(J.match),Tt=Et&&((ct={})[J.match]=function(){return 42},42!=="a".match(ct));if(!Et||Tt){var xt=ht("match"),Pt=String.prototype.match;g(RegExp.prototype,xt,(function(t){return yt.Call(Pt,t,[this])}));var It=function(t){var e=yt.RequireObjectCoercible(this);if(!pt(t)){var r=yt.GetMethod(t,xt);if(void 0!==r)return yt.Call(r,t,[e])}return yt.Call(Pt,e,[yt.ToString(t)])};it(String.prototype,"match",It)}}var At=function(t,e,r){j.preserveToString(e,t),Object.setPrototypeOf&&Object.setPrototypeOf(t,e),p?h(Object.getOwnPropertyNames(t),(function(n){n in V||r[n]||j.proxy(t,n,e)})):h(Object.keys(t),(function(n){n in V||r[n]||(e[n]=t[n])})),e.prototype=t.prototype,j.redefine(t.prototype,"constructor",e)},_t=function(){return this},Rt=function(t){p&&!G(t,X)&&j.getter(t,X,_t)},Mt=function(t,e){var r=e||function(){return this};g(t,ut,r),!t[ut]&&ot.symbol(ut)&&(t[ut]=r)},Nt=function(t,e,r){p?Object.defineProperty(t,e,{configurable:!0,enumerable:!0,writable:!0,value:r}):t[e]=r},Ct=function(t,e,r){if(Nt(t,e,r),!yt.SameValue(t[e],r))throw new TypeError("property is nonconfigurable")},Dt=function(t,e,r,n){if(!yt.TypeIsObject(t))throw new TypeError("Constructor requires `new`: "+e.name);var o=e.prototype;yt.TypeIsObject(o)||(o=r);var i=S(o);for(var a in n)if(G(n,a)){var u=n[a];g(i,a,u,!0)}return i};if(String.fromCodePoint&&1!==String.fromCodePoint.length){var Ft=String.fromCodePoint;it(String,"fromCodePoint",(function(t){return yt.Call(Ft,this,arguments)}))}var kt={fromCodePoint:function(t){for(var e,r=[],n=0,o=arguments.length;n<o;n++){if(e=Number(arguments[n]),!yt.SameValue(e,yt.ToInteger(e))||e<0||e>1114111)throw new RangeError("Invalid code point "+e);e<65536?M(r,String.fromCharCode(e)):(e-=65536,M(r,String.fromCharCode(55296+(e>>10))),M(r,String.fromCharCode(e%1024+56320)))}return r.join("")},raw:function(t){var e=yt.ToObject(t,"bad callSite"),r=yt.ToObject(e.raw,"bad raw value"),n=r.length,o=yt.ToLength(n);if(o<=0)return"";for(var i,a,u,c,s=[],f=0;f<o&&(i=yt.ToString(f),u=yt.ToString(r[i]),M(s,u),!(f+1>=o));)a=f+1<arguments.length?arguments[f+1]:"",c=yt.ToString(a),M(s,c),f+=1;return s.join("")}};String.raw&&"xy"!==String.raw({raw:{0:"x",1:"y",length:2}})&&it(String,"raw",kt.raw),m(String,kt);var Lt=function t(e,r){if(r<1)return"";if(r%2)return t(e,r-1)+e;var n=t(e,r/2);return n+n},Ut=1/0,Bt={repeat:function(t){var e=yt.ToString(yt.RequireObjectCoercible(this)),r=yt.ToInteger(t);if(r<0||r>=Ut)throw new RangeError("repeat count must be less than infinity and not overflow maximum string size");return Lt(e,r)},startsWith:function(t){var e=yt.ToString(yt.RequireObjectCoercible(this));if(yt.IsRegExp(t))throw new TypeError('Cannot call method "startsWith" with a regex');var r,n=yt.ToString(t);arguments.length>1&&(r=arguments[1]);var o=D(yt.ToInteger(r),0);return R(e,o,o+n.length)===n},endsWith:function(t){var e=yt.ToString(yt.RequireObjectCoercible(this));if(yt.IsRegExp(t))throw new TypeError('Cannot call method "endsWith" with a regex');var r,n=yt.ToString(t),o=e.length;arguments.length>1&&(r=arguments[1]);var i=void 0===r?o:yt.ToInteger(r),a=F(D(i,0),o);return R(e,a-n.length,a)===n},includes:function(t){if(yt.IsRegExp(t))throw new TypeError('"includes" does not accept a RegExp');var e,r=yt.ToString(t);return arguments.length>1&&(e=arguments[1]),-1!==I(this,r,e)},codePointAt:function(t){var e=yt.ToString(yt.RequireObjectCoercible(this)),r=yt.ToInteger(t),n=e.length;if(r>=0&&r<n){var o=e.charCodeAt(r);if(o<55296||o>56319||r+1===n)return o;var i=e.charCodeAt(r+1);return i<56320||i>57343?o:1024*(o-55296)+(i-56320)+65536}}};if(String.prototype.includes&&!1!=="a".includes("a",1/0)&&it(String.prototype,"includes",Bt.includes),String.prototype.startsWith&&String.prototype.endsWith){var qt=c((function(){return"/a/".startsWith(/a/)})),Gt=s((function(){return!1==="abc".startsWith("a",1/0)}));qt&&Gt||(it(String.prototype,"startsWith",Bt.startsWith),it(String.prototype,"endsWith",Bt.endsWith))}if(at){var Vt=s((function(){var t=/a/;return t[J.match]=!1,"/a/".startsWith(t)}));Vt||it(String.prototype,"startsWith",Bt.startsWith);var zt=s((function(){var t=/a/;return t[J.match]=!1,"/a/".endsWith(t)}));zt||it(String.prototype,"endsWith",Bt.endsWith);var Ht=s((function(){var t=/a/;return t[J.match]=!1,"/a/".includes(t)}));Ht||it(String.prototype,"includes",Bt.includes)}m(String.prototype,Bt);var Wt=["\t\n\v\f\r   ᠎    ","         　\u2028","\u2029\ufeff"].join(""),$t=new RegExp("(^["+Wt+"]+)|(["+Wt+"]+$)","g"),Kt=function(){return yt.ToString(yt.RequireObjectCoercible(this)).replace($t,"")},Jt=["","​","￾"].join(""),Xt=new RegExp("["+Jt+"]","g"),Yt=/^[-+]0x[0-9a-f]+$/i,Zt=Jt.trim().length!==Jt.length;g(String.prototype,"trim",Kt,Zt);var Qt=function(t){return{value:t,done:0===arguments.length}},te=function(t){yt.RequireObjectCoercible(t),this._s=yt.ToString(t),this._i=0};te.prototype.next=function(){var t=this._s,e=this._i;if(void 0===t||e>=t.length)return this._s=void 0,Qt();var r,n,o=t.charCodeAt(e);return n=o<55296||o>56319||e+1===t.length||(r=t.charCodeAt(e+1))<56320||r>57343?1:2,this._i=e+n,Qt(t.substr(e,n))},Mt(te.prototype),Mt(String.prototype,(function(){return new te(this)}));var ee={from:function(t){var e,n,o,i=this;if(arguments.length>1&&(e=arguments[1]),void 0===e)n=!1;else{if(!yt.IsCallable(e))throw new TypeError("Array.from: when provided, the second argument must be a function");arguments.length>2&&(o=arguments[2]),n=!0}var a,u,c,s=void 0!==(nt(t)||yt.GetMethod(t,ut));if(s){u=yt.IsConstructor(i)?Object(new i):[];var f,l,p=yt.GetIterator(t);for(c=0;!1!==(f=yt.IteratorStep(p));){l=f.value;try{n&&(l=void 0===o?e(l,c):r(e,o,l,c)),u[c]=l}catch(t){throw yt.IteratorClose(p,!0),t}c+=1}a=c}else{var y,h=yt.ToObject(t);for(a=yt.ToLength(h.length),u=yt.IsConstructor(i)?Object(new i(a)):new Array(a),c=0;c<a;++c)y=h[c],n&&(y=void 0===o?e(y,c):r(e,o,y,c)),Ct(u,c,y)}return u.length=a,u},of:function(){for(var t=arguments.length,e=this,r=i(e)||!yt.IsCallable(e)?new Array(t):yt.Construct(e,[t]),n=0;n<t;++n)Ct(r,n,arguments[n]);return r.length=t,r}};m(Array,ee),Rt(Array),m((t=function(t,e){this.i=0,this.array=t,this.kind=e}).prototype,{next:function(){var e=this.i,r=this.array;if(!(this instanceof t))throw new TypeError("Not an ArrayIterator");if(void 0!==r)for(var n=yt.ToLength(r.length);e<n;e++){var o,i=this.kind;return"key"===i?o=e:"value"===i?o=r[e]:"entry"===i&&(o=[e,r[e]]),this.i=e+1,Qt(o)}return this.array=void 0,Qt()}}),Mt(t.prototype);var re=Array.of===ee.of||function(){var t=function(t){this.length=t};t.prototype=[];var e=Array.of.apply(t,[1,2]);return e instanceof t&&2===e.length}();re||it(Array,"of",ee.of);var ne={copyWithin:function(t,e){var r,n=yt.ToObject(this),o=yt.ToLength(n.length),i=yt.ToInteger(t),a=yt.ToInteger(e),u=i<0?D(o+i,0):F(i,o),c=a<0?D(o+a,0):F(a,o);arguments.length>2&&(r=arguments[2]);var s=void 0===r?o:yt.ToInteger(r),f=s<0?D(o+s,0):F(s,o),l=F(f-c,o-u),p=1;for(c<u&&u<c+l&&(p=-1,c+=l-1,u+=l-1);l>0;)c in n?n[u]=n[c]:delete n[u],c+=p,u+=p,l-=1;return n},fill:function(t){var e,r;arguments.length>1&&(e=arguments[1]),arguments.length>2&&(r=arguments[2]);var n=yt.ToObject(this),o=yt.ToLength(n.length);e=yt.ToInteger(void 0===e?0:e),r=yt.ToInteger(void 0===r?o:r);for(var i=e<0?D(o+e,0):F(e,o),a=r<0?o+r:r,u=i;u<o&&u<a;++u)n[u]=t;return n},find:function(t){var e=yt.ToObject(this),n=yt.ToLength(e.length);if(!yt.IsCallable(t))throw new TypeError("Array#find: predicate must be a function");for(var o,i=arguments.length>1?arguments[1]:null,a=0;a<n;a++)if(o=e[a],i){if(r(t,i,o,a,e))return o}else if(t(o,a,e))return o},findIndex:function(t){var e=yt.ToObject(this),n=yt.ToLength(e.length);if(!yt.IsCallable(t))throw new TypeError("Array#findIndex: predicate must be a function");for(var o=arguments.length>1?arguments[1]:null,i=0;i<n;i++)if(o){if(r(t,o,e[i],i,e))return i}else if(t(e[i],i,e))return i;return-1},keys:function(){return new t(this,"key")},values:function(){return new t(this,"value")},entries:function(){return new t(this,"entry")}};if(Array.prototype.keys&&!yt.IsCallable([1].keys().next)&&delete Array.prototype.keys,Array.prototype.entries&&!yt.IsCallable([1].entries().next)&&delete Array.prototype.entries,Array.prototype.keys&&Array.prototype.entries&&!Array.prototype.values&&Array.prototype[ut]&&(m(Array.prototype,{values:Array.prototype[ut]}),ot.symbol(J.unscopables)&&(Array.prototype[J.unscopables].values=!0)),y&&Array.prototype.values&&"values"!==Array.prototype.values.name){var oe=Array.prototype.values;it(Array.prototype,"values",(function(){return yt.Call(oe,this,arguments)})),g(Array.prototype,ut,Array.prototype.values,!0)}m(Array.prototype,ne),1/[!0].indexOf(!0,-0)<0&&g(Array.prototype,"indexOf",(function(t){var e=A(this,arguments);return 0===e&&1/e<0?0:e}),!0),Mt(Array.prototype,(function(){return this.values()})),Object.getPrototypeOf&&Mt(Object.getPrototypeOf([].values()));var ie,ae=s((function(){return 0===Array.from({length:-1}).length})),ue=1===(ie=Array.from([0].entries())).length&&i(ie[0])&&0===ie[0][0]&&0===ie[0][1];ae&&ue||it(Array,"from",ee.from);var ce=s((function(){return Array.from([0],void 0)}));if(!ce){var se=Array.from;it(Array,"from",(function(t){return arguments.length>1&&void 0!==arguments[1]?yt.Call(se,this,arguments):r(se,this,t)}))}var fe=-(Math.pow(2,32)-1),le=function(t,e){var n={length:fe};return n[e?(n.length>>>0)-1:0]=!0,s((function(){return r(t,n,(function(){throw new RangeError("should not reach here")}),[]),!0}))};if(!le(Array.prototype.forEach)){var pe=Array.prototype.forEach;it(Array.prototype,"forEach",(function(t){return yt.Call(pe,this.length>=0?this:[],arguments)}),!0)}if(!le(Array.prototype.map)){var ye=Array.prototype.map;it(Array.prototype,"map",(function(t){return yt.Call(ye,this.length>=0?this:[],arguments)}),!0)}if(!le(Array.prototype.filter)){var he=Array.prototype.filter;it(Array.prototype,"filter",(function(t){return yt.Call(he,this.length>=0?this:[],arguments)}),!0)}if(!le(Array.prototype.some)){var ve=Array.prototype.some;it(Array.prototype,"some",(function(t){return yt.Call(ve,this.length>=0?this:[],arguments)}),!0)}if(!le(Array.prototype.every)){var de=Array.prototype.every;it(Array.prototype,"every",(function(t){return yt.Call(de,this.length>=0?this:[],arguments)}),!0)}if(!le(Array.prototype.reduce)){var be=Array.prototype.reduce;it(Array.prototype,"reduce",(function(t){return yt.Call(be,this.length>=0?this:[],arguments)}),!0)}if(!le(Array.prototype.reduceRight,!0)){var ge=Array.prototype.reduceRight;it(Array.prototype,"reduceRight",(function(t){return yt.Call(ge,this.length>=0?this:[],arguments)}),!0)}var me=8!==Number("0o10"),we=2!==Number("0b10"),Oe=b(Jt,(function(t){return 0===Number(t+0+t)}));if(me||we||Oe){var je=Number,Se=/^0b[01]+$/i,Ee=/^0o[0-7]+$/i,Te=Se.test.bind(Se),xe=Ee.test.bind(Ee),Pe=function(t){var e;if("function"==typeof t.valueOf&&(e=t.valueOf(),ot.primitive(e)))return e;if("function"==typeof t.toString&&(e=t.toString(),ot.primitive(e)))return e;throw new TypeError("No default value")},Ie=Xt.test.bind(Xt),Ae=Yt.test.bind(Yt),_e=function(){var t=function(e){var r;"string"==typeof(r=arguments.length>0?ot.primitive(e)?e:Pe(e,"number"):0)&&(r=yt.Call(Kt,r),Te(r)?r=parseInt(R(r,2),2):xe(r)?r=parseInt(R(r,2),8):(Ie(r)||Ae(r))&&(r=NaN));var n=this,o=s((function(){return je.prototype.valueOf.call(n),!0}));return n instanceof t&&!o?new je(r):je(r)};return t}();At(je,_e,{}),m(_e,{NaN:je.NaN,MAX_VALUE:je.MAX_VALUE,MIN_VALUE:je.MIN_VALUE,NEGATIVE_INFINITY:je.NEGATIVE_INFINITY,POSITIVE_INFINITY:je.POSITIVE_INFINITY}),Number=_e,j.redefine(x,"Number",_e)}var Re=Math.pow(2,53)-1;m(Number,{MAX_SAFE_INTEGER:Re,MIN_SAFE_INTEGER:-Re,EPSILON:2220446049250313e-31,parseInt:x.parseInt,parseFloat:x.parseFloat,isFinite:Z,isInteger:function(t){return Z(t)&&yt.ToInteger(t)===t},isSafeInteger:function(t){return Number.isInteger(t)&&L(t)<=Number.MAX_SAFE_INTEGER},isNaN:Y}),g(Number,"parseInt",x.parseInt,Number.parseInt!==x.parseInt),1===[,1].find((function(){return!0}))&&it(Array.prototype,"find",ne.find),0!==[,1].findIndex((function(){return!0}))&&it(Array.prototype,"findIndex",ne.findIndex);var Me,Ne,Ce,De=Function.bind.call(Function.bind,Object.prototype.propertyIsEnumerable),Fe=function(t,e){p&&De(t,e)&&Object.defineProperty(t,e,{enumerable:!1})},ke=function(){for(var t=Number(this),e=arguments.length,r=e-t,n=new Array(r<0?0:r),o=t;o<e;++o)n[o-t]=arguments[o];return n},Le=function(t){return function(e,r){return e[r]=t[r],e}},Ue=function(t,e){var r,n=a(Object(e));return yt.IsCallable(Object.getOwnPropertySymbols)&&(r=d(Object.getOwnPropertySymbols(Object(e)),De(e))),v(_(n,r||[]),Le(e),t)},Be={assign:function(t,e){var r=yt.ToObject(t,"Cannot convert undefined or null to object");return v(yt.Call(ke,1,arguments),Ue,r)},is:function(t,e){return yt.SameValue(t,e)}},qe=Object.assign&&Object.preventExtensions&&function(){var t=Object.preventExtensions({1:2});try{Object.assign(t,"xy")}catch(e){return"y"===t[1]}}();if(qe&&it(Object,"assign",Be.assign),m(Object,Be),p){var Ge={setPrototypeOf:function(t,e){var n,o=function(t,e){return function(t,e){if(!yt.TypeIsObject(t))throw new TypeError("cannot set prototype on a non-object");if(null!==e&&!yt.TypeIsObject(e))throw new TypeError("can only set prototype to an object or null"+e)}(t,e),r(n,t,e),t};try{n=t.getOwnPropertyDescriptor(t.prototype,"__proto__").set,r(n,{},null)}catch(e){if(t.prototype!=={}.__proto__)return;n=function(t){this.__proto__=t},o.polyfill=o(o({},null),t.prototype)instanceof t}return o}(Object)};m(Object,Ge)}Object.setPrototypeOf&&Object.getPrototypeOf&&null!==Object.getPrototypeOf(Object.setPrototypeOf({},null))&&null===Object.getPrototypeOf(Object.create(null))&&(Me=Object.create(null),Ne=Object.getPrototypeOf,Ce=Object.setPrototypeOf,Object.getPrototypeOf=function(t){var e=Ne(t);return e===Me?null:e},Object.setPrototypeOf=function(t,e){return Ce(t,null===e?Me:e)},Object.setPrototypeOf.polyfill=!1);var Ve=!c((function(){return Object.keys("foo")}));if(!Ve){var ze=Object.keys;it(Object,"keys",(function(t){return ze(yt.ToObject(t))})),a=Object.keys}var He=c((function(){return Object.keys(/a/g)}));if(He){var We=Object.keys;it(Object,"keys",(function(t){if(ot.regex(t)){var e=[];for(var r in t)G(t,r)&&M(e,r);return e}return We(t)})),a=Object.keys}if(Object.getOwnPropertyNames){var $e=!c((function(){return Object.getOwnPropertyNames("foo")}));if(!$e){var Ke="object"==typeof window?Object.getOwnPropertyNames(window):[],Je=Object.getOwnPropertyNames;it(Object,"getOwnPropertyNames",(function(t){var e=yt.ToObject(t);if("[object Window]"===w(e))try{return Je(e)}catch(t){return _([],Ke)}return Je(e)}))}}if(Object.getOwnPropertyDescriptor){var Xe=!c((function(){return Object.getOwnPropertyDescriptor("foo","bar")}));if(!Xe){var Ye=Object.getOwnPropertyDescriptor;it(Object,"getOwnPropertyDescriptor",(function(t,e){return Ye(yt.ToObject(t),e)}))}}if(Object.seal){var Ze=!c((function(){return Object.seal("foo")}));if(!Ze){var Qe=Object.seal;it(Object,"seal",(function(t){return yt.TypeIsObject(t)?Qe(t):t}))}}if(Object.isSealed){var tr=!c((function(){return Object.isSealed("foo")}));if(!tr){var er=Object.isSealed;it(Object,"isSealed",(function(t){return!yt.TypeIsObject(t)||er(t)}))}}if(Object.freeze){var rr=!c((function(){return Object.freeze("foo")}));if(!rr){var nr=Object.freeze;it(Object,"freeze",(function(t){return yt.TypeIsObject(t)?nr(t):t}))}}if(Object.isFrozen){var or=!c((function(){return Object.isFrozen("foo")}));if(!or){var ir=Object.isFrozen;it(Object,"isFrozen",(function(t){return!yt.TypeIsObject(t)||ir(t)}))}}if(Object.preventExtensions){var ar=!c((function(){return Object.preventExtensions("foo")}));if(!ar){var ur=Object.preventExtensions;it(Object,"preventExtensions",(function(t){return yt.TypeIsObject(t)?ur(t):t}))}}if(Object.isExtensible){var cr=!c((function(){return Object.isExtensible("foo")}));if(!cr){var sr=Object.isExtensible;it(Object,"isExtensible",(function(t){return!!yt.TypeIsObject(t)&&sr(t)}))}}if(Object.getPrototypeOf){var fr=!c((function(){return Object.getPrototypeOf("foo")}));if(!fr){var lr=Object.getPrototypeOf;it(Object,"getPrototypeOf",(function(t){return lr(yt.ToObject(t))}))}}var pr,yr=p&&((pr=Object.getOwnPropertyDescriptor(RegExp.prototype,"flags"))&&yt.IsCallable(pr.get));if(p&&!yr){var hr=function(){if(!yt.TypeIsObject(this))throw new TypeError("Method called on incompatible type: must be an object.");var t="";return this.global&&(t+="g"),this.ignoreCase&&(t+="i"),this.multiline&&(t+="m"),this.unicode&&(t+="u"),this.sticky&&(t+="y"),t};j.getter(RegExp.prototype,"flags",hr)}var vr,dr=p&&s((function(){return"/a/i"===String(new RegExp(/a/g,"i"))})),br=at&&p&&((vr=/./)[J.match]=!1,RegExp(vr)===vr),gr=s((function(){return"/abc/"===RegExp.prototype.toString.call({source:"abc"})})),mr=gr&&s((function(){return"/a/b"===RegExp.prototype.toString.call({source:"a",flags:"b"})}));if(!gr||!mr){var wr=RegExp.prototype.toString;g(RegExp.prototype,"toString",(function(){var t=yt.RequireObjectCoercible(this);return ot.regex(t)?r(wr,t):"/"+ft(t.source)+"/"+ft(t.flags)}),!0),j.preserveToString(RegExp.prototype.toString,wr)}if(p&&(!dr||br)){var Or=Object.getOwnPropertyDescriptor(RegExp.prototype,"flags").get,jr=Object.getOwnPropertyDescriptor(RegExp.prototype,"source")||{},Sr=function(){return this.source},Er=yt.IsCallable(jr.get)?jr.get:Sr,Tr=RegExp,xr=function t(e,r){var n=yt.IsRegExp(e);return this instanceof t||!n||void 0!==r||e.constructor!==t?ot.regex(e)?new t(yt.Call(Er,e),void 0===r?yt.Call(Or,e):r):(n&&(e.source,void 0===r&&e.flags),new Tr(e,r)):e};At(Tr,xr,{$input:!0}),RegExp=xr,j.redefine(x,"RegExp",xr)}if(p){var Pr={input:"$_",lastMatch:"$&",lastParen:"$+",leftContext:"$`",rightContext:"$'"};h(a(Pr),(function(t){t in RegExp&&!(Pr[t]in RegExp)&&j.getter(RegExp,Pr[t],(function(){return RegExp[t]}))}))}Rt(RegExp);var Ir=1/Number.EPSILON,Ar=function(t){return t+Ir-Ir},_r=Math.pow(2,-23),Rr=Math.pow(2,127)*(2-_r),Mr=Math.pow(2,-126),Nr=Math.E,Cr=Math.LOG2E,Dr=Math.LOG10E,Fr=Number.prototype.clz;delete Number.prototype.clz;var kr={acosh:function(t){var e=Number(t);if(Y(e)||t<1)return NaN;if(1===e)return 0;if(e===1/0)return e;var r=1/(e*e);if(e<2)return tt(e-1+q(1-r)*e);var n=e/2;return tt(n+q(1-r)*n-1)+1/Cr},asinh:function(t){var e=Number(t);if(0===e||!P(e))return e;var r=L(e),n=r*r,o=Q(e);return r<1?o*tt(r+n/(q(n+1)+1)):o*(tt(r/2+q(1+1/n)*r/2-1)+1/Cr)},atanh:function(t){var e=Number(t);if(0===e)return e;if(-1===e)return-1/0;if(1===e)return 1/0;if(Y(e)||e<-1||e>1)return NaN;var r=L(e);return Q(e)*tt(2*r/(1-r))/2},cbrt:function(t){var e=Number(t);if(0===e)return e;var r,n=e<0;return n&&(e=-e),r=e===1/0?1/0:(e/((r=U(B(e)/3))*r)+2*r)/3,n?-r:r},clz32:function(t){var e=Number(t),r=yt.ToUint32(e);return 0===r?32:Fr?yt.Call(Fr,r):31-k(B(r+.5)*Cr)},cosh:function(t){var e=Number(t);if(0===e)return 1;if(Y(e))return NaN;if(!P(e))return 1/0;var r=U(L(e)-1);return(r+1/(r*Nr*Nr))*(Nr/2)},expm1:function(t){var e=Number(t);if(e===-1/0)return-1;if(!P(e)||0===e)return e;if(L(e)>.5)return U(e)-1;for(var r=e,n=0,o=1;n+r!==n;)n+=r,r*=e/(o+=1);return n},hypot:function(t,e){for(var r=0,n=0,o=0;o<arguments.length;++o){var i=L(Number(arguments[o]));n<i?(r*=n/i*(n/i),r+=1,n=i):r+=i>0?i/n*(i/n):i}return n===1/0?1/0:n*q(r)},log2:function(t){return B(t)*Cr},log10:function(t){return B(t)*Dr},log1p:tt,sign:Q,sinh:function(t){var e=Number(t);if(!P(e)||0===e)return e;var r=L(e);if(r<1){var n=Math.expm1(r);return Q(e)*n*(1+1/(n+1))/2}var o=U(r-1);return Q(e)*(o-1/(o*Nr*Nr))*(Nr/2)},tanh:function(t){var e=Number(t);return Y(e)||0===e?e:e>=20?1:e<=-20?-1:(Math.expm1(e)-Math.expm1(-e))/(U(e)+U(-e))},trunc:function(t){var e=Number(t);return e<0?-k(-e):k(e)},imul:function(t,e){var r=yt.ToUint32(t),n=yt.ToUint32(e),o=65535&r,i=65535&n;return o*i+((r>>>16&65535)*i+o*(n>>>16&65535)<<16>>>0)|0},fround:function(t){var e=Number(t);if(0===e||e===1/0||e===-1/0||Y(e))return e;var r=Q(e),n=L(e);if(n<Mr)return r*Ar(n/Mr/_r)*Mr*_r;var o=(1+_r/Number.EPSILON)*n,i=o-(o-n);return i>Rr||Y(i)?r*(1/0):r*i}},Lr=function(t,e,r){return L(1-t/e)/Number.EPSILON<(r||8)};m(Math,kr),g(Math,"sinh",kr.sinh,Math.sinh(710)===1/0),g(Math,"cosh",kr.cosh,Math.cosh(710)===1/0),g(Math,"log1p",kr.log1p,-1e-17!==Math.log1p(-1e-17)),g(Math,"asinh",kr.asinh,Math.asinh(-1e7)!==-Math.asinh(1e7)),g(Math,"asinh",kr.asinh,Math.asinh(1e300)===1/0),g(Math,"atanh",kr.atanh,0===Math.atanh(1e-300)),g(Math,"tanh",kr.tanh,-2e-17!==Math.tanh(-2e-17)),g(Math,"acosh",kr.acosh,Math.acosh(Number.MAX_VALUE)===1/0),g(Math,"acosh",kr.acosh,!Lr(Math.acosh(1+Number.EPSILON),Math.sqrt(2*Number.EPSILON))),g(Math,"cbrt",kr.cbrt,!Lr(Math.cbrt(1e-300),1e-100)),g(Math,"sinh",kr.sinh,-2e-17!==Math.sinh(-2e-17));var Ur=Math.expm1(10);g(Math,"expm1",kr.expm1,Ur>22025.465794806718||Ur<22025.465794806718);var Br=Math.round,qr=0===Math.round(.5-Number.EPSILON/4)&&1===Math.round(Number.EPSILON/3.99-.5),Gr=Ir+1,Vr=2*Ir-1,zr=[Gr,Vr].every((function(t){return Math.round(t)===t}));g(Math,"round",(function(t){var e=k(t);return t-e<.5?e:-1===e?-0:e+1}),!qr||!zr),j.preserveToString(Math.round,Br);var Hr=Math.imul;-5!==Math.imul(4294967295,5)&&(Math.imul=kr.imul,j.preserveToString(Math.imul,Hr)),2!==Math.imul.length&&it(Math,"imul",(function(t,e){return yt.Call(Hr,Math,arguments)}));var Wr,$r,Kr=function(){var t=x.setTimeout;if("function"==typeof t||"object"==typeof t){yt.IsPromise=function(t){return!!yt.TypeIsObject(t)&&void 0!==t._promise};var e,n=function(t){if(!yt.IsConstructor(t))throw new TypeError("Bad promise constructor");var e=this;if(e.resolve=void 0,e.reject=void 0,e.promise=new t((function(t,r){if(void 0!==e.resolve||void 0!==e.reject)throw new TypeError("Bad Promise implementation!");e.resolve=t,e.reject=r})),!yt.IsCallable(e.resolve)||!yt.IsCallable(e.reject))throw new TypeError("Bad promise constructor")};"undefined"!=typeof window&&yt.IsCallable(window.postMessage)&&(e=function(){var t=[];return window.addEventListener("message",(function(e){if(e.source===window&&"zero-timeout-message"===e.data){if(e.stopPropagation(),0===t.length)return;C(t)()}}),!0),function(e){M(t,e),window.postMessage("zero-timeout-message","*")}});var i,a,u,c,s=yt.IsCallable(x.setImmediate)?x.setImmediate:"object"==typeof o&&o.nextTick?o.nextTick:(i=x.Promise,(a=i&&i.resolve&&i.resolve())&&function(t){return a.then(t)}||(yt.IsCallable(e)?e():function(e){t(e,0)})),f=function(t){return t},l=function(t){throw t},p={},y=function(t,e,r){s((function(){h(t,e,r)}))},h=function(t,e,r){var n,o;if(e===p)return t(r);try{n=t(r),o=e.resolve}catch(t){n=t,o=e.reject}o(n)},v=function(t,e){var r=t._promise,n=r.reactionLength;if(n>0&&(y(r.fulfillReactionHandler0,r.reactionCapability0,e),r.fulfillReactionHandler0=void 0,r.rejectReactions0=void 0,r.reactionCapability0=void 0,n>1))for(var o=1,i=0;o<n;o++,i+=3)y(r[i+0],r[i+2],e),t[i+0]=void 0,t[i+1]=void 0,t[i+2]=void 0;r.result=e,r.state=1,r.reactionLength=0},d=function(t,e){var r=t._promise,n=r.reactionLength;if(n>0&&(y(r.rejectReactionHandler0,r.reactionCapability0,e),r.fulfillReactionHandler0=void 0,r.rejectReactions0=void 0,r.reactionCapability0=void 0,n>1))for(var o=1,i=0;o<n;o++,i+=3)y(r[i+1],r[i+2],e),t[i+0]=void 0,t[i+1]=void 0,t[i+2]=void 0;r.result=e,r.state=2,r.reactionLength=0},b=function(t){var e=!1;return{resolve:function(r){var n;if(!e){if(e=!0,r===t)return d(t,new TypeError("Self resolution"));if(!yt.TypeIsObject(r))return v(t,r);try{n=r.then}catch(e){return d(t,e)}if(!yt.IsCallable(n))return v(t,r);s((function(){w(t,r,n)}))}},reject:function(r){if(!e)return e=!0,d(t,r)}}},g=function(t,e,n,o){t===c?r(t,e,n,o,p):r(t,e,n,o)},w=function(t,e,r){var n=b(t),o=n.resolve,i=n.reject;try{g(r,e,o,i)}catch(t){i(t)}},O=function(){var t=function(e){if(!(this instanceof t))throw new TypeError('Constructor Promise requires "new"');if(this&&this._promise)throw new TypeError("Bad construction");if(!yt.IsCallable(e))throw new TypeError("not a valid resolver");var r=Dt(this,t,u,{_promise:{result:void 0,state:0,reactionLength:0,fulfillReactionHandler0:void 0,rejectReactionHandler0:void 0,reactionCapability0:void 0}}),n=b(r),o=n.reject;try{e(n.resolve,o)}catch(t){o(t)}return r};return t}();u=O.prototype;var j=function(t,e,r,n){var o=!1;return function(i){o||(o=!0,e[t]=i,0==--n.count&&(0,r.resolve)(e))}};return m(O,{all:function(t){var e=this;if(!yt.TypeIsObject(e))throw new TypeError("Promise is not object");var r,o,i=new n(e);try{return function(t,e,r){for(var n,o,i=t.iterator,a=[],u={count:1},c=0;;){try{if(!1===(n=yt.IteratorStep(i))){t.done=!0;break}o=n.value}catch(e){throw t.done=!0,e}a[c]=void 0;var s=e.resolve(o),f=j(c,a,r,u);u.count+=1,g(s.then,s,f,r.reject),c+=1}return 0==--u.count&&(0,r.resolve)(a),r.promise}(o={iterator:r=yt.GetIterator(t),done:!1},e,i)}catch(t){var a=t;if(o&&!o.done)try{yt.IteratorClose(r,!0)}catch(t){a=t}return(0,i.reject)(a),i.promise}},race:function(t){var e=this;if(!yt.TypeIsObject(e))throw new TypeError("Promise is not object");var r,o,i=new n(e);try{return function(t,e,r){for(var n,o,i,a=t.iterator;;){try{if(!1===(n=yt.IteratorStep(a))){t.done=!0;break}o=n.value}catch(e){throw t.done=!0,e}i=e.resolve(o),g(i.then,i,r.resolve,r.reject)}return r.promise}(o={iterator:r=yt.GetIterator(t),done:!1},e,i)}catch(t){var a=t;if(o&&!o.done)try{yt.IteratorClose(r,!0)}catch(t){a=t}return(0,i.reject)(a),i.promise}},reject:function(t){if(!yt.TypeIsObject(this))throw new TypeError("Bad promise constructor");var e=new n(this);return(0,e.reject)(t),e.promise},resolve:function(t){var e=this;if(!yt.TypeIsObject(e))throw new TypeError("Bad promise constructor");if(yt.IsPromise(t)&&t.constructor===e)return t;var r=new n(e);return(0,r.resolve)(t),r.promise}}),m(u,{catch:function(t){return this.then(null,t)},then:function(t,e){var r=this;if(!yt.IsPromise(r))throw new TypeError("not a promise");var o,i=yt.SpeciesConstructor(r,O),a=arguments.length>2&&arguments[2]===p;o=a&&i===O?p:new n(i);var u,c=yt.IsCallable(t)?t:f,s=yt.IsCallable(e)?e:l,h=r._promise;if(0===h.state){if(0===h.reactionLength)h.fulfillReactionHandler0=c,h.rejectReactionHandler0=s,h.reactionCapability0=o;else{var v=3*(h.reactionLength-1);h[v+0]=c,h[v+1]=s,h[v+2]=o}h.reactionLength+=1}else if(1===h.state)u=h.result,y(c,o,u);else{if(2!==h.state)throw new TypeError("unexpected Promise state");u=h.result,y(s,o,u)}return o.promise}}),p=new n(O),c=u.then,O}}();if(x.Promise&&(delete x.Promise.accept,delete x.Promise.defer,delete x.Promise.prototype.chain),"function"==typeof Kr){m(x,{Promise:Kr});var Jr=E(x.Promise,(function(t){return t.resolve(42).then((function(){}))instanceof t})),Xr=!c((function(){return x.Promise.reject(42).then(null,5).then(null,V)})),Yr=c((function(){return x.Promise.call(3,V)})),Zr=function(t){var e=t.resolve(5);e.constructor={};var r=t.resolve(e);try{r.then(null,V).then(null,V)}catch(t){return!0}return e===r}(x.Promise),Qr=p&&(Wr=0,$r=Object.defineProperty({},"then",{get:function(){Wr+=1}}),Promise.resolve($r),1===Wr),tn=function t(e){var r=new Promise(e);e(3,(function(){})),this.then=r.then,this.constructor=t};tn.prototype=Promise.prototype,tn.all=Promise.all;var en=s((function(){return!!tn.all([1,2])}));if(Jr&&Xr&&Yr&&!Zr&&Qr&&!en||(Promise=Kr,it(x,"Promise",Kr)),1!==Promise.all.length){var rn=Promise.all;it(Promise,"all",(function(t){return yt.Call(rn,this,arguments)}))}if(1!==Promise.race.length){var nn=Promise.race;it(Promise,"race",(function(t){return yt.Call(nn,this,arguments)}))}if(1!==Promise.resolve.length){var on=Promise.resolve;it(Promise,"resolve",(function(t){return yt.Call(on,this,arguments)}))}if(1!==Promise.reject.length){var an=Promise.reject;it(Promise,"reject",(function(t){return yt.Call(an,this,arguments)}))}Fe(Promise,"all"),Fe(Promise,"race"),Fe(Promise,"resolve"),Fe(Promise,"reject"),Rt(Promise)}var un,cn,sn=function(t){var e=a(v(t,(function(t,e){return t[e]=!0,t}),{}));return t.join(":")===e.join(":")},fn=sn(["z","a","bb"]),ln=sn(["z",1,"a","3",2]);if(p){var pn=function(t,e){return e||fn?pt(t)?"^"+yt.ToString(t):"string"==typeof t?"$"+t:"number"==typeof t?ln?t:"n"+t:"boolean"==typeof t?"b"+t:null:null},yn=function(){return Object.create?Object.create(null):{}},hn=function(t,e,n){if(i(n)||ot.string(n))h(n,(function(t){if(!yt.TypeIsObject(t))throw new TypeError("Iterator value "+t+" is not an entry object");e.set(t[0],t[1])}));else if(n instanceof t)r(t.prototype.forEach,n,(function(t,r){e.set(r,t)}));else{var o,a;if(!pt(n)){if(a=e.set,!yt.IsCallable(a))throw new TypeError("bad map");o=yt.GetIterator(n)}if(void 0!==o)for(;;){var u=yt.IteratorStep(o);if(!1===u)break;var c=u.value;try{if(!yt.TypeIsObject(c))throw new TypeError("Iterator value "+c+" is not an entry object");r(a,e,c[0],c[1])}catch(t){throw yt.IteratorClose(o,!0),t}}}},vn=function(t,e,n){if(i(n)||ot.string(n))h(n,(function(t){e.add(t)}));else if(n instanceof t)r(t.prototype.forEach,n,(function(t){e.add(t)}));else{var o,a;if(!pt(n)){if(a=e.add,!yt.IsCallable(a))throw new TypeError("bad set");o=yt.GetIterator(n)}if(void 0!==o)for(;;){var u=yt.IteratorStep(o);if(!1===u)break;var c=u.value;try{r(a,e,c)}catch(t){throw yt.IteratorClose(o,!0),t}}}},dn={Map:function(){var t={},e=function(t,e){this.key=t,this.value=e,this.next=null,this.prev=null};e.prototype.isRemoved=function(){return this.key===t};var n,o=function(t,e){if(!yt.TypeIsObject(t)||!function(t){return!!t._es6map}(t))throw new TypeError("Method Map.prototype."+e+" called on incompatible receiver "+yt.ToString(t))},i=function(t,e){o(t,"[[MapIterator]]"),this.head=t._head,this.i=this.head,this.kind=e};Mt(i.prototype={isMapIterator:!0,next:function(){if(!this.isMapIterator)throw new TypeError("Not a MapIterator");var t,e=this.i,r=this.kind,n=this.head;if(void 0===this.i)return Qt();for(;e.isRemoved()&&e!==n;)e=e.prev;for(;e.next!==n;)if(!(e=e.next).isRemoved())return t="key"===r?e.key:"value"===r?e.value:[e.key,e.value],this.i=e,Qt(t);return this.i=void 0,Qt()}});var a=function t(){if(!(this instanceof t))throw new TypeError('Constructor Map requires "new"');if(this&&this._es6map)throw new TypeError("Bad construction");var r=Dt(this,t,n,{_es6map:!0,_head:null,_map:z?new z:null,_size:0,_storage:yn()}),o=new e(null,null);return o.next=o.prev=o,r._head=o,arguments.length>0&&hn(t,r,arguments[0]),r};return n=a.prototype,j.getter(n,"size",(function(){if(void 0===this._size)throw new TypeError("size method called on incompatible Map");return this._size})),m(n,{get:function(t){var e;o(this,"get");var r=pn(t,!0);if(null!==r)return(e=this._storage[r])?e.value:void 0;if(this._map)return(e=W.call(this._map,t))?e.value:void 0;for(var n=this._head,i=n;(i=i.next)!==n;)if(yt.SameValueZero(i.key,t))return i.value},has:function(t){o(this,"has");var e=pn(t,!0);if(null!==e)return void 0!==this._storage[e];if(this._map)return $.call(this._map,t);for(var r=this._head,n=r;(n=n.next)!==r;)if(yt.SameValueZero(n.key,t))return!0;return!1},set:function(t,r){o(this,"set");var n,i=this._head,a=i,u=pn(t,!0);if(null!==u){if(void 0!==this._storage[u])return this._storage[u].value=r,this;n=this._storage[u]=new e(t,r),a=i.prev}else this._map&&($.call(this._map,t)?W.call(this._map,t).value=r:(n=new e(t,r),K.call(this._map,t,n),a=i.prev));for(;(a=a.next)!==i;)if(yt.SameValueZero(a.key,t))return a.value=r,this;return n=n||new e(t,r),yt.SameValue(-0,t)&&(n.key=0),n.next=this._head,n.prev=this._head.prev,n.prev.next=n,n.next.prev=n,this._size+=1,this},delete:function(e){o(this,"delete");var r=this._head,n=r,i=pn(e,!0);if(null!==i){if(void 0===this._storage[i])return!1;n=this._storage[i].prev,delete this._storage[i]}else if(this._map){if(!$.call(this._map,e))return!1;n=W.call(this._map,e).prev,H.call(this._map,e)}for(;(n=n.next)!==r;)if(yt.SameValueZero(n.key,e))return n.key=t,n.value=t,n.prev.next=n.next,n.next.prev=n.prev,this._size-=1,!0;return!1},clear:function(){o(this,"clear"),this._map=z?new z:null,this._size=0,this._storage=yn();for(var e=this._head,r=e,n=r.next;(r=n)!==e;)r.key=t,r.value=t,n=r.next,r.next=r.prev=e;e.next=e.prev=e},keys:function(){return o(this,"keys"),new i(this,"key")},values:function(){return o(this,"values"),new i(this,"value")},entries:function(){return o(this,"entries"),new i(this,"key+value")},forEach:function(t){o(this,"forEach");for(var e=arguments.length>1?arguments[1]:null,n=this.entries(),i=n.next();!i.done;i=n.next())e?r(t,e,i.value[1],i.value[0],this):t(i.value[1],i.value[0],this)}}),Mt(n,n.entries),a}(),Set:function(){var t,e=function(t,e){if(!yt.TypeIsObject(t)||!function(t){return t._es6set&&void 0!==t._storage}(t))throw new TypeError("Set.prototype."+e+" called on incompatible receiver "+yt.ToString(t))},n=function e(){if(!(this instanceof e))throw new TypeError('Constructor Set requires "new"');if(this&&this._es6set)throw new TypeError("Bad construction");var r=Dt(this,e,t,{_es6set:!0,"[[SetData]]":null,_storage:yn()});if(!r._es6set)throw new TypeError("bad set");return arguments.length>0&&vn(e,r,arguments[0]),r};t=n.prototype;var o=function(t){if(!t["[[SetData]]"]){var e=new dn.Map;t["[[SetData]]"]=e,h(a(t._storage),(function(t){var r=function(t){var e=t;if("^null"===e)return null;if("^undefined"!==e){var r=e.charAt(0);return"$"===r?R(e,1):"n"===r?+R(e,1):"b"===r?"btrue"===e:+e}}(t);e.set(r,r)})),t["[[SetData]]"]=e}t._storage=null};j.getter(n.prototype,"size",(function(){return e(this,"size"),this._storage?a(this._storage).length:(o(this),this["[[SetData]]"].size)})),m(n.prototype,{has:function(t){var r;return e(this,"has"),this._storage&&null!==(r=pn(t))?!!this._storage[r]:(o(this),this["[[SetData]]"].has(t))},add:function(t){var r;return e(this,"add"),this._storage&&null!==(r=pn(t))?(this._storage[r]=!0,this):(o(this),this["[[SetData]]"].set(t,t),this)},delete:function(t){var r;if(e(this,"delete"),this._storage&&null!==(r=pn(t))){var n=G(this._storage,r);return delete this._storage[r]&&n}return o(this),this["[[SetData]]"].delete(t)},clear:function(){e(this,"clear"),this._storage&&(this._storage=yn()),this["[[SetData]]"]&&this["[[SetData]]"].clear()},values:function(){return e(this,"values"),o(this),new i(this["[[SetData]]"].values())},entries:function(){return e(this,"entries"),o(this),new i(this["[[SetData]]"].entries())},forEach:function(t){e(this,"forEach");var n=arguments.length>1?arguments[1]:null,i=this;o(i),this["[[SetData]]"].forEach((function(e,o){n?r(t,n,o,o,i):t(o,o,i)}))}}),g(n.prototype,"keys",n.prototype.values,!0),Mt(n.prototype,n.prototype.values);var i=function(t){this.it=t};return i.prototype={isSetIterator:!0,next:function(){if(!this.isSetIterator)throw new TypeError("Not a SetIterator");return this.it.next()}},Mt(i.prototype),n}()},bn=x.Set&&!Set.prototype.delete&&Set.prototype.remove&&Set.prototype.items&&Set.prototype.map&&Array.isArray((new Set).keys);if(bn&&(x.Set=dn.Set),x.Map||x.Set){var gn=s((function(){return 2===new Map([[1,2]]).get(1)}));gn||(x.Map=function t(){if(!(this instanceof t))throw new TypeError('Constructor Map requires "new"');var e=new z;return arguments.length>0&&hn(t,e,arguments[0]),delete e.constructor,Object.setPrototypeOf(e,x.Map.prototype),e},x.Map.prototype=S(z.prototype),g(x.Map.prototype,"constructor",x.Map,!0),j.preserveToString(x.Map,z));var mn=new Map,wn=((cn=new Map([[1,0],[2,0],[3,0],[4,0]])).set(-0,cn),cn.get(0)===cn&&cn.get(-0)===cn&&cn.has(0)&&cn.has(-0)),On=mn.set(1,2)===mn;wn&&On||it(Map.prototype,"set",(function(t,e){return r(K,this,0===t?0:t,e),this})),wn||(m(Map.prototype,{get:function(t){return r(W,this,0===t?0:t)},has:function(t){return r($,this,0===t?0:t)}},!0),j.preserveToString(Map.prototype.get,W),j.preserveToString(Map.prototype.has,$));var jn=new Set,Sn=Set.prototype.delete&&Set.prototype.add&&Set.prototype.has&&((un=jn).delete(0),un.add(-0),!un.has(0)),En=jn.add(1)===jn;if(!Sn||!En){var Tn=Set.prototype.add;Set.prototype.add=function(t){return r(Tn,this,0===t?0:t),this},j.preserveToString(Set.prototype.add,Tn)}if(!Sn){var xn=Set.prototype.has;Set.prototype.has=function(t){return r(xn,this,0===t?0:t)},j.preserveToString(Set.prototype.has,xn);var Pn=Set.prototype.delete;Set.prototype.delete=function(t){return r(Pn,this,0===t?0:t)},j.preserveToString(Set.prototype.delete,Pn)}var In=E(x.Map,(function(t){var e=new t([]);return e.set(42,42),e instanceof t})),An=Object.setPrototypeOf&&!In,_n=function(){try{return!(x.Map()instanceof x.Map)}catch(t){return t instanceof TypeError}}();0===x.Map.length&&!An&&_n||(x.Map=function t(){if(!(this instanceof t))throw new TypeError('Constructor Map requires "new"');var e=new z;return arguments.length>0&&hn(t,e,arguments[0]),delete e.constructor,Object.setPrototypeOf(e,t.prototype),e},x.Map.prototype=z.prototype,g(x.Map.prototype,"constructor",x.Map,!0),j.preserveToString(x.Map,z));var Rn=E(x.Set,(function(t){var e=new t([]);return e.add(42,42),e instanceof t})),Mn=Object.setPrototypeOf&&!Rn,Nn=function(){try{return!(x.Set()instanceof x.Set)}catch(t){return t instanceof TypeError}}();if(0!==x.Set.length||Mn||!Nn){var Cn=x.Set;x.Set=function t(){if(!(this instanceof t))throw new TypeError('Constructor Set requires "new"');var e=new Cn;return arguments.length>0&&vn(t,e,arguments[0]),delete e.constructor,Object.setPrototypeOf(e,t.prototype),e},x.Set.prototype=Cn.prototype,g(x.Set.prototype,"constructor",x.Set,!0),j.preserveToString(x.Set,Cn)}var Dn=new x.Map,Fn=!s((function(){return Dn.keys().next().done}));if(("function"!=typeof x.Map.prototype.clear||0!==(new x.Set).size||0!==Dn.size||"function"!=typeof x.Map.prototype.keys||"function"!=typeof x.Set.prototype.keys||"function"!=typeof x.Map.prototype.forEach||"function"!=typeof x.Set.prototype.forEach||f(x.Map)||f(x.Set)||"function"!=typeof Dn.keys().next||Fn||!In)&&m(x,{Map:dn.Map,Set:dn.Set},!0),x.Set.prototype.keys!==x.Set.prototype.values&&g(x.Set.prototype,"keys",x.Set.prototype.values,!0),Mt(Object.getPrototypeOf((new x.Map).keys())),Mt(Object.getPrototypeOf((new x.Set).keys())),y&&"has"!==x.Set.prototype.has.name){var kn=x.Set.prototype.has;it(x.Set.prototype,"has",(function(t){return r(kn,this,t)}))}}m(x,dn),Rt(x.Map),Rt(x.Set)}var Ln=function(t){if(!yt.TypeIsObject(t))throw new TypeError("target must be an object")},Un={apply:function(){return yt.Call(yt.Call,null,arguments)},construct:function(t,e){if(!yt.IsConstructor(t))throw new TypeError("First argument must be a constructor.");var r=arguments.length>2?arguments[2]:t;if(!yt.IsConstructor(r))throw new TypeError("new.target must be a constructor.");return yt.Construct(t,e,r,"internal")},deleteProperty:function(t,e){if(Ln(t),p){var r=Object.getOwnPropertyDescriptor(t,e);if(r&&!r.configurable)return!1}return delete t[e]},has:function(t,e){return Ln(t),e in t}};Object.getOwnPropertyNames&&Object.assign(Un,{ownKeys:function(t){Ln(t);var e=Object.getOwnPropertyNames(t);return yt.IsCallable(Object.getOwnPropertySymbols)&&N(e,Object.getOwnPropertySymbols(t)),e}});var Bn=function(t){return!c(t)};if(Object.preventExtensions&&Object.assign(Un,{isExtensible:function(t){return Ln(t),Object.isExtensible(t)},preventExtensions:function(t){return Ln(t),Bn((function(){return Object.preventExtensions(t)}))}}),p){var qn=function(t,e,r){var n=Object.getOwnPropertyDescriptor(t,e);if(!n){var o=Object.getPrototypeOf(t);if(null===o)return;return qn(o,e,r)}return"value"in n?n.value:n.get?yt.Call(n.get,r):void 0},Gn=function(t,e,n,o){var i=Object.getOwnPropertyDescriptor(t,e);if(!i){var a=Object.getPrototypeOf(t);if(null!==a)return Gn(a,e,n,o);i={value:void 0,writable:!0,enumerable:!0,configurable:!0}}return"value"in i?!!i.writable&&!!yt.TypeIsObject(o)&&(Object.getOwnPropertyDescriptor(o,e)?st.defineProperty(o,e,{value:n}):st.defineProperty(o,e,{value:n,writable:!0,enumerable:!0,configurable:!0})):!!i.set&&(r(i.set,o,n),!0)};Object.assign(Un,{defineProperty:function(t,e,r){return Ln(t),Bn((function(){return Object.defineProperty(t,e,r)}))},getOwnPropertyDescriptor:function(t,e){return Ln(t),Object.getOwnPropertyDescriptor(t,e)},get:function(t,e){Ln(t);var r=arguments.length>2?arguments[2]:t;return qn(t,e,r)},set:function(t,e,r){Ln(t);var n=arguments.length>3?arguments[3]:t;return Gn(t,e,r,n)}})}if(Object.getPrototypeOf){var Vn=Object.getPrototypeOf;Un.getPrototypeOf=function(t){return Ln(t),Vn(t)}}if(Object.setPrototypeOf&&Un.getPrototypeOf){var zn=function(t,e){for(var r=e;r;){if(t===r)return!0;r=Un.getPrototypeOf(r)}return!1};Object.assign(Un,{setPrototypeOf:function(t,e){if(Ln(t),null!==e&&!yt.TypeIsObject(e))throw new TypeError("proto must be an object or null");return e===st.getPrototypeOf(t)||!(st.isExtensible&&!st.isExtensible(t))&&!zn(t,e)&&(Object.setPrototypeOf(t,e),!0)}})}var Hn=function(t,e){yt.IsCallable(x.Reflect[t])?s((function(){return x.Reflect[t](1),x.Reflect[t](NaN),x.Reflect[t](!0),!0}))&&it(x.Reflect,t,e):g(x.Reflect,t,e)};Object.keys(Un).forEach((function(t){Hn(t,Un[t])}));var Wn=x.Reflect.getPrototypeOf;if(y&&Wn&&"getPrototypeOf"!==Wn.name&&it(x.Reflect,"getPrototypeOf",(function(t){return r(Wn,x.Reflect,t)})),x.Reflect.setPrototypeOf&&s((function(){return x.Reflect.setPrototypeOf(1,{}),!0}))&&it(x.Reflect,"setPrototypeOf",Un.setPrototypeOf),x.Reflect.defineProperty&&(s((function(){var t=!x.Reflect.defineProperty(1,"test",{value:1}),e="function"!=typeof Object.preventExtensions||!x.Reflect.defineProperty(Object.preventExtensions({}),"test",{});return t&&e}))||it(x.Reflect,"defineProperty",Un.defineProperty)),x.Reflect.construct&&(s((function(){var t=function(){};return x.Reflect.construct((function(){}),[],t)instanceof t}))||it(x.Reflect,"construct",Un.construct)),"Invalid Date"!==String(new Date(NaN))){var $n=Date.prototype.toString,Kn=function(){var t=+this;return t!=t?"Invalid Date":yt.Call($n,this)};it(Date.prototype,"toString",Kn)}var Jn={anchor:function(t){return yt.CreateHTML(this,"a","name",t)},big:function(){return yt.CreateHTML(this,"big","","")},blink:function(){return yt.CreateHTML(this,"blink","","")},bold:function(){return yt.CreateHTML(this,"b","","")},fixed:function(){return yt.CreateHTML(this,"tt","","")},fontcolor:function(t){return yt.CreateHTML(this,"font","color",t)},fontsize:function(t){return yt.CreateHTML(this,"font","size",t)},italics:function(){return yt.CreateHTML(this,"i","","")},link:function(t){return yt.CreateHTML(this,"a","href",t)},small:function(){return yt.CreateHTML(this,"small","","")},strike:function(){return yt.CreateHTML(this,"strike","","")},sub:function(){return yt.CreateHTML(this,"sub","","")},sup:function(){return yt.CreateHTML(this,"sup","","")}};h(Object.keys(Jn),(function(t){var e=String.prototype[t],n=!1;if(yt.IsCallable(e)){var o=r(e,"",' " '),i=_([],o.match(/"/g)).length;n=o!==o.toLowerCase()||i>2}else n=!0;n&&it(String.prototype,t,Jn[t])}));var Xn=function(){if(!at)return!1;var t="object"==typeof JSON&&"function"==typeof JSON.stringify?JSON.stringify:null;if(!t)return!1;if(void 0!==t(J()))return!0;if("[null]"!==t([J()]))return!0;var e={a:J()};return e[J()]=!0,"{}"!==t(e)}(),Yn=s((function(){return!at||"{}"===JSON.stringify(Object(J()))&&"[{}]"===JSON.stringify([Object(J())])}));if(Xn||!Yn){var Zn=JSON.stringify;it(JSON,"stringify",(function(t){if("symbol"!=typeof t){var e;arguments.length>1&&(e=arguments[1]);var n=[t];if(i(e))n.push(e);else{var o=yt.IsCallable(e)?e:null,a=function(t,e){var n=o?r(o,this,t,e):e;if("symbol"!=typeof n)return ot.symbol(n)?Le({})(n):n};n.push(a)}return arguments.length>2&&n.push(arguments[2]),Zn.apply(this,n)}}))}return x})?i.call(e,r,e,t):i)||(t.exports=a)}).call(this,r("yLpj"),r("8oxB"))},rCmP:function(t,e,r){"use strict";t.exports=function(t){return"string"==typeof t||"symbol"==typeof t}},rGdr:function(t,e,r){"use strict";var n=r("HgV8"),o=r("hemD"),i=r("Ii9V"),a=r("TU3P"),u=r("Khql"),c=Object.getOwnPropertyDescriptor,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,l=u("Array.prototype.concat"),p=u("Array.prototype.reduce"),y=f?function(t){return l(s(t),f(t))}:s,h=o(c)&&o(s);t.exports=function(t){if(i(t),!h)throw new TypeError("getOwnPropertyDescriptors requires Object.getOwnPropertyDescriptor");var e=a(t);return p(y(e),(function(t,r){var o=c(e,r);return void 0!==o&&n(t,r,o),t}),{})}},rQy3:function(t,e,r){"use strict";var n=r("oNNP"),o=r("Ii9V"),i=r("Khql")("Object.prototype.propertyIsEnumerable");t.exports=function(t){var e=o(t),r=[];for(var a in e)n(e,a)&&i(e,a)&&r.push(e[a]);return r}},rTV3:function(t,e){!function(t){"use strict";if(!t.origin){var e=t.protocol+"//"+t.hostname+(t.port&&":"+t.port);try{Object.defineProperty(t,"origin",{enumerable:!0,value:e})}catch(r){t.origin=e}}}(window.location)},"s+g2":function(t,e,r){"use strict";var n=r("P5mh");t.exports=function(){return"function"==typeof String.prototype.padStart?String.prototype.padStart:n}},"s+gD":function(t,e,r){"use strict";var n=r("ciGR"),o=r("R5T6"),i=r("Ii9V"),a=r("Khql")("String.prototype.slice");t.exports=function(t){var e,r=i(this),u=o(r),c=n(u.length);arguments.length>1&&(e=arguments[1]);var s=void 0===e?"":o(e);""===s&&(s=" ");var f=n(t);if(f<=c)return u;for(var l=f-c;s.length<l;){var p=s.length,y=l-p;s+=p>y?a(s,0,y):s}var h=s.length>l?a(s,0,l):s;return u+h}},sYn3:function(t,e,r){"use strict";var n;if(!Object.keys){var o=Object.prototype.hasOwnProperty,i=Object.prototype.toString,a=r("1KsK"),u=Object.prototype.propertyIsEnumerable,c=!u.call({toString:null},"toString"),s=u.call((function(){}),"prototype"),f=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],l=function(t){var e=t.constructor;return e&&e.prototype===t},p={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},y=function(){if("undefined"==typeof window)return!1;for(var t in window)try{if(!p["$"+t]&&o.call(window,t)&&null!==window[t]&&"object"==typeof window[t])try{l(window[t])}catch(t){return!0}}catch(t){return!0}return!1}();n=function(t){var e=null!==t&&"object"==typeof t,r="[object Function]"===i.call(t),n=a(t),u=e&&"[object String]"===i.call(t),p=[];if(!e&&!r&&!n)throw new TypeError("Object.keys called on a non-object");var h=s&&r;if(u&&t.length>0&&!o.call(t,0))for(var v=0;v<t.length;++v)p.push(String(v));if(n&&t.length>0)for(var d=0;d<t.length;++d)p.push(String(d));else for(var b in t)h&&"prototype"===b||!o.call(t,b)||p.push(String(b));if(c)for(var g=function(t){if("undefined"==typeof window||!y)return l(t);try{return l(t)}catch(t){return!1}}(t),m=0;m<f.length;++m)g&&"constructor"===f[m]||!o.call(t,f[m])||p.push(f[m]);return p}}t.exports=n},sqVN:function(t,e,r){"use strict";var n=r("6ayh"),o=n("%Math%"),i=n("%Number%");t.exports=i.MAX_SAFE_INTEGER||o.pow(2,53)-1},srjY:function(t,e,r){"use strict";(function(e){var n=r("45zb");if(r("UVaH")()||r("FpZJ")()){var o=Symbol.iterator;t.exports=function(t){return null!=t&&void 0!==t[o]?t[o]():n(t)?Array.prototype[o].call(t):void 0}}else{var i=r("lmVY"),a=r("VbLK"),u=r("6ayh"),c=u("%Map%",!0),s=u("%Set%",!0),f=r("Khql"),l=f("Array.prototype.push"),p=f("String.prototype.charCodeAt"),y=f("String.prototype.slice"),h=function(t){var e=0;return{next:function(){var r,n=e>=t.length;return n||(r=t[e],e+=1),{done:n,value:r}}}},v=function(t){if(i(t)||n(t))return h(t);if(a(t)){var e=0;return{next:function(){var r=function(t,e){if(e+1>=t.length)return e+1;var r=p(t,e);if(r<55296||r>56319)return e+1;var n=p(t,e+1);return n<56320||n>57343?e+1:e+2}(t,e),n=y(t,e,r);return e=r,{done:r>t.length,value:n}}}}};if(c||s){var d=r("/RMt"),b=r("vgOX"),g=f("Map.prototype.forEach",!0),m=f("Set.prototype.forEach",!0);if(void 0===e||!e.versions||!e.versions.node)var w=f("Map.prototype.iterator",!0),O=f("Set.prototype.iterator",!0),j=function(t){var e=!1;return{next:function(){try{return{done:e,value:e?void 0:t.next()}}catch(t){return e=!0,{done:!0,value:void 0}}}}};var S=f("Map.prototype.@@iterator",!0)||f("Map.prototype._es6-shim iterator_",!0),E=f("Set.prototype.@@iterator",!0)||f("Set.prototype._es6-shim iterator_",!0);t.exports=function(t){return function(t){if(d(t)){if(w)return j(w(t));if(S)return S(t);if(g){var e=[];return g(t,(function(t,r){l(e,[r,t])})),h(e)}}if(b(t)){if(O)return j(O(t));if(E)return E(t);if(m){var r=[];return m(t,(function(t){l(r,t)})),h(r)}}}(t)||v(t)}}else t.exports=v}}).call(this,r("8oxB"))},szxn:function(t,e){!function(){if(!Object.setPrototypeOf&&!{}.__proto__){var t=Object.getPrototypeOf;Object.getPrototypeOf=function(e){return e.__proto__?e.__proto__:t.call(Object,e)}}}()},tPqs:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("hLiU"),i=r("RIFg");t.exports=function(t,e){var r=o(t,"next",arguments.length<2?[]:[e]);if("Object"!==i(r))throw new n("iterator next must return an object");return r}},tihr:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("rCmP"),i=r("TU3P");t.exports=function(t,e){if(!o(e))throw new n("Assertion failed: IsPropertyKey(P) is not true");return i(t)[e]}},u1xu:function(t,e,r){"use strict";t.exports=function(t){return+t}},uKH6:function(t,e,r){"use strict";var n=r("wX2V");t.exports=function(){if(String.prototype.matchAll)try{"".matchAll(RegExp.prototype)}catch(t){return String.prototype.matchAll}return n}},ucYh:function(t,e){var r="undefined"!=typeof requestIdleCallback;t.exports=r?requestIdleCallback:function(t){return setTimeout((function(){var e=Date.now();t({didTimeout:!1,timeRemaining:function(){return Math.max(0,50-(Date.now()-e))}})}),1)},t.exports.cancelIdleCallback=r?cancelIdleCallback:clearTimeout},uuTH:function(t,e,r){"use strict";var n=r("Lcws"),o=r("UBBE"),i=r("cCsD"),a=r("NKaP"),u=r("IFfy"),c=r("xhJ2"),s=r("6ayh"),f=r("Khql"),l=r("VbLK"),p=f("String.prototype.charAt"),y=s("%Array.prototype.indexOf%");t.exports=function(t){var e=arguments.length>1?n(arguments[1]):0;if(y&&!u(t)&&c(e)&&void 0!==t)return y.apply(this,arguments)>-1;var r=i(this),s=o(r.length);if(0===s)return!1;for(var f=e>=0?e:Math.max(0,s+e);f<s;){if(a(t,l(r)?p(r,f):r[f]))return!0;f+=1}return!1}},v3P4:function(t,e,r){"use strict";var n=r("82c2"),o=r("22yB");t.exports=function(){var t=o();return n(Array.prototype,{flat:t},{flat:function(){return Array.prototype.flat!==t}}),t}},vgOX:function(t,e,r){"use strict";var n,o="function"==typeof Map&&Map.prototype?Map:null,i="function"==typeof Set&&Set.prototype?Set:null;i||(n=function(t){return!1});var a=o?Map.prototype.has:null,u=i?Set.prototype.has:null;n||u||(n=function(t){return!1}),t.exports=n||function(t){if(!t||"object"!=typeof t)return!1;try{if(u.call(t),a)try{a.call(t)}catch(t){return!0}return t instanceof i}catch(t){}return!1}},vndB:function(t,e,r){"use strict";t.exports=function(){if("function"!=typeof Promise)throw new TypeError("`Promise.prototype.finally` requires a global `Promise` be available.")}},vzKJ:function(t,e,r){"use strict";(function(e){var n=r("hBby");t.exports=function(){return"object"==typeof e&&e&&e.Math===Math&&e.Array===Array?e:n}}).call(this,r("yLpj"))},wX2V:function(t,e,r){"use strict";var n=r("aTj1"),o=r("2GRh"),i=r("XDGy"),a=r("PyeM"),u=r("R5T6"),c=r("Ii9V"),s=r("Khql"),f=r("UVaH")(),l=r("5xAX"),p=s("String.prototype.indexOf"),y=r("bBhT"),h=function(t){var e=y();if(f&&"symbol"==typeof Symbol.matchAll){var r=i(t,Symbol.matchAll);return r===RegExp.prototype[Symbol.matchAll]&&r!==e?e:r}if(a(t))return e};t.exports=function(t){var e=c(this);if(null!=t){if(a(t)){var r="flags"in t?o(t,"flags"):l(t);if(c(r),p(u(r),"g")<0)throw new TypeError("matchAll requires a global regular expression")}var i=h(t);if(void 0!==i)return n(i,t,[e])}var s=u(e),f=new RegExp(t,"g");return n(h(f),f,[s])}},wrft:function(t,e,r){"use strict";var n=r("0yco"),o=r("1Fze");t.exports=function(t){var e=o(t);return n(e)}},xEkU:function(t,e,r){(function(e){for(var n=r("bQgK"),o="undefined"==typeof window?e:window,i=["moz","webkit"],a="AnimationFrame",u=o["request"+a],c=o["cancel"+a]||o["cancelRequest"+a],s=0;!u&&s<i.length;s++)u=o[i[s]+"Request"+a],c=o[i[s]+"Cancel"+a]||o[i[s]+"CancelRequest"+a];if(!u||!c){var f=0,l=0,p=[];u=function(t){if(0===p.length){var e=n(),r=Math.max(0,1e3/60-(e-f));f=r+e,setTimeout((function(){var t=p.slice(0);p.length=0;for(var e=0;e<t.length;e++)if(!t[e].cancelled)try{t[e].callback(f)}catch(t){setTimeout((function(){throw t}),0)}}),Math.round(r))}return p.push({handle:++l,callback:t,cancelled:!1}),l},c=function(t){for(var e=0;e<p.length;e++)p[e].handle===t&&(p[e].cancelled=!0)}}t.exports=function(t){return u.call(o,t)},t.exports.cancel=function(){c.apply(o,arguments)},t.exports.polyfill=function(t){t||(t=o),t.requestAnimationFrame=u,t.cancelAnimationFrame=c}}).call(this,r("yLpj"))},xG2L:function(t,e,r){"use strict";var n=r("6ayh"),o=n("%TypeError%"),i=n("%SyntaxError%"),a=r("oNNP"),u={"Property Descriptor":function(t,e){if("Object"!==t(e))return!1;var r={"[[Configurable]]":!0,"[[Enumerable]]":!0,"[[Get]]":!0,"[[Set]]":!0,"[[Value]]":!0,"[[Writable]]":!0};for(var n in e)if(a(e,n)&&!r[n])return!1;var i=a(e,"[[Value]]"),u=a(e,"[[Get]]")||a(e,"[[Set]]");if(i&&u)throw new o("Property Descriptors may not be both accessor and data descriptors");return!0}};t.exports=function(t,e,r,n){var a=u[e];if("function"!=typeof a)throw new i("unknown record type: "+e);if(!a(t,n))throw new o(r+" must be a "+e)}},xby5:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("UsSR"),i=r("b0r7"),a=r("aTj1"),u=r("XDGy"),c=r("1Soo"),s=r("RIFg");t.exports=function(t,e){var r=e;arguments.length<2&&(r=o({AdvanceStringIndex:i,GetMethod:u,IsArray:c,Type:s},t));var f=a(r,t);if("Object"!==s(f))throw new n("iterator must return an object");return f}},xdJO:function(t,e,r){"use strict";var n=r("6ayh")("%TypeError%"),o=r("Khql")("RegExp.prototype.exec"),i=r("aTj1"),a=r("2GRh"),u=r("hemD"),c=r("RIFg");t.exports=function(t,e){if("Object"!==c(t))throw new n("Assertion failed: `R` must be an Object");if("String"!==c(e))throw new n("Assertion failed: `S` must be a String");var r=a(t,"exec");if(u(r)){var s=i(r,t,[e]);if(null===s||"Object"===c(s))return s;throw new n('"exec" method must return `null` or an Object')}return o(t,e)}},xhJ2:function(t,e,r){"use strict";var n=Number.isNaN||function(t){return t!=t};t.exports=Number.isFinite||function(t){return"number"==typeof t&&!n(t)&&t!==1/0&&t!==-1/0}},xmva:function(t,e,r){"use strict";r("v3P4")()},xoj2:function(t,e,r){"use strict";var n=r("rQy3");t.exports=function(){return"function"==typeof Object.values?Object.values:n}},y14U:function(t,e,r){var n,o;!function(i,a){"use strict";void 0===(o="function"==typeof(n=function(){var t,e,r=Array,n=r.prototype,o=Object,i=o.prototype,a=Function,u=a.prototype,c=String,s=c.prototype,f=Number,l=f.prototype,p=n.slice,y=n.splice,h=n.push,v=n.unshift,d=n.concat,b=n.join,g=u.call,m=u.apply,w=Math.max,O=Math.min,j=i.toString,S="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag,E=Function.prototype.toString,T=/^\s*class /,x=function(t){try{var e=E.call(t).replace(/\/\/.*\n/g,"").replace(/\/\*[.\s\S]*\*\//g,"").replace(/\n/gm," ").replace(/ {2}/g," ");return T.test(e)}catch(t){return!1}},P=function(t){try{return!x(t)&&(E.call(t),!0)}catch(t){return!1}},I="[object Function]",A="[object GeneratorFunction]",_=function(t){if(!t)return!1;if("function"!=typeof t&&"object"!=typeof t)return!1;if(S)return P(t);if(x(t))return!1;var e=j.call(t);return e===I||e===A},R=RegExp.prototype.exec,M=function(t){try{return R.call(t),!0}catch(t){return!1}},N="[object RegExp]";t=function(t){return"object"==typeof t&&(S?M(t):j.call(t)===N)};var C=String.prototype.valueOf,D=function(t){try{return C.call(t),!0}catch(t){return!1}},F="[object String]";e=function(t){return"string"==typeof t||"object"==typeof t&&(S?D(t):j.call(t)===F)};var k=o.defineProperty&&function(){try{var t={};for(var e in o.defineProperty(t,"x",{enumerable:!1,value:t}),t)return!1;return t.x===t}catch(t){return!1}}(),L=(V=i.hasOwnProperty,z=k?function(t,e,r,n){!n&&e in t||o.defineProperty(t,e,{configurable:!0,enumerable:!1,writable:!0,value:r})}:function(t,e,r,n){!n&&e in t||(t[e]=r)},function(t,e,r){for(var n in e)V.call(e,n)&&z(t,n,e[n],r)}),U=function(t){var e=typeof t;return null===t||"object"!==e&&"function"!==e},B=f.isNaN||function(t){return t!=t},q={ToInteger:function(t){var e=+t;return B(e)?e=0:0!==e&&e!==1/0&&e!==-1/0&&(e=(e>0||-1)*Math.floor(Math.abs(e))),e},ToPrimitive:function(t){var e,r,n;if(U(t))return t;if(r=t.valueOf,_(r)&&(e=r.call(t),U(e)))return e;if(n=t.toString,_(n)&&(e=n.call(t),U(e)))return e;throw new TypeError},ToObject:function(t){if(null==t)throw new TypeError("can't convert "+t+" to object");return o(t)},ToUint32:function(t){return t>>>0}},G=function(){};var V,z;L(u,{bind:function(t){var e=this;if(!_(e))throw new TypeError("Function.prototype.bind called on incompatible "+e);for(var r,n=p.call(arguments,1),i=function(){if(this instanceof r){var i=m.call(e,this,d.call(n,p.call(arguments)));return o(i)===i?i:this}return m.call(e,t,d.call(n,p.call(arguments)))},u=w(0,e.length-n.length),c=[],s=0;s<u;s++)h.call(c,"$"+s);return r=a("binder","return function ("+b.call(c,",")+"){ return binder.apply(this, arguments); }")(i),e.prototype&&(G.prototype=e.prototype,r.prototype=new G,G.prototype=null),r}});var H=g.bind(i.hasOwnProperty),W=g.bind(i.toString),$=g.bind(p),K=m.bind(p);if("object"==typeof document&&document&&document.documentElement)try{$(document.documentElement.childNodes)}catch(t){var J=$,X=K;$=function(t){for(var e=[],r=t.length;r-- >0;)e[r]=t[r];return X(e,J(arguments,1))},K=function(t,e){return X($(t),e)}}var Y=g.bind(s.slice),Z=g.bind(s.split),Q=g.bind(s.indexOf),tt=g.bind(h),et=g.bind(i.propertyIsEnumerable),rt=g.bind(n.sort),nt=r.isArray||function(t){return"[object Array]"===W(t)},ot=1!==[].unshift(0);L(n,{unshift:function(){return v.apply(this,arguments),this.length}},ot),L(r,{isArray:nt});var it=o("a"),at="a"!==it[0]||!(0 in it),ut=function(t){var e=!0,r=!0,n=!1;if(t)try{t.call("foo",(function(t,r,n){"object"!=typeof n&&(e=!1)})),t.call([1],(function(){r="string"==typeof this}),"x")}catch(t){n=!0}return!!t&&!n&&e&&r};L(n,{forEach:function(t){var r,n=q.ToObject(this),o=at&&e(this)?Z(this,""):n,i=-1,a=q.ToUint32(o.length);if(arguments.length>1&&(r=arguments[1]),!_(t))throw new TypeError("Array.prototype.forEach callback must be a function");for(;++i<a;)i in o&&(void 0===r?t(o[i],i,n):t.call(r,o[i],i,n))}},!ut(n.forEach)),L(n,{map:function(t){var n,o=q.ToObject(this),i=at&&e(this)?Z(this,""):o,a=q.ToUint32(i.length),u=r(a);if(arguments.length>1&&(n=arguments[1]),!_(t))throw new TypeError("Array.prototype.map callback must be a function");for(var c=0;c<a;c++)c in i&&(u[c]=void 0===n?t(i[c],c,o):t.call(n,i[c],c,o));return u}},!ut(n.map)),L(n,{filter:function(t){var r,n,o=q.ToObject(this),i=at&&e(this)?Z(this,""):o,a=q.ToUint32(i.length),u=[];if(arguments.length>1&&(n=arguments[1]),!_(t))throw new TypeError("Array.prototype.filter callback must be a function");for(var c=0;c<a;c++)c in i&&(r=i[c],(void 0===n?t(r,c,o):t.call(n,r,c,o))&&tt(u,r));return u}},!ut(n.filter)),L(n,{every:function(t){var r,n=q.ToObject(this),o=at&&e(this)?Z(this,""):n,i=q.ToUint32(o.length);if(arguments.length>1&&(r=arguments[1]),!_(t))throw new TypeError("Array.prototype.every callback must be a function");for(var a=0;a<i;a++)if(a in o&&!(void 0===r?t(o[a],a,n):t.call(r,o[a],a,n)))return!1;return!0}},!ut(n.every)),L(n,{some:function(t){var r,n=q.ToObject(this),o=at&&e(this)?Z(this,""):n,i=q.ToUint32(o.length);if(arguments.length>1&&(r=arguments[1]),!_(t))throw new TypeError("Array.prototype.some callback must be a function");for(var a=0;a<i;a++)if(a in o&&(void 0===r?t(o[a],a,n):t.call(r,o[a],a,n)))return!0;return!1}},!ut(n.some));var ct=!1;n.reduce&&(ct="object"==typeof n.reduce.call("es5",(function(t,e,r,n){return n})));L(n,{reduce:function(t){var r=q.ToObject(this),n=at&&e(this)?Z(this,""):r,o=q.ToUint32(n.length);if(!_(t))throw new TypeError("Array.prototype.reduce callback must be a function");if(0===o&&1===arguments.length)throw new TypeError("reduce of empty array with no initial value");var i,a=0;if(arguments.length>=2)i=arguments[1];else for(;;){if(a in n){i=n[a++];break}if(++a>=o)throw new TypeError("reduce of empty array with no initial value")}for(;a<o;a++)a in n&&(i=t(i,n[a],a,r));return i}},!ct);var st=!1;n.reduceRight&&(st="object"==typeof n.reduceRight.call("es5",(function(t,e,r,n){return n})));L(n,{reduceRight:function(t){var r,n=q.ToObject(this),o=at&&e(this)?Z(this,""):n,i=q.ToUint32(o.length);if(!_(t))throw new TypeError("Array.prototype.reduceRight callback must be a function");if(0===i&&1===arguments.length)throw new TypeError("reduceRight of empty array with no initial value");var a=i-1;if(arguments.length>=2)r=arguments[1];else for(;;){if(a in o){r=o[a--];break}if(--a<0)throw new TypeError("reduceRight of empty array with no initial value")}if(a<0)return r;do{a in o&&(r=t(r,o[a],a,n))}while(a--);return r}},!st);var ft=n.indexOf&&-1!==[0,1].indexOf(1,2);L(n,{indexOf:function(t){var r=at&&e(this)?Z(this,""):q.ToObject(this),n=q.ToUint32(r.length);if(0===n)return-1;var o=0;for(arguments.length>1&&(o=q.ToInteger(arguments[1])),o=o>=0?o:w(0,n+o);o<n;o++)if(o in r&&r[o]===t)return o;return-1}},ft);var lt=n.lastIndexOf&&-1!==[0,1].lastIndexOf(0,-3);L(n,{lastIndexOf:function(t){var r=at&&e(this)?Z(this,""):q.ToObject(this),n=q.ToUint32(r.length);if(0===n)return-1;var o=n-1;for(arguments.length>1&&(o=O(o,q.ToInteger(arguments[1]))),o=o>=0?o:n-Math.abs(o);o>=0;o--)if(o in r&&t===r[o])return o;return-1}},lt);var pt=(yt=[1,2],ht=yt.splice(),2===yt.length&&nt(ht)&&0===ht.length);var yt,ht;L(n,{splice:function(t,e){return 0===arguments.length?[]:y.apply(this,arguments)}},!pt);var vt=(dt={},n.splice.call(dt,0,0,1),1===dt.length);var dt;L(n,{splice:function(t,e){if(0===arguments.length)return[];var r=arguments;return this.length=w(q.ToInteger(this.length),0),arguments.length>0&&"number"!=typeof e&&((r=$(arguments)).length<2?tt(r,this.length-t):r[1]=q.ToInteger(e)),y.apply(this,r)}},!vt);var bt=(mt=new r(1e5),mt[8]="x",mt.splice(1,1),7===mt.indexOf("x")),gt=function(){var t=[];return t[256]="a",t.splice(257,0,"b"),"a"===t[256]}();var mt;L(n,{splice:function(t,e){for(var r,n=q.ToObject(this),o=[],i=q.ToUint32(n.length),a=q.ToInteger(t),u=a<0?w(i+a,0):O(a,i),s=0===arguments.length?0:1===arguments.length?i-u:O(w(q.ToInteger(e),0),i-u),f=0;f<s;)r=c(u+f),H(n,r)&&(o[f]=n[r]),f+=1;var l,p=$(arguments,2),y=p.length;if(y<s){f=u;for(var h=i-s;f<h;)r=c(f+s),l=c(f+y),H(n,r)?n[l]=n[r]:delete n[l],f+=1;f=i;for(var v=i-s+y;f>v;)delete n[f-1],f-=1}else if(y>s)for(f=i-s;f>u;)r=c(f+s-1),l=c(f+y-1),H(n,r)?n[l]=n[r]:delete n[l],f-=1;f=u;for(var d=0;d<p.length;++d)n[f]=p[d],f+=1;return n.length=i-s+y,o}},!bt||!gt);var wt,Ot=n.join;try{wt="1,2,3"!==Array.prototype.join.call("123",",")}catch(t){wt=!0}wt&&L(n,{join:function(t){var r=void 0===t?",":t;return Ot.call(e(this)?Z(this,""):this,r)}},wt);var jt="1,2"!==[1,2].join(void 0);jt&&L(n,{join:function(t){var e=void 0===t?",":t;return Ot.call(this,e)}},jt);var St=function(t){for(var e=q.ToObject(this),r=q.ToUint32(e.length),n=0;n<arguments.length;)e[r+n]=arguments[n],n+=1;return e.length=r+n,r+n},Et=function(){var t={};return 1!==Array.prototype.push.call(t,void 0)||1!==t.length||void 0!==t[0]||!H(t,0)}();L(n,{push:function(t){return nt(this)?h.apply(this,arguments):St.apply(this,arguments)}},Et);var Tt=function(){var t=[];return 1!==t.push(void 0)||1!==t.length||void 0!==t[0]||!H(t,0)}();L(n,{push:St},Tt),L(n,{slice:function(t,r){var n=e(this)?Z(this,""):this;return K(n,arguments)}},at);var xt=function(){try{[1,2].sort(null)}catch(t){try{[1,2].sort({})}catch(t){return!1}}return!0}(),Pt=function(){try{return[1,2].sort(/a/),!1}catch(t){}return!0}(),It=function(){try{return[1,2].sort(void 0),!0}catch(t){}return!1}();L(n,{sort:function(t){if(void 0===t)return rt(this);if(!_(t))throw new TypeError("Array.prototype.sort callback must be a function");return rt(this,t)}},xt||!It||!Pt);var At=!et({toString:null},"toString"),_t=et((function(){}),"prototype"),Rt=!H("x","0"),Mt=function(t){var e=t.constructor;return e&&e.prototype===t},Nt={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0,$width:!0,$height:!0,$top:!0,$localStorage:!0},Ct=function(){if("undefined"==typeof window)return!1;for(var t in window)try{!Nt["$"+t]&&H(window,t)&&null!==window[t]&&"object"==typeof window[t]&&Mt(window[t])}catch(t){return!0}return!1}(),Dt=function(t){if("undefined"==typeof window||!Ct)return Mt(t);try{return Mt(t)}catch(t){return!1}},Ft=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],kt=Ft.length,Lt=function(t){return"[object Arguments]"===W(t)},Ut=function(t){return null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&!nt(t)&&_(t.callee)},Bt=Lt(arguments)?Lt:Ut;L(o,{keys:function(t){var r=_(t),n=Bt(t),o=null!==t&&"object"==typeof t,i=o&&e(t);if(!o&&!r&&!n)throw new TypeError("Object.keys called on a non-object");var a=[],u=_t&&r;if(i&&Rt||n)for(var s=0;s<t.length;++s)tt(a,c(s));if(!n)for(var f in t)u&&"prototype"===f||!H(t,f)||tt(a,c(f));if(At)for(var l=Dt(t),p=0;p<kt;p++){var y=Ft[p];l&&"constructor"===y||!H(t,y)||tt(a,y)}return a}});var qt=o.keys&&function(){return 2===o.keys(arguments).length}(1,2),Gt=o.keys&&function(){var t=o.keys(arguments);return 1!==arguments.length||1!==t.length||1!==t[0]}(1),Vt=o.keys;L(o,{keys:function(t){return Bt(t)?Vt($(t)):Vt(t)}},!qt||Gt);var zt,Ht,Wt=0!==new Date(-0xc782b5b342b24).getUTCMonth(),$t=new Date(-0x55d318d56a724),Kt=new Date(14496624e5),Jt="Mon, 01 Jan -45875 11:59:59 GMT"!==$t.toUTCString(),Xt=$t.getTimezoneOffset();Xt<-720?(zt="Tue Jan 02 -45875"!==$t.toDateString(),Ht=!/^Thu Dec 10 2015 \d\d:\d\d:\d\d GMT[-+]\d\d\d\d(?: |$)/.test(String(Kt))):(zt="Mon Jan 01 -45875"!==$t.toDateString(),Ht=!/^Wed Dec 09 2015 \d\d:\d\d:\d\d GMT[-+]\d\d\d\d(?: |$)/.test(String(Kt)));var Yt=g.bind(Date.prototype.getFullYear),Zt=g.bind(Date.prototype.getMonth),Qt=g.bind(Date.prototype.getDate),te=g.bind(Date.prototype.getUTCFullYear),ee=g.bind(Date.prototype.getUTCMonth),re=g.bind(Date.prototype.getUTCDate),ne=g.bind(Date.prototype.getUTCDay),oe=g.bind(Date.prototype.getUTCHours),ie=g.bind(Date.prototype.getUTCMinutes),ae=g.bind(Date.prototype.getUTCSeconds),ue=g.bind(Date.prototype.getUTCMilliseconds),ce=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],se=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],fe=function(t,e){return Qt(new Date(e,t,0))};L(Date.prototype,{getFullYear:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=Yt(this);return t<0&&Zt(this)>11?t+1:t},getMonth:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=Yt(this),e=Zt(this);return t<0&&e>11?0:e},getDate:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=Yt(this),e=Zt(this),r=Qt(this);return t<0&&e>11?12===e?r:fe(0,t+1)-r+1:r},getUTCFullYear:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=te(this);return t<0&&ee(this)>11?t+1:t},getUTCMonth:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=te(this),e=ee(this);return t<0&&e>11?0:e},getUTCDate:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=te(this),e=ee(this),r=re(this);return t<0&&e>11?12===e?r:fe(0,t+1)-r+1:r}},Wt),L(Date.prototype,{toUTCString:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=ne(this),e=re(this),r=ee(this),n=te(this),o=oe(this),i=ie(this),a=ae(this);return ce[t]+", "+(e<10?"0"+e:e)+" "+se[r]+" "+n+" "+(o<10?"0"+o:o)+":"+(i<10?"0"+i:i)+":"+(a<10?"0"+a:a)+" GMT"}},Wt||Jt),L(Date.prototype,{toDateString:function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=this.getDay(),e=this.getDate(),r=this.getMonth(),n=this.getFullYear();return ce[t]+" "+se[r]+" "+(e<10?"0"+e:e)+" "+n}},Wt||zt),(Wt||Ht)&&(Date.prototype.toString=function(){if(!(this&&this instanceof Date))throw new TypeError("this is not a Date object.");var t=this.getDay(),e=this.getDate(),r=this.getMonth(),n=this.getFullYear(),o=this.getHours(),i=this.getMinutes(),a=this.getSeconds(),u=this.getTimezoneOffset(),c=Math.floor(Math.abs(u)/60),s=Math.floor(Math.abs(u)%60);return ce[t]+" "+se[r]+" "+(e<10?"0"+e:e)+" "+n+" "+(o<10?"0"+o:o)+":"+(i<10?"0"+i:i)+":"+(a<10?"0"+a:a)+" GMT"+(u>0?"-":"+")+(c<10?"0"+c:c)+(s<10?"0"+s:s)},k&&o.defineProperty(Date.prototype,"toString",{configurable:!0,enumerable:!1,writable:!0}));var le=-621987552e5,pe="-000001",ye=Date.prototype.toISOString&&-1===new Date(le).toISOString().indexOf(pe),he=Date.prototype.toISOString&&"1969-12-31T23:59:59.999Z"!==new Date(-1).toISOString(),ve=g.bind(Date.prototype.getTime);L(Date.prototype,{toISOString:function(){if(!isFinite(this)||!isFinite(ve(this)))throw new RangeError("Date.prototype.toISOString called on non-finite value.");var t=te(this),e=ee(this);t+=Math.floor(e/12);var r=[(e=(e%12+12)%12)+1,re(this),oe(this),ie(this),ae(this)];t=(t<0?"-":t>9999?"+":"")+Y("00000"+Math.abs(t),0<=t&&t<=9999?-4:-6);for(var n=0;n<r.length;++n)r[n]=Y("00"+r[n],-2);return t+"-"+$(r,0,2).join("-")+"T"+$(r,2).join(":")+"."+Y("000"+ue(this),-3)+"Z"}},ye||he);var de=function(){try{return Date.prototype.toJSON&&null===new Date(NaN).toJSON()&&-1!==new Date(le).toJSON().indexOf(pe)&&Date.prototype.toJSON.call({toISOString:function(){return!0}})}catch(t){return!1}}();de||(Date.prototype.toJSON=function(t){var e=o(this),r=q.ToPrimitive(e);if("number"==typeof r&&!isFinite(r))return null;var n=e.toISOString;if(!_(n))throw new TypeError("toISOString property is not callable");return n.call(e)});var be=1e15===Date.parse("+033658-09-27T01:46:40.000Z"),ge=!isNaN(Date.parse("2012-04-04T24:00:00.500Z"))||!isNaN(Date.parse("2012-11-31T23:59:59.000Z"))||!isNaN(Date.parse("2012-12-31T23:59:60.000Z")),me=isNaN(Date.parse("2000-01-01T00:00:00.000Z"));if(me||ge||!be){var we=Math.pow(2,31)-1,Oe=B(new Date(1970,0,1,0,0,0,we+1).getTime());Date=function(t){var e=function(r,n,o,i,a,u,s){var f,l=arguments.length;if(this instanceof t){var p=u,y=s;if(Oe&&l>=7&&s>we){var h=Math.floor(s/we)*we,v=Math.floor(h/1e3);p+=v,y-=1e3*v}f=1===l&&c(r)===r?new t(e.parse(r)):l>=7?new t(r,n,o,i,a,p,y):l>=6?new t(r,n,o,i,a,p):l>=5?new t(r,n,o,i,a):l>=4?new t(r,n,o,i):l>=3?new t(r,n,o):l>=2?new t(r,n):l>=1?new t(r instanceof t?+r:r):new t}else f=t.apply(this,arguments);return U(f)||L(f,{constructor:e},!0),f},r=new RegExp("^(\\d{4}|[+-]\\d{6})(?:-(\\d{2})(?:-(\\d{2})(?:T(\\d{2}):(\\d{2})(?::(\\d{2})(?:(\\.\\d{1,}))?)?(Z|(?:([-+])(\\d{2}):(\\d{2})))?)?)?)?$"),n=[0,31,59,90,120,151,181,212,243,273,304,334,365],o=function(t,e){var r=e>1?1:0;return n[e]+Math.floor((t-1969+r)/4)-Math.floor((t-1901+r)/100)+Math.floor((t-1601+r)/400)+365*(t-1970)},i=function(e){var r=0,n=e;if(Oe&&n>we){var o=Math.floor(n/we)*we,i=Math.floor(o/1e3);r+=i,n-=1e3*i}return f(new t(1970,0,1,0,0,r,n))};for(var a in t)H(t,a)&&(e[a]=t[a]);L(e,{now:t.now,UTC:t.UTC},!0),e.prototype=t.prototype,L(e.prototype,{constructor:e},!0);return L(e,{parse:function(e){var n=r.exec(e);if(n){var a,u=f(n[1]),c=f(n[2]||1)-1,s=f(n[3]||1)-1,l=f(n[4]||0),p=f(n[5]||0),y=f(n[6]||0),h=Math.floor(1e3*f(n[7]||0)),v=Boolean(n[4]&&!n[8]),d="-"===n[9]?1:-1,b=f(n[10]||0),g=f(n[11]||0),m=p>0||y>0||h>0;return l<(m?24:25)&&p<60&&y<60&&h<1e3&&c>-1&&c<12&&b<24&&g<60&&s>-1&&s<o(u,c+1)-o(u,c)&&(a=1e3*(60*((a=60*(24*(o(u,c)+s)+l+b*d))+p+g*d)+y)+h,v&&(a=i(a)),-864e13<=a&&a<=864e13)?a:NaN}return t.parse.apply(this,arguments)}}),e}(Date)}Date.now||(Date.now=function(){return(new Date).getTime()});var je=l.toFixed&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0)),Se={base:1e7,size:6,data:[0,0,0,0,0,0],multiply:function(t,e){for(var r=-1,n=e;++r<Se.size;)n+=t*Se.data[r],Se.data[r]=n%Se.base,n=Math.floor(n/Se.base)},divide:function(t){for(var e=Se.size,r=0;--e>=0;)r+=Se.data[e],Se.data[e]=Math.floor(r/t),r=r%t*Se.base},numToString:function(){for(var t=Se.size,e="";--t>=0;)if(""!==e||0===t||0!==Se.data[t]){var r=c(Se.data[t]);""===e?e=r:e+=Y("0000000",0,7-r.length)+r}return e},pow:function t(e,r,n){return 0===r?n:r%2==1?t(e,r-1,n*e):t(e*e,r/2,n)},log:function(t){for(var e=0,r=t;r>=4096;)e+=12,r/=4096;for(;r>=2;)e+=1,r/=2;return e}},Ee=function(t){var e,r,n,o,i,a,u,s;if(e=f(t),(e=B(e)?0:Math.floor(e))<0||e>20)throw new RangeError("Number.toFixed called with invalid number of decimals");if(r=f(this),B(r))return"NaN";if(r<=-1e21||r>=1e21)return c(r);if(n="",r<0&&(n="-",r=-r),o="0",r>1e-21)if(a=(i=Se.log(r*Se.pow(2,69,1))-69)<0?r*Se.pow(2,-i,1):r/Se.pow(2,i,1),a*=4503599627370496,(i=52-i)>0){for(Se.multiply(0,a),u=e;u>=7;)Se.multiply(1e7,0),u-=7;for(Se.multiply(Se.pow(10,u,1),0),u=i-1;u>=23;)Se.divide(1<<23),u-=23;Se.divide(1<<u),Se.multiply(1,1),Se.divide(2),o=Se.numToString()}else Se.multiply(0,a),Se.multiply(1<<-i,0),o=Se.numToString()+Y("0.00000000000000000000",2,2+e);return o=e>0?(s=o.length)<=e?n+Y("0.0000000000000000000",0,e-s+2)+o:n+Y(o,0,s-e)+"."+Y(o,s-e):n+o};L(l,{toFixed:Ee},je);var Te=function(){try{return"1"===1..toPrecision(void 0)}catch(t){return!0}}(),xe=l.toPrecision;L(l,{toPrecision:function(t){return void 0===t?xe.call(this):xe.call(this,t)}},Te),2!=="ab".split(/(?:ab)*/).length||4!==".".split(/(.?)(.?)/).length||"t"==="tesst".split(/(s)*/)[1]||4!=="test".split(/(?:)/,-1).length||"".split(/.?/).length||".".split(/()()/).length>1?(Pe=void 0===/()??/.exec("")[1],Ie=Math.pow(2,32)-1,s.split=function(e,r){var n=String(this);if(void 0===e&&0===r)return[];if(!t(e))return Z(this,e,r);var o,i,a,u,c=[],s=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),f=0,l=new RegExp(e.source,s+"g");Pe||(o=new RegExp("^"+l.source+"$(?!\\s)",s));var p=void 0===r?Ie:q.ToUint32(r);for(i=l.exec(n);i&&!((a=i.index+i[0].length)>f&&(tt(c,Y(n,f,i.index)),!Pe&&i.length>1&&i[0].replace(o,(function(){for(var t=1;t<arguments.length-2;t++)void 0===arguments[t]&&(i[t]=void 0)})),i.length>1&&i.index<n.length&&h.apply(c,$(i,1)),u=i[0].length,f=a,c.length>=p));)l.lastIndex===i.index&&l.lastIndex++,i=l.exec(n);return f===n.length?!u&&l.test("")||tt(c,""):tt(c,Y(n,f)),c.length>p?$(c,0,p):c}):"0".split(void 0,0).length&&(s.split=function(t,e){return void 0===t&&0===e?[]:Z(this,t,e)});var Pe,Ie;var Ae=s.replace,_e=(Re=[],"x".replace(/x(.)?/g,(function(t,e){tt(Re,e)})),1===Re.length&&void 0===Re[0]);var Re;_e||(s.replace=function(e,r){var n=_(r),o=t(e)&&/\)[*?]/.test(e.source);if(n&&o){return Ae.call(this,e,(function(t){var n=arguments.length,o=e.lastIndex;e.lastIndex=0;var i=e.exec(t)||[];return e.lastIndex=o,tt(i,arguments[n-2],arguments[n-1]),r.apply(this,i)}))}return Ae.call(this,e,r)});var Me=s.substr,Ne="".substr&&"b"!=="0b".substr(-1);L(s,{substr:function(t,e){var r=t;return t<0&&(r=w(this.length+t,0)),Me.call(this,r,e)}},Ne);var Ce="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff",De="​",Fe="["+Ce+"]",ke=new RegExp("^"+Fe+Fe+"*"),Le=new RegExp(Fe+Fe+"*$"),Ue=s.trim&&(Ce.trim()||!De.trim());L(s,{trim:function(){if(null==this)throw new TypeError("can't convert "+this+" to object");return c(this).replace(ke,"").replace(Le,"")}},Ue);var Be=g.bind(String.prototype.trim),qe=s.lastIndexOf&&-1!=="abcあい".lastIndexOf("あい",2);L(s,{lastIndexOf:function(t){if(null==this)throw new TypeError("can't convert "+this+" to object");for(var e=c(this),r=c(t),n=arguments.length>1?f(arguments[1]):NaN,o=B(n)?1/0:q.ToInteger(n),i=O(w(o,0),e.length),a=r.length,u=i+a;u>0;){u=w(0,u-a);var s=Q(Y(e,u,i+a),r);if(-1!==s)return u+s}return-1}},qe);var Ge=s.lastIndexOf;L(s,{lastIndexOf:function(t){return Ge.apply(this,arguments)}},1!==s.lastIndexOf.length),(8!==parseInt(Ce+"08")||22!==parseInt(Ce+"0x16"))&&(parseInt=(Ve=parseInt,ze=/^[-+]?0[xX]/,function(t,e){var r=Be(String(t)),n=f(e)||(ze.test(r)?16:10);return Ve(r,n)}));var Ve,ze;1/parseFloat("-0")!=-1/0&&(parseFloat=(He=parseFloat,function(t){var e=Be(String(t)),r=He(e);return 0===r&&"-"===Y(e,0,1)?-0:r}));var He;if("RangeError: test"!==String(new RangeError("test"))){var We=function(){if(null==this)throw new TypeError("can't convert "+this+" to object");var t=this.name;void 0===t?t="Error":"string"!=typeof t&&(t=c(t));var e=this.message;return void 0===e?e="":"string"!=typeof e&&(e=c(e)),t?e?t+": "+e:t:e};Error.prototype.toString=We}if(k){var $e=function(t,e){if(et(t,e)){var r=Object.getOwnPropertyDescriptor(t,e);r.configurable&&(r.enumerable=!1,Object.defineProperty(t,e,r))}};$e(Error.prototype,"message"),""!==Error.prototype.message&&(Error.prototype.message=""),$e(Error.prototype,"name")}if("/a/gim"!==String(/a/gim)){var Ke=function(){var t="/"+this.source+"/";return this.global&&(t+="g"),this.ignoreCase&&(t+="i"),this.multiline&&(t+="m"),t};RegExp.prototype.toString=Ke}})?n.call(e,r,e,t):n)||(t.exports=o)}()},yBRW:function(t,e,r){"use strict";var n=r("82c2"),o=r("UMYc");t.exports=function(){var t=o();return n(Array.prototype,{map:t},{map:function(){return Array.prototype.map!==t}}),t}},yCJC:function(t,e,r){"use strict";var n=r("82c2"),o=r("l1+S");t.exports=function(){var t=o();return n(Array.prototype,{flatMap:t},{flatMap:function(){return Array.prototype.flatMap!==t}}),t}},yLpj:function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},yN6O:function(t,e,r){"use strict";var n=r("qjSr"),o=r("mJ3t"),i=r("2GRh"),a=r("wrft"),u=r("ciGR"),c=r("TU3P");t.exports=function(){var t=c(this),e=u(i(t,"length")),r=1;arguments.length>0&&void 0!==arguments[0]&&(r=a(arguments[0]));var s=n(t,0);return o(s,t,e,0,r),s}},yNSe:function(t,e,r){"use strict";r("yCJC")()},yXPU:function(t,e){function r(t,e,r,n,o,i,a){try{var u=t[i](a),c=u.value}catch(t){return void r(t)}u.done?e(c):Promise.resolve(c).then(n,o)}t.exports=function(t){return function(){var e=this,n=arguments;return new Promise((function(o,i){var a=t.apply(e,n);function u(t){r(a,o,i,u,c,"next",t)}function c(t){r(a,o,i,u,c,"throw",t)}u(void 0)}))}}},zODz:function(t,e,r){"use strict";t.exports=function(t){return"function"==typeof t&&!!t.prototype}},zWG1:function(t,e,r){"use strict";var n=r("WZeS");t.exports=function(t){return arguments.length>1?n(t,arguments[1]):n(t)}},zkC3:function(t,e,r){"use strict";var n=r("WZeS");t.exports=function(t){return arguments.length>1?n(t,arguments[1]):n(t)}},zpJY:function(t,e,r){"use strict";var n=r("UVaH")(),o=r("KUT7"),i=Object.getOwnPropertyDescriptor;t.exports=function(){if(!n||"function"!=typeof i)return null;var t=i(Symbol.prototype,"description");if(!t||"function"!=typeof t.get)return o;var e=t.get.call(Symbol());return(void 0===e||""===e)&&"a"===t.get.call(Symbol("a"))?t.get:o}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJyYXkucHJvdG90eXBlLm1hcC9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvbWlzZS5hbGxzZXR0bGVkL3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmluZy5wcm90b3R5cGUucGFkZW5kL3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC5lbnRyaWVzL3BvbHlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmcucHJvdG90eXBlLm1hdGNoYWxsL3JlZ2V4cC1tYXRjaGFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtbWFwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1zeW1ib2wvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC5mcm9tZW50cmllcy9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9haXJibmItanMtc2hpbXMvdGFyZ2V0L2VzMjAxNy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWlyYm5iLWJyb3dzZXItc2hpbXMvYnJvd3Nlci1vbmx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC81L1RvSW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Ub051bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWtleXMvaXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvSXNBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9TZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvSXNJbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3Qta2V5cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0Y2htZWRpYS1wb2x5ZmlsbC9tYXRjaE1lZGlhLmFkZExpc3RlbmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcnJheS5wcm90b3R5cGUuZmxhdC9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9HZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLXJlZ2V4L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9haXJibmItanMtc2hpbXMvdGFyZ2V0L2VzNS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Ub1Byb3BlcnR5S2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1hcmd1bWVudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FpcmJuYi1qcy1zaGltcy90YXJnZXQvZXMyMDE5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb25zb2xlLXBvbHlmaWxsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdleHAucHJvdG90eXBlLmZsYWdzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb2N1bWVudC5jb250YWlucy9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9BZGRFbnRyaWVzRnJvbUl0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9HZXRJbnRyaW5zaWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC5mcm9tZW50cmllcy9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9TcGVjaWVzQ29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvRnJvbVByb3BlcnR5RGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2xhc3NsaXN0LXBvbHlmaWxsL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXRlcmF0ZS12YWx1ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0Y2htZWRpYS1wb2x5ZmlsbC9tYXRjaE1lZGlhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9taXNlLmFsbHNldHRsZWQvcmVxdWlyZVByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlZmluZS1wcm9wZXJ0aWVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvUHJvbWlzZVJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvU2FtZVZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9haXJibmItYnJvd3Nlci1zaGltcy9kb2N1bWVudC1jb250YWlucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24tYmluZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9yZWdleFRlc3Rlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtZGF0ZS1vYmplY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JhZi9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9pc1ByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJyYXktaW5jbHVkZXMvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb21pc2UuYWxsc2V0dGxlZC9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LmZyb21lbnRyaWVzL2F1dG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhcy1zeW1ib2xzL3NoYW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L1RvUHJvcGVydHlEZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9haXJibmItanMtc2hpbXMvdGFyZ2V0L2VzMjAxOC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9jdW1lbnQuY29udGFpbnMvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnMvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2V4cC5wcm90b3R5cGUuZmxhZ3Mvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJyYXkucHJvdG90eXBlLmZsYXRtYXAvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QuZW50cmllcy9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0NyZWF0ZURhdGFQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyaW5nLnByb3RvdHlwZS5tYXRjaGFsbC9hdXRvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QuZnJvbWVudHJpZXMvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvaXNOYU4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWNhbGxhYmxlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L1JlcXVpcmVPYmplY3RDb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Z1bmN0aW9ucy1oYXZlLW5hbWVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0l0ZXJhdG9yQ2xvc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1pbnNwZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE4L1JlcXVpcmVPYmplY3RDb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb24vaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvY2FsbEJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL0RlZmluZU93blByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb2N1bWVudC5jb250YWlucy9hdXRvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE4L0lzQ29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTgvVG9JbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE4L1NhbWVWYWx1ZVplcm8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Z1bmN0aW9uLnByb3RvdHlwZS5uYW1lL3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb21pc2UucHJvdG90eXBlLmZpbmFsbHkvYXV0by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Jc0V4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FpcmJuYi1icm93c2VyLXNoaW1zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmcucHJvdG90eXBlLnBhZHN0YXJ0L2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE4L1R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FpcmJuYi1qcy1zaGltcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Jc1JlZ0V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Ub1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9UeXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0hhc1Byb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL2NhbGxCaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L09iamVjdENyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9nZXRTeW1ib2xEZXNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Ub09iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvNS9DaGVja09iamVjdENvZXJjaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtdG8tcHJpbWl0aXZlL2hlbHBlcnMvaXNQcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb24vc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9DcmVhdGVEYXRhUHJvcGVydHlPclRocm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE4L1RvTGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcnJheS5wcm90b3R5cGUubWFwL3BvbHlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMtc3ltYm9scy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvNS9UeXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0NyZWF0ZUl0ZXJSZXN1bHRPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb21pc2UucHJvdG90eXBlLmZpbmFsbHkvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9nZXRJdGVyYXRvck1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZXhwLnByb3RvdHlwZS5mbGFncy9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWlyYm5iLWpzLXNoaW1zL3RhcmdldC9lczIwMTUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NpZGUtY2hhbm5lbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtc3RyaW5nL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdleHAucHJvdG90eXBlLmZsYWdzL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLXRvLXByaW1pdGl2ZS9lczIwMTUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludGVyc2VjdGlvbi1vYnNlcnZlci9pbnRlcnNlY3Rpb24tb2JzZXJ2ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvR2V0TWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmcucHJvdG90eXBlLnBhZGVuZC9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Ub0Jvb2xlYW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvVG9VaW50MzIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludGVybmFsLXNsb3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmluZy5wcm90b3R5cGUubWF0Y2hhbGwvaGVscGVycy9SZWdFeHBTdHJpbmdJdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXRlcmF0ZS1pdGVyYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24tYmluZC9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LmVudHJpZXMvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb21pc2UuYWxsc2V0dGxlZC9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9DYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9taXNlLmFsbHNldHRsZWQvYXV0by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2xvYmFsdGhpcy9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9haXJibmItanMtc2hpbXMvdGFyZ2V0L2VzMjAyMC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9BZHZhbmNlU3RyaW5nSW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmluZy5wcm90b3R5cGUubWF0Y2hhbGwvcG9seWZpbGwtcmVnZXhwLW1hdGNoYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wZXJmb3JtYW5jZS1ub3cvbGliL3BlcmZvcm1hbmNlLW5vdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2hhdHdnLWZldGNoL2ZldGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmcucHJvdG90eXBlLnBhZHN0YXJ0L3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTgvVG9PYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L1RvTGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9ycy9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zbW9vdGhzY3JvbGwtcG9seWZpbGwvZGlzdC9zbW9vdGhzY3JvbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FpcmJuYi1qcy1zaGltcy90YXJnZXQvZXMyMDE2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnB1dC1wbGFjZWhvbGRlci1wb2x5ZmlsbC9kaXN0L21haW4ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9taXNlLnByb3RvdHlwZS5maW5hbGx5L2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE4L0lzQ2FsbGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzNS1zaGltL2VzNS1zaGFtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L09yZGluYXJ5R2V0T3duUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Z1bmN0aW9uLnByb3RvdHlwZS5uYW1lL3BvbHlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE4L1NwZWNpZXNDb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOC9Ub051bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9nZXRJbmZlcnJlZE5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dsb2JhbHRoaXMvaW1wbGVtZW50YXRpb24uYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxlbWVudC1jbG9zZXN0L2VsZW1lbnQtY2xvc2VzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9JbnZva2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvSXNEYXRhRGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Jc0NhbGxhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcnJheS1pbmNsdWRlcy9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9taXNlLnByb3RvdHlwZS5maW5hbGx5L3BvbHlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QudmFsdWVzL3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dsb2JhbHRoaXMvYXV0by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYXJyYXktbWV0aG9kLWJveGVzLXByb3Blcmx5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcnJheS5wcm90b3R5cGUuZmxhdG1hcC9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24ucHJvdG90eXBlLm5hbWUvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZvY3VzLXZpc2libGUvZGlzdC9mb2N1cy12aXNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1nZXQtaXRlcmF0b3Ivbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2hpbS1rZXlib2FyZC1ldmVudC1rZXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvSXRlcmF0b3JTdGVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0ZsYXR0ZW5JbnRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmluZy5wcm90b3R5cGUubWF0Y2hhbGwvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9jdW1lbnQuY29udGFpbnMvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb24vYXV0by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvSXRlcmF0b3JDb21wbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJyYXkucHJvdG90eXBlLm1hcC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9JdGVyYXRvclZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0FycmF5U3BlY2llc0NyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXM2LXNoaW0vZXM2LXNoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvSXNQcm9wZXJ0eUtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnMvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC52YWx1ZXMvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dpbmRvdy1sb2NhdGlvbi1vcmlnaW4vc3JjL3dpbmRvdy1sb2NhdGlvbi1vcmlnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmluZy5wcm90b3R5cGUucGFkc3RhcnQvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmluZy5wcm90b3R5cGUucGFkZW5kL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3Qta2V5cy9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9tYXhTYWZlSW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtZ2V0LWl0ZXJhdG9yL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbWEtYmFiZWw2LXBvbHlmaWxsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0l0ZXJhdG9yTmV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9HZXRWLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC81L1RvTnVtYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmcucHJvdG90eXBlLm1hdGNoYWxsL3BvbHlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yaWMtc2hpbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJyYXktaW5jbHVkZXMvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FycmF5LnByb3RvdHlwZS5mbGF0L3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLXNldC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvbWlzZS5wcm90b3R5cGUuZmluYWxseS9yZXF1aXJlUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2xvYmFsdGhpcy9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyaW5nLnByb3RvdHlwZS5tYXRjaGFsbC9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Ub0ludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JhZi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9hc3NlcnRSZWNvcmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvR2V0SXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvUmVnRXhwRXhlYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9pc0Zpbml0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJyYXkucHJvdG90eXBlLmZsYXQvYXV0by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LnZhbHVlcy9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXM1LXNoaW0vZXM1LXNoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FycmF5LnByb3RvdHlwZS5tYXAvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJyYXkucHJvdG90eXBlLmZsYXRtYXAvc2hpbS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcnJheS5wcm90b3R5cGUuZmxhdC9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJyYXkucHJvdG90eXBlLmZsYXRtYXAvYXV0by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0lzQ29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTgvVG9QcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvVG9QcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb24vcG9seWZpbGwuanMiXSwibmFtZXMiOlsiQXJyYXlTcGVjaWVzQ3JlYXRlIiwiQ2FsbCIsIkNyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3ciLCJHZXQiLCJIYXNQcm9wZXJ0eSIsIklzQ2FsbGFibGUiLCJUb1VpbnQzMiIsIlRvT2JqZWN0IiwiVG9TdHJpbmciLCJjYWxsQm91bmQiLCJpc1N0cmluZyIsImJveGVkU3RyaW5nIiwiT2JqZWN0Iiwic3BsaXRTdHJpbmciLCJzdHJTcGxpdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJjYWxsYmFja2ZuIiwiVCIsIk8iLCJ0aGlzIiwic2VsZiIsImxlbiIsImxlbmd0aCIsIlR5cGVFcnJvciIsImFyZ3VtZW50cyIsIkEiLCJrIiwiUGsiLCJrUHJlc2VudCIsImtWYWx1ZSIsIm1hcHBlZFZhbHVlIiwicmVxdWlyZVByb21pc2UiLCJnZXRQb2x5ZmlsbCIsImRlZmluZSIsInBvbHlmaWxsIiwiUHJvbWlzZSIsImFsbFNldHRsZWQiLCJTdHJpbmciLCJwcm90b3R5cGUiLCJwYWRFbmQiLCJpbXBsZW1lbnRhdGlvbiIsImVudHJpZXMiLCJTZXQiLCJTcGVjaWVzQ29uc3RydWN0b3IiLCJUb0xlbmd0aCIsIlR5cGUiLCJmbGFnc0dldHRlciIsIlJlZ0V4cFN0cmluZ0l0ZXJhdG9yIiwiT3JpZ1JlZ0V4cCIsIlJlZ0V4cCIsInN1cHBvcnRzQ29uc3RydWN0aW5nV2l0aEZsYWdzIiwicmVnZXhNYXRjaEFsbCIsInN0cmluZyIsIlIiLCJTIiwidG1wIiwiQyIsImZsYWdzIiwibWF0Y2hlciIsInNvdXJjZSIsImNvbnN0cnVjdFJlZ2V4V2l0aEZsYWdzIiwibGFzdEluZGV4IiwiZ2xvYmFsIiwiZnVsbFVuaWNvZGUiLCJDcmVhdGVSZWdFeHBTdHJpbmdJdGVyYXRvciIsImluZGV4T2YiLCJkZWZpbmVQIiwiZGVmaW5lUHJvcGVydHkiLCJnT1BEIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZGVzYyIsImNvbmZpZ3VyYWJsZSIsInZhbHVlIiwiZXhwb3J0ZWQiLCIkTWFwIiwiTWFwIiwiJFNldCIsIngiLCIkbWFwSGFzIiwiaGFzIiwiJHNldEhhcyIsImNhbGwiLCJlIiwidG9TdHIiLCJ0b1N0cmluZyIsInN5bVRvU3RyIiwiU3ltYm9sIiwic3ltU3RyaW5nUmVnZXgiLCJ2YWx1ZU9mIiwidGVzdCIsImlzU3ltYm9sT2JqZWN0IiwiZnJvbUVudHJpZXMiLCJ3aW5kb3ciLCJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwiY2FuY2VsSWRsZUNhbGxiYWNrIiwiaXRlcmF0b3IiLCJUb3VjaExpc3QiLCJBcnJheSIsIiRNYXRoIiwiR2V0SW50cmluc2ljIiwiVG9OdW1iZXIiLCIkaXNOYU4iLCIkaXNGaW5pdGUiLCIkc2lnbiIsIiRmbG9vciIsImZsb29yIiwiJGFicyIsImFicyIsIm51bWJlciIsIiRUeXBlRXJyb3IiLCIkTnVtYmVyIiwiJFJlZ0V4cCIsIiRwYXJzZUludGVnZXIiLCJyZWdleFRlc3RlciIsImlzUHJpbWl0aXZlIiwiJHN0clNsaWNlIiwiaXNCaW5hcnkiLCJpc09jdGFsIiwiaXNJbnZhbGlkSGV4TGl0ZXJhbCIsImhhc05vbldTIiwiam9pbiIsIndzIiwidHJpbVJlZ2V4IiwiJHJlcGxhY2UiLCJUb1ByaW1pdGl2ZSIsImFyZ3VtZW50IiwiTmFOIiwidHJpbW1lZCIsIiR0cmltIiwic3RyIiwiaXNBcmdzIiwiY2FsbGVlIiwiJEFycmF5IiwiaXNBcnJheSIsIklzUHJvcGVydHlLZXkiLCJQIiwiViIsIlRocm93Iiwic2xpY2UiLCJvcmlnS2V5cyIsImtleXMiLCJrZXlzU2hpbSIsIm8iLCJvcmlnaW5hbEtleXMiLCJzaGltIiwiYXJncyIsIm9iamVjdCIsIm1hdGNoTWVkaWEiLCJhZGRMaXN0ZW5lciIsImxvY2FsTWF0Y2hNZWRpYSIsImhhc01lZGlhUXVlcmllcyIsIm1hdGNoZXMiLCJpc0xpc3RlbmluZyIsInRpbWVvdXRJRCIsInF1ZXJpZXMiLCJoYW5kbGVDaGFuZ2UiLCJldnQiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiaSIsImlsIiwibXFsIiwibGlzdGVuZXJzIiwibWVkaWEiLCJqIiwiamwiLCJpbmRleCIsImxpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInB1c2giLCJyZW1vdmVMaXN0ZW5lciIsInNwbGljZSIsImZsYXQiLCJpbnNwZWN0IiwicmVnZXhFeGVjIiwiZXhlYyIsImhhc1RvU3RyaW5nVGFnIiwidG9TdHJpbmdUYWciLCJkZXNjcmlwdG9yIiwidHJ5UmVnZXhFeGVjQ2FsbCIsIiRTdHJpbmciLCJrZXkiLCJpc1N0YW5kYXJkQXJndW1lbnRzIiwiaXNMZWdhY3lBcmd1bWVudHMiLCJzdXBwb3J0c1N0YW5kYXJkQXJndW1lbnRzIiwiY29uc29sZSIsInByb3AiLCJtZXRob2QiLCJjb24iLCJkdW1teSIsInByb3BlcnRpZXMiLCJtZXRob2RzIiwic3BsaXQiLCJwb3AiLCJjYWxsQmluZCIsImZsYWdzQm91bmQiLCJkb2N1bWVudCIsImNvbnRhaW5zIiwiYm9keSIsIkdldEl0ZXJhdG9yIiwiSXRlcmF0b3JDbG9zZSIsIkl0ZXJhdG9yU3RlcCIsIkl0ZXJhdG9yVmFsdWUiLCJ0YXJnZXQiLCJpdGVyYWJsZSIsImFkZGVyIiwiaXRlcmF0b3JSZWNvcmQiLCJuZXh0IiwibmV4dEl0ZW0iLCJlcnJvciIsInYiLCIkZ09QRCIsInRocm93VHlwZUVycm9yIiwiVGhyb3dUeXBlRXJyb3IiLCJjYWxsZWVUaHJvd3MiLCJnZXQiLCJnT1BEdGhyb3dzIiwiaGFzU3ltYm9scyIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhc3luY0dlbkl0ZXJhdG9yIiwidW5kZWZpbmVkIiwiVHlwZWRBcnJheSIsIlVpbnQ4QXJyYXkiLCJJTlRSSU5TSUNTIiwiQXJyYXlCdWZmZXIiLCJmb3JFYWNoIiwidmFsdWVzIiwiYXN5bmNJdGVyYXRvciIsIkF0b21pY3MiLCJCb29sZWFuIiwiRGF0YVZpZXciLCJEYXRlIiwiZGVjb2RlVVJJIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlVVJJIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiRXJyb3IiLCJldmFsIiwiRXZhbEVycm9yIiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwiRnVuY3Rpb24iLCJJbnQ4QXJyYXkiLCJJbnQxNkFycmF5IiwiSW50MzJBcnJheSIsImlzRmluaXRlIiwiaXNOYU4iLCJKU09OIiwicGFyc2UiLCJNYXRoIiwiTnVtYmVyIiwicGFyc2VGbG9hdCIsInBhcnNlSW50IiwidGhlbiIsImFsbCIsInJlamVjdCIsInJlc29sdmUiLCJQcm94eSIsIlJhbmdlRXJyb3IiLCJSZWZlcmVuY2VFcnJvciIsIlJlZmxlY3QiLCJTaGFyZWRBcnJheUJ1ZmZlciIsIlN5bnRheEVycm9yIiwiVWludDhDbGFtcGVkQXJyYXkiLCJVaW50MTZBcnJheSIsIlVpbnQzMkFycmF5IiwiVVJJRXJyb3IiLCJXZWFrTWFwIiwiV2Vha1NldCIsInJlcGxhY2UiLCJyZVByb3BOYW1lIiwicmVFc2NhcGVDaGFyIiwic3RyaW5nVG9QYXRoIiwicmVzdWx0IiwibWF0Y2giLCJxdW90ZSIsInN1YlN0cmluZyIsImdldEJhc2VJbnRyaW5zaWMiLCJuYW1lIiwiYWxsb3dNaXNzaW5nIiwicGFydHMiLCJBZGRFbnRyaWVzRnJvbUl0ZXJhYmxlIiwiSXNBcnJheSIsIlJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJUb1Byb3BlcnR5S2V5IiwicHJvcGVydHlLZXkiLCJvYmoiLCJlbnRyeSIsImxlZ2FjeUFzc2lnbiIsIiRzcGVjaWVzIiwiSXNDb25zdHJ1Y3RvciIsImRlZmF1bHRDb25zdHJ1Y3RvciIsImNvbnN0cnVjdG9yIiwiYXNzZXJ0UmVjb3JkIiwiRGVzYyIsIndyaXRhYmxlIiwic2V0IiwiZW51bWVyYWJsZSIsImNyZWF0ZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJ2aWV3IiwiZWxlbUN0clByb3RvIiwiRWxlbWVudCIsIm9iakN0ciIsInN0clRyaW0iLCJ0cmltIiwiYXJySW5kZXhPZiIsIml0ZW0iLCJET01FeCIsInR5cGUiLCJtZXNzYWdlIiwiY29kZSIsIkRPTUV4Y2VwdGlvbiIsImNoZWNrVG9rZW5BbmRHZXRJbmRleCIsImNsYXNzTGlzdCIsInRva2VuIiwiQ2xhc3NMaXN0IiwiZWxlbSIsInRyaW1tZWRDbGFzc2VzIiwiZ2V0QXR0cmlidXRlIiwiY2xhc3NlcyIsIl91cGRhdGVDbGFzc05hbWUiLCJzZXRBdHRyaWJ1dGUiLCJjbGFzc0xpc3RQcm90byIsImNsYXNzTGlzdEdldHRlciIsImFkZCIsInRva2VucyIsImwiLCJ1cGRhdGVkIiwicmVtb3ZlIiwidG9nZ2xlIiwiZm9yY2UiLCJjbGFzc0xpc3RQcm9wRGVzYyIsImV4IiwiX19kZWZpbmVHZXR0ZXJfXyIsInRlc3RFbGVtZW50IiwiY3JlYXRlTWV0aG9kIiwib3JpZ2luYWwiLCJET01Ub2tlbkxpc3QiLCJfdG9nZ2xlIiwiZ2V0SXRlcmF0b3IiLCJpdGVyYXRlIiwic3R5bGVNZWRpYSIsImluZm8iLCJzdHlsZSIsInNjcmlwdCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaWQiLCJwYXJlbnROb2RlIiwiaW5zZXJ0QmVmb3JlIiwiaGVhZCIsImFwcGVuZENoaWxkIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImN1cnJlbnRTdHlsZSIsIm1hdGNoTWVkaXVtIiwidGV4dCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwidGV4dENvbnRlbnQiLCJ3aWR0aCIsImNvbmNhdCIsIm9yaWdEZWZpbmVQcm9wZXJ0eSIsInN1cHBvcnRzRGVzY3JpcHRvcnMiLCJfIiwiYXJlUHJvcGVydHlEZXNjcmlwdG9yc1N1cHBvcnRlZCIsInByZWRpY2F0ZSIsImZuIiwiZGVmaW5lUHJvcGVydGllcyIsIm1hcCIsInByZWRpY2F0ZXMiLCJwcm9wcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJwcm9jZXNzIiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwidGltZW91dCIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJhcnJheSIsIm5vb3AiLCJuZXh0VGljayIsImFwcGx5IiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsIm9uIiwib25jZSIsIm9mZiIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCIkUHJvbWlzZVJlc29sdmUiLCJ5IiwiYmluZCIsIiR0ZXN0IiwicmVnZXgiLCJnZXREYXkiLCJ0cnlEYXRlT2JqZWN0IiwiaW5jbHVkZXMiLCJQcm9taXNlUmVzb2x2ZSIsImdldEludHJpbnNpYyIsIml0ZW1Qcm9taXNlIiwic3RhdHVzIiwicmVhc29uIiwic3ltIiwic3ltT2JqIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInN5bXMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIlRvQm9vbGVhbiIsIk9iaiIsImdldHRlciIsInNldHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJUeXBlRXJyIiwicHJvdG8iLCJGbGF0dGVuSW50b0FycmF5IiwibWFwcGVyRnVuY3Rpb24iLCJzb3VyY2VMZW4iLCJEZWZpbmVPd25Qcm9wZXJ0eSIsIkZyb21Qcm9wZXJ0eURlc2NyaXB0b3IiLCJPcmRpbmFyeUdldE93blByb3BlcnR5IiwiSXNEYXRhRGVzY3JpcHRvciIsIklzRXh0ZW5zaWJsZSIsIlNhbWVWYWx1ZSIsIm9sZERlc2MiLCJleHRlbnNpYmxlIiwiYSIsImZuVG9TdHIiLCJjb25zdHJ1Y3RvclJlZ2V4IiwiaXNFUzZDbGFzc0ZuIiwiZm5TdHIiLCJ0cnlGdW5jdGlvbk9iamVjdCIsInN0ckNsYXNzIiwiZnVuY3Rpb25zSGF2ZU5hbWVzIiwiZnVuY3Rpb25zSGF2ZUNvbmZpZ3VyYWJsZU5hbWVzIiwiJGJpbmQiLCJib3VuZEZ1bmN0aW9uc0hhdmVOYW1lcyIsIkdldE1ldGhvZCIsImNvbXBsZXRpb24iLCJjb21wbGV0aW9uUmVjb3JkIiwiY29tcGxldGlvblRodW5rIiwiaXRlcmF0b3JSZXR1cm4iLCJpbm5lclJlc3VsdCIsImhhc01hcCIsIm1hcFNpemVEZXNjcmlwdG9yIiwibWFwU2l6ZSIsIm1hcEZvckVhY2giLCJoYXNTZXQiLCJzZXRTaXplRGVzY3JpcHRvciIsInNldFNpemUiLCJzZXRGb3JFYWNoIiwid2Vha01hcEhhcyIsIndlYWtTZXRIYXMiLCJib29sZWFuVmFsdWVPZiIsIm9iamVjdFRvU3RyaW5nIiwiYmlnSW50VmFsdWVPZiIsIkJpZ0ludCIsImluc3BlY3RDdXN0b20iLCJjdXN0b20iLCJpbnNwZWN0U3ltYm9sIiwiaXNTeW1ib2wiLCJ3cmFwUXVvdGVzIiwicyIsImRlZmF1bHRTdHlsZSIsIm9wdHMiLCJxdW90ZUNoYXIiLCJxdW90ZVN0eWxlIiwiaW5zcGVjdF8iLCJvcHRpb25zIiwiZGVwdGgiLCJzZWVuIiwibG93Ynl0ZSIsImluc3BlY3RTdHJpbmciLCJJbmZpbml0eSIsIm1heERlcHRoIiwieHMiLCJmcm9tIiwiZiIsIm0iLCJuYW1lT2YiLCJzeW1TdHJpbmciLCJtYXJrQm94ZWQiLCJIVE1MRWxlbWVudCIsIm5vZGVOYW1lIiwiaXNFbGVtZW50IiwidG9Mb3dlckNhc2UiLCJhdHRycyIsImF0dHJpYnV0ZXMiLCJjaGlsZE5vZGVzIiwiYXJyT2JqS2V5cyIsImlzRXJyb3IiLCJpc01hcCIsIm1hcFBhcnRzIiwiY29sbGVjdGlvbk9mIiwiaXNTZXQiLCJzZXRQYXJ0cyIsImlzV2Vha01hcCIsIndlYWtDb2xsZWN0aW9uT2YiLCJpc1dlYWtTZXQiLCJpc051bWJlciIsImlzQmlnSW50IiwiaXNCb29sZWFuIiwiaXNEYXRlIiwiaXNSZWdFeHAiLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsImMiLCJuIiwiY2hhckNvZGVBdCIsIjgiLCI5IiwiMTAiLCIxMiIsIjEzIiwic2l6ZSIsImlzQXJyIiwiZ2V0U3ltYm9sRGVzY3JpcHRpb24iLCIkaW5kZXhPZiIsImludHJpbnNpYyIsIiRkZWZpbmVQcm9wZXJ0eSIsIiRpc0VudW1lcmFibGUiLCJFUzVUb0ludGVnZXIiLCJmdW5jdGlvblByb3RvIiwiJE9iamVjdCIsIiRwcmV2ZW50RXh0ZW5zaW9ucyIsInByZXZlbnRFeHRlbnNpb25zIiwiJGlzRXh0ZW5zaWJsZSIsImlzRXh0ZW5zaWJsZSIsIiRzbGljZSIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJzdHJpbmdMZW5ndGgiLCJmaWxsZXIiLCJpbnRNYXhMZW5ndGgiLCJmaWxsTGVuIiwiZkxlbiIsInJlbWFpbmluZ0NvZGVVbml0cyIsInRydW5jYXRlZFN0cmluZ0ZpbGxlciIsIkVTNVR5cGUiLCIkbWF0Y2giLCJoYXNSZWdFeHBNYXRjaGVyIiwiJEZ1bmN0aW9uIiwiJGFwcGx5IiwiJGNhbGwiLCIkT2JqZWN0Q3JlYXRlIiwiJFN5bnRheEVycm9yIiwiaGFzUHJvdG8iLCJpbnRlcm5hbFNsb3RzTGlzdCIsInNsb3RzIiwiZ2V0SW5mZXJyZWROYW1lIiwic3ltYm9sIiwib3B0TWVzc2FnZSIsImRQIiwic2V0UHJvdG8iLCJzZXRQcm90b3R5cGVPZiIsImlzTWlzc2luZyIsImlzQnJva2VuIiwiZGVzY3JpcHRpb24iLCJvcmlnU3ltIiwiZW1wdHlTdHJpbmdzIiwiY3JlYXRlIiwiU3ltTmV3IiwiYm91bmRHZXR0ZXIiLCJ3cmFwcGVkR2V0dGVyIiwic3ltYm9sRGVzY3JpcHRpb24iLCJzaGltR2xvYmFsIiwiQ3JlYXRlRGF0YVByb3BlcnR5Iiwic3VjY2VzcyIsIk1BWF9TQUZFX0lOVEVHRVIiLCJUb0ludGVnZXIiLCJhcnJheU1ldGhvZEJveGVzUHJvcGVybHkiLCJvcmlnU3ltYm9sIiwiaGFzU3ltYm9sU2hhbSIsImRvbmUiLCIkaXRlcmF0b3IiLCIkc3RyaW5nU2xpY2UiLCJFUyIsInVzaW5nSXRlcmF0b3IiLCJhcnIiLCJuZXh0SW5kZXgiLCJBZHZhbmNlU3RyaW5nSW5kZXgiLCJkb3RBbGwiLCIkV2Vha01hcCIsIiRwdXNoIiwiJHdlYWtNYXBHZXQiLCIkd2Vha01hcFNldCIsIiR3ZWFrTWFwSGFzIiwiJG1hcEdldCIsIiRtYXBTZXQiLCIkd20iLCIkbSIsIiRvIiwiY2hhbm5lbCIsImFzc2VydCIsIm9iamVjdHMiLCJvYmplY3RHZXQiLCJvYmplY3RIYXMiLCJvYmplY3RTZXQiLCJzdHJWYWx1ZSIsInRyeVN0cmluZ09iamVjdCIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJ1bmljb2RlIiwic3RpY2t5IiwiX2RlZmluZVByb3BlcnRpZXMiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImlzQ2FsbGFibGUiLCJvcmRpbmFyeVRvUHJpbWl0aXZlIiwiaGludCIsIm1ldGhvZE5hbWVzIiwiZnVuYyIsImlucHV0IiwiZXhvdGljVG9QcmltIiwidG9QcmltaXRpdmUiLCJJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5IiwiaW50ZXJzZWN0aW9uUmF0aW8iLCJyZWdpc3RyeSIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiVEhST1RUTEVfVElNRU9VVCIsIlBPTExfSU5URVJWQUwiLCJVU0VfTVVUQVRJT05fT0JTRVJWRVIiLCJvYnNlcnZlIiwiX29ic2VydmF0aW9uVGFyZ2V0cyIsInNvbWUiLCJlbGVtZW50Iiwibm9kZVR5cGUiLCJfcmVnaXN0ZXJJbnN0YW5jZSIsIl9tb25pdG9ySW50ZXJzZWN0aW9ucyIsIl9jaGVja0ZvckludGVyc2VjdGlvbnMiLCJ1bm9ic2VydmUiLCJmaWx0ZXIiLCJfdW5tb25pdG9ySW50ZXJzZWN0aW9ucyIsIl91bnJlZ2lzdGVySW5zdGFuY2UiLCJkaXNjb25uZWN0IiwidGFrZVJlY29yZHMiLCJyZWNvcmRzIiwiX3F1ZXVlZEVudHJpZXMiLCJfaW5pdFRocmVzaG9sZHMiLCJvcHRfdGhyZXNob2xkIiwidGhyZXNob2xkIiwic29ydCIsInQiLCJfcGFyc2VSb290TWFyZ2luIiwib3B0X3Jvb3RNYXJnaW4iLCJtYXJnaW5zIiwibWFyZ2luIiwidW5pdCIsIl9tb25pdG9yaW5nSW50ZXJzZWN0aW9ucyIsIl9tb25pdG9yaW5nSW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImFkZEV2ZW50IiwiX2RvbU9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsImNoaWxkTGlzdCIsImNoYXJhY3RlckRhdGEiLCJzdWJ0cmVlIiwiY2xlYXJJbnRlcnZhbCIsInJlbW92ZUV2ZW50Iiwicm9vdElzSW5Eb20iLCJfcm9vdElzSW5Eb20iLCJyb290UmVjdCIsIl9nZXRSb290UmVjdCIsInRvcCIsImJvdHRvbSIsImxlZnQiLCJyaWdodCIsImhlaWdodCIsInRhcmdldFJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJyb290Q29udGFpbnNUYXJnZXQiLCJfcm9vdENvbnRhaW5zVGFyZ2V0Iiwib2xkRW50cnkiLCJpbnRlcnNlY3Rpb25SZWN0IiwiX2NvbXB1dGVUYXJnZXRBbmRSb290SW50ZXJzZWN0aW9uIiwibmV3RW50cnkiLCJ0aW1lIiwicGVyZm9ybWFuY2UiLCJub3ciLCJib3VuZGluZ0NsaWVudFJlY3QiLCJyb290Qm91bmRzIiwiX2hhc0Nyb3NzZWRUaHJlc2hvbGQiLCJpc0ludGVyc2VjdGluZyIsIl9jYWxsYmFjayIsImRpc3BsYXkiLCJyZWN0MSIsInJlY3QyIiwicGFyZW50IiwiZ2V0UGFyZW50Tm9kZSIsImF0Um9vdCIsInBhcmVudFJlY3QiLCJwYXJlbnRDb21wdXRlZFN0eWxlIiwicm9vdCIsImRvY3VtZW50RWxlbWVudCIsIm92ZXJmbG93IiwibWF4IiwibWluIiwiaHRtbCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiX2V4cGFuZFJlY3RCeVJvb3RNYXJnaW4iLCJyZWN0IiwiX3Jvb3RNYXJnaW5WYWx1ZXMiLCJuZXdSZWN0Iiwib2xkUmF0aW8iLCJuZXdSYXRpbyIsInRocmVzaG9sZHMiLCJjb250YWluc0RlZXAiLCJ0YXJnZXRBcmVhIiwiaW50ZXJzZWN0aW9uQXJlYSIsInRvRml4ZWQiLCJjYWxsYmFjayIsIm9wdF9vcHRpb25zIiwidGltZXIiLCJyb290TWFyZ2luIiwibm9kZSIsImV2ZW50Iiwib3B0X3VzZUNhcHR1cmUiLCJhdHRhY2hFdmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXRhdGNoRXZlbnQiLCJlbCIsImVyciIsImNoaWxkIiwiaG9zdCIsIkdldFYiLCJTTE9UIiwic2xvdCIsImZyZWV6ZSIsIkNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QiLCJPYmplY3RDcmVhdGUiLCJSZWdFeHBFeGVjIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJ0aGlzSW5kZXgiLCJFUlJPUl9NRVNTQUdFIiwidGhhdCIsImJvdW5kIiwiYmluZGVyIiwiYm91bmRMZW5ndGgiLCJib3VuZEFyZ3MiLCJFbXB0eSIsImVudHJ5cyIsIkYiLCJnbG9iYWxUaGlzIiwiSXNJbnRlZ2VyIiwiJGNoYXJDb2RlQXQiLCJmaXJzdCIsInNlY29uZCIsInJlZ2V4cE1hdGNoQWxsIiwibWF0Y2hBbGwiLCJnZXROYW5vU2Vjb25kcyIsImhydGltZSIsImxvYWRUaW1lIiwibW9kdWxlTG9hZFRpbWUiLCJub2RlTG9hZFRpbWUiLCJ1cFRpbWUiLCJociIsInVwdGltZSIsImdldFRpbWUiLCJmZXRjaCIsIkhlYWRlcnMiLCJhcHBlbmQiLCJub3JtYWxpemVOYW1lIiwibm9ybWFsaXplVmFsdWUiLCJsaXN0IiwiZ2V0QWxsIiwidGhpc0FyZyIsInN1cHBvcnQiLCJCbG9iIiwiUmVxdWVzdCIsImNsb25lIiwiQm9keSIsIlJlc3BvbnNlIiwiX2JvZHlJbml0Iiwic3RhdHVzVGV4dCIsImhlYWRlcnMiLCJ1cmwiLCJyZXNwb25zZSIsInJlZGlyZWN0U3RhdHVzZXMiLCJyZWRpcmVjdCIsImxvY2F0aW9uIiwiaW5pdCIsInJlcXVlc3QiLCJpc1Byb3RvdHlwZU9mIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvbmxvYWQiLCJyZXNwb25zZVVSTCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsImdldFJlc3BvbnNlSGVhZGVyIiwicmVzcG9uc2VUZXh0Iiwib25lcnJvciIsIm9udGltZW91dCIsIm9wZW4iLCJjcmVkZW50aWFscyIsIndpdGhDcmVkZW50aWFscyIsInJlc3BvbnNlVHlwZSIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIiwiY29uc3VtZWQiLCJib2R5VXNlZCIsImZpbGVSZWFkZXJSZWFkeSIsInJlYWRlciIsInJlYWRCbG9iQXNBcnJheUJ1ZmZlciIsImJsb2IiLCJGaWxlUmVhZGVyIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJfaW5pdEJvZHkiLCJfYm9keVRleHQiLCJfYm9keUJsb2IiLCJGb3JtRGF0YSIsIl9ib2R5Rm9ybURhdGEiLCJyZWplY3RlZCIsImFycmF5QnVmZmVyIiwicmVhZEFzVGV4dCIsImZvcm1EYXRhIiwiZGVjb2RlIiwianNvbiIsInVwY2FzZWQiLCJtb2RlIiwidG9VcHBlckNhc2UiLCJyZWZlcnJlciIsImZvcm0iLCJieXRlcyIsInNoaWZ0IiwiaGVhZGVyIiwiYm9keUluaXQiLCJvayIsInBhZFN0YXJ0IiwiX3R5cGVvZiIsInciLCJkIiwic2Nyb2xsIiwic2Nyb2xsVG8iLCJzY3JvbGxCeSIsImVsU2Nyb2xsIiwic2Nyb2xsRWxlbWVudCIsInNjcm9sbEludG9WaWV3Iiwic2hvdWxkQmFpbE91dCIsInNtb290aFNjcm9sbCIsInNjcm9sbFgiLCJwYWdlWE9mZnNldCIsInNjcm9sbFkiLCJwYWdlWU9mZnNldCIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJhcmcwIiwiYmVoYXZpb3IiLCJzY3JvbGxhYmxlUGFyZW50IiwiZmluZFNjcm9sbGFibGVQYXJlbnQiLCJwYXJlbnRSZWN0cyIsImNsaWVudFJlY3RzIiwiaXNCb2R5IiwiaGFzU2Nyb2xsYWJsZVNwYWNlIiwiaGFzVmlzaWJsZU92ZXJmbG93Iiwic2Nyb2xsSGVpZ2h0Iiwic2Nyb2xsV2lkdGgiLCJzdGVwIiwiY29udGV4dCIsImN1cnJlbnRYIiwiY3VycmVudFkiLCJlbGFwc2VkIiwic3RhcnRUaW1lIiwiY29zIiwiUEkiLCJzdGFydFgiLCJzdGFydFkiLCJzY3JvbGxhYmxlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaGlkZVBsYWNlaG9sZGVyT25Gb2N1cyIsImN1cnJlbnRUYXJnZXQiLCJzcmNFbGVtZW50IiwidW5mb2N1c09uQW5FbGVtZW50IiwiaW5wdXRzIiwicHJvbWlzZVJlc29sdmUiLCJPcmlnaW5hbFByb21pc2UiLCJwcm9taXNlRmluYWxseSIsIm9uRmluYWxseSIsInRoZW5GaW5hbGx5IiwiY2F0Y2hGaW5hbGx5IiwiY3JlYXRlVGhlbkZpbmFsbHkiLCJjcmVhdGVDYXRjaEZpbmFsbHkiLCJmYWN0b3J5IiwiZGVmaW5lR2V0dGVyIiwiZGVmaW5lU2V0dGVyIiwibG9va3VwR2V0dGVyIiwibG9va3VwU2V0dGVyIiwicHJvdG90eXBlT2ZPYmplY3QiLCJvd25zIiwiaXNFbnVtZXJhYmxlIiwic3VwcG9ydHNBY2Nlc3NvcnMiLCJfX2RlZmluZVNldHRlcl9fIiwiX19sb29rdXBHZXR0ZXJfXyIsIl9fbG9va3VwU2V0dGVyX18iLCJkb2VzR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yV29yayIsInNlbnRpbmVsIiwiZXhjZXB0aW9uIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yV29ya3NPbk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvckZhbGxiYWNrIiwicHJvcGVydHkiLCJub3RQcm90b3R5cGVPZk9iamVjdCIsImNyZWF0ZUVtcHR5IiwiZW1wdHkiLCJkb21haW4iLCJBY3RpdmVYT2JqZWN0Iiwic2hvdWxkVXNlQWN0aXZlWCIsInhEb2MiLCJ3cml0ZSIsImNsb3NlIiwicGFyZW50V2luZG93IiwiZ2V0RW1wdHlWaWFBY3RpdmVYIiwiaWZyYW1lIiwic3JjIiwiY29udGVudFdpbmRvdyIsInJlbW92ZUNoaWxkIiwiZ2V0RW1wdHlWaWFJRnJhbWUiLCJ0b0xvY2FsZVN0cmluZyIsImRvZXNEZWZpbmVQcm9wZXJ0eVdvcmsiLCJkZWZpbmVQcm9wZXJ0eVdvcmtzT25PYmplY3QiLCJkZWZpbmVQcm9wZXJ0eVdvcmtzT25Eb20iLCJkZWZpbmVQcm9wZXJ0eUZhbGxiYWNrIiwiZGVmaW5lUHJvcGVydGllc0ZhbGxiYWNrIiwiaGFzR2V0dGVyIiwiaGFzU2V0dGVyIiwic2VhbCIsImZyZWV6ZU9iamVjdCIsImlzU2VhbGVkIiwiaXNGcm96ZW4iLCJyZXR1cm5WYWx1ZSIsIklzUmVnRXhwIiwiVG9Qcm9wZXJ0eURlc2NyaXB0b3IiLCJhcnJheUxlbmd0aCIsInJlZ2V4TGFzdEluZGV4IiwiRWxlbWVudFByb3RvIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJzZWxlY3RvciIsImVsZW1lbnRzIiwib3duZXJEb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjbG9zZXN0IiwiJGFycmF5U2xpY2UiLCJhcmd1bWVudHNMaXN0IiwicHJvcGVybHlCb3hlc05vblN0cmljdCIsInByb3Blcmx5Qm94ZXNTdHJpY3QiLCJ0aHJld0V4Y2VwdGlvbiIsIl9fIiwiZmxhdE1hcCIsIiRmdW5jdGlvblRvU3RyaW5nIiwiJHN0cmluZ01hdGNoIiwiY2xhc3NSZWdleCIsImlzQ2xhc3MiLCJhcHBseUZvY3VzVmlzaWJsZVBvbHlmaWxsIiwic2NvcGUiLCJoYWRLZXlib2FyZEV2ZW50IiwiaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkiLCJoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQiLCJpbnB1dFR5cGVzV2hpdGVsaXN0Iiwic2VhcmNoIiwidGVsIiwiZW1haWwiLCJwYXNzd29yZCIsImRhdGUiLCJtb250aCIsIndlZWsiLCJkYXRldGltZSIsImlzVmFsaWRGb2N1c1RhcmdldCIsImFkZEZvY3VzVmlzaWJsZUNsYXNzIiwib25Qb2ludGVyRG93biIsImFkZEluaXRpYWxQb2ludGVyTW92ZUxpc3RlbmVycyIsIm9uSW5pdGlhbFBvaW50ZXJNb3ZlIiwibWV0YUtleSIsImFsdEtleSIsImN0cmxLZXkiLCJhY3RpdmVFbGVtZW50IiwidmlzaWJpbGl0eVN0YXRlIiwidGFnTmFtZSIsInJlYWRPbmx5IiwiaXNDb250ZW50RWRpdGFibGUiLCJoYXNBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJOb2RlIiwiRE9DVU1FTlRfRlJBR01FTlRfTk9ERSIsIkRPQ1VNRU5UX05PREUiLCJDdXN0b21FdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEN1c3RvbUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsInJ1bnRpbWUiLCJPcCIsIiRTeW1ib2wiLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsIndyYXAiLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJDb250ZXh0IiwiX2ludm9rZSIsInN0YXRlIiwiYXJnIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJtYWtlSW52b2tlTWV0aG9kIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImludm9rZSIsIl9fYXdhaXQiLCJ1bndyYXBwZWQiLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwicmVzZXQiLCJpdGVyYXRvck1ldGhvZCIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwiYXdyYXAiLCJhc3luYyIsIml0ZXIiLCJyZXZlcnNlIiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJjaGFyQXQiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsIktleWJvYXJkRXZlbnQiLCJXaW4iLCJTY3JvbGwiLCJTcGFjZWJhciIsIkRvd24iLCJMZWZ0IiwiUmlnaHQiLCJVcCIsIkRlbCIsIkFwcHMiLCJFc2MiLCJNdWx0aXBseSIsIkFkZCIsIlN1YnRyYWN0IiwiRGVjaW1hbCIsIkRpdmlkZSIsImluc3RhbmNlIiwiSXRlcmF0b3JDb21wbGV0ZSIsIkl0ZXJhdG9yTmV4dCIsInN0YXJ0IiwidGFyZ2V0SW5kZXgiLCJzb3VyY2VJbmRleCIsImV4aXN0cyIsInNob3VsZEZsYXR0ZW4iLCJlbGVtZW50TGVuIiwicmVnZXhwTWF0Y2hBbGxQb2x5ZmlsbCIsIm90aGVyIiwiaXRlclJlc3VsdCIsImJvdW5kTWFwU2hpbSIsIm9yaWdpbmFsQXJyYXkiLCJBcnJheUl0ZXJhdG9yIiwiX2FwcGx5IiwiX2NhbGwiLCJub3QiLCJ0aHJvd3NFcnJvciIsInZhbHVlT3JGYWxzZUlmVGhyb3dzIiwiaXNDYWxsYWJsZVdpdGhvdXROZXciLCJfZm9yRWFjaCIsIl9yZWR1Y2UiLCJyZWR1Y2UiLCJfZmlsdGVyIiwiX3NvbWUiLCJmb3JjZU92ZXJyaWRlIiwiX3RvU3RyaW5nIiwiVmFsdWUiLCJwcm94eSIsIm9yaWdpbmFsT2JqZWN0IiwidGFyZ2V0T2JqZWN0Iiwib3JpZ2luYWxEZXNjcmlwdG9yIiwicmVkZWZpbmUiLCJuZXdWYWx1ZSIsImRlZmluZUJ5RGVzY3JpcHRvciIsInByZXNlcnZlVG9TdHJpbmciLCJQcm90b3R5cGUiLCJzdXBwb3J0c1N1YmNsYXNzaW5nIiwiU3ViIiwiU3ViY2xhc3MiLCJnZXRHbG9iYWwiLCJnbG9iYWxzIiwiZ2xvYmFsSXNGaW5pdGUiLCJfaW5kZXhPZiIsIl9hcnJheUluZGV4T2ZBcHBseSIsIl9jb25jYXQiLCJfc3RyU2xpY2UiLCJfcHVzaCIsIl9wdXNoQXBwbHkiLCJfc2hpZnQiLCJfbWF4IiwiX21pbiIsIl9mbG9vciIsIl9hYnMiLCJfZXhwIiwiZXhwIiwiX2xvZyIsImxvZyIsIl9zcXJ0Iiwic3FydCIsIl9oYXNPd25Qcm9wZXJ0eSIsIk9yaWdNYXAiLCJvcmlnTWFwRGVsZXRlIiwib3JpZ01hcEdldCIsIm9yaWdNYXBIYXMiLCJvcmlnTWFwU2V0Iiwic3ltYm9sU3BlY2llcyIsInNwZWNpZXMiLCJudW1iZXJJc05hTiIsIm51bWJlcklzRmluaXRlIiwiX3NpZ24iLCJzaWduIiwiX2xvZzFwIiwiaXNBcmd1bWVudHMiLCJwcmltaXRpdmUiLCJvdmVycmlkZU5hdGl2ZSIsInJlcGxhY2VtZW50IiwiJGl0ZXJhdG9yJCIsImRvbUFsbCIsImlzTnVsbE9yVW5kZWZpbmVkIiwiVHlwZUlzT2JqZWN0IiwiVG9JbnQzMiIsImIiLCJTYW1lVmFsdWVaZXJvIiwiSXNJdGVyYWJsZSIsIml0Rm4iLCJpdCIsInAiLCJjb21wbGV0aW9uSXNUaHJvdyIsInJldHVybk1ldGhvZCIsImlubmVyRXhjZXB0aW9uIiwiQ29uc3RydWN0IiwibmV3VGFyZ2V0IiwiaXNFUzZpbnRlcm5hbCIsImNvbnN0cnVjdCIsIkNyZWF0ZUhUTUwiLCJ0YWciLCJhdHRyaWJ1dGUiLCJwMSIsImRlZmluZVdlbGxLbm93blN5bWJvbCIsInN5bWJvbFNlYXJjaCIsIm9yaWdpbmFsU2VhcmNoIiwic2VhcmNoU2hpbSIsInJlZ2V4cCIsInNlYXJjaGVyIiwic3ltYm9sUmVwbGFjZSIsIm9yaWdpbmFsUmVwbGFjZSIsInJlcGxhY2VWYWx1ZSIsInJlcGxhY2VTaGltIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlciIsInN5bWJvbFNwbGl0Iiwib3JpZ2luYWxTcGxpdCIsImxpbWl0Iiwic3BsaXRTaGltIiwic2VwYXJhdG9yIiwic3BsaXR0ZXIiLCJzeW1ib2xNYXRjaEV4aXN0cyIsInN0cmluZ01hdGNoSWdub3Jlc1N5bWJvbE1hdGNoIiwic3ltYm9sTWF0Y2giLCJvcmlnaW5hbE1hdGNoIiwibWF0Y2hTaGltIiwid3JhcENvbnN0cnVjdG9yIiwia2V5c1RvU2tpcCIsImRlZmF1bHRTcGVjaWVzR2V0dGVyIiwiYWRkRGVmYXVsdFNwZWNpZXMiLCJhZGRJdGVyYXRvciIsImltcGwiLCJjcmVhdGVEYXRhUHJvcGVydHkiLCJjcmVhdGVEYXRhUHJvcGVydHlPclRocm93IiwiZW11bGF0ZUVTNmNvbnN0cnVjdCIsImRlZmF1bHROZXdUYXJnZXQiLCJkZWZhdWx0UHJvdG8iLCJmcm9tQ29kZVBvaW50Iiwib3JpZ2luYWxGcm9tQ29kZVBvaW50IiwiY29kZVBvaW50cyIsIlN0cmluZ1NoaW1zIiwiZnJvbUNoYXJDb2RlIiwicmF3IiwiY2FsbFNpdGUiLCJjb29rZWQiLCJyYXdTdHJpbmciLCJsaXRlcmFsc2VnbWVudHMiLCJuZXh0S2V5IiwibmV4dFNlZyIsIm5leHRTdWIiLCJzdHJpbmdFbGVtZW50cyIsIjAiLCIxIiwic3RyaW5nUmVwZWF0IiwicmVwZWF0IiwidGltZXMiLCJoYWxmIiwic3RyaW5nTWF4TGVuZ3RoIiwiU3RyaW5nUHJvdG90eXBlU2hpbXMiLCJ0aGlzU3RyIiwibnVtVGltZXMiLCJzdGFydHNXaXRoIiwic2VhcmNoU3RyaW5nIiwicG9zaXRpb24iLCJzZWFyY2hTdHIiLCJlbmRzV2l0aCIsImVuZFBvc2l0aW9uIiwicG9zIiwiZW5kIiwiY29kZVBvaW50QXQiLCJzdGFydHNXaXRoUmVqZWN0c1JlZ2V4Iiwic3RhcnRzV2l0aEhhbmRsZXNJbmZpbml0eSIsInN0YXJ0c1dpdGhTdXBwb3J0c1N5bWJvbE1hdGNoIiwicmUiLCJlbmRzV2l0aFN1cHBvcnRzU3ltYm9sTWF0Y2giLCJpbmNsdWRlc1N1cHBvcnRzU3ltYm9sTWF0Y2giLCJ0cmltUmVnZXhwIiwidHJpbVNoaW0iLCJub25XUyIsIm5vbldTcmVnZXgiLCJpc0JhZEhleFJlZ2V4IiwiaGFzU3RyaW5nVHJpbUJ1ZyIsIml0ZXJhdG9yUmVzdWx0IiwiU3RyaW5nSXRlcmF0b3IiLCJfcyIsIl9pIiwic3Vic3RyIiwiQXJyYXlTaGltcyIsIml0ZW1zIiwibWFwRm4iLCJtYXBwaW5nIiwibmV4dFZhbHVlIiwiYXJyYXlMaWtlIiwib2YiLCJraW5kIiwicmV0dmFsIiwiYXJyYXlPZlN1cHBvcnRzU3ViY2xhc3NpbmciLCJGb28iLCJmb29BcnIiLCJBcnJheVByb3RvdHlwZVNoaW1zIiwiY29weVdpdGhpbiIsInJlbGF0aXZlVGFyZ2V0IiwicmVsYXRpdmVTdGFydCIsInRvIiwicmVsYXRpdmVFbmQiLCJmaW5hbEl0ZW0iLCJjb3VudCIsImRpcmVjdGlvbiIsImZpbGwiLCJmaW5kIiwiZmluZEluZGV4IiwidW5zY29wYWJsZXMiLCJvcmlnaW5hbEFycmF5UHJvdG90eXBlVmFsdWVzIiwic2VhcmNoRWxlbWVudCIsImFycmF5RnJvbVN3YWxsb3dzTmVnYXRpdmVMZW5ndGhzIiwiYXJyYXlGcm9tSGFuZGxlc0l0ZXJhYmxlcyIsImFycmF5RnJvbUhhbmRsZXNVbmRlZmluZWRNYXBGdW5jdGlvbiIsIm9yaWdBcnJheUZyb20iLCJpbnQzMnNBc09uZSIsInBvdyIsInRvTGVuZ3Roc0NvcnJlY3RseSIsInJldmVyc2VkIiwib3JpZ2luYWxGb3JFYWNoIiwiY2FsbGJhY2tGbiIsIm9yaWdpbmFsTWFwIiwib3JpZ2luYWxGaWx0ZXIiLCJvcmlnaW5hbFNvbWUiLCJldmVyeSIsIm9yaWdpbmFsRXZlcnkiLCJvcmlnaW5hbFJlZHVjZSIsInJlZHVjZVJpZ2h0Iiwib3JpZ2luYWxSZWR1Y2VSaWdodCIsImxhY2tzT2N0YWxTdXBwb3J0IiwibGFja3NCaW5hcnlTdXBwb3J0IiwidHJpbXNOb25XaGl0ZXNwYWNlIiwiT3JpZ051bWJlciIsImJpbmFyeVJlZ2V4Iiwib2N0YWxSZWdleCIsImlzQmFkSGV4IiwiTnVtYmVyU2hpbSIsInByaW1WYWx1ZSIsInJlY2VpdmVyIiwidmFsdWVPZlN1Y2NlZWRzIiwiTUFYX1ZBTFVFIiwiTUlOX1ZBTFVFIiwiTkVHQVRJVkVfSU5GSU5JVFkiLCJQT1NJVElWRV9JTkZJTklUWSIsIm1heFNhZmVJbnRlZ2VyIiwiTUlOX1NBRkVfSU5URUdFUiIsIkVQU0lMT04iLCJpc0ludGVnZXIiLCJpc1NhZmVJbnRlZ2VyIiwiRkFLRU5VTEwiLCJncG8iLCJzcG8iLCJpc0VudW1lcmFibGVPbiIsImVuc3VyZUVudW1lcmFibGUiLCJzbGljZUFyZ3MiLCJpbml0aWFsIiwiZGVzaXJlZEFyZ0NvdW50IiwiYXNzaWduVG8iLCJhc3NpZ25SZWR1Y2VyIiwic3ltYm9scyIsInNvdXJjZUtleXMiLCJPYmplY3RTaGltcyIsImFzc2lnbiIsImlzIiwiYXNzaWduSGFzUGVuZGluZ0V4Y2VwdGlvbnMiLCJ0aHJvd2VyIiwiRVM1T2JqZWN0U2hpbXMiLCJtYWdpYyIsImNoZWNrQXJncyIsIm9iamVjdEtleXNBY2NlcHRzUHJpbWl0aXZlcyIsIm9yaWdpbmFsT2JqZWN0S2V5cyIsIm9iamVjdEtleXNSZWplY3RzUmVnZXgiLCJyZWdleFJlamVjdGluZ09iamVjdEtleXMiLCJyZWdleEtleXMiLCJvYmplY3RHT1BOQWNjZXB0c1ByaW1pdGl2ZXMiLCJjYWNoZWRXaW5kb3dOYW1lcyIsIm9yaWdpbmFsT2JqZWN0R2V0T3duUHJvcGVydHlOYW1lcyIsInZhbCIsIm9iamVjdEdPUERBY2NlcHRzUHJpbWl0aXZlcyIsIm9yaWdpbmFsT2JqZWN0R2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwib2JqZWN0U2VhbEFjY2VwdHNQcmltaXRpdmVzIiwib3JpZ2luYWxPYmplY3RTZWFsIiwib2JqZWN0SXNTZWFsZWRBY2NlcHRzUHJpbWl0aXZlcyIsIm9yaWdpbmFsT2JqZWN0SXNTZWFsZWQiLCJvYmplY3RGcmVlemVBY2NlcHRzUHJpbWl0aXZlcyIsIm9yaWdpbmFsT2JqZWN0RnJlZXplIiwib2JqZWN0SXNGcm96ZW5BY2NlcHRzUHJpbWl0aXZlcyIsIm9yaWdpbmFsT2JqZWN0SXNGcm96ZW4iLCJvYmplY3RQcmV2ZW50RXh0ZW5zaW9uc0FjY2VwdHNQcmltaXRpdmVzIiwib3JpZ2luYWxPYmplY3RQcmV2ZW50RXh0ZW5zaW9ucyIsIm9iamVjdElzRXh0ZW5zaWJsZUFjY2VwdHNQcmltaXRpdmVzIiwib3JpZ2luYWxPYmplY3RJc0V4dGVuc2libGUiLCJvYmplY3RHZXRQcm90b0FjY2VwdHNQcmltaXRpdmVzIiwib3JpZ2luYWxHZXRQcm90byIsImhhc0ZsYWdzIiwicmVnRXhwRmxhZ3NHZXR0ZXIiLCJyZWdFeHBTdXBwb3J0c0ZsYWdzV2l0aFJlZ2V4IiwicmVnRXhwTmVlZHNUb1N1cHBvcnRTeW1ib2xNYXRjaCIsInJlZ2V4VG9TdHJpbmdJc0dlbmVyaWMiLCJyZWdleFRvU3RyaW5nU3VwcG9ydHNHZW5lcmljRmxhZ3MiLCJvcmlnUmVnRXhwVG9TdHJpbmciLCJzb3VyY2VEZXNjIiwibGVnYWN5U291cmNlR2V0dGVyIiwic291cmNlR2V0dGVyIiwiUmVnRXhwU2hpbSIsInBhdHRlcm4iLCJwYXR0ZXJuSXNSZWdFeHAiLCIkaW5wdXQiLCJyZWdleEdsb2JhbHMiLCJsYXN0TWF0Y2giLCJsYXN0UGFyZW4iLCJsZWZ0Q29udGV4dCIsInJpZ2h0Q29udGV4dCIsImludmVyc2VFcHNpbG9uIiwicm91bmRUaWVzVG9FdmVuIiwiQklOQVJZXzMyX0VQU0lMT04iLCJCSU5BUllfMzJfTUFYX1ZBTFVFIiwiQklOQVJZXzMyX01JTl9WQUxVRSIsIkUiLCJMT0cyRSIsIkxPRzEwRSIsIm51bWJlckNMWiIsImNseiIsIk1hdGhTaGltcyIsImFjb3NoIiwieEludlNxdWFyZWQiLCJoYWxmWCIsImFzaW5oIiwiYVNxdWFyZWQiLCJhdGFuaCIsImNicnQiLCJuZWdhdGUiLCJjbHozMiIsImNvc2giLCJleHBtMSIsInN1bSIsImh5cG90IiwibGFyZ2VzdCIsImxvZzIiLCJsb2cxMCIsImxvZzFwIiwic2luaCIsInUiLCJ0YW5oIiwidHJ1bmMiLCJpbXVsIiwiYWwiLCJibCIsImZyb3VuZCIsIndpdGhpblVMUERpc3RhbmNlIiwiZXhwZWN0ZWQiLCJkaXN0YW5jZSIsImV4cG0xT2ZUZW4iLCJvcmlnTWF0aFJvdW5kIiwicm91bmQiLCJyb3VuZEhhbmRsZXNCb3VuZGFyeUNvbmRpdGlvbnMiLCJzbWFsbGVzdFBvc2l0aXZlTnVtYmVyV2hlcmVSb3VuZEJyZWFrcyIsImxhcmdlc3RQb3NpdGl2ZU51bWJlcldoZXJlUm91bmRCcmVha3MiLCJyb3VuZERvZXNOb3RJbmNyZWFzZUludGVnZXJzIiwibnVtIiwib3JpZ0ltdWwiLCJ0aGVuYWJsZSIsIlByb21pc2VTaGltIiwiSXNQcm9taXNlIiwicHJvbWlzZSIsIl9wcm9taXNlIiwibWFrZVplcm9UaW1lb3V0IiwiUHJvbWlzZUNhcGFiaWxpdHkiLCJjYXBhYmlsaXR5IiwicG9zdE1lc3NhZ2UiLCJ0aW1lb3V0cyIsImRhdGEiLCJzdG9wUHJvcGFnYXRpb24iLCJwciIsIlByb21pc2UkcHJvdG90eXBlIiwiUHJvbWlzZSRwcm90b3R5cGUkdGhlbiIsImVucXVldWUiLCJzZXRJbW1lZGlhdGUiLCJ0YXNrIiwiUFJPTUlTRV9JREVOVElUWSIsIlBST01JU0VfVEhST1dFUiIsIlBST01JU0VfRkFLRV9DQVBBQklMSVRZIiwiZW5xdWV1ZVByb21pc2VSZWFjdGlvbkpvYiIsImhhbmRsZXIiLCJwcm9taXNlUmVhY3Rpb25Kb2IiLCJwcm9taXNlQ2FwYWJpbGl0eSIsImhhbmRsZXJSZXN1bHQiLCJmdWxmaWxsUHJvbWlzZSIsInJlYWN0aW9uTGVuZ3RoIiwiZnVsZmlsbFJlYWN0aW9uSGFuZGxlcjAiLCJyZWFjdGlvbkNhcGFiaWxpdHkwIiwicmVqZWN0UmVhY3Rpb25zMCIsImlkeCIsInJlamVjdFByb21pc2UiLCJyZWplY3RSZWFjdGlvbkhhbmRsZXIwIiwiY3JlYXRlUmVzb2x2aW5nRnVuY3Rpb25zIiwiYWxyZWFkeVJlc29sdmVkIiwicmVzb2x1dGlvbiIsInByb21pc2VSZXNvbHZlVGhlbmFibGVKb2IiLCJvcHRpbWl6ZWRUaGVuIiwicmVzb2x2aW5nRnVuY3Rpb25zIiwicmVzb2x2ZXIiLCJfcHJvbWlzZUFsbFJlc29sdmVyIiwicmVtYWluaW5nIiwiYWxyZWFkeUNhbGxlZCIsInJlc3VsdENhcGFiaWxpdHkiLCJuZXh0UHJvbWlzZSIsInJlc29sdmVFbGVtZW50IiwicGVyZm9ybVByb21pc2VBbGwiLCJlZSIsInJhY2UiLCJwZXJmb3JtUHJvbWlzZVJhY2UiLCJyZWplY3RGdW5jIiwicmVzb2x2ZUZ1bmMiLCJvblJlamVjdGVkIiwib25GdWxmaWxsZWQiLCJyZXR1cm5WYWx1ZUlzSWdub3JlZCIsImZ1bGZpbGxSZWFjdGlvbkhhbmRsZXIiLCJyZWplY3RSZWFjdGlvbkhhbmRsZXIiLCJhY2NlcHQiLCJkZWZlciIsImNoYWluIiwicHJvbWlzZVN1cHBvcnRzU3ViY2xhc3NpbmciLCJwcm9taXNlSWdub3Jlc05vbkZ1bmN0aW9uVGhlbkNhbGxiYWNrcyIsInByb21pc2VSZXF1aXJlc09iamVjdENvbnRleHQiLCJwcm9taXNlUmVzb2x2ZUJyb2tlbiIsInAyIiwiZ2V0c1RoZW5TeW5jaHJvbm91c2x5IiwiQmFkUmVzb2x2ZXJQcm9taXNlIiwiZXhlY3V0b3IiLCJoYXNCYWRSZXNvbHZlclByb21pc2UiLCJvcmlnQWxsIiwib3JpZ1JhY2UiLCJvcmlnUmVzb2x2ZSIsIm9yaWdSZWplY3QiLCJyIiwidGVzdE9yZGVyIiwicHJlc2VydmVzSW5zZXJ0aW9uT3JkZXIiLCJwcmVzZXJ2ZXNOdW1lcmljSW5zZXJ0aW9uT3JkZXIiLCJmYXN0a2V5Iiwic2tpcEluc2VydGlvbk9yZGVyQ2hlY2siLCJlbXB0eU9iamVjdCIsImFkZEl0ZXJhYmxlVG9NYXAiLCJNYXBDb25zdHJ1Y3RvciIsImFkZEl0ZXJhYmxlVG9TZXQiLCJTZXRDb25zdHJ1Y3RvciIsImNvbGxlY3Rpb25TaGltcyIsIk1hcEVudHJ5IiwiaXNSZW1vdmVkIiwiTWFwJHByb3RvdHlwZSIsInJlcXVpcmVNYXBTbG90IiwiX2VzNm1hcCIsIk1hcEl0ZXJhdG9yIiwiX2hlYWQiLCJpc01hcEl0ZXJhdG9yIiwiTWFwU2hpbSIsIl9tYXAiLCJfc2l6ZSIsIl9zdG9yYWdlIiwiZmtleSIsImNsZWFyIiwiU2V0JHByb3RvdHlwZSIsInJlcXVpcmVTZXRTbG90IiwiX2VzNnNldCIsIlNldFNoaW0iLCJlbnN1cmVNYXAiLCJkZWNvZGVLZXkiLCJoYXNGS2V5IiwiU2V0SXRlcmF0b3IiLCJlbnRpcmVTZXQiLCJpc1NldEl0ZXJhdG9yIiwiaXNHb29nbGVUcmFuc2xhdGUiLCJtYXBBY2NlcHRzQXJndW1lbnRzIiwidGVzdE1hcCIsIm1hcFVzZXNTYW1lVmFsdWVaZXJvIiwibWFwU3VwcG9ydHNDaGFpbmluZyIsInRlc3RTZXQiLCJzZXRVc2VzU2FtZVZhbHVlWmVybyIsInNldFN1cHBvcnRzQ2hhaW5pbmciLCJvcmlnU2V0QWRkIiwib3JpZ1NldEhhcyIsIm9yaWdTZXREZWwiLCJtYXBTdXBwb3J0c1N1YmNsYXNzaW5nIiwiTSIsIm1hcEZhaWxzVG9TdXBwb3J0U3ViY2xhc3NpbmciLCJtYXBSZXF1aXJlc05ldyIsInNldFN1cHBvcnRzU3ViY2xhc3NpbmciLCJzZXRGYWlsc1RvU3VwcG9ydFN1YmNsYXNzaW5nIiwic2V0UmVxdWlyZXNOZXciLCJPcmlnU2V0IiwibmV3TWFwIiwibWFwSXRlcmF0aW9uVGhyb3dzU3RvcEl0ZXJhdG9yIiwiYW5vbnltb3VzU2V0SGFzIiwidGhyb3dVbmxlc3NUYXJnZXRJc09iamVjdCIsIlJlZmxlY3RTaGltcyIsImRlbGV0ZVByb3BlcnR5Iiwib3duS2V5cyIsImNhbGxBbmRDYXRjaEV4Y2VwdGlvbiIsImludGVybmFsR2V0IiwiaW50ZXJuYWxTZXQiLCJvYmplY3REb3RHZXRQcm90b3R5cGVPZiIsIndpbGxDcmVhdGVDaXJjdWxhclByb3RvdHlwZSIsImxhc3RQcm90byIsImRlZmluZU9yT3ZlcnJpZGVSZWZsZWN0UHJvcGVydHkiLCJvcmlnaW5hbFJlZmxlY3RHZXRQcm90byIsImJhc2ljIiwiZGF0ZVRvU3RyaW5nIiwic2hpbW1lZERhdGVUb1N0cmluZyIsInN0cmluZ0hUTUxzaGltcyIsImFuY2hvciIsImJpZyIsImJsaW5rIiwiYm9sZCIsImZpeGVkIiwiZm9udGNvbG9yIiwiY29sb3IiLCJmb250c2l6ZSIsIml0YWxpY3MiLCJsaW5rIiwic21hbGwiLCJzdHJpa2UiLCJzdWIiLCJzdXAiLCJzaG91bGRPdmVyd3JpdGUiLCJvdXRwdXQiLCJxdW90ZXNDb3VudCIsIkpTT05zdHJpbmdpZmllc1N5bWJvbHMiLCJzdHJpbmdpZnkiLCJKU09Oc3RyaW5naWZ5QWNjZXB0c09iamVjdFN5bWJvbCIsIm9yaWdTdHJpbmdpZnkiLCJyZXBsYWNlRm4iLCJ3cmFwcGVkUmVwbGFjZXIiLCJwYXJzZWRWYWx1ZSIsIiRnZXRPd25OYW1lcyIsIiRnZXRTeW1ib2xzIiwiJGNvbmNhdCIsIiRyZWR1Y2UiLCJpc0VTNSIsImFjYyIsInZhbHMiLCJvcmlnaW4iLCJwcm90b2NvbCIsImhvc3RuYW1lIiwicG9ydCIsImhhc0RvbnRFbnVtQnVnIiwiaGFzUHJvdG9FbnVtQnVnIiwiZG9udEVudW1zIiwiZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUiLCJleGNsdWRlZEtleXMiLCIkYXBwbGljYXRpb25DYWNoZSIsIiRjb25zb2xlIiwiJGV4dGVybmFsIiwiJGZyYW1lIiwiJGZyYW1lRWxlbWVudCIsIiRmcmFtZXMiLCIkaW5uZXJIZWlnaHQiLCIkaW5uZXJXaWR0aCIsIiRvbm1vemZ1bGxzY3JlZW5jaGFuZ2UiLCIkb25tb3pmdWxsc2NyZWVuZXJyb3IiLCIkb3V0ZXJIZWlnaHQiLCIkb3V0ZXJXaWR0aCIsIiRwYWdlWE9mZnNldCIsIiRwYWdlWU9mZnNldCIsIiRwYXJlbnQiLCIkc2Nyb2xsTGVmdCIsIiRzY3JvbGxUb3AiLCIkc2Nyb2xsWCIsIiRzY3JvbGxZIiwiJHNlbGYiLCIkd2Via2l0SW5kZXhlZERCIiwiJHdlYmtpdFN0b3JhZ2VJbmZvIiwiJHdpbmRvdyIsImhhc0F1dG9tYXRpb25FcXVhbGl0eUJ1ZyIsImlzT2JqZWN0IiwiaXNGdW5jdGlvbiIsInRoZUtleXMiLCJza2lwUHJvdG8iLCJza2lwQ29uc3RydWN0b3IiLCJlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZUlmTm90QnVnZ3kiLCIkYXJyYXlQdXNoIiwiZ2V0QXJyYXlJdGVyYXRvciIsImFycmF5bGlrZSIsImdldE5vbkNvbGxlY3Rpb25JdGVyYXRvciIsImFkdmFuY2VTdHJpbmdJbmRleCIsIiRtYXBGb3JFYWNoIiwiJHNldEZvckVhY2giLCIkbWFwSXRlcmF0b3IiLCIkc2V0SXRlcmF0b3IiLCJnZXRTdG9wSXRlcmF0aW9uSXRlcmF0b3IiLCIkbWFwQXRBdEl0ZXJhdG9yIiwiJHNldEF0QXRJdGVyYXRvciIsImdldENvbGxlY3Rpb25JdGVyYXRvciIsIm5hdGl2ZUdldFByb3RvdHlwZU9mIiwiSW52b2tlIiwiaXNTdXBwb3J0ZWQiLCJjYiIsImRpZFRpbWVvdXQiLCJ0aW1lUmVtYWluaW5nIiwiJGNoYXJBdCIsImZyb21JbmRleCIsImdldE1hdGNoZXIiLCJtYXRjaGVyUG9seWZpbGwiLCJyeCIsInZlbmRvcnMiLCJzdWZmaXgiLCJyYWYiLCJjYWYiLCJsYXN0IiwiX25vdyIsImNwIiwiY2FuY2VsbGVkIiwiY2FuY2VsIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJhbGxvd2VkIiwiaXNEYXRhIiwiSXNBY2Nlc3NvciIsInJlY29yZFR5cGUiLCJhcmd1bWVudE5hbWUiLCJnZXRJdGVyYXRvck1ldGhvZCIsImFjdHVhbE1ldGhvZCIsImlzUmVnZXgiLCJBcnJheVByb3RvdHlwZSIsIk9iamVjdFByb3RvdHlwZSIsIkZ1bmN0aW9uUHJvdG90eXBlIiwiU3RyaW5nUHJvdG90eXBlIiwiTnVtYmVyUHJvdG90eXBlIiwiYXJyYXlfc2xpY2UiLCJhcnJheV9zcGxpY2UiLCJhcnJheV9wdXNoIiwiYXJyYXlfdW5zaGlmdCIsInVuc2hpZnQiLCJhcnJheV9jb25jYXQiLCJhcnJheV9qb2luIiwidG9fc3RyaW5nIiwic3BhY2VTdHJpcHBlZCIsImZuQ2xhc3MiLCJnZW5DbGFzcyIsInRyeVJlZ2V4RXhlYyIsInJlZ2V4Q2xhc3MiLCJzdHJpbmdDbGFzcyIsImZvcmNlQXNzaWduIiwiaXNBY3R1YWxOYU4iLCJhcnJheVNsaWNlIiwiYXJyYXlTbGljZUFwcGx5Iiwib3JpZ0FycmF5U2xpY2UiLCJvcmlnQXJyYXlTbGljZUFwcGx5Iiwic3RyU2xpY2UiLCJzdHJJbmRleE9mIiwicHVzaENhbGwiLCJpc0VudW0iLCJhcnJheVNvcnQiLCJoYXNVbnNoaWZ0UmV0dXJuVmFsdWVCdWciLCJwcm9wZXJseUJveGVzQ29udGV4dCIsInJlZHVjZUNvZXJjZXNUb09iamVjdCIsIl9fXyIsInJlZHVjZVJpZ2h0Q29lcmNlc1RvT2JqZWN0IiwiaGFzRmlyZWZveDJJbmRleE9mQnVnIiwiaGFzRmlyZWZveDJMYXN0SW5kZXhPZkJ1ZyIsImxhc3RJbmRleE9mIiwic3BsaWNlTm9vcFJldHVybnNFbXB0eUFycmF5IiwiZGVsZXRlQ291bnQiLCJzcGxpY2VXb3Jrc1dpdGhFbXB0eU9iamVjdCIsInNwbGljZVdvcmtzV2l0aExhcmdlU3BhcnNlQXJyYXlzIiwic3BsaWNlV29ya3NXaXRoU21hbGxTcGFyc2VBcnJheXMiLCJhY3R1YWxTdGFydCIsImFjdHVhbERlbGV0ZUNvdW50IiwiaXRlbUNvdW50IiwibWF4SyIsIm1pbksiLCJoYXNTdHJpbmdKb2luQnVnIiwib3JpZ2luYWxKb2luIiwic2VwIiwiaGFzSm9pblVuZGVmaW5lZEJ1ZyIsInB1c2hTaGltIiwicHVzaElzTm90R2VuZXJpYyIsInB1c2hVbmRlZmluZWRJc1dlaXJkIiwic29ydElnbm9yZXNOb25GdW5jdGlvbnMiLCJlMiIsInNvcnRUaHJvd3NPblJlZ2V4Iiwic29ydElnbm9yZXNVbmRlZmluZWQiLCJjb21wYXJlRm4iLCJoYXNTdHJpbmdFbnVtQnVnIiwiJHdpZHRoIiwiJGhlaWdodCIsIiR0b3AiLCIkbG9jYWxTdG9yYWdlIiwiZG9udEVudW1zTGVuZ3RoIiwiaXNGbiIsImlzU3RyIiwiZG9udEVudW0iLCJrZXlzV29ya3NXaXRoQXJndW1lbnRzIiwia2V5c0hhc0FyZ3VtZW50c0xlbmd0aEJ1ZyIsImFyZ0tleXMiLCJoYXNUb0RhdGVTdHJpbmdGb3JtYXRCdWciLCJoYXNUb1N0cmluZ0Zvcm1hdEJ1ZyIsImhhc05lZ2F0aXZlTW9udGhZZWFyQnVnIiwiZ2V0VVRDTW9udGgiLCJhTmVnYXRpdmVUZXN0RGF0ZSIsImFQb3NpdGl2ZVRlc3REYXRlIiwiaGFzVG9VVENTdHJpbmdGb3JtYXRCdWciLCJ0b1VUQ1N0cmluZyIsInRpbWVab25lT2Zmc2V0IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJ0b0RhdGVTdHJpbmciLCJvcmlnaW5hbEdldEZ1bGxZZWFyIiwiZ2V0RnVsbFllYXIiLCJvcmlnaW5hbEdldE1vbnRoIiwiZ2V0TW9udGgiLCJvcmlnaW5hbEdldERhdGUiLCJnZXREYXRlIiwib3JpZ2luYWxHZXRVVENGdWxsWWVhciIsImdldFVUQ0Z1bGxZZWFyIiwib3JpZ2luYWxHZXRVVENNb250aCIsIm9yaWdpbmFsR2V0VVRDRGF0ZSIsImdldFVUQ0RhdGUiLCJvcmlnaW5hbEdldFVUQ0RheSIsImdldFVUQ0RheSIsIm9yaWdpbmFsR2V0VVRDSG91cnMiLCJnZXRVVENIb3VycyIsIm9yaWdpbmFsR2V0VVRDTWludXRlcyIsImdldFVUQ01pbnV0ZXMiLCJvcmlnaW5hbEdldFVUQ1NlY29uZHMiLCJnZXRVVENTZWNvbmRzIiwib3JpZ2luYWxHZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJkYXlOYW1lIiwibW9udGhOYW1lIiwiZGF5c0luTW9udGgiLCJ5ZWFyIiwiZGF5IiwiaG91ciIsIm1pbnV0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJ0aW1lem9uZU9mZnNldCIsImhvdXJzT2Zmc2V0IiwibWludXRlc09mZnNldCIsIm5lZ2F0aXZlRGF0ZSIsIm5lZ2F0aXZlWWVhclN0cmluZyIsImhhc05lZ2F0aXZlRGF0ZUJ1ZyIsInRvSVNPU3RyaW5nIiwiaGFzU2FmYXJpNTFEYXRlQnVnIiwiZGF0ZVRvSlNPTklzU3VwcG9ydGVkIiwidG9KU09OIiwidHYiLCJ0b0lTTyIsInN1cHBvcnRzRXh0ZW5kZWRZZWFycyIsImFjY2VwdHNJbnZhbGlkRGF0ZXMiLCJkb2VzTm90UGFyc2VZMktOZXdZZWFyIiwibWF4U2FmZVVuc2lnbmVkMzJCaXQiLCJoYXNTYWZhcmlTaWduZWRJbnRCdWciLCJOYXRpdmVEYXRlIiwiRGF0ZVNoaW0iLCJZIiwiRCIsImgiLCJtcyIsInNlY29uZHMiLCJtaWxsaXMiLCJtc1RvU2hpZnQiLCJzVG9TaGlmdCIsImlzb0RhdGVFeHByZXNzaW9uIiwibW9udGhzIiwiZGF5RnJvbU1vbnRoIiwidG9VVEMiLCJVVEMiLCJtaWxsaXNlY29uZCIsImlzTG9jYWxUaW1lIiwic2lnbk9mZnNldCIsImhvdXJPZmZzZXQiLCJtaW51dGVPZmZzZXQiLCJoYXNNaW51dGVzT3JTZWNvbmRzT3JNaWxsaXNlY29uZHMiLCJoYXNUb0ZpeGVkQnVncyIsInRvRml4ZWRIZWxwZXJzIiwiYmFzZSIsIm11bHRpcGx5IiwiYzIiLCJkaXZpZGUiLCJudW1Ub1N0cmluZyIsIngyIiwidG9GaXhlZFNoaW0iLCJmcmFjdGlvbkRpZ2l0cyIsInoiLCJoYXNUb1ByZWNpc2lvblVuZGVmaW5lZEJ1ZyIsInRvUHJlY2lzaW9uIiwib3JpZ2luYWxUb1ByZWNpc2lvbiIsInByZWNpc2lvbiIsImNvbXBsaWFudEV4ZWNOcGNnIiwibWF4U2FmZTMyQml0SW50Iiwic2VwYXJhdG9yMiIsImxhc3RMZW5ndGgiLCJsYXN0TGFzdEluZGV4Iiwic2VwYXJhdG9yQ29weSIsInNwbGl0TGltaXQiLCJzdHJfcmVwbGFjZSIsInJlcGxhY2VSZXBvcnRzR3JvdXBzQ29ycmVjdGx5IiwiZ3JvdXBzIiwiZ3JvdXAiLCJoYXNDYXB0dXJpbmdHcm91cHMiLCJvcmlnaW5hbExhc3RJbmRleCIsInN0cmluZ19zdWJzdHIiLCJoYXNOZWdhdGl2ZVN1YnN0ckJ1ZyIsIm5vcm1hbGl6ZWRTdGFydCIsInplcm9XaWR0aCIsIndzUmVnZXhDaGFycyIsInRyaW1CZWdpblJlZ2V4cCIsInRyaW1FbmRSZWdleHAiLCJoYXNUcmltV2hpdGVzcGFjZUJ1ZyIsImhhc0xhc3RJbmRleEJ1ZyIsIm51bVBvcyIsInNlYXJjaExlbiIsIm9yaWdpbmFsTGFzdEluZGV4T2YiLCJvcmlnUGFyc2VJbnQiLCJoZXhSZWdleCIsInJhZGl4IiwiZGVmYXVsdGVkUmFkaXgiLCJvcmlnUGFyc2VGbG9hdCIsImlucHV0U3RyaW5nIiwiZXJyb3JUb1N0cmluZ1NoaW0iLCJtc2ciLCJlbnN1cmVOb25FbnVtZXJhYmxlIiwicmVnZXhUb1N0cmluZyIsImciLCJkZXB0aE51bSIsImFzeW5jR2VuZXJhdG9yU3RlcCIsImdlbiIsIl9uZXh0IiwiX3Rocm93IiwiZW1wdHlTeW1ib2xEZXNjIl0sIm1hcHBpbmdzIjoicUdBRUEsSUFBSUEsRUFBcUIsRUFBUSxRQUM3QkMsRUFBTyxFQUFRLFFBQ2ZDLEVBQTRCLEVBQVEsUUFDcENDLEVBQU0sRUFBUSxRQUNkQyxFQUFjLEVBQVEsUUFDdEJDLEVBQWEsRUFBUSxRQUNyQkMsRUFB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VUFBVUYsT0FBUyxFQUNmeW1CLEVBQVlGLEVBQU9ybUIsVUFBVSxJQUU5QnVtQixFQUFZRixLLGtDQ1JwQixJQUFJRSxFQUFjLEVBQVEsUUFJMUJqbkIsRUFBT0MsUUFBVSxTQUFxQjhtQixHQUNyQyxPQUFJcm1CLFVBQVVGLE9BQVMsRUFDZnltQixFQUFZRixFQUFPcm1CLFVBQVUsSUFFOUJ1bUIsRUFBWUYsSyxrQ0NScEIsSUFBSXBhLEVBQWEsRUFBUSxPQUFSLEdBRWJqTCxFQUFpQixFQUFRLFFBQ3pCNEIsRUFBT3pELE9BQU8wRCx5QkFFbEJ2RCxFQUFPQyxRQUFVLFdBQ2hCLElBQUswTSxHQUE4QixtQkFBVHJKLEVBQ3pCLE9BQU8sS0FHUixJQUFJRSxFQUFPRixFQUFLa0IsT0FBT2hELFVBQVcsZUFDbEMsSUFBS2dDLEdBQTRCLG1CQUFiQSxFQUFLaUosSUFDeEIsT0FBTy9LLEVBR1IsSUFBSTIyRCxFQUFrQjcwRCxFQUFLaUosSUFBSXRJLEtBQUtLLFVBRXBDLFlBRGdELElBQXBCNnpELEdBQXVELEtBQXBCQSxJQUNULE1BQS9CNzBELEVBQUtpSixJQUFJdEksS0FBS0ssT0FBTyxNQUdyQ2hCLEVBQUtpSixJQUZKL0siLCJmaWxlIjoidmVuZG9ycy5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBBcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0FycmF5U3BlY2llc0NyZWF0ZScpO1xudmFyIENhbGwgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0NhbGwnKTtcbnZhciBDcmVhdGVEYXRhUHJvcGVydHlPclRocm93ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9DcmVhdGVEYXRhUHJvcGVydHlPclRocm93Jyk7XG52YXIgR2V0ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9HZXQnKTtcbnZhciBIYXNQcm9wZXJ0eSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvSGFzUHJvcGVydHknKTtcbnZhciBJc0NhbGxhYmxlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Jc0NhbGxhYmxlJyk7XG52YXIgVG9VaW50MzIgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1RvVWludDMyJyk7XG52YXIgVG9PYmplY3QgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1RvT2JqZWN0Jyk7XG52YXIgVG9TdHJpbmcgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1RvU3RyaW5nJyk7XG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvaGVscGVycy9jYWxsQm91bmQnKTtcbnZhciBpc1N0cmluZyA9IHJlcXVpcmUoJ2lzLXN0cmluZycpO1xuXG4vLyBDaGVjayBmYWlsdXJlIG9mIGJ5LWluZGV4IGFjY2VzcyBvZiBzdHJpbmcgY2hhcmFjdGVycyAoSUUgPCA5KSBhbmQgZmFpbHVyZSBvZiBgMCBpbiBib3hlZFN0cmluZ2AgKFJoaW5vKVxudmFyIGJveGVkU3RyaW5nID0gT2JqZWN0KCdhJyk7XG52YXIgc3BsaXRTdHJpbmcgPSBib3hlZFN0cmluZ1swXSAhPT0gJ2EnIHx8ICEoMCBpbiBib3hlZFN0cmluZyk7XG5cbnZhciBzdHJTcGxpdCA9IGNhbGxCb3VuZCgnU3RyaW5nLnByb3RvdHlwZS5zcGxpdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuKSB7XG5cdHZhciBPID0gVG9PYmplY3QodGhpcyk7XG5cdHZhciBzZWxmID0gc3BsaXRTdHJpbmcgJiYgaXNTdHJpbmcoTykgPyBzdHJTcGxpdChPLCAnJykgOiBPO1xuXHR2YXIgbGVuID0gVG9VaW50MzIoc2VsZi5sZW5ndGgpO1xuXG5cdC8vIElmIG5vIGNhbGxiYWNrIGZ1bmN0aW9uIG9yIGlmIGNhbGxiYWNrIGlzIG5vdCBhIGNhbGxhYmxlIGZ1bmN0aW9uXG5cdGlmICghSXNDYWxsYWJsZShjYWxsYmFja2ZuKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5LnByb3RvdHlwZS5tYXAgY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cdH1cblxuXHR2YXIgVDtcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG5cdFx0VCA9IGFyZ3VtZW50c1sxXTtcblx0fVxuXG5cdHZhciBBID0gQXJyYXlTcGVjaWVzQ3JlYXRlKE8sIGxlbik7XG5cdHZhciBrID0gMDtcblx0d2hpbGUgKGsgPCBsZW4pIHtcblx0XHR2YXIgUGsgPSBUb1N0cmluZyhrKTtcblx0XHR2YXIga1ByZXNlbnQgPSBIYXNQcm9wZXJ0eShPLCBQayk7XG5cdFx0aWYgKGtQcmVzZW50KSB7XG5cdFx0XHR2YXIga1ZhbHVlID0gR2V0KE8sIFBrKTtcblx0XHRcdHZhciBtYXBwZWRWYWx1ZSA9IENhbGwoY2FsbGJhY2tmbiwgVCwgW2tWYWx1ZSwgaywgT10pO1xuXHRcdFx0Q3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdyhBLCBQaywgbWFwcGVkVmFsdWUpO1xuXHRcdH1cblx0XHRrICs9IDE7XG5cdH1cblxuXHRyZXR1cm4gQTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZXF1aXJlUHJvbWlzZSA9IHJlcXVpcmUoJy4vcmVxdWlyZVByb21pc2UnKTtcblxudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbUFsbFNldHRsZWQoKSB7XG5cdHJlcXVpcmVQcm9taXNlKCk7XG5cblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKFByb21pc2UsIHsgYWxsU2V0dGxlZDogcG9seWZpbGwgfSwge1xuXHRcdGFsbFNldHRsZWQ6IGZ1bmN0aW9uIHRlc3RBbGxTZXR0bGVkKCkge1xuXHRcdFx0cmV0dXJuIFByb21pc2UuYWxsU2V0dGxlZCAhPT0gcG9seWZpbGw7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbVBhZEVuZCgpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIHsgcGFkRW5kOiBwb2x5ZmlsbCB9LCB7XG5cdFx0cGFkRW5kOiBmdW5jdGlvbiB0ZXN0UGFkRW5kKCkge1xuXHRcdFx0cmV0dXJuIFN0cmluZy5wcm90b3R5cGUucGFkRW5kICE9PSBwb2x5ZmlsbDtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdHJldHVybiB0eXBlb2YgT2JqZWN0LmVudHJpZXMgPT09ICdmdW5jdGlvbicgPyBPYmplY3QuZW50cmllcyA6IGltcGxlbWVudGF0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gdmFyIENvbnN0cnVjdCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvQ29uc3RydWN0Jyk7XG52YXIgR2V0ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9HZXQnKTtcbnZhciBTZXQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1NldCcpO1xudmFyIFNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvU3BlY2llc0NvbnN0cnVjdG9yJyk7XG52YXIgVG9MZW5ndGggPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1RvTGVuZ3RoJyk7XG52YXIgVG9TdHJpbmcgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1RvU3RyaW5nJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVHlwZScpO1xudmFyIGZsYWdzR2V0dGVyID0gcmVxdWlyZSgncmVnZXhwLnByb3RvdHlwZS5mbGFncycpO1xuXG52YXIgUmVnRXhwU3RyaW5nSXRlcmF0b3IgPSByZXF1aXJlKCcuL2hlbHBlcnMvUmVnRXhwU3RyaW5nSXRlcmF0b3InKTtcbnZhciBPcmlnUmVnRXhwID0gUmVnRXhwO1xuXG52YXIgQ3JlYXRlUmVnRXhwU3RyaW5nSXRlcmF0b3IgPSBmdW5jdGlvbiBDcmVhdGVSZWdFeHBTdHJpbmdJdGVyYXRvcihSLCBTLCBnbG9iYWwsIGZ1bGxVbmljb2RlKSB7XG5cdGlmIChUeXBlKFMpICE9PSAnU3RyaW5nJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiU1wiIHZhbHVlIG11c3QgYmUgYSBTdHJpbmcnKTtcblx0fVxuXHRpZiAoVHlwZShnbG9iYWwpICE9PSAnQm9vbGVhbicpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdcImdsb2JhbFwiIHZhbHVlIG11c3QgYmUgYSBCb29sZWFuJyk7XG5cdH1cblx0aWYgKFR5cGUoZnVsbFVuaWNvZGUpICE9PSAnQm9vbGVhbicpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdcImZ1bGxVbmljb2RlXCIgdmFsdWUgbXVzdCBiZSBhIEJvb2xlYW4nKTtcblx0fVxuXG5cdHZhciBpdGVyYXRvciA9IG5ldyBSZWdFeHBTdHJpbmdJdGVyYXRvcihSLCBTLCBnbG9iYWwsIGZ1bGxVbmljb2RlKTtcblx0cmV0dXJuIGl0ZXJhdG9yO1xufTtcblxudmFyIHN1cHBvcnRzQ29uc3RydWN0aW5nV2l0aEZsYWdzID0gJ2ZsYWdzJyBpbiBSZWdFeHAucHJvdG90eXBlO1xuXG52YXIgY29uc3RydWN0UmVnZXhXaXRoRmxhZ3MgPSBmdW5jdGlvbiBjb25zdHJ1Y3RSZWdleChDLCBSKSB7XG5cdHZhciBtYXRjaGVyO1xuXHQvLyB3b3JrYXJvdW5kIGZvciBvbGRlciBlbmdpbmVzIHRoYXQgbGFjayBSZWdFeHAucHJvdG90eXBlLmZsYWdzXG5cdHZhciBmbGFncyA9ICdmbGFncycgaW4gUiA/IEdldChSLCAnZmxhZ3MnKSA6IFRvU3RyaW5nKGZsYWdzR2V0dGVyKFIpKTtcblx0aWYgKHN1cHBvcnRzQ29uc3RydWN0aW5nV2l0aEZsYWdzICYmIHR5cGVvZiBmbGFncyA9PT0gJ3N0cmluZycpIHtcblx0XHRtYXRjaGVyID0gbmV3IEMoUiwgZmxhZ3MpO1xuXHR9IGVsc2UgaWYgKEMgPT09IE9yaWdSZWdFeHApIHtcblx0XHQvLyB3b3JrYXJvdW5kIGZvciBvbGRlciBlbmdpbmVzIHRoYXQgY2FuIG5vdCBjb25zdHJ1Y3QgYSBSZWdFeHAgd2l0aCBmbGFnc1xuXHRcdG1hdGNoZXIgPSBuZXcgQyhSLnNvdXJjZSwgZmxhZ3MpO1xuXHR9IGVsc2Uge1xuXHRcdG1hdGNoZXIgPSBuZXcgQyhSLCBmbGFncyk7XG5cdH1cblx0cmV0dXJuIHsgZmxhZ3M6IGZsYWdzLCBtYXRjaGVyOiBtYXRjaGVyIH07XG59O1xuXG52YXIgcmVnZXhNYXRjaEFsbCA9IGZ1bmN0aW9uIFN5bWJvbE1hdGNoQWxsKHN0cmluZykge1xuXHR2YXIgUiA9IHRoaXM7XG5cdGlmIChUeXBlKFIpICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1widGhpc1wiIHZhbHVlIG11c3QgYmUgYW4gT2JqZWN0Jyk7XG5cdH1cblx0dmFyIFMgPSBUb1N0cmluZyhzdHJpbmcpO1xuXHR2YXIgQyA9IFNwZWNpZXNDb25zdHJ1Y3RvcihSLCBPcmlnUmVnRXhwKTtcblxuXHR2YXIgdG1wID0gY29uc3RydWN0UmVnZXhXaXRoRmxhZ3MoQywgUik7XG5cdC8vIHZhciBmbGFncyA9IFRvU3RyaW5nKEdldChSLCAnZmxhZ3MnKSk7XG5cdHZhciBmbGFncyA9IHRtcC5mbGFncztcblx0Ly8gdmFyIG1hdGNoZXIgPSBDb25zdHJ1Y3QoQywgW1IsIGZsYWdzXSk7XG5cdHZhciBtYXRjaGVyID0gdG1wLm1hdGNoZXI7XG5cblx0dmFyIGxhc3RJbmRleCA9IFRvTGVuZ3RoKEdldChSLCAnbGFzdEluZGV4JykpO1xuXHRTZXQobWF0Y2hlciwgJ2xhc3RJbmRleCcsIGxhc3RJbmRleCwgdHJ1ZSk7XG5cdHZhciBnbG9iYWwgPSBmbGFncy5pbmRleE9mKCdnJykgPiAtMTtcblx0dmFyIGZ1bGxVbmljb2RlID0gZmxhZ3MuaW5kZXhPZigndScpID4gLTE7XG5cdHJldHVybiBDcmVhdGVSZWdFeHBTdHJpbmdJdGVyYXRvcihtYXRjaGVyLCBTLCBnbG9iYWwsIGZ1bGxVbmljb2RlKTtcbn07XG5cbnZhciBkZWZpbmVQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5pZiAoZGVmaW5lUCAmJiBnT1BEKSB7XG5cdHZhciBkZXNjID0gZ09QRChyZWdleE1hdGNoQWxsLCAnbmFtZScpO1xuXHRpZiAoZGVzYyAmJiBkZXNjLmNvbmZpZ3VyYWJsZSkge1xuXHRcdGRlZmluZVAocmVnZXhNYXRjaEFsbCwgJ25hbWUnLCB7IHZhbHVlOiAnW1N5bWJvbC5tYXRjaEFsbF0nIH0pO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVnZXhNYXRjaEFsbDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRNYXAgPSB0eXBlb2YgTWFwID09PSAnZnVuY3Rpb24nICYmIE1hcC5wcm90b3R5cGUgPyBNYXAgOiBudWxsO1xudmFyICRTZXQgPSB0eXBlb2YgU2V0ID09PSAnZnVuY3Rpb24nICYmIFNldC5wcm90b3R5cGUgPyBTZXQgOiBudWxsO1xuXG52YXIgZXhwb3J0ZWQ7XG5cbmlmICghJE1hcCkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcblx0ZXhwb3J0ZWQgPSBmdW5jdGlvbiBpc01hcCh4KSB7XG5cdFx0Ly8gYE1hcGAgaXMgbm90IHByZXNlbnQgaW4gdGhpcyBlbnZpcm9ubWVudC5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbnZhciAkbWFwSGFzID0gJE1hcCA/IE1hcC5wcm90b3R5cGUuaGFzIDogbnVsbDtcbnZhciAkc2V0SGFzID0gJFNldCA/IFNldC5wcm90b3R5cGUuaGFzIDogbnVsbDtcbmlmICghZXhwb3J0ZWQgJiYgISRtYXBIYXMpIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5cdGV4cG9ydGVkID0gZnVuY3Rpb24gaXNNYXAoeCkge1xuXHRcdC8vIGBNYXBgIGRvZXMgbm90IGhhdmUgYSBgaGFzYCBtZXRob2Rcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZWQgfHwgZnVuY3Rpb24gaXNNYXAoeCkge1xuXHRpZiAoIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHRyeSB7XG5cdFx0JG1hcEhhcy5jYWxsKHgpO1xuXHRcdGlmICgkc2V0SGFzKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHQkc2V0SGFzLmNhbGwoeCk7XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4geCBpbnN0YW5jZW9mICRNYXA7IC8vIGNvcmUtanMgd29ya2Fyb3VuZCwgcHJlLXYyLjUuMFxuXHR9IGNhdGNoIChlKSB7fVxuXHRyZXR1cm4gZmFsc2U7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scycpKCk7XG5cbmlmIChoYXNTeW1ib2xzKSB7XG5cdHZhciBzeW1Ub1N0ciA9IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmc7XG5cdHZhciBzeW1TdHJpbmdSZWdleCA9IC9eU3ltYm9sXFwoLipcXCkkLztcblx0dmFyIGlzU3ltYm9sT2JqZWN0ID0gZnVuY3Rpb24gaXNSZWFsU3ltYm9sT2JqZWN0KHZhbHVlKSB7XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZS52YWx1ZU9mKCkgIT09ICdzeW1ib2wnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiBzeW1TdHJpbmdSZWdleC50ZXN0KHN5bVRvU3RyLmNhbGwodmFsdWUpKTtcblx0fTtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N5bWJvbCcpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRpZiAodG9TdHIuY2FsbCh2YWx1ZSkgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gaXNTeW1ib2xPYmplY3QodmFsdWUpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH07XG59IGVsc2Uge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcblx0XHQvLyB0aGlzIGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgU3ltYm9scy5cblx0XHRyZXR1cm4gZmFsc2UgJiYgdmFsdWU7XG5cdH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1FbnRyaWVzKCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoT2JqZWN0LCB7IGZyb21FbnRyaWVzOiBwb2x5ZmlsbCB9LCB7XG5cdFx0ZnJvbUVudHJpZXM6IGZ1bmN0aW9uIHRlc3RFbnRyaWVzKCkge1xuXHRcdFx0cmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyAhPT0gcG9seWZpbGw7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gT2JqZWN0LnZhbHVlcy9PYmplY3QuZW50cmllcyBhcmUgc3RhZ2UgNCwgaW4gRVMyMDE3XG5yZXF1aXJlKCdvYmplY3QudmFsdWVzL3NoaW0nKSgpO1xucmVxdWlyZSgnb2JqZWN0LmVudHJpZXMvc2hpbScpKCk7XG5cbi8vIFN0cmluZyNwYWRTdGFydC9TdHJpbmcjcGFkRW5kIGFyZSBzdGFnZSA0LCBpbiBFUzIwMTdcbnJlcXVpcmUoJ3N0cmluZy5wcm90b3R5cGUucGFkc3RhcnQvc2hpbScpKCk7XG5yZXF1aXJlKCdzdHJpbmcucHJvdG90eXBlLnBhZGVuZC9zaGltJykoKTtcblxuLy8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgaXMgc3RhZ2UgNCwgaW4gRVMyMDE3XG5yZXF1aXJlKCdvYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9ycy9zaGltJykoKTtcblxucmVxdWlyZSgnLi9lczIwMTgnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogZXNsaW50IGdsb2JhbC1yZXF1aXJlOiAwICovXG5cbi8vIEZpeGVzIHN1cGVyLWNvbnN0cnVjdG9yIGNhbGxzIGluIElFOS8xMFxucmVxdWlyZSgnaW1hLWJhYmVsNi1wb2x5ZmlsbCcpO1xuXG4vLyBkb2N1bWVudC5jb250YWlucyBwb2x5ZmlsbFxucmVxdWlyZSgnLi9kb2N1bWVudC1jb250YWlucycpO1xuXG4vLyBjb25zb2xlLiogcG9seWZpbGwgZm9yIG9sZCBicm93c2Vyc1xucmVxdWlyZSgnY29uc29sZS1wb2x5ZmlsbCcpO1xuXG5yZXF1aXJlKCd3aGF0d2ctZmV0Y2gnKTtcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIC8vIEVsZW1lbnQuY2xhc3NMaXN0IHBvbHlmaWxsXG4gIHJlcXVpcmUoJ2NsYXNzbGlzdC1wb2x5ZmlsbCcpO1xuXG4gIC8vIEVsZW1lbnQuY2xvc2VzdCBwb2x5ZmlsbFxuICByZXF1aXJlKCdlbGVtZW50LWNsb3Nlc3QnKTtcblxuICAvLyBQb2x5ZmlsbCBmb3Igc21vb3RoIHNjcm9sbGluZyBiZWhhdmlvclxuICByZXF1aXJlKCdzbW9vdGhzY3JvbGwtcG9seWZpbGwnKS5wb2x5ZmlsbCgpO1xuXG4gIC8vIFBvbHlmaWxsIHdpbmRvdy5tYXRjaE1lZGlhIChwcmltYXJpbHkgZm9yIElFOSlcbiAgcmVxdWlyZSgnbWF0Y2htZWRpYS1wb2x5ZmlsbCcpO1xuICByZXF1aXJlKCdtYXRjaG1lZGlhLXBvbHlmaWxsL21hdGNoTWVkaWEuYWRkTGlzdGVuZXInKTtcblxuICAvLyBQb2x5ZmlsbCB3aW5kb3cubG9jYXRpb24ub3JpZ2luIChmb3IgSUUgPCAxMSlcbiAgcmVxdWlyZSgnd2luZG93LWxvY2F0aW9uLW9yaWdpbicpO1xuXG4gIC8vIGZvciA8PSBJRSA5LCBPcGVyYSBtaW5pXG4gIHJlcXVpcmUoJ2lucHV0LXBsYWNlaG9sZGVyLXBvbHlmaWxsJyk7XG5cbiAgcmVxdWlyZSgnaW50ZXJzZWN0aW9uLW9ic2VydmVyJyk7XG5cbiAgLy8gS2V5Ym9hcmRFdmVudC5rZXkgc2hpbVxuICByZXF1aXJlKCdzaGltLWtleWJvYXJkLWV2ZW50LWtleScpO1xufVxuXG4vLyA6Zm9jdXMtdmlzaWJsZSBzaGltXG5yZXF1aXJlKCdmb2N1cy12aXNpYmxlJyk7XG5cbnJlcXVpcmUoJ3JhZi9wb2x5ZmlsbCcpO1xuXG5nbG9iYWwucmVxdWVzdElkbGVDYWxsYmFjayA9IHJlcXVpcmUoJ3JpYy1zaGltJyk7XG5cbmdsb2JhbC5jYW5jZWxJZGxlQ2FsbGJhY2sgPSBnbG9iYWwucmVxdWVzdElkbGVDYWxsYmFjay5jYW5jZWxJZGxlQ2FsbGJhY2s7XG5cbnZhciBoYXNTeW1ib2xzID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3I7XG5cbi8qIGdsb2JhbHMgVG91Y2hMaXN0ICovXG5pZiAoaGFzU3ltYm9scyAmJiB0eXBlb2YgVG91Y2hMaXN0ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBUb3VjaExpc3QucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gIT09ICdmdW5jdGlvbicpIHtcbiAgVG91Y2hMaXN0LnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gQXJyYXkucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRNYXRoID0gR2V0SW50cmluc2ljKCclTWF0aCUnKTtcblxudmFyIFRvTnVtYmVyID0gcmVxdWlyZSgnLi9Ub051bWJlcicpO1xudmFyICRpc05hTiA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNOYU4nKTtcbnZhciAkaXNGaW5pdGUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzRmluaXRlJyk7XG52YXIgJHNpZ24gPSByZXF1aXJlKCcuLi9oZWxwZXJzL3NpZ24nKTtcblxudmFyICRmbG9vciA9ICRNYXRoLmZsb29yO1xudmFyICRhYnMgPSAkTWF0aC5hYnM7XG5cbi8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy05LjRcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb0ludGVnZXIodmFsdWUpIHtcblx0dmFyIG51bWJlciA9IFRvTnVtYmVyKHZhbHVlKTtcblx0aWYgKCRpc05hTihudW1iZXIpKSB7IHJldHVybiAwOyB9XG5cdGlmIChudW1iZXIgPT09IDAgfHwgISRpc0Zpbml0ZShudW1iZXIpKSB7IHJldHVybiBudW1iZXI7IH1cblx0cmV0dXJuICRzaWduKG51bWJlcikgKiAkZmxvb3IoJGFicyhudW1iZXIpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG52YXIgJE51bWJlciA9IEdldEludHJpbnNpYygnJU51bWJlciUnKTtcbnZhciAkUmVnRXhwID0gR2V0SW50cmluc2ljKCclUmVnRXhwJScpO1xudmFyICRwYXJzZUludGVnZXIgPSBHZXRJbnRyaW5zaWMoJyVwYXJzZUludCUnKTtcblxudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY2FsbEJvdW5kJyk7XG52YXIgcmVnZXhUZXN0ZXIgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3JlZ2V4VGVzdGVyJyk7XG52YXIgaXNQcmltaXRpdmUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzUHJpbWl0aXZlJyk7XG5cbnZhciAkc3RyU2xpY2UgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuc2xpY2UnKTtcbnZhciBpc0JpbmFyeSA9IHJlZ2V4VGVzdGVyKC9eMGJbMDFdKyQvaSk7XG52YXIgaXNPY3RhbCA9IHJlZ2V4VGVzdGVyKC9eMG9bMC03XSskL2kpO1xudmFyIGlzSW52YWxpZEhleExpdGVyYWwgPSByZWdleFRlc3RlcigvXlstK10weFswLTlhLWZdKyQvaSk7XG52YXIgbm9uV1MgPSBbJ1xcdTAwODUnLCAnXFx1MjAwYicsICdcXHVmZmZlJ10uam9pbignJyk7XG52YXIgbm9uV1NyZWdleCA9IG5ldyAkUmVnRXhwKCdbJyArIG5vbldTICsgJ10nLCAnZycpO1xudmFyIGhhc05vbldTID0gcmVnZXhUZXN0ZXIobm9uV1NyZWdleCk7XG5cbi8vIHdoaXRlc3BhY2UgZnJvbTogaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTUuNS40LjIwXG4vLyBpbXBsZW1lbnRhdGlvbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9ibG9iL3YzLjQuMC9lczUtc2hpbS5qcyNMMTMwNC1MMTMyNFxudmFyIHdzID0gW1xuXHQnXFx4MDlcXHgwQVxceDBCXFx4MENcXHgwRFxceDIwXFx4QTBcXHUxNjgwXFx1MTgwRVxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDMnLFxuXHQnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjgnLFxuXHQnXFx1MjAyOVxcdUZFRkYnXG5dLmpvaW4oJycpO1xudmFyIHRyaW1SZWdleCA9IG5ldyBSZWdFeHAoJyheWycgKyB3cyArICddKyl8KFsnICsgd3MgKyAnXSskKScsICdnJyk7XG52YXIgJHJlcGxhY2UgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUucmVwbGFjZScpO1xudmFyICR0cmltID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdHJldHVybiAkcmVwbGFjZSh2YWx1ZSwgdHJpbVJlZ2V4LCAnJyk7XG59O1xuXG52YXIgVG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL1RvUHJpbWl0aXZlJyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9udW1iZXJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb051bWJlcihhcmd1bWVudCkge1xuXHR2YXIgdmFsdWUgPSBpc1ByaW1pdGl2ZShhcmd1bWVudCkgPyBhcmd1bWVudCA6IFRvUHJpbWl0aXZlKGFyZ3VtZW50LCAkTnVtYmVyKTtcblx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N5bWJvbCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgYSBTeW1ib2wgdmFsdWUgdG8gYSBudW1iZXInKTtcblx0fVxuXHRpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuXHRcdGlmIChpc0JpbmFyeSh2YWx1ZSkpIHtcblx0XHRcdHJldHVybiBUb051bWJlcigkcGFyc2VJbnRlZ2VyKCRzdHJTbGljZSh2YWx1ZSwgMiksIDIpKTtcblx0XHR9IGVsc2UgaWYgKGlzT2N0YWwodmFsdWUpKSB7XG5cdFx0XHRyZXR1cm4gVG9OdW1iZXIoJHBhcnNlSW50ZWdlcigkc3RyU2xpY2UodmFsdWUsIDIpLCA4KSk7XG5cdFx0fSBlbHNlIGlmIChoYXNOb25XUyh2YWx1ZSkgfHwgaXNJbnZhbGlkSGV4TGl0ZXJhbCh2YWx1ZSkpIHtcblx0XHRcdHJldHVybiBOYU47XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciB0cmltbWVkID0gJHRyaW0odmFsdWUpO1xuXHRcdFx0aWYgKHRyaW1tZWQgIT09IHZhbHVlKSB7XG5cdFx0XHRcdHJldHVybiBUb051bWJlcih0cmltbWVkKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuICROdW1iZXIodmFsdWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuXHR2YXIgc3RyID0gdG9TdHIuY2FsbCh2YWx1ZSk7XG5cdHZhciBpc0FyZ3MgPSBzdHIgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXHRpZiAoIWlzQXJncykge1xuXHRcdGlzQXJncyA9IHN0ciAhPT0gJ1tvYmplY3QgQXJyYXldJyAmJlxuXHRcdFx0dmFsdWUgIT09IG51bGwgJiZcblx0XHRcdHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcblx0XHRcdHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09ICdudW1iZXInICYmXG5cdFx0XHR2YWx1ZS5sZW5ndGggPj0gMCAmJlxuXHRcdFx0dG9TdHIuY2FsbCh2YWx1ZS5jYWxsZWUpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXHR9XG5cdHJldHVybiBpc0FyZ3M7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkQXJyYXkgPSBHZXRJbnRyaW5zaWMoJyVBcnJheSUnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGdsb2JhbC1yZXF1aXJlXG52YXIgdG9TdHIgPSAhJEFycmF5LmlzQXJyYXkgJiYgcmVxdWlyZSgnLi4vaGVscGVycy9jYWxsQm91bmQnKSgnT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZycpO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWlzYXJyYXlcblxubW9kdWxlLmV4cG9ydHMgPSAkQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBJc0FycmF5KGFyZ3VtZW50KSB7XG5cdHJldHVybiB0b1N0cihhcmd1bWVudCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgSXNQcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4vSXNQcm9wZXJ0eUtleScpO1xudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXNldC1vLXAtdi10aHJvd1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFNldChPLCBQLCBWLCBUaHJvdykge1xuXHRpZiAoVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogYE9gIG11c3QgYmUgYW4gT2JqZWN0Jyk7XG5cdH1cblx0aWYgKCFJc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGBQYCBtdXN0IGJlIGEgUHJvcGVydHkgS2V5Jyk7XG5cdH1cblx0aWYgKFR5cGUoVGhyb3cpICE9PSAnQm9vbGVhbicpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogYFRocm93YCBtdXN0IGJlIGEgQm9vbGVhbicpO1xuXHR9XG5cdGlmIChUaHJvdykge1xuXHRcdE9bUF0gPSBWOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gZWxzZSB7XG5cdFx0dHJ5IHtcblx0XHRcdE9bUF0gPSBWOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJE1hdGggPSBHZXRJbnRyaW5zaWMoJyVNYXRoJScpO1xuXG52YXIgJGZsb29yID0gJE1hdGguZmxvb3I7XG52YXIgJGFicyA9ICRNYXRoLmFicztcblxudmFyICRpc05hTiA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNOYU4nKTtcbnZhciAkaXNGaW5pdGUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzRmluaXRlJyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaXNpbnRlZ2VyXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSXNJbnRlZ2VyKGFyZ3VtZW50KSB7XG5cdGlmICh0eXBlb2YgYXJndW1lbnQgIT09ICdudW1iZXInIHx8ICRpc05hTihhcmd1bWVudCkgfHwgISRpc0Zpbml0ZShhcmd1bWVudCkpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0dmFyIGFicyA9ICRhYnMoYXJndW1lbnQpO1xuXHRyZXR1cm4gJGZsb29yKGFicykgPT09IGFicztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciBpc0FyZ3MgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyk7XG5cbnZhciBvcmlnS2V5cyA9IE9iamVjdC5rZXlzO1xudmFyIGtleXNTaGltID0gb3JpZ0tleXMgPyBmdW5jdGlvbiBrZXlzKG8pIHsgcmV0dXJuIG9yaWdLZXlzKG8pOyB9IDogcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG52YXIgb3JpZ2luYWxLZXlzID0gT2JqZWN0LmtleXM7XG5cbmtleXNTaGltLnNoaW0gPSBmdW5jdGlvbiBzaGltT2JqZWN0S2V5cygpIHtcblx0aWYgKE9iamVjdC5rZXlzKSB7XG5cdFx0dmFyIGtleXNXb3Jrc1dpdGhBcmd1bWVudHMgPSAoZnVuY3Rpb24gKCkge1xuXHRcdFx0Ly8gU2FmYXJpIDUuMCBidWdcblx0XHRcdHZhciBhcmdzID0gT2JqZWN0LmtleXMoYXJndW1lbnRzKTtcblx0XHRcdHJldHVybiBhcmdzICYmIGFyZ3MubGVuZ3RoID09PSBhcmd1bWVudHMubGVuZ3RoO1xuXHRcdH0oMSwgMikpO1xuXHRcdGlmICgha2V5c1dvcmtzV2l0aEFyZ3VtZW50cykge1xuXHRcdFx0T2JqZWN0LmtleXMgPSBmdW5jdGlvbiBrZXlzKG9iamVjdCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZ1bmMtbmFtZS1tYXRjaGluZ1xuXHRcdFx0XHRpZiAoaXNBcmdzKG9iamVjdCkpIHtcblx0XHRcdFx0XHRyZXR1cm4gb3JpZ2luYWxLZXlzKHNsaWNlLmNhbGwob2JqZWN0KSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG9yaWdpbmFsS2V5cyhvYmplY3QpO1xuXHRcdFx0fTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0T2JqZWN0LmtleXMgPSBrZXlzU2hpbTtcblx0fVxuXHRyZXR1cm4gT2JqZWN0LmtleXMgfHwga2V5c1NoaW07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXNTaGltO1xuIiwiLyohIG1hdGNoTWVkaWEoKSBwb2x5ZmlsbCBhZGRMaXN0ZW5lci9yZW1vdmVMaXN0ZW5lciBleHRlbnNpb24uIEF1dGhvciAmIGNvcHlyaWdodCAoYykgMjAxMjogU2NvdHQgSmVobC4gTUlUIGxpY2Vuc2UgKi9cbihmdW5jdGlvbigpe1xuICAgIC8vIEJhaWwgb3V0IGZvciBicm93c2VycyB0aGF0IGhhdmUgYWRkTGlzdGVuZXIgc3VwcG9ydFxuICAgIGlmICh3aW5kb3cubWF0Y2hNZWRpYSAmJiB3aW5kb3cubWF0Y2hNZWRpYSgnYWxsJykuYWRkTGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsb2NhbE1hdGNoTWVkaWEgPSB3aW5kb3cubWF0Y2hNZWRpYSxcbiAgICAgICAgaGFzTWVkaWFRdWVyaWVzID0gbG9jYWxNYXRjaE1lZGlhKCdvbmx5IGFsbCcpLm1hdGNoZXMsXG4gICAgICAgIGlzTGlzdGVuaW5nICAgICA9IGZhbHNlLFxuICAgICAgICB0aW1lb3V0SUQgICAgICAgPSAwLCAgICAvLyBzZXRUaW1lb3V0IGZvciBkZWJvdW5jaW5nICdoYW5kbGVDaGFuZ2UnXG4gICAgICAgIHF1ZXJpZXMgICAgICAgICA9IFtdLCAgIC8vIENvbnRhaW5zIGVhY2ggJ21xbCcgYW5kIGFzc29jaWF0ZWQgJ2xpc3RlbmVycycgaWYgJ2FkZExpc3RlbmVyJyBpcyB1c2VkXG4gICAgICAgIGhhbmRsZUNoYW5nZSAgICA9IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgICAgLy8gRGVib3VuY2VcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SUQpO1xuXG4gICAgICAgICAgICB0aW1lb3V0SUQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IHF1ZXJpZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbXFsICAgICAgICAgPSBxdWVyaWVzW2ldLm1xbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVycyAgID0gcXVlcmllc1tpXS5saXN0ZW5lcnMgfHwgW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzICAgICA9IGxvY2FsTWF0Y2hNZWRpYShtcWwubWVkaWEpLm1hdGNoZXM7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIG1xbC5tYXRjaGVzIHZhbHVlIGFuZCBjYWxsIGxpc3RlbmVyc1xuICAgICAgICAgICAgICAgICAgICAvLyBGaXJlIGxpc3RlbmVycyBvbmx5IGlmIHRyYW5zaXRpb25pbmcgdG8gb3IgZnJvbSBtYXRjaGVkIHN0YXRlXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaGVzICE9PSBtcWwubWF0Y2hlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbXFsLm1hdGNoZXMgPSBtYXRjaGVzO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgamwgPSBsaXN0ZW5lcnMubGVuZ3RoOyBqIDwgamw7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyc1tqXS5jYWxsKHdpbmRvdywgbXFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDMwKTtcbiAgICAgICAgfTtcblxuICAgIHdpbmRvdy5tYXRjaE1lZGlhID0gZnVuY3Rpb24obWVkaWEpIHtcbiAgICAgICAgdmFyIG1xbCAgICAgICAgID0gbG9jYWxNYXRjaE1lZGlhKG1lZGlhKSxcbiAgICAgICAgICAgIGxpc3RlbmVycyAgID0gW10sXG4gICAgICAgICAgICBpbmRleCAgICAgICA9IDA7XG5cbiAgICAgICAgbXFsLmFkZExpc3RlbmVyID0gZnVuY3Rpb24obGlzdGVuZXIpIHtcbiAgICAgICAgICAgIC8vIENoYW5nZXMgd291bGQgbm90IG9jY3VyIHRvIGNzcyBtZWRpYSB0eXBlIHNvIHJldHVybiBub3cgKEFmZmVjdHMgSUUgPD0gOClcbiAgICAgICAgICAgIGlmICghaGFzTWVkaWFRdWVyaWVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgdXAgJ3Jlc2l6ZScgbGlzdGVuZXIgZm9yIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBDU1MzIG1lZGlhIHF1ZXJpZXMgKE5vdCBmb3IgSUUgPD0gOClcbiAgICAgICAgICAgIC8vIFRoZXJlIHNob3VsZCBvbmx5IGV2ZXIgYmUgMSByZXNpemUgbGlzdGVuZXIgcnVubmluZyBmb3IgcGVyZm9ybWFuY2VcbiAgICAgICAgICAgIGlmICghaXNMaXN0ZW5pbmcpIHtcbiAgICAgICAgICAgICAgICBpc0xpc3RlbmluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZUNoYW5nZSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFB1c2ggb2JqZWN0IG9ubHkgaWYgaXQgaGFzIG5vdCBiZWVuIHB1c2hlZCBhbHJlYWR5XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IHF1ZXJpZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIG1xbCAgICAgICAgIDogbXFsLFxuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnMgICA6IGxpc3RlbmVyc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICAgIH07XG5cbiAgICAgICAgbXFsLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24obGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGxpc3RlbmVycy5sZW5ndGg7IGkgPCBpbDsgaSsrKXtcbiAgICAgICAgICAgICAgICBpZiAobGlzdGVuZXJzW2ldID09PSBsaXN0ZW5lcil7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBtcWw7XG4gICAgfTtcbn0oKSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0cmV0dXJuIEFycmF5LnByb3RvdHlwZS5mbGF0IHx8IGltcGxlbWVudGF0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIGluc3BlY3QgPSByZXF1aXJlKCdvYmplY3QtaW5zcGVjdCcpO1xuXG52YXIgSXNQcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4vSXNQcm9wZXJ0eUtleScpO1xudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLyoqXG4gKiA3LjMuMSBHZXQgKE8sIFApIC0gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWdldC1vLXBcbiAqIDEuIEFzc2VydDogVHlwZShPKSBpcyBPYmplY3QuXG4gKiAyLiBBc3NlcnQ6IElzUHJvcGVydHlLZXkoUCkgaXMgdHJ1ZS5cbiAqIDMuIFJldHVybiBPLltbR2V0XV0oUCwgTykuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBHZXQoTywgUCkge1xuXHQvLyA3LjMuMS4xXG5cdGlmIChUeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKE8pIGlzIG5vdCBPYmplY3QnKTtcblx0fVxuXHQvLyA3LjMuMS4yXG5cdGlmICghSXNQcm9wZXJ0eUtleShQKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBJc1Byb3BlcnR5S2V5KFApIGlzIG5vdCB0cnVlLCBnb3QgJyArIGluc3BlY3QoUCkpO1xuXHR9XG5cdC8vIDcuMy4xLjNcblx0cmV0dXJuIE9bUF07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gcmVxdWlyZSgnaGFzJyk7XG52YXIgcmVnZXhFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG52YXIgdHJ5UmVnZXhFeGVjQ2FsbCA9IGZ1bmN0aW9uIHRyeVJlZ2V4RXhlYyh2YWx1ZSkge1xuXHR0cnkge1xuXHRcdHZhciBsYXN0SW5kZXggPSB2YWx1ZS5sYXN0SW5kZXg7XG5cdFx0dmFsdWUubGFzdEluZGV4ID0gMDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXG5cdFx0cmVnZXhFeGVjLmNhbGwodmFsdWUpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXHRcdHZhbHVlLmxhc3RJbmRleCA9IGxhc3RJbmRleDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXHR9XG59O1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciByZWdleENsYXNzID0gJ1tvYmplY3QgUmVnRXhwXSc7XG52YXIgaGFzVG9TdHJpbmdUYWcgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzUmVnZXgodmFsdWUpIHtcblx0aWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdGlmICghaGFzVG9TdHJpbmdUYWcpIHtcblx0XHRyZXR1cm4gdG9TdHIuY2FsbCh2YWx1ZSkgPT09IHJlZ2V4Q2xhc3M7XG5cdH1cblxuXHR2YXIgZGVzY3JpcHRvciA9IGdPUEQodmFsdWUsICdsYXN0SW5kZXgnKTtcblx0dmFyIGhhc0xhc3RJbmRleERhdGFQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgaGFzKGRlc2NyaXB0b3IsICd2YWx1ZScpO1xuXHRpZiAoIWhhc0xhc3RJbmRleERhdGFQcm9wZXJ0eSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0cnlSZWdleEV4ZWNDYWxsKHZhbHVlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJ2VzNS1zaGltJyk7XG5yZXF1aXJlKCdlczUtc2hpbS9lczUtc2hhbScpO1xuXG5yZXF1aXJlKCcuL2VzMjAxNScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkU3RyaW5nID0gR2V0SW50cmluc2ljKCclU3RyaW5nJScpO1xuXG52YXIgVG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL1RvUHJpbWl0aXZlJyk7XG52YXIgVG9TdHJpbmcgPSByZXF1aXJlKCcuL1RvU3RyaW5nJyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9wcm9wZXJ0eWtleVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvUHJvcGVydHlLZXkoYXJndW1lbnQpIHtcblx0dmFyIGtleSA9IFRvUHJpbWl0aXZlKGFyZ3VtZW50LCAkU3RyaW5nKTtcblx0cmV0dXJuIHR5cGVvZiBrZXkgPT09ICdzeW1ib2wnID8ga2V5IDogVG9TdHJpbmcoa2V5KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCc7XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG52YXIgaXNTdGFuZGFyZEFyZ3VtZW50cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG5cdGlmIChoYXNUb1N0cmluZ1RhZyAmJiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWx1ZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRyZXR1cm4gdG9TdHIuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xufTtcblxudmFyIGlzTGVnYWN5QXJndW1lbnRzID0gZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcblx0aWYgKGlzU3RhbmRhcmRBcmd1bWVudHModmFsdWUpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuIHZhbHVlICE9PSBudWxsICYmXG5cdFx0dHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuXHRcdHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09ICdudW1iZXInICYmXG5cdFx0dmFsdWUubGVuZ3RoID49IDAgJiZcblx0XHR0b1N0ci5jYWxsKHZhbHVlKSAhPT0gJ1tvYmplY3QgQXJyYXldJyAmJlxuXHRcdHRvU3RyLmNhbGwodmFsdWUuY2FsbGVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn07XG5cbnZhciBzdXBwb3J0c1N0YW5kYXJkQXJndW1lbnRzID0gKGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIGlzU3RhbmRhcmRBcmd1bWVudHMoYXJndW1lbnRzKTtcbn0oKSk7XG5cbmlzU3RhbmRhcmRBcmd1bWVudHMuaXNMZWdhY3lBcmd1bWVudHMgPSBpc0xlZ2FjeUFyZ3VtZW50czsgLy8gZm9yIHRlc3RzXG5cbm1vZHVsZS5leHBvcnRzID0gc3VwcG9ydHNTdGFuZGFyZEFyZ3VtZW50cyA/IGlzU3RhbmRhcmRBcmd1bWVudHMgOiBpc0xlZ2FjeUFyZ3VtZW50cztcbiIsIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnYXJyYXkucHJvdG90eXBlLmZsYXQvYXV0bycpO1xucmVxdWlyZSgnYXJyYXkucHJvdG90eXBlLmZsYXRtYXAvYXV0bycpO1xuXG5yZXF1aXJlKCdzeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uL2F1dG8nKTtcblxucmVxdWlyZSgnb2JqZWN0LmZyb21lbnRyaWVzL2F1dG8nKTtcblxucmVxdWlyZSgnLi9lczIwMjAnKTtcbiIsIi8vIENvbnNvbGUtcG9seWZpbGwuIE1JVCBsaWNlbnNlLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3BhdWxtaWxsci9jb25zb2xlLXBvbHlmaWxsXG4vLyBNYWtlIGl0IHNhZmUgdG8gZG8gY29uc29sZS5sb2coKSBhbHdheXMuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgaWYgKCFnbG9iYWwuY29uc29sZSkge1xuICAgIGdsb2JhbC5jb25zb2xlID0ge307XG4gIH1cbiAgdmFyIGNvbiA9IGdsb2JhbC5jb25zb2xlO1xuICB2YXIgcHJvcCwgbWV0aG9kO1xuICB2YXIgZHVtbXkgPSBmdW5jdGlvbigpIHt9O1xuICB2YXIgcHJvcGVydGllcyA9IFsnbWVtb3J5J107XG4gIHZhciBtZXRob2RzID0gKCdhc3NlcnQsY2xlYXIsY291bnQsZGVidWcsZGlyLGRpcnhtbCxlcnJvcixleGNlcHRpb24sZ3JvdXAsJyArXG4gICAgICdncm91cENvbGxhcHNlZCxncm91cEVuZCxpbmZvLGxvZyxtYXJrVGltZWxpbmUscHJvZmlsZSxwcm9maWxlcyxwcm9maWxlRW5kLCcgK1xuICAgICAnc2hvdyx0YWJsZSx0aW1lLHRpbWVFbmQsdGltZWxpbmUsdGltZWxpbmVFbmQsdGltZVN0YW1wLHRyYWNlLHdhcm4nKS5zcGxpdCgnLCcpO1xuICB3aGlsZSAocHJvcCA9IHByb3BlcnRpZXMucG9wKCkpIGlmICghY29uW3Byb3BdKSBjb25bcHJvcF0gPSB7fTtcbiAgd2hpbGUgKG1ldGhvZCA9IG1ldGhvZHMucG9wKCkpIGlmICghY29uW21ldGhvZF0pIGNvblttZXRob2RdID0gZHVtbXk7XG4gIC8vIFVzaW5nIGB0aGlzYCBmb3Igd2ViIHdvcmtlcnMgJiBzdXBwb3J0cyBCcm93c2VyaWZ5IC8gV2VicGFjay5cbn0pKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gdGhpcyA6IHdpbmRvdyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGNhbGxCaW5kID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvaGVscGVycy9jYWxsQmluZCcpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgc2hpbSA9IHJlcXVpcmUoJy4vc2hpbScpO1xuXG52YXIgZmxhZ3NCb3VuZCA9IGNhbGxCaW5kKGltcGxlbWVudGF0aW9uKTtcblxuZGVmaW5lKGZsYWdzQm91bmQsIHtcblx0Z2V0UG9seWZpbGw6IGdldFBvbHlmaWxsLFxuXHRpbXBsZW1lbnRhdGlvbjogaW1wbGVtZW50YXRpb24sXG5cdHNoaW06IHNoaW1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYWdzQm91bmQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRpZiAoZG9jdW1lbnQuY29udGFpbnMpIHtcblx0XHRcdHJldHVybiBkb2N1bWVudC5jb250YWlucztcblx0XHR9XG5cdFx0aWYgKGRvY3VtZW50LmJvZHkgJiYgZG9jdW1lbnQuYm9keS5jb250YWlucykge1xuXHRcdFx0cmV0dXJuIGRvY3VtZW50LmJvZHkuY29udGFpbnM7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBpbXBsZW1lbnRhdGlvbjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbnNwZWN0ID0gcmVxdWlyZSgnb2JqZWN0LWluc3BlY3QnKTtcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIENhbGwgPSByZXF1aXJlKCcuL0NhbGwnKTtcbnZhciBHZXQgPSByZXF1aXJlKCcuL0dldCcpO1xudmFyIEdldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi9HZXRJdGVyYXRvcicpO1xudmFyIElzQ2FsbGFibGUgPSByZXF1aXJlKCcuL0lzQ2FsbGFibGUnKTtcbnZhciBJdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi9JdGVyYXRvckNsb3NlJyk7XG52YXIgSXRlcmF0b3JTdGVwID0gcmVxdWlyZSgnLi9JdGVyYXRvclN0ZXAnKTtcbnZhciBJdGVyYXRvclZhbHVlID0gcmVxdWlyZSgnLi9JdGVyYXRvclZhbHVlJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFkZC1lbnRyaWVzLWZyb20taXRlcmFibGVcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBBZGRFbnRyaWVzRnJvbUl0ZXJhYmxlKHRhcmdldCwgaXRlcmFibGUsIGFkZGVyKSB7XG5cdGlmICghSXNDYWxsYWJsZShhZGRlcikpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogYGFkZGVyYCBpcyBub3QgY2FsbGFibGUnKTtcblx0fVxuXHRpZiAoaXRlcmFibGUgPT0gbnVsbCkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgaXRlcmFibGVgIGlzIHByZXNlbnQsIGFuZCBub3QgbnVsbGlzaCcpO1xuXHR9XG5cdHZhciBpdGVyYXRvclJlY29yZCA9IEdldEl0ZXJhdG9yKGl0ZXJhYmxlKTtcblx0d2hpbGUgKHRydWUpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cblx0XHR2YXIgbmV4dCA9IEl0ZXJhdG9yU3RlcChpdGVyYXRvclJlY29yZCk7XG5cdFx0aWYgKCFuZXh0KSB7XG5cdFx0XHRyZXR1cm4gdGFyZ2V0O1xuXHRcdH1cblx0XHR2YXIgbmV4dEl0ZW0gPSBJdGVyYXRvclZhbHVlKG5leHQpO1xuXHRcdGlmIChUeXBlKG5leHRJdGVtKSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHZhciBlcnJvciA9IG5ldyAkVHlwZUVycm9yKCdpdGVyYXRvciBuZXh0IG11c3QgcmV0dXJuIGFuIE9iamVjdCwgZ290ICcgKyBpbnNwZWN0KG5leHRJdGVtKSk7XG5cdFx0XHRyZXR1cm4gSXRlcmF0b3JDbG9zZShcblx0XHRcdFx0aXRlcmF0b3JSZWNvcmQsXG5cdFx0XHRcdGZ1bmN0aW9uICgpIHsgdGhyb3cgZXJyb3I7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1sb29wLWZ1bmNcblx0XHRcdCk7XG5cdFx0fVxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgayA9IEdldChuZXh0SXRlbSwgJzAnKTtcblx0XHRcdHZhciB2ID0gR2V0KG5leHRJdGVtLCAnMScpO1xuXHRcdFx0Q2FsbChhZGRlciwgdGFyZ2V0LCBbaywgdl0pO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiBJdGVyYXRvckNsb3NlKFxuXHRcdFx0XHRpdGVyYXRvclJlY29yZCxcblx0XHRcdFx0ZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9XG5cdFx0XHQpO1xuXHRcdH1cblx0fVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogZ2xvYmFsc1xuXHRBdG9taWNzLFxuXHRTaGFyZWRBcnJheUJ1ZmZlcixcbiovXG5cbnZhciB1bmRlZmluZWQ7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG52YXIgJGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuaWYgKCRnT1BEKSB7XG5cdHRyeSB7XG5cdFx0JGdPUEQoe30sICcnKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdCRnT1BEID0gbnVsbDsgLy8gdGhpcyBpcyBJRSA4LCB3aGljaCBoYXMgYSBicm9rZW4gZ09QRFxuXHR9XG59XG5cbnZhciB0aHJvd1R5cGVFcnJvciA9IGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3ICRUeXBlRXJyb3IoKTsgfTtcbnZhciBUaHJvd1R5cGVFcnJvciA9ICRnT1BEXG5cdD8gKGZ1bmN0aW9uICgpIHtcblx0XHR0cnkge1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9ucywgbm8tY2FsbGVyLCBuby1yZXN0cmljdGVkLXByb3BlcnRpZXNcblx0XHRcdGFyZ3VtZW50cy5jYWxsZWU7IC8vIElFIDggZG9lcyBub3QgdGhyb3cgaGVyZVxuXHRcdFx0cmV0dXJuIHRocm93VHlwZUVycm9yO1xuXHRcdH0gY2F0Y2ggKGNhbGxlZVRocm93cykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Ly8gSUUgOCB0aHJvd3Mgb24gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhcmd1bWVudHMsICcnKVxuXHRcdFx0XHRyZXR1cm4gJGdPUEQoYXJndW1lbnRzLCAnY2FsbGVlJykuZ2V0O1xuXHRcdFx0fSBjYXRjaCAoZ09QRHRocm93cykge1xuXHRcdFx0XHRyZXR1cm4gdGhyb3dUeXBlRXJyb3I7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KCkpXG5cdDogdGhyb3dUeXBlRXJyb3I7XG5cbnZhciBoYXNTeW1ib2xzID0gcmVxdWlyZSgnaGFzLXN5bWJvbHMnKSgpO1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguX19wcm90b19fOyB9OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvXG5cbnZhciBnZW5lcmF0b3I7IC8vID0gZnVuY3Rpb24gKiAoKSB7fTtcbnZhciBnZW5lcmF0b3JGdW5jdGlvbiA9IGdlbmVyYXRvciA/IGdldFByb3RvKGdlbmVyYXRvcikgOiB1bmRlZmluZWQ7XG52YXIgYXN5bmNGbjsgLy8gYXN5bmMgZnVuY3Rpb24oKSB7fTtcbnZhciBhc3luY0Z1bmN0aW9uID0gYXN5bmNGbiA/IGFzeW5jRm4uY29uc3RydWN0b3IgOiB1bmRlZmluZWQ7XG52YXIgYXN5bmNHZW47IC8vIGFzeW5jIGZ1bmN0aW9uICogKCkge307XG52YXIgYXN5bmNHZW5GdW5jdGlvbiA9IGFzeW5jR2VuID8gZ2V0UHJvdG8oYXN5bmNHZW4pIDogdW5kZWZpbmVkO1xudmFyIGFzeW5jR2VuSXRlcmF0b3IgPSBhc3luY0dlbiA/IGFzeW5jR2VuKCkgOiB1bmRlZmluZWQ7XG5cbnZhciBUeXBlZEFycmF5ID0gdHlwZW9mIFVpbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8oVWludDhBcnJheSk7XG5cbnZhciBJTlRSSU5TSUNTID0ge1xuXHQnJUFycmF5JSc6IEFycmF5LFxuXHQnJUFycmF5QnVmZmVyJSc6IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBcnJheUJ1ZmZlcixcblx0JyVBcnJheUJ1ZmZlclByb3RvdHlwZSUnOiB0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQXJyYXlCdWZmZXIucHJvdG90eXBlLFxuXHQnJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyA/IGdldFByb3RvKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSkgOiB1bmRlZmluZWQsXG5cdCclQXJyYXlQcm90b3R5cGUlJzogQXJyYXkucHJvdG90eXBlLFxuXHQnJUFycmF5UHJvdG9fZW50cmllcyUnOiBBcnJheS5wcm90b3R5cGUuZW50cmllcyxcblx0JyVBcnJheVByb3RvX2ZvckVhY2glJzogQXJyYXkucHJvdG90eXBlLmZvckVhY2gsXG5cdCclQXJyYXlQcm90b19rZXlzJSc6IEFycmF5LnByb3RvdHlwZS5rZXlzLFxuXHQnJUFycmF5UHJvdG9fdmFsdWVzJSc6IEFycmF5LnByb3RvdHlwZS52YWx1ZXMsXG5cdCclQXN5bmNGcm9tU3luY0l0ZXJhdG9yUHJvdG90eXBlJSc6IHVuZGVmaW5lZCxcblx0JyVBc3luY0Z1bmN0aW9uJSc6IGFzeW5jRnVuY3Rpb24sXG5cdCclQXN5bmNGdW5jdGlvblByb3RvdHlwZSUnOiBhc3luY0Z1bmN0aW9uID8gYXN5bmNGdW5jdGlvbi5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG5cdCclQXN5bmNHZW5lcmF0b3IlJzogYXN5bmNHZW4gPyBnZXRQcm90byhhc3luY0dlbkl0ZXJhdG9yKSA6IHVuZGVmaW5lZCxcblx0JyVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJSc6IGFzeW5jR2VuRnVuY3Rpb24sXG5cdCclQXN5bmNHZW5lcmF0b3JQcm90b3R5cGUlJzogYXN5bmNHZW5GdW5jdGlvbiA/IGFzeW5jR2VuRnVuY3Rpb24ucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuXHQnJUFzeW5jSXRlcmF0b3JQcm90b3R5cGUlJzogYXN5bmNHZW5JdGVyYXRvciAmJiBoYXNTeW1ib2xzICYmIFN5bWJvbC5hc3luY0l0ZXJhdG9yID8gYXN5bmNHZW5JdGVyYXRvcltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSA6IHVuZGVmaW5lZCxcblx0JyVBdG9taWNzJSc6IHR5cGVvZiBBdG9taWNzID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEF0b21pY3MsXG5cdCclQm9vbGVhbiUnOiBCb29sZWFuLFxuXHQnJUJvb2xlYW5Qcm90b3R5cGUlJzogQm9vbGVhbi5wcm90b3R5cGUsXG5cdCclRGF0YVZpZXclJzogdHlwZW9mIERhdGFWaWV3ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IERhdGFWaWV3LFxuXHQnJURhdGFWaWV3UHJvdG90eXBlJSc6IHR5cGVvZiBEYXRhVmlldyA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBEYXRhVmlldy5wcm90b3R5cGUsXG5cdCclRGF0ZSUnOiBEYXRlLFxuXHQnJURhdGVQcm90b3R5cGUlJzogRGF0ZS5wcm90b3R5cGUsXG5cdCclZGVjb2RlVVJJJSc6IGRlY29kZVVSSSxcblx0JyVkZWNvZGVVUklDb21wb25lbnQlJzogZGVjb2RlVVJJQ29tcG9uZW50LFxuXHQnJWVuY29kZVVSSSUnOiBlbmNvZGVVUkksXG5cdCclZW5jb2RlVVJJQ29tcG9uZW50JSc6IGVuY29kZVVSSUNvbXBvbmVudCxcblx0JyVFcnJvciUnOiBFcnJvcixcblx0JyVFcnJvclByb3RvdHlwZSUnOiBFcnJvci5wcm90b3R5cGUsXG5cdCclZXZhbCUnOiBldmFsLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV2YWxcblx0JyVFdmFsRXJyb3IlJzogRXZhbEVycm9yLFxuXHQnJUV2YWxFcnJvclByb3RvdHlwZSUnOiBFdmFsRXJyb3IucHJvdG90eXBlLFxuXHQnJUZsb2F0MzJBcnJheSUnOiB0eXBlb2YgRmxvYXQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZsb2F0MzJBcnJheSxcblx0JyVGbG9hdDMyQXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIEZsb2F0MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDMyQXJyYXkucHJvdG90eXBlLFxuXHQnJUZsb2F0NjRBcnJheSUnOiB0eXBlb2YgRmxvYXQ2NEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZsb2F0NjRBcnJheSxcblx0JyVGbG9hdDY0QXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIEZsb2F0NjRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDY0QXJyYXkucHJvdG90eXBlLFxuXHQnJUZ1bmN0aW9uJSc6IEZ1bmN0aW9uLFxuXHQnJUZ1bmN0aW9uUHJvdG90eXBlJSc6IEZ1bmN0aW9uLnByb3RvdHlwZSxcblx0JyVHZW5lcmF0b3IlJzogZ2VuZXJhdG9yID8gZ2V0UHJvdG8oZ2VuZXJhdG9yKCkpIDogdW5kZWZpbmVkLFxuXHQnJUdlbmVyYXRvckZ1bmN0aW9uJSc6IGdlbmVyYXRvckZ1bmN0aW9uLFxuXHQnJUdlbmVyYXRvclByb3RvdHlwZSUnOiBnZW5lcmF0b3JGdW5jdGlvbiA/IGdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcblx0JyVJbnQ4QXJyYXklJzogdHlwZW9mIEludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQ4QXJyYXksXG5cdCclSW50OEFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBJbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50OEFycmF5LnByb3RvdHlwZSxcblx0JyVJbnQxNkFycmF5JSc6IHR5cGVvZiBJbnQxNkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDE2QXJyYXksXG5cdCclSW50MTZBcnJheVByb3RvdHlwZSUnOiB0eXBlb2YgSW50MTZBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQ4QXJyYXkucHJvdG90eXBlLFxuXHQnJUludDMyQXJyYXklJzogdHlwZW9mIEludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50MzJBcnJheSxcblx0JyVJbnQzMkFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBJbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDMyQXJyYXkucHJvdG90eXBlLFxuXHQnJWlzRmluaXRlJSc6IGlzRmluaXRlLFxuXHQnJWlzTmFOJSc6IGlzTmFOLFxuXHQnJUl0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgPyBnZXRQcm90byhnZXRQcm90byhbXVtTeW1ib2wuaXRlcmF0b3JdKCkpKSA6IHVuZGVmaW5lZCxcblx0JyVKU09OJSc6IHR5cGVvZiBKU09OID09PSAnb2JqZWN0JyA/IEpTT04gOiB1bmRlZmluZWQsXG5cdCclSlNPTlBhcnNlJSc6IHR5cGVvZiBKU09OID09PSAnb2JqZWN0JyA/IEpTT04ucGFyc2UgOiB1bmRlZmluZWQsXG5cdCclTWFwJSc6IHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogTWFwLFxuXHQnJU1hcEl0ZXJhdG9yUHJvdG90eXBlJSc6IHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNTeW1ib2xzID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8obmV3IE1hcCgpW1N5bWJvbC5pdGVyYXRvcl0oKSksXG5cdCclTWFwUHJvdG90eXBlJSc6IHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogTWFwLnByb3RvdHlwZSxcblx0JyVNYXRoJSc6IE1hdGgsXG5cdCclTnVtYmVyJSc6IE51bWJlcixcblx0JyVOdW1iZXJQcm90b3R5cGUlJzogTnVtYmVyLnByb3RvdHlwZSxcblx0JyVPYmplY3QlJzogT2JqZWN0LFxuXHQnJU9iamVjdFByb3RvdHlwZSUnOiBPYmplY3QucHJvdG90eXBlLFxuXHQnJU9ialByb3RvX3RvU3RyaW5nJSc6IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsXG5cdCclT2JqUHJvdG9fdmFsdWVPZiUnOiBPYmplY3QucHJvdG90eXBlLnZhbHVlT2YsXG5cdCclcGFyc2VGbG9hdCUnOiBwYXJzZUZsb2F0LFxuXHQnJXBhcnNlSW50JSc6IHBhcnNlSW50LFxuXHQnJVByb21pc2UlJzogdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJvbWlzZSxcblx0JyVQcm9taXNlUHJvdG90eXBlJSc6IHR5cGVvZiBQcm9taXNlID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFByb21pc2UucHJvdG90eXBlLFxuXHQnJVByb21pc2VQcm90b190aGVuJSc6IHR5cGVvZiBQcm9taXNlID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFByb21pc2UucHJvdG90eXBlLnRoZW4sXG5cdCclUHJvbWlzZV9hbGwlJzogdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJvbWlzZS5hbGwsXG5cdCclUHJvbWlzZV9yZWplY3QlJzogdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJvbWlzZS5yZWplY3QsXG5cdCclUHJvbWlzZV9yZXNvbHZlJSc6IHR5cGVvZiBQcm9taXNlID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFByb21pc2UucmVzb2x2ZSxcblx0JyVQcm94eSUnOiB0eXBlb2YgUHJveHkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJveHksXG5cdCclUmFuZ2VFcnJvciUnOiBSYW5nZUVycm9yLFxuXHQnJVJhbmdlRXJyb3JQcm90b3R5cGUlJzogUmFuZ2VFcnJvci5wcm90b3R5cGUsXG5cdCclUmVmZXJlbmNlRXJyb3IlJzogUmVmZXJlbmNlRXJyb3IsXG5cdCclUmVmZXJlbmNlRXJyb3JQcm90b3R5cGUlJzogUmVmZXJlbmNlRXJyb3IucHJvdG90eXBlLFxuXHQnJVJlZmxlY3QlJzogdHlwZW9mIFJlZmxlY3QgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUmVmbGVjdCxcblx0JyVSZWdFeHAlJzogUmVnRXhwLFxuXHQnJVJlZ0V4cFByb3RvdHlwZSUnOiBSZWdFeHAucHJvdG90eXBlLFxuXHQnJVNldCUnOiB0eXBlb2YgU2V0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFNldCxcblx0JyVTZXRJdGVyYXRvclByb3RvdHlwZSUnOiB0eXBlb2YgU2V0ID09PSAndW5kZWZpbmVkJyB8fCAhaGFzU3ltYm9scyA/IHVuZGVmaW5lZCA6IGdldFByb3RvKG5ldyBTZXQoKVtTeW1ib2wuaXRlcmF0b3JdKCkpLFxuXHQnJVNldFByb3RvdHlwZSUnOiB0eXBlb2YgU2V0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFNldC5wcm90b3R5cGUsXG5cdCclU2hhcmVkQXJyYXlCdWZmZXIlJzogdHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFNoYXJlZEFycmF5QnVmZmVyLFxuXHQnJVNoYXJlZEFycmF5QnVmZmVyUHJvdG90eXBlJSc6IHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTaGFyZWRBcnJheUJ1ZmZlci5wcm90b3R5cGUsXG5cdCclU3RyaW5nJSc6IFN0cmluZyxcblx0JyVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUnOiBoYXNTeW1ib2xzID8gZ2V0UHJvdG8oJydbU3ltYm9sLml0ZXJhdG9yXSgpKSA6IHVuZGVmaW5lZCxcblx0JyVTdHJpbmdQcm90b3R5cGUlJzogU3RyaW5nLnByb3RvdHlwZSxcblx0JyVTeW1ib2wlJzogaGFzU3ltYm9scyA/IFN5bWJvbCA6IHVuZGVmaW5lZCxcblx0JyVTeW1ib2xQcm90b3R5cGUlJzogaGFzU3ltYm9scyA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG5cdCclU3ludGF4RXJyb3IlJzogU3ludGF4RXJyb3IsXG5cdCclU3ludGF4RXJyb3JQcm90b3R5cGUlJzogU3ludGF4RXJyb3IucHJvdG90eXBlLFxuXHQnJVRocm93VHlwZUVycm9yJSc6IFRocm93VHlwZUVycm9yLFxuXHQnJVR5cGVkQXJyYXklJzogVHlwZWRBcnJheSxcblx0JyVUeXBlZEFycmF5UHJvdG90eXBlJSc6IFR5cGVkQXJyYXkgPyBUeXBlZEFycmF5LnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcblx0JyVUeXBlRXJyb3IlJzogJFR5cGVFcnJvcixcblx0JyVUeXBlRXJyb3JQcm90b3R5cGUlJzogJFR5cGVFcnJvci5wcm90b3R5cGUsXG5cdCclVWludDhBcnJheSUnOiB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OEFycmF5LFxuXHQnJVVpbnQ4QXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIFVpbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDhBcnJheS5wcm90b3R5cGUsXG5cdCclVWludDhDbGFtcGVkQXJyYXklJzogdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4Q2xhbXBlZEFycmF5LFxuXHQnJVVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OENsYW1wZWRBcnJheS5wcm90b3R5cGUsXG5cdCclVWludDE2QXJyYXklJzogdHlwZW9mIFVpbnQxNkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQxNkFycmF5LFxuXHQnJVVpbnQxNkFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBVaW50MTZBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50MTZBcnJheS5wcm90b3R5cGUsXG5cdCclVWludDMyQXJyYXklJzogdHlwZW9mIFVpbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQzMkFycmF5LFxuXHQnJVVpbnQzMkFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBVaW50MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50MzJBcnJheS5wcm90b3R5cGUsXG5cdCclVVJJRXJyb3IlJzogVVJJRXJyb3IsXG5cdCclVVJJRXJyb3JQcm90b3R5cGUlJzogVVJJRXJyb3IucHJvdG90eXBlLFxuXHQnJVdlYWtNYXAlJzogdHlwZW9mIFdlYWtNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha01hcCxcblx0JyVXZWFrTWFwUHJvdG90eXBlJSc6IHR5cGVvZiBXZWFrTWFwID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtNYXAucHJvdG90eXBlLFxuXHQnJVdlYWtTZXQlJzogdHlwZW9mIFdlYWtTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha1NldCxcblx0JyVXZWFrU2V0UHJvdG90eXBlJSc6IHR5cGVvZiBXZWFrU2V0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtTZXQucHJvdG90eXBlXG59O1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcbnZhciAkcmVwbGFjZSA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2UpO1xuXG4vKiBhZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2xvZGFzaC9sb2Rhc2gvYmxvYi80LjE3LjE1L2Rpc3QvbG9kYXNoLmpzI0w2NzM1LUw2NzQ0ICovXG52YXIgcmVQcm9wTmFtZSA9IC9bXiUuW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JSQpKS9nO1xudmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nOyAvKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciBzdHJpbmdUb1BhdGggPSBmdW5jdGlvbiBzdHJpbmdUb1BhdGgoc3RyaW5nKSB7XG5cdHZhciByZXN1bHQgPSBbXTtcblx0JHJlcGxhY2Uoc3RyaW5nLCByZVByb3BOYW1lLCBmdW5jdGlvbiAobWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuXHRcdHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHF1b3RlID8gJHJlcGxhY2Uoc3ViU3RyaW5nLCByZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCk7XG5cdH0pO1xuXHRyZXR1cm4gcmVzdWx0O1xufTtcbi8qIGVuZCBhZGFwdGF0aW9uICovXG5cbnZhciBnZXRCYXNlSW50cmluc2ljID0gZnVuY3Rpb24gZ2V0QmFzZUludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0aWYgKCEobmFtZSBpbiBJTlRSSU5TSUNTKSkge1xuXHRcdHRocm93IG5ldyBTeW50YXhFcnJvcignaW50cmluc2ljICcgKyBuYW1lICsgJyBkb2VzIG5vdCBleGlzdCEnKTtcblx0fVxuXG5cdC8vIGlzdGFuYnVsIGlnbm9yZSBpZiAvLyBob3BlZnVsbHkgdGhpcyBpcyBpbXBvc3NpYmxlIHRvIHRlc3QgOi0pXG5cdGlmICh0eXBlb2YgSU5UUklOU0lDU1tuYW1lXSA9PT0gJ3VuZGVmaW5lZCcgJiYgIWFsbG93TWlzc2luZykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpbnRyaW5zaWMgJyArIG5hbWUgKyAnIGV4aXN0cywgYnV0IGlzIG5vdCBhdmFpbGFibGUuIFBsZWFzZSBmaWxlIGFuIGlzc3VlIScpO1xuXHR9XG5cblx0cmV0dXJuIElOVFJJTlNJQ1NbbmFtZV07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEdldEludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0aWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJyB8fCBuYW1lLmxlbmd0aCA9PT0gMCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludHJpbnNpYyBuYW1lIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nJyk7XG5cdH1cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIHR5cGVvZiBhbGxvd01pc3NpbmcgIT09ICdib29sZWFuJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYWxsb3dNaXNzaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBhIGJvb2xlYW4nKTtcblx0fVxuXG5cdHZhciBwYXJ0cyA9IHN0cmluZ1RvUGF0aChuYW1lKTtcblxuXHR2YXIgdmFsdWUgPSBnZXRCYXNlSW50cmluc2ljKCclJyArIChwYXJ0cy5sZW5ndGggPiAwID8gcGFydHNbMF0gOiAnJykgKyAnJScsIGFsbG93TWlzc2luZyk7XG5cdGZvciAodmFyIGkgPSAxOyBpIDwgcGFydHMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRpZiAodmFsdWUgIT0gbnVsbCkge1xuXHRcdFx0aWYgKCRnT1BEICYmIChpICsgMSkgPj0gcGFydHMubGVuZ3RoKSB7XG5cdFx0XHRcdHZhciBkZXNjID0gJGdPUEQodmFsdWUsIHBhcnRzW2ldKTtcblx0XHRcdFx0aWYgKCFhbGxvd01pc3NpbmcgJiYgIShwYXJ0c1tpXSBpbiB2YWx1ZSkpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYmFzZSBpbnRyaW5zaWMgZm9yICcgKyBuYW1lICsgJyBleGlzdHMsIGJ1dCB0aGUgcHJvcGVydHkgaXMgbm90IGF2YWlsYWJsZS4nKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YWx1ZSA9IGRlc2MgPyAoZGVzYy5nZXQgfHwgZGVzYy52YWx1ZSkgOiB2YWx1ZVtwYXJ0c1tpXV07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlW3BhcnRzW2ldXTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEFkZEVudHJpZXNGcm9tSXRlcmFibGUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0FkZEVudHJpZXNGcm9tSXRlcmFibGUnKTtcbnZhciBDcmVhdGVEYXRhUHJvcGVydHlPclRocm93ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9DcmVhdGVEYXRhUHJvcGVydHlPclRocm93Jyk7XG52YXIgR2V0ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9HZXQnKTtcbnZhciBJc0FycmF5ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Jc0FycmF5Jyk7XG52YXIgUmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvUmVxdWlyZU9iamVjdENvZXJjaWJsZScpO1xudmFyIFRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1RvUHJvcGVydHlLZXknKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9UeXBlJyk7XG5cbnZhciBhZGRlciA9IGZ1bmN0aW9uIGFkZERhdGFQcm9wZXJ0eShrZXksIHZhbHVlKSB7XG5cdHZhciBPID0gdGhpczsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1pbnZhbGlkLXRoaXNcblx0dmFyIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShrZXkpO1xuXHRDcmVhdGVEYXRhUHJvcGVydHlPclRocm93KE8sIHByb3BlcnR5S2V5LCB2YWx1ZSk7XG59O1xuXG52YXIgbGVnYWN5QXNzaWduID0gZnVuY3Rpb24gYXNzaWduKG9iaiwgZW50cmllcykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGVudHJpZXMubGVuZ3RoOyArK2kpIHtcblx0XHR2YXIgZW50cnkgPSBlbnRyaWVzW2ldO1xuXHRcdGlmIChUeXBlKGVudHJ5KSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2l0ZXJhdG9yIHJldHVybmVkIGEgbm9uLW9iamVjdDsgZW50cnkgZXhwZWN0ZWQnKTtcblx0XHR9XG5cblx0XHR2YXIga2V5ID0gR2V0KGVudHJ5LCAnMCcpO1xuXHRcdHZhciB2YWx1ZSA9IEdldChlbnRyeSwgJzEnKTtcblx0XHR2YXIgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KGtleSk7XG5cdFx0Q3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdyhvYmosIHByb3BlcnR5S2V5LCB2YWx1ZSk7XG5cdH1cbn07XG5cbnZhciBoYXNTeW1ib2xzID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sKCdmb28nKSA9PT0gJ3N5bWJvbCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZnJvbUVudHJpZXMoaXRlcmFibGUpIHtcblx0UmVxdWlyZU9iamVjdENvZXJjaWJsZShpdGVyYWJsZSk7XG5cblx0dmFyIG9iaiA9IHt9O1xuXG5cdC8vIHRoaXMgcGFydCBpc24ndCBpbiB0aGUgc3BlYywgaXQncyBmb3IgYSByZWFzb25hYmxlIGZhbGxiYWNrIGZvciBwcmUtRVM2IGVudmlyb25tZW50c1xuXHRpZiAoIWhhc1N5bWJvbHMpIHtcblx0XHRpZiAoIUlzQXJyYXkoaXRlcmFibGUpKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGVudmlyb25tZW50IGxhY2tzIG5hdGl2ZSBTeW1ib2xzLCBhbmQgY2FuIG5vdCBzdXBwb3J0IG5vbi1BcnJheSBpdGVyYWJsZXMnKTtcblx0XHR9XG5cdFx0bGVnYWN5QXNzaWduKG9iaiwgaXRlcmFibGUpO1xuXHRcdHJldHVybiBvYmo7XG5cdH1cblxuXHRyZXR1cm4gQWRkRW50cmllc0Zyb21JdGVyYWJsZShvYmosIGl0ZXJhYmxlLCBhZGRlcik7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkc3BlY2llcyA9IEdldEludHJpbnNpYygnJVN5bWJvbC5zcGVjaWVzJScsIHRydWUpO1xudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBJc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9Jc0NvbnN0cnVjdG9yJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtc3BlY2llc2NvbnN0cnVjdG9yXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3Rvcikge1xuXHRpZiAoVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShPKSBpcyBub3QgT2JqZWN0Jyk7XG5cdH1cblx0dmFyIEMgPSBPLmNvbnN0cnVjdG9yO1xuXHRpZiAodHlwZW9mIEMgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIGRlZmF1bHRDb25zdHJ1Y3Rvcjtcblx0fVxuXHRpZiAoVHlwZShDKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignTy5jb25zdHJ1Y3RvciBpcyBub3QgYW4gT2JqZWN0Jyk7XG5cdH1cblx0dmFyIFMgPSAkc3BlY2llcyA/IENbJHNwZWNpZXNdIDogdm9pZCAwO1xuXHRpZiAoUyA9PSBudWxsKSB7XG5cdFx0cmV0dXJuIGRlZmF1bHRDb25zdHJ1Y3Rvcjtcblx0fVxuXHRpZiAoSXNDb25zdHJ1Y3RvcihTKSkge1xuXHRcdHJldHVybiBTO1xuXHR9XG5cdHRocm93IG5ldyAkVHlwZUVycm9yKCdubyBjb25zdHJ1Y3RvciBmb3VuZCcpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydFJlY29yZCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYXNzZXJ0UmVjb3JkJyk7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtZnJvbXByb3BlcnR5ZGVzY3JpcHRvclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEZyb21Qcm9wZXJ0eURlc2NyaXB0b3IoRGVzYykge1xuXHRpZiAodHlwZW9mIERlc2MgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIERlc2M7XG5cdH1cblxuXHRhc3NlcnRSZWNvcmQoVHlwZSwgJ1Byb3BlcnR5IERlc2NyaXB0b3InLCAnRGVzYycsIERlc2MpO1xuXG5cdHZhciBvYmogPSB7fTtcblx0aWYgKCdbW1ZhbHVlXV0nIGluIERlc2MpIHtcblx0XHRvYmoudmFsdWUgPSBEZXNjWydbW1ZhbHVlXV0nXTtcblx0fVxuXHRpZiAoJ1tbV3JpdGFibGVdXScgaW4gRGVzYykge1xuXHRcdG9iai53cml0YWJsZSA9IERlc2NbJ1tbV3JpdGFibGVdXSddO1xuXHR9XG5cdGlmICgnW1tHZXRdXScgaW4gRGVzYykge1xuXHRcdG9iai5nZXQgPSBEZXNjWydbW0dldF1dJ107XG5cdH1cblx0aWYgKCdbW1NldF1dJyBpbiBEZXNjKSB7XG5cdFx0b2JqLnNldCA9IERlc2NbJ1tbU2V0XV0nXTtcblx0fVxuXHRpZiAoJ1tbRW51bWVyYWJsZV1dJyBpbiBEZXNjKSB7XG5cdFx0b2JqLmVudW1lcmFibGUgPSBEZXNjWydbW0VudW1lcmFibGVdXSddO1xuXHR9XG5cdGlmICgnW1tDb25maWd1cmFibGVdXScgaW4gRGVzYykge1xuXHRcdG9iai5jb25maWd1cmFibGUgPSBEZXNjWydbW0NvbmZpZ3VyYWJsZV1dJ107XG5cdH1cblx0cmV0dXJuIG9iajtcbn07XG4iLCIvKlxuICogY2xhc3NMaXN0LmpzOiBDcm9zcy1icm93c2VyIGZ1bGwgZWxlbWVudC5jbGFzc0xpc3QgaW1wbGVtZW50YXRpb24uXG4gKiAxLjEuMjAxNzA0MjdcbiAqXG4gKiBCeSBFbGkgR3JleSwgaHR0cDovL2VsaWdyZXkuY29tXG4gKiBMaWNlbnNlOiBEZWRpY2F0ZWQgdG8gdGhlIHB1YmxpYyBkb21haW4uXG4gKiAgIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZWxpZ3JleS9jbGFzc0xpc3QuanMvYmxvYi9tYXN0ZXIvTElDRU5TRS5tZFxuICovXG5cbi8qZ2xvYmFsIHNlbGYsIGRvY3VtZW50LCBET01FeGNlcHRpb24gKi9cblxuLyohIEBzb3VyY2UgaHR0cDovL3B1cmwuZWxpZ3JleS5jb20vZ2l0aHViL2NsYXNzTGlzdC5qcy9ibG9iL21hc3Rlci9jbGFzc0xpc3QuanMgKi9cblxuaWYgKFwiZG9jdW1lbnRcIiBpbiB3aW5kb3cuc2VsZikge1xuXG4vLyBGdWxsIHBvbHlmaWxsIGZvciBicm93c2VycyB3aXRoIG5vIGNsYXNzTGlzdCBzdXBwb3J0XG4vLyBJbmNsdWRpbmcgSUUgPCBFZGdlIG1pc3NpbmcgU1ZHRWxlbWVudC5jbGFzc0xpc3RcbmlmICghKFwiY2xhc3NMaXN0XCIgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIl9cIikpIFxuXHR8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMgJiYgIShcImNsYXNzTGlzdFwiIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXCJnXCIpKSkge1xuXG4oZnVuY3Rpb24gKHZpZXcpIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmlmICghKCdFbGVtZW50JyBpbiB2aWV3KSkgcmV0dXJuO1xuXG52YXJcblx0ICBjbGFzc0xpc3RQcm9wID0gXCJjbGFzc0xpc3RcIlxuXHQsIHByb3RvUHJvcCA9IFwicHJvdG90eXBlXCJcblx0LCBlbGVtQ3RyUHJvdG8gPSB2aWV3LkVsZW1lbnRbcHJvdG9Qcm9wXVxuXHQsIG9iakN0ciA9IE9iamVjdFxuXHQsIHN0clRyaW0gPSBTdHJpbmdbcHJvdG9Qcm9wXS50cmltIHx8IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCBcIlwiKTtcblx0fVxuXHQsIGFyckluZGV4T2YgPSBBcnJheVtwcm90b1Byb3BdLmluZGV4T2YgfHwgZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHR2YXJcblx0XHRcdCAgaSA9IDBcblx0XHRcdCwgbGVuID0gdGhpcy5sZW5ndGhcblx0XHQ7XG5cdFx0Zm9yICg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKGkgaW4gdGhpcyAmJiB0aGlzW2ldID09PSBpdGVtKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH1cblx0Ly8gVmVuZG9yczogcGxlYXNlIGFsbG93IGNvbnRlbnQgY29kZSB0byBpbnN0YW50aWF0ZSBET01FeGNlcHRpb25zXG5cdCwgRE9NRXggPSBmdW5jdGlvbiAodHlwZSwgbWVzc2FnZSkge1xuXHRcdHRoaXMubmFtZSA9IHR5cGU7XG5cdFx0dGhpcy5jb2RlID0gRE9NRXhjZXB0aW9uW3R5cGVdO1xuXHRcdHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG5cdH1cblx0LCBjaGVja1Rva2VuQW5kR2V0SW5kZXggPSBmdW5jdGlvbiAoY2xhc3NMaXN0LCB0b2tlbikge1xuXHRcdGlmICh0b2tlbiA9PT0gXCJcIikge1xuXHRcdFx0dGhyb3cgbmV3IERPTUV4KFxuXHRcdFx0XHQgIFwiU1lOVEFYX0VSUlwiXG5cdFx0XHRcdCwgXCJBbiBpbnZhbGlkIG9yIGlsbGVnYWwgc3RyaW5nIHdhcyBzcGVjaWZpZWRcIlxuXHRcdFx0KTtcblx0XHR9XG5cdFx0aWYgKC9cXHMvLnRlc3QodG9rZW4pKSB7XG5cdFx0XHR0aHJvdyBuZXcgRE9NRXgoXG5cdFx0XHRcdCAgXCJJTlZBTElEX0NIQVJBQ1RFUl9FUlJcIlxuXHRcdFx0XHQsIFwiU3RyaW5nIGNvbnRhaW5zIGFuIGludmFsaWQgY2hhcmFjdGVyXCJcblx0XHRcdCk7XG5cdFx0fVxuXHRcdHJldHVybiBhcnJJbmRleE9mLmNhbGwoY2xhc3NMaXN0LCB0b2tlbik7XG5cdH1cblx0LCBDbGFzc0xpc3QgPSBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdHZhclxuXHRcdFx0ICB0cmltbWVkQ2xhc3NlcyA9IHN0clRyaW0uY2FsbChlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIpXG5cdFx0XHQsIGNsYXNzZXMgPSB0cmltbWVkQ2xhc3NlcyA/IHRyaW1tZWRDbGFzc2VzLnNwbGl0KC9cXHMrLykgOiBbXVxuXHRcdFx0LCBpID0gMFxuXHRcdFx0LCBsZW4gPSBjbGFzc2VzLmxlbmd0aFxuXHRcdDtcblx0XHRmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHR0aGlzLnB1c2goY2xhc3Nlc1tpXSk7XG5cdFx0fVxuXHRcdHRoaXMuX3VwZGF0ZUNsYXNzTmFtZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy50b1N0cmluZygpKTtcblx0XHR9O1xuXHR9XG5cdCwgY2xhc3NMaXN0UHJvdG8gPSBDbGFzc0xpc3RbcHJvdG9Qcm9wXSA9IFtdXG5cdCwgY2xhc3NMaXN0R2V0dGVyID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBuZXcgQ2xhc3NMaXN0KHRoaXMpO1xuXHR9XG47XG4vLyBNb3N0IERPTUV4Y2VwdGlvbiBpbXBsZW1lbnRhdGlvbnMgZG9uJ3QgYWxsb3cgY2FsbGluZyBET01FeGNlcHRpb24ncyB0b1N0cmluZygpXG4vLyBvbiBub24tRE9NRXhjZXB0aW9ucy4gRXJyb3IncyB0b1N0cmluZygpIGlzIHN1ZmZpY2llbnQgaGVyZS5cbkRPTUV4W3Byb3RvUHJvcF0gPSBFcnJvcltwcm90b1Byb3BdO1xuY2xhc3NMaXN0UHJvdG8uaXRlbSA9IGZ1bmN0aW9uIChpKSB7XG5cdHJldHVybiB0aGlzW2ldIHx8IG51bGw7XG59O1xuY2xhc3NMaXN0UHJvdG8uY29udGFpbnMgPSBmdW5jdGlvbiAodG9rZW4pIHtcblx0dG9rZW4gKz0gXCJcIjtcblx0cmV0dXJuIGNoZWNrVG9rZW5BbmRHZXRJbmRleCh0aGlzLCB0b2tlbikgIT09IC0xO1xufTtcbmNsYXNzTGlzdFByb3RvLmFkZCA9IGZ1bmN0aW9uICgpIHtcblx0dmFyXG5cdFx0ICB0b2tlbnMgPSBhcmd1bWVudHNcblx0XHQsIGkgPSAwXG5cdFx0LCBsID0gdG9rZW5zLmxlbmd0aFxuXHRcdCwgdG9rZW5cblx0XHQsIHVwZGF0ZWQgPSBmYWxzZVxuXHQ7XG5cdGRvIHtcblx0XHR0b2tlbiA9IHRva2Vuc1tpXSArIFwiXCI7XG5cdFx0aWYgKGNoZWNrVG9rZW5BbmRHZXRJbmRleCh0aGlzLCB0b2tlbikgPT09IC0xKSB7XG5cdFx0XHR0aGlzLnB1c2godG9rZW4pO1xuXHRcdFx0dXBkYXRlZCA9IHRydWU7XG5cdFx0fVxuXHR9XG5cdHdoaWxlICgrK2kgPCBsKTtcblxuXHRpZiAodXBkYXRlZCkge1xuXHRcdHRoaXMuX3VwZGF0ZUNsYXNzTmFtZSgpO1xuXHR9XG59O1xuY2xhc3NMaXN0UHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHR2YXJcblx0XHQgIHRva2VucyA9IGFyZ3VtZW50c1xuXHRcdCwgaSA9IDBcblx0XHQsIGwgPSB0b2tlbnMubGVuZ3RoXG5cdFx0LCB0b2tlblxuXHRcdCwgdXBkYXRlZCA9IGZhbHNlXG5cdFx0LCBpbmRleFxuXHQ7XG5cdGRvIHtcblx0XHR0b2tlbiA9IHRva2Vuc1tpXSArIFwiXCI7XG5cdFx0aW5kZXggPSBjaGVja1Rva2VuQW5kR2V0SW5kZXgodGhpcywgdG9rZW4pO1xuXHRcdHdoaWxlIChpbmRleCAhPT0gLTEpIHtcblx0XHRcdHRoaXMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdHVwZGF0ZWQgPSB0cnVlO1xuXHRcdFx0aW5kZXggPSBjaGVja1Rva2VuQW5kR2V0SW5kZXgodGhpcywgdG9rZW4pO1xuXHRcdH1cblx0fVxuXHR3aGlsZSAoKytpIDwgbCk7XG5cblx0aWYgKHVwZGF0ZWQpIHtcblx0XHR0aGlzLl91cGRhdGVDbGFzc05hbWUoKTtcblx0fVxufTtcbmNsYXNzTGlzdFByb3RvLnRvZ2dsZSA9IGZ1bmN0aW9uICh0b2tlbiwgZm9yY2UpIHtcblx0dG9rZW4gKz0gXCJcIjtcblxuXHR2YXJcblx0XHQgIHJlc3VsdCA9IHRoaXMuY29udGFpbnModG9rZW4pXG5cdFx0LCBtZXRob2QgPSByZXN1bHQgP1xuXHRcdFx0Zm9yY2UgIT09IHRydWUgJiYgXCJyZW1vdmVcIlxuXHRcdDpcblx0XHRcdGZvcmNlICE9PSBmYWxzZSAmJiBcImFkZFwiXG5cdDtcblxuXHRpZiAobWV0aG9kKSB7XG5cdFx0dGhpc1ttZXRob2RdKHRva2VuKTtcblx0fVxuXG5cdGlmIChmb3JjZSA9PT0gdHJ1ZSB8fCBmb3JjZSA9PT0gZmFsc2UpIHtcblx0XHRyZXR1cm4gZm9yY2U7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuICFyZXN1bHQ7XG5cdH1cbn07XG5jbGFzc0xpc3RQcm90by50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIHRoaXMuam9pbihcIiBcIik7XG59O1xuXG5pZiAob2JqQ3RyLmRlZmluZVByb3BlcnR5KSB7XG5cdHZhciBjbGFzc0xpc3RQcm9wRGVzYyA9IHtcblx0XHQgIGdldDogY2xhc3NMaXN0R2V0dGVyXG5cdFx0LCBlbnVtZXJhYmxlOiB0cnVlXG5cdFx0LCBjb25maWd1cmFibGU6IHRydWVcblx0fTtcblx0dHJ5IHtcblx0XHRvYmpDdHIuZGVmaW5lUHJvcGVydHkoZWxlbUN0clByb3RvLCBjbGFzc0xpc3RQcm9wLCBjbGFzc0xpc3RQcm9wRGVzYyk7XG5cdH0gY2F0Y2ggKGV4KSB7IC8vIElFIDggZG9lc24ndCBzdXBwb3J0IGVudW1lcmFibGU6dHJ1ZVxuXHRcdC8vIGFkZGluZyB1bmRlZmluZWQgdG8gZmlnaHQgdGhpcyBpc3N1ZSBodHRwczovL2dpdGh1Yi5jb20vZWxpZ3JleS9jbGFzc0xpc3QuanMvaXNzdWVzLzM2XG5cdFx0Ly8gbW9kZXJuaWUgSUU4LU1TVzcgbWFjaGluZSBoYXMgSUU4IDguMC42MDAxLjE4NzAyIGFuZCBpcyBhZmZlY3RlZFxuXHRcdGlmIChleC5udW1iZXIgPT09IHVuZGVmaW5lZCB8fCBleC5udW1iZXIgPT09IC0weDdGRjVFQzU0KSB7XG5cdFx0XHRjbGFzc0xpc3RQcm9wRGVzYy5lbnVtZXJhYmxlID0gZmFsc2U7XG5cdFx0XHRvYmpDdHIuZGVmaW5lUHJvcGVydHkoZWxlbUN0clByb3RvLCBjbGFzc0xpc3RQcm9wLCBjbGFzc0xpc3RQcm9wRGVzYyk7XG5cdFx0fVxuXHR9XG59IGVsc2UgaWYgKG9iakN0cltwcm90b1Byb3BdLl9fZGVmaW5lR2V0dGVyX18pIHtcblx0ZWxlbUN0clByb3RvLl9fZGVmaW5lR2V0dGVyX18oY2xhc3NMaXN0UHJvcCwgY2xhc3NMaXN0R2V0dGVyKTtcbn1cblxufSh3aW5kb3cuc2VsZikpO1xuXG59XG5cbi8vIFRoZXJlIGlzIGZ1bGwgb3IgcGFydGlhbCBuYXRpdmUgY2xhc3NMaXN0IHN1cHBvcnQsIHNvIGp1c3QgY2hlY2sgaWYgd2UgbmVlZFxuLy8gdG8gbm9ybWFsaXplIHRoZSBhZGQvcmVtb3ZlIGFuZCB0b2dnbGUgQVBJcy5cblxuKGZ1bmN0aW9uICgpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0dmFyIHRlc3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIl9cIik7XG5cblx0dGVzdEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImMxXCIsIFwiYzJcIik7XG5cblx0Ly8gUG9seWZpbGwgZm9yIElFIDEwLzExIGFuZCBGaXJlZm94IDwyNiwgd2hlcmUgY2xhc3NMaXN0LmFkZCBhbmRcblx0Ly8gY2xhc3NMaXN0LnJlbW92ZSBleGlzdCBidXQgc3VwcG9ydCBvbmx5IG9uZSBhcmd1bWVudCBhdCBhIHRpbWUuXG5cdGlmICghdGVzdEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiYzJcIikpIHtcblx0XHR2YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24obWV0aG9kKSB7XG5cdFx0XHR2YXIgb3JpZ2luYWwgPSBET01Ub2tlbkxpc3QucHJvdG90eXBlW21ldGhvZF07XG5cblx0XHRcdERPTVRva2VuTGlzdC5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHRva2VuKSB7XG5cdFx0XHRcdHZhciBpLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRcdHRva2VuID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0XHRcdG9yaWdpbmFsLmNhbGwodGhpcywgdG9rZW4pO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0Y3JlYXRlTWV0aG9kKCdhZGQnKTtcblx0XHRjcmVhdGVNZXRob2QoJ3JlbW92ZScpO1xuXHR9XG5cblx0dGVzdEVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShcImMzXCIsIGZhbHNlKTtcblxuXHQvLyBQb2x5ZmlsbCBmb3IgSUUgMTAgYW5kIEZpcmVmb3ggPDI0LCB3aGVyZSBjbGFzc0xpc3QudG9nZ2xlIGRvZXMgbm90XG5cdC8vIHN1cHBvcnQgdGhlIHNlY29uZCBhcmd1bWVudC5cblx0aWYgKHRlc3RFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcImMzXCIpKSB7XG5cdFx0dmFyIF90b2dnbGUgPSBET01Ub2tlbkxpc3QucHJvdG90eXBlLnRvZ2dsZTtcblxuXHRcdERPTVRva2VuTGlzdC5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24odG9rZW4sIGZvcmNlKSB7XG5cdFx0XHRpZiAoMSBpbiBhcmd1bWVudHMgJiYgIXRoaXMuY29udGFpbnModG9rZW4pID09PSAhZm9yY2UpIHtcblx0XHRcdFx0cmV0dXJuIGZvcmNlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIF90b2dnbGUuY2FsbCh0aGlzLCB0b2tlbik7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHR9XG5cblx0dGVzdEVsZW1lbnQgPSBudWxsO1xufSgpKTtcblxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCdlcy1nZXQtaXRlcmF0b3InKTtcbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCdpdGVyYXRlLWl0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXRlcmF0ZVZhbHVlKGl0ZXJhYmxlKSB7XG5cdHZhciBpdGVyYXRvciA9IGdldEl0ZXJhdG9yKGl0ZXJhYmxlKTtcblx0aWYgKCFpdGVyYXRvcikge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdub24taXRlcmFibGUgdmFsdWUgcHJvdmlkZWQnKTtcblx0fVxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRyZXR1cm4gaXRlcmF0ZShpdGVyYXRvciwgYXJndW1lbnRzWzFdKTtcblx0fVxuXHRyZXR1cm4gaXRlcmF0ZShpdGVyYXRvcik7XG59O1xuIiwiLyohIG1hdGNoTWVkaWEoKSBwb2x5ZmlsbCAtIFRlc3QgYSBDU1MgbWVkaWEgdHlwZS9xdWVyeSBpbiBKUy4gQXV0aG9ycyAmIGNvcHlyaWdodCAoYykgMjAxMjogU2NvdHQgSmVobCwgUGF1bCBJcmlzaCwgTmljaG9sYXMgWmFrYXMsIERhdmlkIEtuaWdodC4gTUlUIGxpY2Vuc2UgKi9cblxud2luZG93Lm1hdGNoTWVkaWEgfHwgKHdpbmRvdy5tYXRjaE1lZGlhID0gZnVuY3Rpb24oKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICAvLyBGb3IgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IG1hdGNoTWVkaXVtIGFwaSBzdWNoIGFzIElFIDkgYW5kIHdlYmtpdFxuICAgIHZhciBzdHlsZU1lZGlhID0gKHdpbmRvdy5zdHlsZU1lZGlhIHx8IHdpbmRvdy5tZWRpYSk7XG5cbiAgICAvLyBGb3IgdGhvc2UgdGhhdCBkb24ndCBzdXBwb3J0IG1hdGNoTWVkaXVtXG4gICAgaWYgKCFzdHlsZU1lZGlhKSB7XG4gICAgICAgIHZhciBzdHlsZSAgICAgICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyksXG4gICAgICAgICAgICBzY3JpcHQgICAgICA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXSxcbiAgICAgICAgICAgIGluZm8gICAgICAgID0gbnVsbDtcblxuICAgICAgICBzdHlsZS50eXBlICA9ICd0ZXh0L2Nzcyc7XG4gICAgICAgIHN0eWxlLmlkICAgID0gJ21hdGNobWVkaWFqcy10ZXN0JztcblxuICAgICAgICBpZiAoIXNjcmlwdCkge1xuICAgICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNjcmlwdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzdHlsZSwgc2NyaXB0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vICdzdHlsZS5jdXJyZW50U3R5bGUnIGlzIHVzZWQgYnkgSUUgPD0gOCBhbmQgJ3dpbmRvdy5nZXRDb21wdXRlZFN0eWxlJyBmb3IgYWxsIG90aGVyIGJyb3dzZXJzXG4gICAgICAgIGluZm8gPSAoJ2dldENvbXB1dGVkU3R5bGUnIGluIHdpbmRvdykgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUoc3R5bGUsIG51bGwpIHx8IHN0eWxlLmN1cnJlbnRTdHlsZTtcblxuICAgICAgICBzdHlsZU1lZGlhID0ge1xuICAgICAgICAgICAgbWF0Y2hNZWRpdW06IGZ1bmN0aW9uKG1lZGlhKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRleHQgPSAnQG1lZGlhICcgKyBtZWRpYSArICd7ICNtYXRjaG1lZGlhanMtdGVzdCB7IHdpZHRoOiAxcHg7IH0gfSc7XG5cbiAgICAgICAgICAgICAgICAvLyAnc3R5bGUuc3R5bGVTaGVldCcgaXMgdXNlZCBieSBJRSA8PSA4IGFuZCAnc3R5bGUudGV4dENvbnRlbnQnIGZvciBhbGwgb3RoZXIgYnJvd3NlcnNcbiAgICAgICAgICAgICAgICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSB0ZXh0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBUZXN0IGlmIG1lZGlhIHF1ZXJ5IGlzIHRydWUgb3IgZmFsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5mby53aWR0aCA9PT0gJzFweCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKG1lZGlhKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtYXRjaGVzOiBzdHlsZU1lZGlhLm1hdGNoTWVkaXVtKG1lZGlhIHx8ICdhbGwnKSxcbiAgICAgICAgICAgIG1lZGlhOiBtZWRpYSB8fCAnYWxsJ1xuICAgICAgICB9O1xuICAgIH07XG59KCkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcXVpcmVQcm9taXNlKCkge1xuXHRpZiAodHlwZW9mIFByb21pc2UgIT09ICdmdW5jdGlvbicpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdgUHJvbWlzZS5hbGxTZXR0bGVkYCByZXF1aXJlcyBhIGdsb2JhbCBgUHJvbWlzZWAgYmUgYXZhaWxhYmxlLicpO1xuXHR9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5cyA9IHJlcXVpcmUoJ29iamVjdC1rZXlzJyk7XG52YXIgaGFzU3ltYm9scyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbCgnZm9vJykgPT09ICdzeW1ib2wnO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGNvbmNhdCA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQ7XG52YXIgb3JpZ0RlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIChmbikge1xuXHRyZXR1cm4gdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nICYmIHRvU3RyLmNhbGwoZm4pID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufTtcblxudmFyIGFyZVByb3BlcnR5RGVzY3JpcHRvcnNTdXBwb3J0ZWQgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBvYmogPSB7fTtcblx0dHJ5IHtcblx0XHRvcmlnRGVmaW5lUHJvcGVydHkob2JqLCAneCcsIHsgZW51bWVyYWJsZTogZmFsc2UsIHZhbHVlOiBvYmogfSk7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzLCBuby1yZXN0cmljdGVkLXN5bnRheFxuXHRcdGZvciAodmFyIF8gaW4gb2JqKSB7IC8vIGpzY3M6aWdub3JlIGRpc2FsbG93VW51c2VkVmFyaWFibGVzXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiBvYmoueCA9PT0gb2JqO1xuXHR9IGNhdGNoIChlKSB7IC8qIHRoaXMgaXMgSUUgOC4gKi9cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn07XG52YXIgc3VwcG9ydHNEZXNjcmlwdG9ycyA9IG9yaWdEZWZpbmVQcm9wZXJ0eSAmJiBhcmVQcm9wZXJ0eURlc2NyaXB0b3JzU3VwcG9ydGVkKCk7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIHZhbHVlLCBwcmVkaWNhdGUpIHtcblx0aWYgKG5hbWUgaW4gb2JqZWN0ICYmICghaXNGdW5jdGlvbihwcmVkaWNhdGUpIHx8ICFwcmVkaWNhdGUoKSkpIHtcblx0XHRyZXR1cm47XG5cdH1cblx0aWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcblx0XHRvcmlnRGVmaW5lUHJvcGVydHkob2JqZWN0LCBuYW1lLCB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdHdyaXRhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0b2JqZWN0W25hbWVdID0gdmFsdWU7XG5cdH1cbn07XG5cbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9iamVjdCwgbWFwKSB7XG5cdHZhciBwcmVkaWNhdGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB7fTtcblx0dmFyIHByb3BzID0ga2V5cyhtYXApO1xuXHRpZiAoaGFzU3ltYm9scykge1xuXHRcdHByb3BzID0gY29uY2F0LmNhbGwocHJvcHMsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMobWFwKSk7XG5cdH1cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcHNbaV0sIG1hcFtwcm9wc1tpXV0sIHByZWRpY2F0ZXNbcHJvcHNbaV1dKTtcblx0fVxufTtcblxuZGVmaW5lUHJvcGVydGllcy5zdXBwb3J0c0Rlc2NyaXB0b3JzID0gISFzdXBwb3J0c0Rlc2NyaXB0b3JzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZVByb3BlcnRpZXM7XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnLi4vaGVscGVycy9jYWxsQm91bmQnKTtcblxudmFyICRQcm9taXNlUmVzb2x2ZSA9IGNhbGxCb3VuZCgnUHJvbWlzZS5yZXNvbHZlJywgdHJ1ZSk7XG5cbi8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi85LjAvI3NlYy1wcm9taXNlLXJlc29sdmVcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBQcm9taXNlUmVzb2x2ZShDLCB4KSB7XG5cdGlmICghJFByb21pc2VSZXNvbHZlKSB7XG5cdFx0dGhyb3cgbmV3IFN5bnRheEVycm9yKCdUaGlzIGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgUHJvbWlzZXMuJyk7XG5cdH1cblx0cmV0dXJuICRQcm9taXNlUmVzb2x2ZShDLCB4KTtcbn07XG5cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRpc05hTiA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNOYU4nKTtcblxuLy8gaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTkuMTJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBTYW1lVmFsdWUoeCwgeSkge1xuXHRpZiAoeCA9PT0geSkgeyAvLyAwID09PSAtMCwgYnV0IHRoZXkgYXJlIG5vdCBpZGVudGljYWwuXG5cdFx0aWYgKHggPT09IDApIHsgcmV0dXJuIDEgLyB4ID09PSAxIC8geTsgfVxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdHJldHVybiAkaXNOYU4oeCkgJiYgJGlzTmFOKHkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnZG9jdW1lbnQuY29udGFpbnMvYXV0bycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgfHwgaW1wbGVtZW50YXRpb247XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICR0ZXN0ID0gR2V0SW50cmluc2ljKCdSZWdFeHAucHJvdG90eXBlLnRlc3QnKTtcblxudmFyIGNhbGxCaW5kID0gcmVxdWlyZSgnLi9jYWxsQmluZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlZ2V4VGVzdGVyKHJlZ2V4KSB7XG5cdHJldHVybiBjYWxsQmluZCgkdGVzdCwgcmVnZXgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGdldERheSA9IERhdGUucHJvdG90eXBlLmdldERheTtcbnZhciB0cnlEYXRlT2JqZWN0ID0gZnVuY3Rpb24gdHJ5RGF0ZUdldERheUNhbGwodmFsdWUpIHtcblx0dHJ5IHtcblx0XHRnZXREYXkuY2FsbCh2YWx1ZSk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn07XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZGF0ZUNsYXNzID0gJ1tvYmplY3QgRGF0ZV0nO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0RhdGVPYmplY3QodmFsdWUpIHtcblx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgdmFsdWUgPT09IG51bGwpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0cmV0dXJuIGhhc1RvU3RyaW5nVGFnID8gdHJ5RGF0ZU9iamVjdCh2YWx1ZSkgOiB0b1N0ci5jYWxsKHZhbHVlKSA9PT0gZGF0ZUNsYXNzO1xufTtcbiIsInJlcXVpcmUoJy4vJykucG9seWZpbGwoKVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzUHJpbWl0aXZlKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzIHx8IGltcGxlbWVudGF0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlcXVpcmVQcm9taXNlID0gcmVxdWlyZSgnLi9yZXF1aXJlUHJvbWlzZScpO1xuXG5yZXF1aXJlUHJvbWlzZSgpO1xuXG52YXIgUHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1Byb21pc2VSZXNvbHZlJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVHlwZScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCdpdGVyYXRlLXZhbHVlJyk7XG52YXIgbWFwID0gcmVxdWlyZSgnYXJyYXkucHJvdG90eXBlLm1hcCcpO1xudmFyIGdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L0dldEludHJpbnNpYycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG5cbnZhciBhbGwgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgZ2V0SW50cmluc2ljKCclUHJvbWlzZV9hbGwlJykpO1xudmFyIHJlamVjdCA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBnZXRJbnRyaW5zaWMoJyVQcm9taXNlX3JlamVjdCUnKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYWxsU2V0dGxlZChpdGVyYWJsZSkge1xuXHR2YXIgQyA9IHRoaXM7XG5cdGlmIChUeXBlKEMpICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2B0aGlzYCB2YWx1ZSBtdXN0IGJlIGFuIG9iamVjdCcpO1xuXHR9XG5cdHZhciB2YWx1ZXMgPSBpdGVyYXRlKGl0ZXJhYmxlKTtcblx0cmV0dXJuIGFsbChDLCBtYXAodmFsdWVzLCBmdW5jdGlvbiAoaXRlbSkge1xuXHRcdHZhciBvbkZ1bGZpbGwgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdHJldHVybiB7IHN0YXR1czogJ2Z1bGZpbGxlZCcsIHZhbHVlOiB2YWx1ZSB9O1xuXHRcdH07XG5cdFx0dmFyIG9uUmVqZWN0ID0gZnVuY3Rpb24gKHJlYXNvbikge1xuXHRcdFx0cmV0dXJuIHsgc3RhdHVzOiAncmVqZWN0ZWQnLCByZWFzb246IHJlYXNvbiB9O1xuXHRcdH07XG5cdFx0dmFyIGl0ZW1Qcm9taXNlID0gUHJvbWlzZVJlc29sdmUoQywgaXRlbSk7XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBpdGVtUHJvbWlzZS50aGVuKG9uRnVsZmlsbCwgb25SZWplY3QpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiByZWplY3QoQywgZSk7XG5cdFx0fVxuXHR9KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuL3NoaW0nKSgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgY29tcGxleGl0eTogWzIsIDE4XSwgbWF4LXN0YXRlbWVudHM6IFsyLCAzM10gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzU3ltYm9scygpIHtcblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAnc3ltYm9sJykgeyByZXR1cm4gdHJ1ZTsgfVxuXG5cdHZhciBvYmogPSB7fTtcblx0dmFyIHN5bSA9IFN5bWJvbCgndGVzdCcpO1xuXHR2YXIgc3ltT2JqID0gT2JqZWN0KHN5bSk7XG5cdGlmICh0eXBlb2Ygc3ltID09PSAnc3RyaW5nJykgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bSkgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bU9iaikgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdC8vIHRlbXAgZGlzYWJsZWQgcGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvb2JqZWN0LmFzc2lnbi9pc3N1ZXMvMTdcblx0Ly8gaWYgKHN5bSBpbnN0YW5jZW9mIFN5bWJvbCkgeyByZXR1cm4gZmFsc2U7IH1cblx0Ly8gdGVtcCBkaXNhYmxlZCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL1dlYlJlZmxlY3Rpb24vZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzL2lzc3Vlcy80XG5cdC8vIGlmICghKHN5bU9iaiBpbnN0YW5jZW9mIFN5bWJvbCkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gaWYgKHR5cGVvZiBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHQvLyBpZiAoU3RyaW5nKHN5bSkgIT09IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHZhciBzeW1WYWwgPSA0Mjtcblx0b2JqW3N5bV0gPSBzeW1WYWw7XG5cdGZvciAoc3ltIGluIG9iaikgeyByZXR1cm4gZmFsc2U7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuXHRpZiAodHlwZW9mIE9iamVjdC5rZXlzID09PSAnZnVuY3Rpb24nICYmIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoICE9PSAwKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgPT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5sZW5ndGggIT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0dmFyIHN5bXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iaik7XG5cdGlmIChzeW1zLmxlbmd0aCAhPT0gMSB8fCBzeW1zWzBdICE9PSBzeW0pIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqLCBzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIHN5bSk7XG5cdFx0aWYgKGRlc2NyaXB0b3IudmFsdWUgIT09IHN5bVZhbCB8fCBkZXNjcmlwdG9yLmVudW1lcmFibGUgIT09IHRydWUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcbnZhciBUb0Jvb2xlYW4gPSByZXF1aXJlKCcuL1RvQm9vbGVhbicpO1xudmFyIElzQ2FsbGFibGUgPSByZXF1aXJlKCcuL0lzQ2FsbGFibGUnKTtcblxuLy8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTguMTAuNVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvUHJvcGVydHlEZXNjcmlwdG9yKE9iaikge1xuXHRpZiAoVHlwZShPYmopICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdUb1Byb3BlcnR5RGVzY3JpcHRvciByZXF1aXJlcyBhbiBvYmplY3QnKTtcblx0fVxuXG5cdHZhciBkZXNjID0ge307XG5cdGlmIChoYXMoT2JqLCAnZW51bWVyYWJsZScpKSB7XG5cdFx0ZGVzY1snW1tFbnVtZXJhYmxlXV0nXSA9IFRvQm9vbGVhbihPYmouZW51bWVyYWJsZSk7XG5cdH1cblx0aWYgKGhhcyhPYmosICdjb25maWd1cmFibGUnKSkge1xuXHRcdGRlc2NbJ1tbQ29uZmlndXJhYmxlXV0nXSA9IFRvQm9vbGVhbihPYmouY29uZmlndXJhYmxlKTtcblx0fVxuXHRpZiAoaGFzKE9iaiwgJ3ZhbHVlJykpIHtcblx0XHRkZXNjWydbW1ZhbHVlXV0nXSA9IE9iai52YWx1ZTtcblx0fVxuXHRpZiAoaGFzKE9iaiwgJ3dyaXRhYmxlJykpIHtcblx0XHRkZXNjWydbW1dyaXRhYmxlXV0nXSA9IFRvQm9vbGVhbihPYmoud3JpdGFibGUpO1xuXHR9XG5cdGlmIChoYXMoT2JqLCAnZ2V0JykpIHtcblx0XHR2YXIgZ2V0dGVyID0gT2JqLmdldDtcblx0XHRpZiAodHlwZW9mIGdldHRlciAhPT0gJ3VuZGVmaW5lZCcgJiYgIUlzQ2FsbGFibGUoZ2V0dGVyKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignZ2V0dGVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXHRcdH1cblx0XHRkZXNjWydbW0dldF1dJ10gPSBnZXR0ZXI7XG5cdH1cblx0aWYgKGhhcyhPYmosICdzZXQnKSkge1xuXHRcdHZhciBzZXR0ZXIgPSBPYmouc2V0O1xuXHRcdGlmICh0eXBlb2Ygc2V0dGVyICE9PSAndW5kZWZpbmVkJyAmJiAhSXNDYWxsYWJsZShzZXR0ZXIpKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignc2V0dGVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXHRcdH1cblx0XHRkZXNjWydbW1NldF1dJ10gPSBzZXR0ZXI7XG5cdH1cblxuXHRpZiAoKGhhcyhkZXNjLCAnW1tHZXRdXScpIHx8IGhhcyhkZXNjLCAnW1tTZXRdXScpKSAmJiAoaGFzKGRlc2MsICdbW1ZhbHVlXV0nKSB8fCBoYXMoZGVzYywgJ1tbV3JpdGFibGVdXScpKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdJbnZhbGlkIHByb3BlcnR5IGRlc2NyaXB0b3IuIENhbm5vdCBib3RoIHNwZWNpZnkgYWNjZXNzb3JzIGFuZCBhIHZhbHVlIG9yIHdyaXRhYmxlIGF0dHJpYnV0ZScpO1xuXHR9XG5cdHJldHVybiBkZXNjO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHR5cGVvZiBQcm9taXNlID09PSAnZnVuY3Rpb24nKSB7XG4gIHJlcXVpcmUoJ3Byb21pc2UucHJvdG90eXBlLmZpbmFsbHkvYXV0bycpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGdsb2JhbC1yZXF1aXJlXG59XG5cbnJlcXVpcmUoJy4vZXMyMDE5Jyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1Db250YWlucygpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRkZWZpbmUoXG5cdFx0XHRkb2N1bWVudCxcblx0XHRcdHsgY29udGFpbnM6IHBvbHlmaWxsIH0sXG5cdFx0XHR7IGNvbnRhaW5zOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudC5jb250YWlucyAhPT0gcG9seWZpbGw7IH0gfVxuXHRcdCk7XG5cdFx0aWYgKHR5cGVvZiBFbGVtZW50ICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0ZGVmaW5lKFxuXHRcdFx0XHRFbGVtZW50LnByb3RvdHlwZSxcblx0XHRcdFx0eyBjb250YWluczogcG9seWZpbGwgfSxcblx0XHRcdFx0eyBjb250YWluczogZnVuY3Rpb24gKCkgeyByZXR1cm4gRWxlbWVudC5wcm90b3R5cGUuY29udGFpbnMgIT09IHBvbHlmaWxsOyB9IH1cblx0XHRcdCk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0cmV0dXJuIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA9PT0gJ2Z1bmN0aW9uJyA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIDogaW1wbGVtZW50YXRpb247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3VwcG9ydHNEZXNjcmlwdG9ycyA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJykuc3VwcG9ydHNEZXNjcmlwdG9ycztcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBUeXBlRXJyID0gVHlwZUVycm9yO1xudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIHJlZ2V4ID0gL2EvO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1GbGFncygpIHtcblx0aWYgKCFzdXBwb3J0c0Rlc2NyaXB0b3JzIHx8ICFnZXRQcm90bykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyKCdSZWdFeHAucHJvdG90eXBlLmZsYWdzIHJlcXVpcmVzIGEgdHJ1ZSBFUzUgZW52aXJvbm1lbnQgdGhhdCBzdXBwb3J0cyBwcm9wZXJ0eSBkZXNjcmlwdG9ycycpO1xuXHR9XG5cdHZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG5cdHZhciBwcm90byA9IGdldFByb3RvKHJlZ2V4KTtcblx0dmFyIGRlc2NyaXB0b3IgPSBnT1BEKHByb3RvLCAnZmxhZ3MnKTtcblx0aWYgKCFkZXNjcmlwdG9yIHx8IGRlc2NyaXB0b3IuZ2V0ICE9PSBwb2x5ZmlsbCkge1xuXHRcdGRlZmluZVByb3BlcnR5KHByb3RvLCAnZmxhZ3MnLCB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdGdldDogcG9seWZpbGxcblx0XHR9KTtcblx0fVxuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9BcnJheVNwZWNpZXNDcmVhdGUnKTtcbnZhciBGbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9GbGF0dGVuSW50b0FycmF5Jyk7XG52YXIgR2V0ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9HZXQnKTtcbnZhciBJc0NhbGxhYmxlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Jc0NhbGxhYmxlJyk7XG52YXIgVG9MZW5ndGggPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1RvTGVuZ3RoJyk7XG52YXIgVG9PYmplY3QgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1RvT2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmxhdE1hcChtYXBwZXJGdW5jdGlvbikge1xuXHR2YXIgTyA9IFRvT2JqZWN0KHRoaXMpO1xuXHR2YXIgc291cmNlTGVuID0gVG9MZW5ndGgoR2V0KE8sICdsZW5ndGgnKSk7XG5cblx0aWYgKCFJc0NhbGxhYmxlKG1hcHBlckZ1bmN0aW9uKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ21hcHBlckZ1bmN0aW9uIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXHR9XG5cblx0dmFyIFQ7XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdFQgPSBhcmd1bWVudHNbMV07XG5cdH1cblxuXHR2YXIgQSA9IEFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcblx0RmxhdHRlbkludG9BcnJheShBLCBPLCBzb3VyY2VMZW4sIDAsIDEsIG1hcHBlckZ1bmN0aW9uLCBUKTtcblx0cmV0dXJuIEE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkZ09QRCA9IEdldEludHJpbnNpYygnJU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IlJyk7XG5pZiAoJGdPUEQpIHtcblx0dHJ5IHtcblx0XHQkZ09QRChbXSwgJ2xlbmd0aCcpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSUUgOCBoYXMgYSBicm9rZW4gZ09QRFxuXHRcdCRnT1BEID0gbnVsbDtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9ICRnT1BEO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltRW50cmllcygpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKE9iamVjdCwgeyBlbnRyaWVzOiBwb2x5ZmlsbCB9LCB7XG5cdFx0ZW50cmllczogZnVuY3Rpb24gdGVzdEVudHJpZXMoKSB7XG5cdFx0XHRyZXR1cm4gT2JqZWN0LmVudHJpZXMgIT09IHBvbHlmaWxsO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBEZWZpbmVPd25Qcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvRGVmaW5lT3duUHJvcGVydHknKTtcblxudmFyIEZyb21Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL0Zyb21Qcm9wZXJ0eURlc2NyaXB0b3InKTtcbnZhciBPcmRpbmFyeUdldE93blByb3BlcnR5ID0gcmVxdWlyZSgnLi9PcmRpbmFyeUdldE93blByb3BlcnR5Jyk7XG52YXIgSXNEYXRhRGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vSXNEYXRhRGVzY3JpcHRvcicpO1xudmFyIElzRXh0ZW5zaWJsZSA9IHJlcXVpcmUoJy4vSXNFeHRlbnNpYmxlJyk7XG52YXIgSXNQcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4vSXNQcm9wZXJ0eUtleScpO1xudmFyIFNhbWVWYWx1ZSA9IHJlcXVpcmUoJy4vU2FtZVZhbHVlJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWNyZWF0ZWRhdGFwcm9wZXJ0eVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIENyZWF0ZURhdGFQcm9wZXJ0eShPLCBQLCBWKSB7XG5cdGlmIChUeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKE8pIGlzIG5vdCBPYmplY3QnKTtcblx0fVxuXHRpZiAoIUlzUHJvcGVydHlLZXkoUCkpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogSXNQcm9wZXJ0eUtleShQKSBpcyBub3QgdHJ1ZScpO1xuXHR9XG5cdHZhciBvbGREZXNjID0gT3JkaW5hcnlHZXRPd25Qcm9wZXJ0eShPLCBQKTtcblx0dmFyIGV4dGVuc2libGUgPSAhb2xkRGVzYyB8fCBJc0V4dGVuc2libGUoTyk7XG5cdHZhciBpbW11dGFibGUgPSBvbGREZXNjICYmICghb2xkRGVzY1snW1tXcml0YWJsZV1dJ10gfHwgIW9sZERlc2NbJ1tbQ29uZmlndXJhYmxlXV0nXSk7XG5cdGlmIChpbW11dGFibGUgfHwgIWV4dGVuc2libGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0cmV0dXJuIERlZmluZU93blByb3BlcnR5KFxuXHRcdElzRGF0YURlc2NyaXB0b3IsXG5cdFx0U2FtZVZhbHVlLFxuXHRcdEZyb21Qcm9wZXJ0eURlc2NyaXB0b3IsXG5cdFx0Tyxcblx0XHRQLFxuXHRcdHtcblx0XHRcdCdbW0NvbmZpZ3VyYWJsZV1dJzogdHJ1ZSxcblx0XHRcdCdbW0VudW1lcmFibGVdXSc6IHRydWUsXG5cdFx0XHQnW1tWYWx1ZV1dJzogVixcblx0XHRcdCdbW1dyaXRhYmxlXV0nOiB0cnVlXG5cdFx0fVxuXHQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi9zaGltJykoKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRyZXR1cm4gdHlwZW9mIE9iamVjdC5mcm9tRW50cmllcyA9PT0gJ2Z1bmN0aW9uJyA/IE9iamVjdC5mcm9tRW50cmllcyA6IGltcGxlbWVudGF0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gaXNOYU4oYSkge1xuXHRyZXR1cm4gYSAhPT0gYTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBmblRvU3RyID0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO1xuXG52YXIgY29uc3RydWN0b3JSZWdleCA9IC9eXFxzKmNsYXNzXFxiLztcbnZhciBpc0VTNkNsYXNzRm4gPSBmdW5jdGlvbiBpc0VTNkNsYXNzRnVuY3Rpb24odmFsdWUpIHtcblx0dHJ5IHtcblx0XHR2YXIgZm5TdHIgPSBmblRvU3RyLmNhbGwodmFsdWUpO1xuXHRcdHJldHVybiBjb25zdHJ1Y3RvclJlZ2V4LnRlc3QoZm5TdHIpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlOyAvLyBub3QgYSBmdW5jdGlvblxuXHR9XG59O1xuXG52YXIgdHJ5RnVuY3Rpb25PYmplY3QgPSBmdW5jdGlvbiB0cnlGdW5jdGlvblRvU3RyKHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0aWYgKGlzRVM2Q2xhc3NGbih2YWx1ZSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0Zm5Ub1N0ci5jYWxsKHZhbHVlKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZm5DbGFzcyA9ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG52YXIgZ2VuQ2xhc3MgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbGxhYmxlKHZhbHVlKSB7XG5cdGlmICghdmFsdWUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiAhdmFsdWUucHJvdG90eXBlKSB7IHJldHVybiB0cnVlOyB9XG5cdGlmIChoYXNUb1N0cmluZ1RhZykgeyByZXR1cm4gdHJ5RnVuY3Rpb25PYmplY3QodmFsdWUpOyB9XG5cdGlmIChpc0VTNkNsYXNzRm4odmFsdWUpKSB7IHJldHVybiBmYWxzZTsgfVxuXHR2YXIgc3RyQ2xhc3MgPSB0b1N0ci5jYWxsKHZhbHVlKTtcblx0cmV0dXJuIHN0ckNsYXNzID09PSBmbkNsYXNzIHx8IHN0ckNsYXNzID09PSBnZW5DbGFzcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vNS9DaGVja09iamVjdENvZXJjaWJsZScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZnVuY3Rpb25zSGF2ZU5hbWVzID0gZnVuY3Rpb24gZnVuY3Rpb25zSGF2ZU5hbWVzKCkge1xuXHRyZXR1cm4gdHlwZW9mIGZ1bmN0aW9uIGYoKSB7fS5uYW1lID09PSAnc3RyaW5nJztcbn07XG5cbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbmlmIChnT1BEKSB7XG5cdHRyeSB7XG5cdFx0Z09QRChbXSwgJ2xlbmd0aCcpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSUUgOCBoYXMgYSBicm9rZW4gZ09QRFxuXHRcdGdPUEQgPSBudWxsO1xuXHR9XG59XG5cbmZ1bmN0aW9uc0hhdmVOYW1lcy5mdW5jdGlvbnNIYXZlQ29uZmlndXJhYmxlTmFtZXMgPSBmdW5jdGlvbiBmdW5jdGlvbnNIYXZlQ29uZmlndXJhYmxlTmFtZXMoKSB7XG5cdHJldHVybiBmdW5jdGlvbnNIYXZlTmFtZXMoKSAmJiBnT1BEICYmICEhZ09QRChmdW5jdGlvbiAoKSB7fSwgJ25hbWUnKS5jb25maWd1cmFibGU7XG59O1xuXG52YXIgJGJpbmQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZDtcblxuZnVuY3Rpb25zSGF2ZU5hbWVzLmJvdW5kRnVuY3Rpb25zSGF2ZU5hbWVzID0gZnVuY3Rpb24gYm91bmRGdW5jdGlvbnNIYXZlTmFtZXMoKSB7XG5cdHJldHVybiBmdW5jdGlvbnNIYXZlTmFtZXMoKSAmJiB0eXBlb2YgJGJpbmQgPT09ICdmdW5jdGlvbicgJiYgZnVuY3Rpb24gZigpIHt9LmJpbmQoKS5uYW1lICE9PSAnJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb25zSGF2ZU5hbWVzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgQ2FsbCA9IHJlcXVpcmUoJy4vQ2FsbCcpO1xudmFyIEdldE1ldGhvZCA9IHJlcXVpcmUoJy4vR2V0TWV0aG9kJyk7XG52YXIgSXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4vSXNDYWxsYWJsZScpO1xudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWl0ZXJhdG9yY2xvc2VcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKSB7XG5cdGlmIChUeXBlKGl0ZXJhdG9yKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShpdGVyYXRvcikgaXMgbm90IE9iamVjdCcpO1xuXHR9XG5cdGlmICghSXNDYWxsYWJsZShjb21wbGV0aW9uKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBjb21wbGV0aW9uIGlzIG5vdCBhIHRodW5rIGZvciBhIENvbXBsZXRpb24gUmVjb3JkJyk7XG5cdH1cblx0dmFyIGNvbXBsZXRpb25UaHVuayA9IGNvbXBsZXRpb247XG5cblx0dmFyIGl0ZXJhdG9yUmV0dXJuID0gR2V0TWV0aG9kKGl0ZXJhdG9yLCAncmV0dXJuJyk7XG5cblx0aWYgKHR5cGVvZiBpdGVyYXRvclJldHVybiA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gY29tcGxldGlvblRodW5rKCk7XG5cdH1cblxuXHR2YXIgY29tcGxldGlvblJlY29yZDtcblx0dHJ5IHtcblx0XHR2YXIgaW5uZXJSZXN1bHQgPSBDYWxsKGl0ZXJhdG9yUmV0dXJuLCBpdGVyYXRvciwgW10pO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gaWYgd2UgaGl0IGhlcmUsIHRoZW4gXCJlXCIgaXMgdGhlIGlubmVyUmVzdWx0IGNvbXBsZXRpb24gdGhhdCBuZWVkcyByZS10aHJvd2luZ1xuXG5cdFx0Ly8gaWYgdGhlIGNvbXBsZXRpb24gaXMgb2YgdHlwZSBcInRocm93XCIsIHRoaXMgd2lsbCB0aHJvdy5cblx0XHRjb21wbGV0aW9uVGh1bmsoKTtcblx0XHRjb21wbGV0aW9uVGh1bmsgPSBudWxsOyAvLyBlbnN1cmUgaXQncyBub3QgY2FsbGVkIHR3aWNlLlxuXG5cdFx0Ly8gaWYgbm90LCB0aGVuIHJldHVybiB0aGUgaW5uZXJSZXN1bHQgY29tcGxldGlvblxuXHRcdHRocm93IGU7XG5cdH1cblx0Y29tcGxldGlvblJlY29yZCA9IGNvbXBsZXRpb25UaHVuaygpOyAvLyBpZiBpbm5lclJlc3VsdCB3b3JrZWQsIHRoZW4gdGhyb3cgaWYgdGhlIGNvbXBsZXRpb24gZG9lc1xuXHRjb21wbGV0aW9uVGh1bmsgPSBudWxsOyAvLyBlbnN1cmUgaXQncyBub3QgY2FsbGVkIHR3aWNlLlxuXG5cdGlmIChUeXBlKGlubmVyUmVzdWx0KSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignaXRlcmF0b3IgLnJldHVybiBtdXN0IHJldHVybiBhbiBvYmplY3QnKTtcblx0fVxuXG5cdHJldHVybiBjb21wbGV0aW9uUmVjb3JkO1xufTtcbiIsInZhciBoYXNNYXAgPSB0eXBlb2YgTWFwID09PSAnZnVuY3Rpb24nICYmIE1hcC5wcm90b3R5cGU7XG52YXIgbWFwU2l6ZURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmIGhhc01hcCA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTWFwLnByb3RvdHlwZSwgJ3NpemUnKSA6IG51bGw7XG52YXIgbWFwU2l6ZSA9IGhhc01hcCAmJiBtYXBTaXplRGVzY3JpcHRvciAmJiB0eXBlb2YgbWFwU2l6ZURlc2NyaXB0b3IuZ2V0ID09PSAnZnVuY3Rpb24nID8gbWFwU2l6ZURlc2NyaXB0b3IuZ2V0IDogbnVsbDtcbnZhciBtYXBGb3JFYWNoID0gaGFzTWFwICYmIE1hcC5wcm90b3R5cGUuZm9yRWFjaDtcbnZhciBoYXNTZXQgPSB0eXBlb2YgU2V0ID09PSAnZnVuY3Rpb24nICYmIFNldC5wcm90b3R5cGU7XG52YXIgc2V0U2l6ZURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmIGhhc1NldCA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoU2V0LnByb3RvdHlwZSwgJ3NpemUnKSA6IG51bGw7XG52YXIgc2V0U2l6ZSA9IGhhc1NldCAmJiBzZXRTaXplRGVzY3JpcHRvciAmJiB0eXBlb2Ygc2V0U2l6ZURlc2NyaXB0b3IuZ2V0ID09PSAnZnVuY3Rpb24nID8gc2V0U2l6ZURlc2NyaXB0b3IuZ2V0IDogbnVsbDtcbnZhciBzZXRGb3JFYWNoID0gaGFzU2V0ICYmIFNldC5wcm90b3R5cGUuZm9yRWFjaDtcbnZhciBoYXNXZWFrTWFwID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbicgJiYgV2Vha01hcC5wcm90b3R5cGU7XG52YXIgd2Vha01hcEhhcyA9IGhhc1dlYWtNYXAgPyBXZWFrTWFwLnByb3RvdHlwZS5oYXMgOiBudWxsO1xudmFyIGhhc1dlYWtTZXQgPSB0eXBlb2YgV2Vha1NldCA9PT0gJ2Z1bmN0aW9uJyAmJiBXZWFrU2V0LnByb3RvdHlwZTtcbnZhciB3ZWFrU2V0SGFzID0gaGFzV2Vha1NldCA/IFdlYWtTZXQucHJvdG90eXBlLmhhcyA6IG51bGw7XG52YXIgYm9vbGVhblZhbHVlT2YgPSBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mO1xudmFyIG9iamVjdFRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBtYXRjaCA9IFN0cmluZy5wcm90b3R5cGUubWF0Y2g7XG52YXIgYmlnSW50VmFsdWVPZiA9IHR5cGVvZiBCaWdJbnQgPT09ICdmdW5jdGlvbicgPyBCaWdJbnQucHJvdG90eXBlLnZhbHVlT2YgOiBudWxsO1xuXG52YXIgaW5zcGVjdEN1c3RvbSA9IHJlcXVpcmUoJy4vdXRpbC5pbnNwZWN0JykuY3VzdG9tO1xudmFyIGluc3BlY3RTeW1ib2wgPSBpbnNwZWN0Q3VzdG9tICYmIGlzU3ltYm9sKGluc3BlY3RDdXN0b20pID8gaW5zcGVjdEN1c3RvbSA6IG51bGw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5zcGVjdF8ob2JqLCBvcHRpb25zLCBkZXB0aCwgc2Vlbikge1xuICAgIHZhciBvcHRzID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIGlmIChoYXMob3B0cywgJ3F1b3RlU3R5bGUnKSAmJiAob3B0cy5xdW90ZVN0eWxlICE9PSAnc2luZ2xlJyAmJiBvcHRzLnF1b3RlU3R5bGUgIT09ICdkb3VibGUnKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gXCJxdW90ZVN0eWxlXCIgbXVzdCBiZSBcInNpbmdsZVwiIG9yIFwiZG91YmxlXCInKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuICd1bmRlZmluZWQnO1xuICAgIH1cbiAgICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAnbnVsbCc7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgcmV0dXJuIG9iaiA/ICd0cnVlJyA6ICdmYWxzZSc7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBpbnNwZWN0U3RyaW5nKG9iaiwgb3B0cyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAob2JqID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gSW5maW5pdHkgLyBvYmogPiAwID8gJzAnIDogJy0wJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU3RyaW5nKG9iaik7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnYmlnaW50JykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHZhbGlkLXR5cGVvZlxuICAgICAgICByZXR1cm4gU3RyaW5nKG9iaikgKyAnbic7XG4gICAgfVxuXG4gICAgdmFyIG1heERlcHRoID0gdHlwZW9mIG9wdHMuZGVwdGggPT09ICd1bmRlZmluZWQnID8gNSA6IG9wdHMuZGVwdGg7XG4gICAgaWYgKHR5cGVvZiBkZXB0aCA9PT0gJ3VuZGVmaW5lZCcpIHsgZGVwdGggPSAwOyB9XG4gICAgaWYgKGRlcHRoID49IG1heERlcHRoICYmIG1heERlcHRoID4gMCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gJ1tPYmplY3RdJztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNlZW4gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNlZW4gPSBbXTtcbiAgICB9IGVsc2UgaWYgKGluZGV4T2Yoc2Vlbiwgb2JqKSA+PSAwKSB7XG4gICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zcGVjdCh2YWx1ZSwgZnJvbSkge1xuICAgICAgICBpZiAoZnJvbSkge1xuICAgICAgICAgICAgc2VlbiA9IHNlZW4uc2xpY2UoKTtcbiAgICAgICAgICAgIHNlZW4ucHVzaChmcm9tKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5zcGVjdF8odmFsdWUsIG9wdHMsIGRlcHRoICsgMSwgc2Vlbik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBuYW1lT2Yob2JqKTtcbiAgICAgICAgcmV0dXJuICdbRnVuY3Rpb24nICsgKG5hbWUgPyAnOiAnICsgbmFtZSA6ICcnKSArICddJztcbiAgICB9XG4gICAgaWYgKGlzU3ltYm9sKG9iaikpIHtcbiAgICAgICAgdmFyIHN5bVN0cmluZyA9IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopO1xuICAgICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgPyBtYXJrQm94ZWQoc3ltU3RyaW5nKSA6IHN5bVN0cmluZztcbiAgICB9XG4gICAgaWYgKGlzRWxlbWVudChvYmopKSB7XG4gICAgICAgIHZhciBzID0gJzwnICsgU3RyaW5nKG9iai5ub2RlTmFtZSkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgdmFyIGF0dHJzID0gb2JqLmF0dHJpYnV0ZXMgfHwgW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXR0cnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHMgKz0gJyAnICsgYXR0cnNbaV0ubmFtZSArICc9JyArIHdyYXBRdW90ZXMocXVvdGUoYXR0cnNbaV0udmFsdWUpLCAnZG91YmxlJywgb3B0cyk7XG4gICAgICAgIH1cbiAgICAgICAgcyArPSAnPic7XG4gICAgICAgIGlmIChvYmouY2hpbGROb2RlcyAmJiBvYmouY2hpbGROb2Rlcy5sZW5ndGgpIHsgcyArPSAnLi4uJzsgfVxuICAgICAgICBzICs9ICc8LycgKyBTdHJpbmcob2JqLm5vZGVOYW1lKS50b0xvd2VyQ2FzZSgpICsgJz4nO1xuICAgICAgICByZXR1cm4gcztcbiAgICB9XG4gICAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgICAgICBpZiAob2JqLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gJ1tdJzsgfVxuICAgICAgICByZXR1cm4gJ1sgJyArIGFyck9iaktleXMob2JqLCBpbnNwZWN0KS5qb2luKCcsICcpICsgJyBdJztcbiAgICB9XG4gICAgaWYgKGlzRXJyb3Iob2JqKSkge1xuICAgICAgICB2YXIgcGFydHMgPSBhcnJPYmpLZXlzKG9iaiwgaW5zcGVjdCk7XG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDApIHsgcmV0dXJuICdbJyArIFN0cmluZyhvYmopICsgJ10nOyB9XG4gICAgICAgIHJldHVybiAneyBbJyArIFN0cmluZyhvYmopICsgJ10gJyArIHBhcnRzLmpvaW4oJywgJykgKyAnIH0nO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKGluc3BlY3RTeW1ib2wgJiYgdHlwZW9mIG9ialtpbnNwZWN0U3ltYm9sXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIG9ialtpbnNwZWN0U3ltYm9sXSgpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmouaW5zcGVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIG9iai5pbnNwZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzTWFwKG9iaikpIHtcbiAgICAgICAgdmFyIG1hcFBhcnRzID0gW107XG4gICAgICAgIG1hcEZvckVhY2guY2FsbChvYmosIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICBtYXBQYXJ0cy5wdXNoKGluc3BlY3Qoa2V5LCBvYmopICsgJyA9PiAnICsgaW5zcGVjdCh2YWx1ZSwgb2JqKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbk9mKCdNYXAnLCBtYXBTaXplLmNhbGwob2JqKSwgbWFwUGFydHMpO1xuICAgIH1cbiAgICBpZiAoaXNTZXQob2JqKSkge1xuICAgICAgICB2YXIgc2V0UGFydHMgPSBbXTtcbiAgICAgICAgc2V0Rm9yRWFjaC5jYWxsKG9iaiwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzZXRQYXJ0cy5wdXNoKGluc3BlY3QodmFsdWUsIG9iaikpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25PZignU2V0Jywgc2V0U2l6ZS5jYWxsKG9iaiksIHNldFBhcnRzKTtcbiAgICB9XG4gICAgaWYgKGlzV2Vha01hcChvYmopKSB7XG4gICAgICAgIHJldHVybiB3ZWFrQ29sbGVjdGlvbk9mKCdXZWFrTWFwJyk7XG4gICAgfVxuICAgIGlmIChpc1dlYWtTZXQob2JqKSkge1xuICAgICAgICByZXR1cm4gd2Vha0NvbGxlY3Rpb25PZignV2Vha1NldCcpO1xuICAgIH1cbiAgICBpZiAoaXNOdW1iZXIob2JqKSkge1xuICAgICAgICByZXR1cm4gbWFya0JveGVkKGluc3BlY3QoTnVtYmVyKG9iaikpKTtcbiAgICB9XG4gICAgaWYgKGlzQmlnSW50KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG1hcmtCb3hlZChpbnNwZWN0KGJpZ0ludFZhbHVlT2YuY2FsbChvYmopKSk7XG4gICAgfVxuICAgIGlmIChpc0Jvb2xlYW4ob2JqKSkge1xuICAgICAgICByZXR1cm4gbWFya0JveGVkKGJvb2xlYW5WYWx1ZU9mLmNhbGwob2JqKSk7XG4gICAgfVxuICAgIGlmIChpc1N0cmluZyhvYmopKSB7XG4gICAgICAgIHJldHVybiBtYXJrQm94ZWQoaW5zcGVjdChTdHJpbmcob2JqKSkpO1xuICAgIH1cbiAgICBpZiAoIWlzRGF0ZShvYmopICYmICFpc1JlZ0V4cChvYmopKSB7XG4gICAgICAgIHZhciB4cyA9IGFyck9iaktleXMob2JqLCBpbnNwZWN0KTtcbiAgICAgICAgaWYgKHhzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gJ3t9JzsgfVxuICAgICAgICByZXR1cm4gJ3sgJyArIHhzLmpvaW4oJywgJykgKyAnIH0nO1xuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nKG9iaik7XG59O1xuXG5mdW5jdGlvbiB3cmFwUXVvdGVzKHMsIGRlZmF1bHRTdHlsZSwgb3B0cykge1xuICAgIHZhciBxdW90ZUNoYXIgPSAob3B0cy5xdW90ZVN0eWxlIHx8IGRlZmF1bHRTdHlsZSkgPT09ICdkb3VibGUnID8gJ1wiJyA6IFwiJ1wiO1xuICAgIHJldHVybiBxdW90ZUNoYXIgKyBzICsgcXVvdGVDaGFyO1xufVxuXG5mdW5jdGlvbiBxdW90ZShzKSB7XG4gICAgcmV0dXJuIFN0cmluZyhzKS5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG59XG5cbmZ1bmN0aW9uIGlzQXJyYXkob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBBcnJheV0nOyB9XG5mdW5jdGlvbiBpc0RhdGUob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBEYXRlXSc7IH1cbmZ1bmN0aW9uIGlzUmVnRXhwKG9iaikgeyByZXR1cm4gdG9TdHIob2JqKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7IH1cbmZ1bmN0aW9uIGlzRXJyb3Iob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBFcnJvcl0nOyB9XG5mdW5jdGlvbiBpc1N5bWJvbChvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IFN5bWJvbF0nOyB9XG5mdW5jdGlvbiBpc1N0cmluZyhvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IFN0cmluZ10nOyB9XG5mdW5jdGlvbiBpc051bWJlcihvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IE51bWJlcl0nOyB9XG5mdW5jdGlvbiBpc0JpZ0ludChvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IEJpZ0ludF0nOyB9XG5mdW5jdGlvbiBpc0Jvb2xlYW4ob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBCb29sZWFuXSc7IH1cblxudmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkgfHwgZnVuY3Rpb24gKGtleSkgeyByZXR1cm4ga2V5IGluIHRoaXM7IH07XG5mdW5jdGlvbiBoYXMob2JqLCBrZXkpIHtcbiAgICByZXR1cm4gaGFzT3duLmNhbGwob2JqLCBrZXkpO1xufVxuXG5mdW5jdGlvbiB0b1N0cihvYmopIHtcbiAgICByZXR1cm4gb2JqZWN0VG9TdHJpbmcuY2FsbChvYmopO1xufVxuXG5mdW5jdGlvbiBuYW1lT2YoZikge1xuICAgIGlmIChmLm5hbWUpIHsgcmV0dXJuIGYubmFtZTsgfVxuICAgIHZhciBtID0gbWF0Y2guY2FsbChmLCAvXmZ1bmN0aW9uXFxzKihbXFx3JF0rKS8pO1xuICAgIGlmIChtKSB7IHJldHVybiBtWzFdOyB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGluZGV4T2YoeHMsIHgpIHtcbiAgICBpZiAoeHMuaW5kZXhPZikgeyByZXR1cm4geHMuaW5kZXhPZih4KTsgfVxuICAgIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmICh4c1tpXSA9PT0geCkgeyByZXR1cm4gaTsgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIGlzTWFwKHgpIHtcbiAgICBpZiAoIW1hcFNpemUgfHwgIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgbWFwU2l6ZS5jYWxsKHgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2V0U2l6ZS5jYWxsKHgpO1xuICAgICAgICB9IGNhdGNoIChzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geCBpbnN0YW5jZW9mIE1hcDsgLy8gY29yZS1qcyB3b3JrYXJvdW5kLCBwcmUtdjIuNS4wXG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzV2Vha01hcCh4KSB7XG4gICAgaWYgKCF3ZWFrTWFwSGFzIHx8ICF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHdlYWtNYXBIYXMuY2FsbCh4LCB3ZWFrTWFwSGFzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHdlYWtTZXRIYXMuY2FsbCh4LCB3ZWFrU2V0SGFzKTtcbiAgICAgICAgfSBjYXRjaCAocykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBXZWFrTWFwOyAvLyBjb3JlLWpzIHdvcmthcm91bmQsIHByZS12Mi41LjBcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNTZXQoeCkge1xuICAgIGlmICghc2V0U2l6ZSB8fCAheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBzZXRTaXplLmNhbGwoeCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBtYXBTaXplLmNhbGwoeCk7XG4gICAgICAgIH0gY2F0Y2ggKG0pIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4IGluc3RhbmNlb2YgU2V0OyAvLyBjb3JlLWpzIHdvcmthcm91bmQsIHByZS12Mi41LjBcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNXZWFrU2V0KHgpIHtcbiAgICBpZiAoIXdlYWtTZXRIYXMgfHwgIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgd2Vha1NldEhhcy5jYWxsKHgsIHdlYWtTZXRIYXMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgd2Vha01hcEhhcy5jYWxsKHgsIHdlYWtNYXBIYXMpO1xuICAgICAgICB9IGNhdGNoIChzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geCBpbnN0YW5jZW9mIFdlYWtTZXQ7IC8vIGNvcmUtanMgd29ya2Fyb3VuZCwgcHJlLXYyLjUuMFxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0VsZW1lbnQoeCkge1xuICAgIGlmICgheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgaWYgKHR5cGVvZiBIVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgeCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHgubm9kZU5hbWUgPT09ICdzdHJpbmcnICYmIHR5cGVvZiB4LmdldEF0dHJpYnV0ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gaW5zcGVjdFN0cmluZyhzdHIsIG9wdHMpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleFxuICAgIHZhciBzID0gc3RyLnJlcGxhY2UoLyhbJ1xcXFxdKS9nLCAnXFxcXCQxJykucmVwbGFjZSgvW1xceDAwLVxceDFmXS9nLCBsb3dieXRlKTtcbiAgICByZXR1cm4gd3JhcFF1b3RlcyhzLCAnc2luZ2xlJywgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGxvd2J5dGUoYykge1xuICAgIHZhciBuID0gYy5jaGFyQ29kZUF0KDApO1xuICAgIHZhciB4ID0ge1xuICAgICAgICA4OiAnYicsIDk6ICd0JywgMTA6ICduJywgMTI6ICdmJywgMTM6ICdyJ1xuICAgIH1bbl07XG4gICAgaWYgKHgpIHsgcmV0dXJuICdcXFxcJyArIHg7IH1cbiAgICByZXR1cm4gJ1xcXFx4JyArIChuIDwgMHgxMCA/ICcwJyA6ICcnKSArIG4udG9TdHJpbmcoMTYpO1xufVxuXG5mdW5jdGlvbiBtYXJrQm94ZWQoc3RyKSB7XG4gICAgcmV0dXJuICdPYmplY3QoJyArIHN0ciArICcpJztcbn1cblxuZnVuY3Rpb24gd2Vha0NvbGxlY3Rpb25PZih0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGUgKyAnIHsgPyB9Jztcbn1cblxuZnVuY3Rpb24gY29sbGVjdGlvbk9mKHR5cGUsIHNpemUsIGVudHJpZXMpIHtcbiAgICByZXR1cm4gdHlwZSArICcgKCcgKyBzaXplICsgJykgeycgKyBlbnRyaWVzLmpvaW4oJywgJykgKyAnfSc7XG59XG5cbmZ1bmN0aW9uIGFyck9iaktleXMob2JqLCBpbnNwZWN0KSB7XG4gICAgdmFyIGlzQXJyID0gaXNBcnJheShvYmopO1xuICAgIHZhciB4cyA9IFtdO1xuICAgIGlmIChpc0Fycikge1xuICAgICAgICB4cy5sZW5ndGggPSBvYmoubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgeHNbaV0gPSBoYXMob2JqLCBpKSA/IGluc3BlY3Qob2JqW2ldLCBvYmopIDogJyc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgIGlmICghaGFzKG9iaiwga2V5KSkgeyBjb250aW51ZTsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby1jb250aW51ZVxuICAgICAgICBpZiAoaXNBcnIgJiYgU3RyaW5nKE51bWJlcihrZXkpKSA9PT0ga2V5ICYmIGtleSA8IG9iai5sZW5ndGgpIHsgY29udGludWU7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCwgbm8tY29udGludWVcbiAgICAgICAgaWYgKCgvW15cXHckXS8pLnRlc3Qoa2V5KSkge1xuICAgICAgICAgICAgeHMucHVzaChpbnNwZWN0KGtleSwgb2JqKSArICc6ICcgKyBpbnNwZWN0KG9ialtrZXldLCBvYmopKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHhzLnB1c2goa2V5ICsgJzogJyArIGluc3BlY3Qob2JqW2tleV0sIG9iaikpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB4cztcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi81L0NoZWNrT2JqZWN0Q29lcmNpYmxlJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBnZXRTeW1ib2xEZXNjcmlwdGlvbiA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L2hlbHBlcnMvZ2V0U3ltYm9sRGVzY3JpcHRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcblx0cmV0dXJuIGdldFN5bWJvbERlc2NyaXB0aW9uKHRoaXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgY2FsbEJpbmQgPSByZXF1aXJlKCcuL2NhbGxCaW5kJyk7XG5cbnZhciAkaW5kZXhPZiA9IGNhbGxCaW5kKEdldEludHJpbnNpYygnU3RyaW5nLnByb3RvdHlwZS5pbmRleE9mJykpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCb3VuZEludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0dmFyIGludHJpbnNpYyA9IEdldEludHJpbnNpYyhuYW1lLCAhIWFsbG93TWlzc2luZyk7XG5cdGlmICh0eXBlb2YgaW50cmluc2ljID09PSAnZnVuY3Rpb24nICYmICRpbmRleE9mKG5hbWUsICcucHJvdG90eXBlLicpKSB7XG5cdFx0cmV0dXJuIGNhbGxCaW5kKGludHJpbnNpYyk7XG5cdH1cblx0cmV0dXJuIGludHJpbnNpYztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IEdldEludHJpbnNpYygnJU9iamVjdC5kZWZpbmVQcm9wZXJ0eSUnLCB0cnVlKTtcblxuaWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuXHR0cnkge1xuXHRcdCRkZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IHZhbHVlOiAxIH0pO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSUUgOCBoYXMgYSBicm9rZW4gZGVmaW5lUHJvcGVydHlcblx0XHQkZGVmaW5lUHJvcGVydHkgPSBudWxsO1xuXHR9XG59XG5cbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NhbGxCb3VuZCcpO1xuXG52YXIgJGlzRW51bWVyYWJsZSA9IGNhbGxCb3VuZCgnT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXBhcmFtc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBEZWZpbmVPd25Qcm9wZXJ0eShJc0RhdGFEZXNjcmlwdG9yLCBTYW1lVmFsdWUsIEZyb21Qcm9wZXJ0eURlc2NyaXB0b3IsIE8sIFAsIGRlc2MpIHtcblx0aWYgKCEkZGVmaW5lUHJvcGVydHkpIHtcblx0XHRpZiAoIUlzRGF0YURlc2NyaXB0b3IoZGVzYykpIHtcblx0XHRcdC8vIEVTMyBkb2VzIG5vdCBzdXBwb3J0IGdldHRlcnMvc2V0dGVyc1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRpZiAoIWRlc2NbJ1tbQ29uZmlndXJhYmxlXV0nXSB8fCAhZGVzY1snW1tXcml0YWJsZV1dJ10pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBmYWxsYmFjayBmb3IgRVMzXG5cdFx0aWYgKFAgaW4gTyAmJiAkaXNFbnVtZXJhYmxlKE8sIFApICE9PSAhIWRlc2NbJ1tbRW51bWVyYWJsZV1dJ10pIHtcblx0XHRcdC8vIGEgbm9uLWVudW1lcmFibGUgZXhpc3RpbmcgcHJvcGVydHlcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBwcm9wZXJ0eSBkb2VzIG5vdCBleGlzdCBhdCBhbGwsIG9yIGV4aXN0cyBidXQgaXMgZW51bWVyYWJsZVxuXHRcdHZhciBWID0gZGVzY1snW1tWYWx1ZV1dJ107XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cdFx0T1tQXSA9IFY7IC8vIHdpbGwgdXNlIFtbRGVmaW5lXV1cblx0XHRyZXR1cm4gU2FtZVZhbHVlKE9bUF0sIFYpO1xuXHR9XG5cdCRkZWZpbmVQcm9wZXJ0eShPLCBQLCBGcm9tUHJvcGVydHlEZXNjcmlwdG9yKGRlc2MpKTtcblx0cmV0dXJuIHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuL3NoaW0nKSgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWlzY29uc3RydWN0b3JcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBJc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSB7XG5cdHJldHVybiB0eXBlb2YgYXJndW1lbnQgPT09ICdmdW5jdGlvbicgJiYgISFhcmd1bWVudC5wcm90b3R5cGU7IC8vIHVuZm9ydHVuYXRlbHkgdGhlcmUncyBubyB3YXkgdG8gdHJ1bHkgY2hlY2sgdGhpcyB3aXRob3V0IHRyeS9jYXRjaCBgbmV3IGFyZ3VtZW50YFxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEVTNVRvSW50ZWdlciA9IHJlcXVpcmUoJy4uLzUvVG9JbnRlZ2VyJyk7XG5cbnZhciBUb051bWJlciA9IHJlcXVpcmUoJy4vVG9OdW1iZXInKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b2ludGVnZXJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb0ludGVnZXIodmFsdWUpIHtcblx0dmFyIG51bWJlciA9IFRvTnVtYmVyKHZhbHVlKTtcblx0cmV0dXJuIEVTNVRvSW50ZWdlcihudW1iZXIpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRpc05hTiA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNOYU4nKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1zYW1ldmFsdWV6ZXJvXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gU2FtZVZhbHVlWmVybyh4LCB5KSB7XG5cdHJldHVybiAoeCA9PT0geSkgfHwgKCRpc05hTih4KSAmJiAkaXNOYU4oeSkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHN1cHBvcnRzRGVzY3JpcHRvcnMgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpLnN1cHBvcnRzRGVzY3JpcHRvcnM7XG52YXIgZnVuY3Rpb25zSGF2ZU5hbWVzID0gcmVxdWlyZSgnZnVuY3Rpb25zLWhhdmUtbmFtZXMnKSgpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIFR5cGVFcnIgPSBUeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbU5hbWUoKSB7XG5cdHZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG5cdGlmIChmdW5jdGlvbnNIYXZlTmFtZXMpIHtcblx0XHRyZXR1cm4gcG9seWZpbGw7XG5cdH1cblx0aWYgKCFzdXBwb3J0c0Rlc2NyaXB0b3JzKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnIoJ1NoaW1taW5nIEZ1bmN0aW9uLnByb3RvdHlwZS5uYW1lIHN1cHBvcnQgcmVxdWlyZXMgRVM1IHByb3BlcnR5IGRlc2NyaXB0b3Igc3VwcG9ydC4nKTtcblx0fVxuXHR2YXIgZnVuY3Rpb25Qcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblx0ZGVmaW5lUHJvcGVydHkoZnVuY3Rpb25Qcm90bywgJ25hbWUnLCB7XG5cdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyIG5hbWUgPSBwb2x5ZmlsbC5jYWxsKHRoaXMpO1xuXHRcdFx0aWYgKHRoaXMgIT09IGZ1bmN0aW9uUHJvdG8pIHtcblx0XHRcdFx0ZGVmaW5lUHJvcGVydHkodGhpcywgJ25hbWUnLCB7XG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRcdHZhbHVlOiBuYW1lLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiBmYWxzZVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4vc2hpbScpKCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRPYmplY3QgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QlJyk7XG5cbnZhciBpc1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNQcmltaXRpdmUnKTtcblxudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9ICRPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XG52YXIgJGlzRXh0ZW5zaWJsZSA9ICRPYmplY3QuaXNFeHRlbnNpYmxlO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWlzZXh0ZW5zaWJsZS1vXG5cbm1vZHVsZS5leHBvcnRzID0gJHByZXZlbnRFeHRlbnNpb25zXG5cdD8gZnVuY3Rpb24gSXNFeHRlbnNpYmxlKG9iaikge1xuXHRcdHJldHVybiAhaXNQcmltaXRpdmUob2JqKSAmJiAkaXNFeHRlbnNpYmxlKG9iaik7XG5cdH1cblx0OiBmdW5jdGlvbiBJc0V4dGVuc2libGUob2JqKSB7XG5cdFx0cmV0dXJuICFpc1ByaW1pdGl2ZShvYmopO1xuXHR9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgZ2xvYmFsLXJlcXVpcmU6IDAgKi9cblxucmVxdWlyZSgnYWlyYm5iLWpzLXNoaW1zJyk7XG5cbnJlcXVpcmUoJy4vYnJvd3Nlci1vbmx5Jyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBUb0xlbmd0aCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVG9MZW5ndGgnKTtcbnZhciBUb1N0cmluZyA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVG9TdHJpbmcnKTtcbnZhciBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9SZXF1aXJlT2JqZWN0Q29lcmNpYmxlJyk7XG5cbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9oZWxwZXJzL2NhbGxCb3VuZCcpO1xudmFyICRzbGljZSA9IGNhbGxCb3VuZCgnU3RyaW5nLnByb3RvdHlwZS5zbGljZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aCkge1xuXHR2YXIgTyA9IFJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG5cdHZhciBTID0gVG9TdHJpbmcoTyk7XG5cdHZhciBzdHJpbmdMZW5ndGggPSBUb0xlbmd0aChTLmxlbmd0aCk7XG5cdHZhciBmaWxsU3RyaW5nO1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRmaWxsU3RyaW5nID0gYXJndW1lbnRzWzFdO1xuXHR9XG5cdHZhciBmaWxsZXIgPSB0eXBlb2YgZmlsbFN0cmluZyA9PT0gJ3VuZGVmaW5lZCcgPyAnJyA6IFRvU3RyaW5nKGZpbGxTdHJpbmcpO1xuXHRpZiAoZmlsbGVyID09PSAnJykge1xuXHRcdGZpbGxlciA9ICcgJztcblx0fVxuXHR2YXIgaW50TWF4TGVuZ3RoID0gVG9MZW5ndGgobWF4TGVuZ3RoKTtcblx0aWYgKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGgpIHtcblx0XHRyZXR1cm4gUztcblx0fVxuXHR2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcblx0d2hpbGUgKGZpbGxlci5sZW5ndGggPCBmaWxsTGVuKSB7XG5cdFx0dmFyIGZMZW4gPSBmaWxsZXIubGVuZ3RoO1xuXHRcdHZhciByZW1haW5pbmdDb2RlVW5pdHMgPSBmaWxsTGVuIC0gZkxlbjtcblx0XHRmaWxsZXIgKz0gZkxlbiA+IHJlbWFpbmluZ0NvZGVVbml0cyA/ICRzbGljZShmaWxsZXIsIDAsIHJlbWFpbmluZ0NvZGVVbml0cykgOiBmaWxsZXI7XG5cdH1cblxuXHR2YXIgdHJ1bmNhdGVkU3RyaW5nRmlsbGVyID0gZmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4gPyAkc2xpY2UoZmlsbGVyLCAwLCBmaWxsTGVuKSA6IGZpbGxlcjtcblx0cmV0dXJuIHRydW5jYXRlZFN0cmluZ0ZpbGxlciArIFM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRVM1VHlwZSA9IHJlcXVpcmUoJy4uLzUvVHlwZScpO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXRvc3RyaW5nXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVHlwZSh4KSB7XG5cdGlmICh0eXBlb2YgeCA9PT0gJ3N5bWJvbCcpIHtcblx0XHRyZXR1cm4gJ1N5bWJvbCc7XG5cdH1cblx0cmV0dXJuIEVTNVR5cGUoeCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuL3RhcmdldC9lczUnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJG1hdGNoID0gR2V0SW50cmluc2ljKCclU3ltYm9sLm1hdGNoJScsIHRydWUpO1xuXG52YXIgaGFzUmVnRXhwTWF0Y2hlciA9IHJlcXVpcmUoJ2lzLXJlZ2V4Jyk7XG5cbnZhciBUb0Jvb2xlYW4gPSByZXF1aXJlKCcuL1RvQm9vbGVhbicpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaXNyZWdleHBcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBJc1JlZ0V4cChhcmd1bWVudCkge1xuXHRpZiAoIWFyZ3VtZW50IHx8IHR5cGVvZiBhcmd1bWVudCAhPT0gJ29iamVjdCcpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKCRtYXRjaCkge1xuXHRcdHZhciBpc1JlZ0V4cCA9IGFyZ3VtZW50WyRtYXRjaF07XG5cdFx0aWYgKHR5cGVvZiBpc1JlZ0V4cCAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdHJldHVybiBUb0Jvb2xlYW4oaXNSZWdFeHApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gaGFzUmVnRXhwTWF0Y2hlcihhcmd1bWVudCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkU3RyaW5nID0gR2V0SW50cmluc2ljKCclU3RyaW5nJScpO1xudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9zdHJpbmdcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb1N0cmluZyhhcmd1bWVudCkge1xuXHRpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnc3ltYm9sJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBhIFN5bWJvbCB2YWx1ZSB0byBhIHN0cmluZycpO1xuXHR9XG5cdHJldHVybiAkU3RyaW5nKGFyZ3VtZW50KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBFUzVUeXBlID0gcmVxdWlyZSgnLi4vNS9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9zdHJpbmdcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUeXBlKHgpIHtcblx0aWYgKHR5cGVvZiB4ID09PSAnc3ltYm9sJykge1xuXHRcdHJldHVybiAnU3ltYm9sJztcblx0fVxuXHRyZXR1cm4gRVM1VHlwZSh4KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBJc1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi9Jc1Byb3BlcnR5S2V5Jyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaGFzcHJvcGVydHlcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBIYXNQcm9wZXJ0eShPLCBQKSB7XG5cdGlmIChUeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgT2AgbXVzdCBiZSBhbiBPYmplY3QnKTtcblx0fVxuXHRpZiAoIUlzUHJvcGVydHlLZXkoUCkpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogYFBgIG11c3QgYmUgYSBQcm9wZXJ0eSBLZXknKTtcblx0fVxuXHRyZXR1cm4gUCBpbiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRGdW5jdGlvbiA9IEdldEludHJpbnNpYygnJUZ1bmN0aW9uJScpO1xudmFyICRhcHBseSA9ICRGdW5jdGlvbi5hcHBseTtcbnZhciAkY2FsbCA9ICRGdW5jdGlvbi5jYWxsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCaW5kKCkge1xuXHRyZXR1cm4gYmluZC5hcHBseSgkY2FsbCwgYXJndW1lbnRzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLmFwcGx5ID0gZnVuY3Rpb24gYXBwbHlCaW5kKCkge1xuXHRyZXR1cm4gYmluZC5hcHBseSgkYXBwbHksIGFyZ3VtZW50cyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkT2JqZWN0Q3JlYXRlID0gR2V0SW50cmluc2ljKCclT2JqZWN0LmNyZWF0ZSUnLCB0cnVlKTtcbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xudmFyICRTeW50YXhFcnJvciA9IEdldEludHJpbnNpYygnJVN5bnRheEVycm9yJScpO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG52YXIgaGFzUHJvdG8gPSAhKHsgX19wcm90b19fOiBudWxsIH0gaW5zdGFuY2VvZiBPYmplY3QpO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW9iamVjdGNyZWF0ZVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIE9iamVjdENyZWF0ZShwcm90bywgaW50ZXJuYWxTbG90c0xpc3QpIHtcblx0aWYgKHByb3RvICE9PSBudWxsICYmIFR5cGUocHJvdG8pICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgcHJvdG9gIG11c3QgYmUgbnVsbCBvciBhbiBvYmplY3QnKTtcblx0fVxuXHR2YXIgc2xvdHMgPSBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IFtdIDogaW50ZXJuYWxTbG90c0xpc3Q7XG5cdGlmIChzbG90cy5sZW5ndGggPiAwKSB7XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignZXMtYWJzdHJhY3QgZG9lcyBub3QgeWV0IHN1cHBvcnQgaW50ZXJuYWwgc2xvdHMnKTtcblx0fVxuXG5cdGlmICgkT2JqZWN0Q3JlYXRlKSB7XG5cdFx0cmV0dXJuICRPYmplY3RDcmVhdGUocHJvdG8pO1xuXHR9XG5cdGlmIChoYXNQcm90bykge1xuXHRcdHJldHVybiB7IF9fcHJvdG9fXzogcHJvdG8gfTtcblx0fVxuXG5cdGlmIChwcm90byA9PT0gbnVsbCkge1xuXHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ25hdGl2ZSBPYmplY3QuY3JlYXRlIHN1cHBvcnQgaXMgcmVxdWlyZWQgdG8gY3JlYXRlIG51bGwgb2JqZWN0cycpO1xuXHR9XG5cdHZhciBUID0gZnVuY3Rpb24gVCgpIHt9O1xuXHRULnByb3RvdHlwZSA9IHByb3RvO1xuXHRyZXR1cm4gbmV3IFQoKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJy4vY2FsbEJvdW5kJyk7XG5cbnZhciAkU3ludGF4RXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVTeW50YXhFcnJvciUnKTtcbnZhciBzeW1Ub1N0ciA9IGNhbGxCb3VuZCgnU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZycsIHRydWUpO1xuXG52YXIgZ2V0SW5mZXJyZWROYW1lID0gcmVxdWlyZSgnLi9nZXRJbmZlcnJlZE5hbWUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRTeW1ib2xEZXNjcmlwdGlvbihzeW1ib2wpIHtcblx0aWYgKCFzeW1Ub1N0cikge1xuXHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ1N5bWJvbHMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBlbnZpcm9ubWVudCcpO1xuXHR9XG5cdHZhciBzdHIgPSBzeW1Ub1N0cihzeW1ib2wpOyAvLyB3aWxsIHRocm93IGlmIG5vdCBhIHN5bWJvbFxuXG5cdGlmIChnZXRJbmZlcnJlZE5hbWUpIHtcblx0XHR2YXIgbmFtZSA9IGdldEluZmVycmVkTmFtZShzeW1ib2wpO1xuXHRcdGlmIChuYW1lID09PSAnJykgeyByZXR1cm47IH1cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cblx0XHRyZXR1cm4gbmFtZS5zbGljZSgxLCAtMSk7IC8vIG5hbWUuc2xpY2UoJ1snLmxlbmd0aCwgLSddJy5sZW5ndGgpO1xuXHR9XG5cblx0dmFyIGRlc2MgPSBzdHIuc2xpY2UoNywgLTEpOyAvLyBzdHIuc2xpY2UoJ1N5bWJvbCgnLmxlbmd0aCwgLScpJy5sZW5ndGgpO1xuXHRpZiAoZGVzYykge1xuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuXHRcdHJldHVybiBkZXNjO1xuXHR9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkT2JqZWN0ID0gR2V0SW50cmluc2ljKCclT2JqZWN0JScpO1xuXG52YXIgUmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4vUmVxdWlyZU9iamVjdENvZXJjaWJsZScpO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXRvb2JqZWN0XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVG9PYmplY3QodmFsdWUpIHtcblx0UmVxdWlyZU9iamVjdENvZXJjaWJsZSh2YWx1ZSk7XG5cdHJldHVybiAkT2JqZWN0KHZhbHVlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbi8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy05LjEwXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQ2hlY2tPYmplY3RDb2VyY2libGUodmFsdWUsIG9wdE1lc3NhZ2UpIHtcblx0aWYgKHZhbHVlID09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcihvcHRNZXNzYWdlIHx8ICgnQ2Fubm90IGNhbGwgbWV0aG9kIG9uICcgKyB2YWx1ZSkpO1xuXHR9XG5cdHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNQcmltaXRpdmUodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlID09PSBudWxsIHx8ICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzU3ltYm9scyA9IHJlcXVpcmUoJ2hhcy1zeW1ib2xzJykoKTtcbnZhciBwb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbnZhciBnZXRJbmZlcnJlZE5hbWUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9oZWxwZXJzL2dldEluZmVycmVkTmFtZScpO1xuXG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgc2V0UHJvdG8gPSBPYmplY3Quc2V0UHJvdG90eXBlT2Y7XG5cbnZhciBkZWZpbmUgPSBmdW5jdGlvbiBkZWZpbmVHZXR0ZXIoZ2V0dGVyKSB7XG5cdGRQKFN5bWJvbC5wcm90b3R5cGUsICdkZXNjcmlwdGlvbicsIHtcblx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0Z2V0OiBnZXR0ZXJcblx0fSk7XG59O1xuXG52YXIgc2hpbUdsb2JhbCA9IGZ1bmN0aW9uIHNoaW1HbG9iYWxTeW1ib2woZ2V0dGVyKSB7XG5cdHZhciBvcmlnU3ltID0gRnVuY3Rpb24uYXBwbHkuYmluZChTeW1ib2wpO1xuXHR2YXIgZW1wdHlTdHJpbmdzID0gT2JqZWN0LmNyZWF0ZSA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcblx0dmFyIFN5bU5ldyA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcblx0XHR2YXIgc3ltID0gb3JpZ1N5bSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gPT09ICcnKSB7XG5cdFx0XHRlbXB0eVN0cmluZ3Nbc3ltXSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBzeW07XG5cdH07XG5cdFN5bU5ldy5wcm90b3R5cGUgPSBTeW1ib2wucHJvdG90eXBlO1xuXHRzZXRQcm90byhTeW1OZXcsIFN5bWJvbCk7XG5cdFN5bWJvbCA9IFN5bU5ldzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uYXRpdmUtcmVhc3NpZ24sIG5vLWdsb2JhbC1hc3NpZ25cblxuXHR2YXIgYm91bmRHZXR0ZXIgPSBGdW5jdGlvbi5jYWxsLmJpbmQoZ2V0dGVyKTtcblx0dmFyIHdyYXBwZWRHZXR0ZXIgPSBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcblx0XHQvKiBlc2xpbnQgbm8taW52YWxpZC10aGlzOiAwICovXG5cdFx0dmFyIHN5bWJvbERlc2NyaXB0aW9uID0gYm91bmRHZXR0ZXIodGhpcyk7XG5cdFx0aWYgKGVtcHR5U3RyaW5nc1t0aGlzXSkge1xuXHRcdFx0cmV0dXJuICcnO1xuXHRcdH1cblx0XHRyZXR1cm4gc3ltYm9sRGVzY3JpcHRpb247XG5cdH07XG5cdGRlZmluZSh3cmFwcGVkR2V0dGVyKTtcblx0cmV0dXJuIHdyYXBwZWRHZXR0ZXI7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1TeW1ib2xEZXNjcmlwdGlvbigpIHtcblx0aWYgKCFoYXNTeW1ib2xzKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHZhciBkZXNjID0gZ09QRChTeW1ib2wucHJvdG90eXBlLCAnZGVzY3JpcHRpb24nKTtcblx0dmFyIGdldHRlciA9IHBvbHlmaWxsKCk7XG5cdHZhciBpc01pc3NpbmcgPSAhZGVzYyB8fCB0eXBlb2YgZGVzYy5nZXQgIT09ICdmdW5jdGlvbic7XG5cdHZhciBpc0Jyb2tlbiA9ICFpc01pc3NpbmcgJiYgKHR5cGVvZiBTeW1ib2woKS5kZXNjcmlwdGlvbiAhPT0gJ3VuZGVmaW5lZCcgfHwgU3ltYm9sKCcnKS5kZXNjcmlwdGlvbiAhPT0gJycpO1xuXHRpZiAoaXNNaXNzaW5nIHx8IGlzQnJva2VuKSB7XG5cdFx0aWYgKCFnZXRJbmZlcnJlZE5hbWUpIHtcblx0XHRcdHJldHVybiBzaGltR2xvYmFsKGdldHRlcik7XG5cdFx0fVxuXHRcdGRlZmluZShnZXR0ZXIpO1xuXHR9XG5cdHJldHVybiBnZXR0ZXI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgQ3JlYXRlRGF0YVByb3BlcnR5ID0gcmVxdWlyZSgnLi9DcmVhdGVEYXRhUHJvcGVydHknKTtcbnZhciBJc1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi9Jc1Byb3BlcnR5S2V5Jyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyAvLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtY3JlYXRlZGF0YXByb3BlcnR5b3J0aHJvd1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIENyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3coTywgUCwgVikge1xuXHRpZiAoVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShPKSBpcyBub3QgT2JqZWN0Jyk7XG5cdH1cblx0aWYgKCFJc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IElzUHJvcGVydHlLZXkoUCkgaXMgbm90IHRydWUnKTtcblx0fVxuXHR2YXIgc3VjY2VzcyA9IENyZWF0ZURhdGFQcm9wZXJ0eShPLCBQLCBWKTtcblx0aWYgKCFzdWNjZXNzKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ3VuYWJsZSB0byBjcmVhdGUgZGF0YSBwcm9wZXJ0eScpO1xuXHR9XG5cdHJldHVybiBzdWNjZXNzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSByZXF1aXJlKCcuLi9oZWxwZXJzL21heFNhZmVJbnRlZ2VyJyk7XG5cbnZhciBUb0ludGVnZXIgPSByZXF1aXJlKCcuL1RvSW50ZWdlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvTGVuZ3RoKGFyZ3VtZW50KSB7XG5cdHZhciBsZW4gPSBUb0ludGVnZXIoYXJndW1lbnQpO1xuXHRpZiAobGVuIDw9IDApIHsgcmV0dXJuIDA7IH0gLy8gaW5jbHVkZXMgY29udmVydGluZyAtMCB0byArMFxuXHRpZiAobGVuID4gTUFYX1NBRkVfSU5URUdFUikgeyByZXR1cm4gTUFYX1NBRkVfSU5URUdFUjsgfVxuXHRyZXR1cm4gbGVuO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFycmF5TWV0aG9kQm94ZXNQcm9wZXJseSA9IHJlcXVpcmUoJ2VzLWFycmF5LW1ldGhvZC1ib3hlcy1wcm9wZXJseScpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdHZhciBtZXRob2QgPSBBcnJheS5wcm90b3R5cGUubWFwO1xuXHRyZXR1cm4gYXJyYXlNZXRob2RCb3hlc1Byb3Blcmx5KG1ldGhvZCkgPyBtZXRob2QgOiBpbXBsZW1lbnRhdGlvbjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBvcmlnU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBoYXNTeW1ib2xTaGFtID0gcmVxdWlyZSgnLi9zaGFtcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc05hdGl2ZVN5bWJvbHMoKSB7XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCgnZm9vJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbCgnYmFyJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHJldHVybiBoYXNTeW1ib2xTaGFtKCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLThcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUeXBlKHgpIHtcblx0aWYgKHggPT09IG51bGwpIHtcblx0XHRyZXR1cm4gJ051bGwnO1xuXHR9XG5cdGlmICh0eXBlb2YgeCA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gJ1VuZGVmaW5lZCc7XG5cdH1cblx0aWYgKHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB4ID09PSAnb2JqZWN0Jykge1xuXHRcdHJldHVybiAnT2JqZWN0Jztcblx0fVxuXHRpZiAodHlwZW9mIHggPT09ICdudW1iZXInKSB7XG5cdFx0cmV0dXJuICdOdW1iZXInO1xuXHR9XG5cdGlmICh0eXBlb2YgeCA9PT0gJ2Jvb2xlYW4nKSB7XG5cdFx0cmV0dXJuICdCb29sZWFuJztcblx0fVxuXHRpZiAodHlwZW9mIHggPT09ICdzdHJpbmcnKSB7XG5cdFx0cmV0dXJuICdTdHJpbmcnO1xuXHR9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtY3JlYXRlaXRlcnJlc3VsdG9iamVjdFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIENyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodmFsdWUsIGRvbmUpIHtcblx0aWYgKFR5cGUoZG9uZSkgIT09ICdCb29sZWFuJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKGRvbmUpIGlzIG5vdCBCb29sZWFuJyk7XG5cdH1cblx0cmV0dXJuIHtcblx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0ZG9uZTogZG9uZVxuXHR9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlcXVpcmVQcm9taXNlID0gcmVxdWlyZSgnLi9yZXF1aXJlUHJvbWlzZScpO1xuXG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltUHJvbWlzZUZpbmFsbHkoKSB7XG5cdHJlcXVpcmVQcm9taXNlKCk7XG5cblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKFByb21pc2UucHJvdG90eXBlLCB7ICdmaW5hbGx5JzogcG9seWZpbGwgfSwge1xuXHRcdCdmaW5hbGx5JzogZnVuY3Rpb24gdGVzdEZpbmFsbHkoKSB7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5wcm90b3R5cGVbJ2ZpbmFsbHknXSAhPT0gcG9seWZpbGw7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scycpKCk7XG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnLi9jYWxsQm91bmQnKTtcblxudmFyICRpdGVyYXRvciA9IEdldEludHJpbnNpYygnJVN5bWJvbC5pdGVyYXRvciUnLCB0cnVlKTtcbnZhciAkc3RyaW5nU2xpY2UgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuc2xpY2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRJdGVyYXRvck1ldGhvZChFUywgaXRlcmFibGUpIHtcblx0dmFyIHVzaW5nSXRlcmF0b3I7XG5cdGlmIChoYXNTeW1ib2xzKSB7XG5cdFx0dXNpbmdJdGVyYXRvciA9IEVTLkdldE1ldGhvZChpdGVyYWJsZSwgJGl0ZXJhdG9yKTtcblx0fSBlbHNlIGlmIChFUy5Jc0FycmF5KGl0ZXJhYmxlKSkge1xuXHRcdHVzaW5nSXRlcmF0b3IgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgaSA9IC0xO1xuXHRcdFx0dmFyIGFyciA9IHRoaXM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8taW52YWxpZC10aGlzXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRuZXh0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0aSArPSAxO1xuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRkb25lOiBpID49IGFyci5sZW5ndGgsXG5cdFx0XHRcdFx0XHR2YWx1ZTogYXJyW2ldXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9O1xuXHR9IGVsc2UgaWYgKEVTLlR5cGUoaXRlcmFibGUpID09PSAnU3RyaW5nJykge1xuXHRcdHVzaW5nSXRlcmF0b3IgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRuZXh0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0dmFyIG5leHRJbmRleCA9IEVTLkFkdmFuY2VTdHJpbmdJbmRleChpdGVyYWJsZSwgaSwgdHJ1ZSk7XG5cdFx0XHRcdFx0dmFyIHZhbHVlID0gJHN0cmluZ1NsaWNlKGl0ZXJhYmxlLCBpLCBuZXh0SW5kZXgpO1xuXHRcdFx0XHRcdGkgPSBuZXh0SW5kZXg7XG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdGRvbmU6IG5leHRJbmRleCA+IGl0ZXJhYmxlLmxlbmd0aCxcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fTtcblx0fVxuXHRyZXR1cm4gdXNpbmdJdGVyYXRvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxudmFyIHN1cHBvcnRzRGVzY3JpcHRvcnMgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpLnN1cHBvcnRzRGVzY3JpcHRvcnM7XG52YXIgJGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdGlmICghc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdSZWdFeHAucHJvdG90eXBlLmZsYWdzIHJlcXVpcmVzIGEgdHJ1ZSBFUzUgZW52aXJvbm1lbnQgdGhhdCBzdXBwb3J0cyBwcm9wZXJ0eSBkZXNjcmlwdG9ycycpO1xuXHR9XG5cdGlmICgoL2EvbWlnKS5mbGFncyA9PT0gJ2dpbScpIHtcblx0XHR2YXIgZGVzY3JpcHRvciA9ICRnT1BEKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycpO1xuXHRcdGlmIChkZXNjcmlwdG9yICYmIHR5cGVvZiBkZXNjcmlwdG9yLmdldCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgKC9hLykuZG90QWxsID09PSAnYm9vbGVhbicpIHtcblx0XHRcdHJldHVybiBkZXNjcmlwdG9yLmdldDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGltcGxlbWVudGF0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnZXM2LXNoaW0nKTtcblxucmVxdWlyZSgnZnVuY3Rpb24ucHJvdG90eXBlLm5hbWUvc2hpbScpKCk7XG5cbnJlcXVpcmUoJy4vZXMyMDE2Jyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9HZXRJbnRyaW5zaWMnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9oZWxwZXJzL2NhbGxCb3VuZCcpO1xudmFyIGluc3BlY3QgPSByZXF1aXJlKCdvYmplY3QtaW5zcGVjdCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcbnZhciAkV2Vha01hcCA9IEdldEludHJpbnNpYygnJVdlYWtNYXAlJywgdHJ1ZSk7XG52YXIgJE1hcCA9IEdldEludHJpbnNpYygnJU1hcCUnLCB0cnVlKTtcbnZhciAkcHVzaCA9IGNhbGxCb3VuZCgnQXJyYXkucHJvdG90eXBlLnB1c2gnKTtcblxudmFyICR3ZWFrTWFwR2V0ID0gY2FsbEJvdW5kKCdXZWFrTWFwLnByb3RvdHlwZS5nZXQnLCB0cnVlKTtcbnZhciAkd2Vha01hcFNldCA9IGNhbGxCb3VuZCgnV2Vha01hcC5wcm90b3R5cGUuc2V0JywgdHJ1ZSk7XG52YXIgJHdlYWtNYXBIYXMgPSBjYWxsQm91bmQoJ1dlYWtNYXAucHJvdG90eXBlLmhhcycsIHRydWUpO1xudmFyICRtYXBHZXQgPSBjYWxsQm91bmQoJ01hcC5wcm90b3R5cGUuZ2V0JywgdHJ1ZSk7XG52YXIgJG1hcFNldCA9IGNhbGxCb3VuZCgnTWFwLnByb3RvdHlwZS5zZXQnLCB0cnVlKTtcbnZhciAkbWFwSGFzID0gY2FsbEJvdW5kKCdNYXAucHJvdG90eXBlLmhhcycsIHRydWUpO1xudmFyIG9iamVjdEdldCA9IGZ1bmN0aW9uIChvYmplY3RzLCBrZXkpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjb25zaXN0ZW50LXJldHVyblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IG9iamVjdHMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRpZiAob2JqZWN0c1tpXS5rZXkgPT09IGtleSkge1xuXHRcdFx0cmV0dXJuIG9iamVjdHNbaV0udmFsdWU7XG5cdFx0fVxuXHR9XG59O1xudmFyIG9iamVjdFNldCA9IGZ1bmN0aW9uIChvYmplY3RzLCBrZXksIHZhbHVlKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0cy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGlmIChvYmplY3RzW2ldLmtleSA9PT0ga2V5KSB7XG5cdFx0XHRvYmplY3RzW2ldLnZhbHVlID0gdmFsdWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblx0XHRcdHJldHVybjtcblx0XHR9XG5cdH1cblx0JHB1c2gob2JqZWN0cywge1xuXHRcdGtleToga2V5LFxuXHRcdHZhbHVlOiB2YWx1ZVxuXHR9KTtcbn07XG52YXIgb2JqZWN0SGFzID0gZnVuY3Rpb24gKG9iamVjdHMsIGtleSkge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IG9iamVjdHMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRpZiAob2JqZWN0c1tpXS5rZXkgPT09IGtleSkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBmYWxzZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0U2lkZUNoYW5uZWwoKSB7XG5cdHZhciAkd207XG5cdHZhciAkbTtcblx0dmFyICRvO1xuXHR2YXIgY2hhbm5lbCA9IHtcblx0XHRhc3NlcnQ6IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdGlmICghY2hhbm5lbC5oYXMoa2V5KSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignU2lkZSBjaGFubmVsIGRvZXMgbm90IGNvbnRhaW4gJyArIGluc3BlY3Qoa2V5KSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRnZXQ6IGZ1bmN0aW9uIChrZXkpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjb25zaXN0ZW50LXJldHVyblxuXHRcdFx0aWYgKCRXZWFrTWFwICYmIGtleSAmJiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGtleSA9PT0gJ2Z1bmN0aW9uJykpIHtcblx0XHRcdFx0aWYgKCR3bSkge1xuXHRcdFx0XHRcdHJldHVybiAkd2Vha01hcEdldCgkd20sIGtleSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoJE1hcCkge1xuXHRcdFx0XHRpZiAoJG0pIHtcblx0XHRcdFx0XHRyZXR1cm4gJG1hcEdldCgkbSwga2V5KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKCRvKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbG9uZWx5LWlmXG5cdFx0XHRcdFx0cmV0dXJuIG9iamVjdEdldCgkbywga2V5KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0aGFzOiBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRpZiAoJFdlYWtNYXAgJiYga2V5ICYmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0JyB8fCB0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSkge1xuXHRcdFx0XHRpZiAoJHdtKSB7XG5cdFx0XHRcdFx0cmV0dXJuICR3ZWFrTWFwSGFzKCR3bSwga2V5KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmICgkTWFwKSB7XG5cdFx0XHRcdGlmICgkbSkge1xuXHRcdFx0XHRcdHJldHVybiAkbWFwSGFzKCRtLCBrZXkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoJG8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1sb25lbHktaWZcblx0XHRcdFx0XHRyZXR1cm4gb2JqZWN0SGFzKCRvLCBrZXkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG5cdFx0XHRpZiAoJFdlYWtNYXAgJiYga2V5ICYmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0JyB8fCB0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSkge1xuXHRcdFx0XHRpZiAoISR3bSkge1xuXHRcdFx0XHRcdCR3bSA9IG5ldyAkV2Vha01hcCgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdCR3ZWFrTWFwU2V0KCR3bSwga2V5LCB2YWx1ZSk7XG5cdFx0XHR9IGVsc2UgaWYgKCRNYXApIHtcblx0XHRcdFx0aWYgKCEkbSkge1xuXHRcdFx0XHRcdCRtID0gbmV3ICRNYXAoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQkbWFwU2V0KCRtLCBrZXksIHZhbHVlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICghJG8pIHtcblx0XHRcdFx0XHQkbyA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG9iamVjdFNldCgkbywga2V5LCB2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gY2hhbm5lbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBzdHJWYWx1ZSA9IFN0cmluZy5wcm90b3R5cGUudmFsdWVPZjtcbnZhciB0cnlTdHJpbmdPYmplY3QgPSBmdW5jdGlvbiB0cnlTdHJpbmdPYmplY3QodmFsdWUpIHtcblx0dHJ5IHtcblx0XHRzdHJWYWx1ZS5jYWxsKHZhbHVlKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgc3RyQ2xhc3MgPSAnW29iamVjdCBTdHJpbmddJztcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcblx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRyZXR1cm4gaGFzVG9TdHJpbmdUYWcgPyB0cnlTdHJpbmdPYmplY3QodmFsdWUpIDogdG9TdHIuY2FsbCh2YWx1ZSkgPT09IHN0ckNsYXNzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmbGFncygpIHtcblx0aWYgKHRoaXMgIT0gbnVsbCAmJiB0aGlzICE9PSAkT2JqZWN0KHRoaXMpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1JlZ0V4cC5wcm90b3R5cGUuZmxhZ3MgZ2V0dGVyIGNhbGxlZCBvbiBub24tb2JqZWN0Jyk7XG5cdH1cblx0dmFyIHJlc3VsdCA9ICcnO1xuXHRpZiAodGhpcy5nbG9iYWwpIHtcblx0XHRyZXN1bHQgKz0gJ2cnO1xuXHR9XG5cdGlmICh0aGlzLmlnbm9yZUNhc2UpIHtcblx0XHRyZXN1bHQgKz0gJ2knO1xuXHR9XG5cdGlmICh0aGlzLm11bHRpbGluZSkge1xuXHRcdHJlc3VsdCArPSAnbSc7XG5cdH1cblx0aWYgKHRoaXMuZG90QWxsKSB7XG5cdFx0cmVzdWx0ICs9ICdzJztcblx0fVxuXHRpZiAodGhpcy51bmljb2RlKSB7XG5cdFx0cmVzdWx0ICs9ICd1Jztcblx0fVxuXHRpZiAodGhpcy5zdGlja3kpIHtcblx0XHRyZXN1bHQgKz0gJ3knO1xuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jcmVhdGVDbGFzczsiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2lnbihudW1iZXIpIHtcblx0cmV0dXJuIG51bWJlciA+PSAwID8gMSA6IC0xO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc1N5bWJvbHMgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdzeW1ib2wnO1xuXG52YXIgaXNQcmltaXRpdmUgPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNQcmltaXRpdmUnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnaXMtY2FsbGFibGUnKTtcbnZhciBpc0RhdGUgPSByZXF1aXJlKCdpcy1kYXRlLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnaXMtc3ltYm9sJyk7XG5cbnZhciBvcmRpbmFyeVRvUHJpbWl0aXZlID0gZnVuY3Rpb24gT3JkaW5hcnlUb1ByaW1pdGl2ZShPLCBoaW50KSB7XG5cdGlmICh0eXBlb2YgTyA9PT0gJ3VuZGVmaW5lZCcgfHwgTyA9PT0gbnVsbCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIG1ldGhvZCBvbiAnICsgTyk7XG5cdH1cblx0aWYgKHR5cGVvZiBoaW50ICE9PSAnc3RyaW5nJyB8fCAoaGludCAhPT0gJ251bWJlcicgJiYgaGludCAhPT0gJ3N0cmluZycpKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignaGludCBtdXN0IGJlIFwic3RyaW5nXCIgb3IgXCJudW1iZXJcIicpO1xuXHR9XG5cdHZhciBtZXRob2ROYW1lcyA9IGhpbnQgPT09ICdzdHJpbmcnID8gWyd0b1N0cmluZycsICd2YWx1ZU9mJ10gOiBbJ3ZhbHVlT2YnLCAndG9TdHJpbmcnXTtcblx0dmFyIG1ldGhvZCwgcmVzdWx0LCBpO1xuXHRmb3IgKGkgPSAwOyBpIDwgbWV0aG9kTmFtZXMubGVuZ3RoOyArK2kpIHtcblx0XHRtZXRob2QgPSBPW21ldGhvZE5hbWVzW2ldXTtcblx0XHRpZiAoaXNDYWxsYWJsZShtZXRob2QpKSB7XG5cdFx0XHRyZXN1bHQgPSBtZXRob2QuY2FsbChPKTtcblx0XHRcdGlmIChpc1ByaW1pdGl2ZShyZXN1bHQpKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHRocm93IG5ldyBUeXBlRXJyb3IoJ05vIGRlZmF1bHQgdmFsdWUnKTtcbn07XG5cbnZhciBHZXRNZXRob2QgPSBmdW5jdGlvbiBHZXRNZXRob2QoTywgUCkge1xuXHR2YXIgZnVuYyA9IE9bUF07XG5cdGlmIChmdW5jICE9PSBudWxsICYmIHR5cGVvZiBmdW5jICE9PSAndW5kZWZpbmVkJykge1xuXHRcdGlmICghaXNDYWxsYWJsZShmdW5jKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihmdW5jICsgJyByZXR1cm5lZCBmb3IgcHJvcGVydHkgJyArIFAgKyAnIG9mIG9iamVjdCAnICsgTyArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZ1bmM7XG5cdH1cblx0cmV0dXJuIHZvaWQgMDtcbn07XG5cbi8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb1ByaW1pdGl2ZShpbnB1dCkge1xuXHRpZiAoaXNQcmltaXRpdmUoaW5wdXQpKSB7XG5cdFx0cmV0dXJuIGlucHV0O1xuXHR9XG5cdHZhciBoaW50ID0gJ2RlZmF1bHQnO1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRpZiAoYXJndW1lbnRzWzFdID09PSBTdHJpbmcpIHtcblx0XHRcdGhpbnQgPSAnc3RyaW5nJztcblx0XHR9IGVsc2UgaWYgKGFyZ3VtZW50c1sxXSA9PT0gTnVtYmVyKSB7XG5cdFx0XHRoaW50ID0gJ251bWJlcic7XG5cdFx0fVxuXHR9XG5cblx0dmFyIGV4b3RpY1RvUHJpbTtcblx0aWYgKGhhc1N5bWJvbHMpIHtcblx0XHRpZiAoU3ltYm9sLnRvUHJpbWl0aXZlKSB7XG5cdFx0XHRleG90aWNUb1ByaW0gPSBHZXRNZXRob2QoaW5wdXQsIFN5bWJvbC50b1ByaW1pdGl2ZSk7XG5cdFx0fSBlbHNlIGlmIChpc1N5bWJvbChpbnB1dCkpIHtcblx0XHRcdGV4b3RpY1RvUHJpbSA9IFN5bWJvbC5wcm90b3R5cGUudmFsdWVPZjtcblx0XHR9XG5cdH1cblx0aWYgKHR5cGVvZiBleG90aWNUb1ByaW0gIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0dmFyIHJlc3VsdCA9IGV4b3RpY1RvUHJpbS5jYWxsKGlucHV0LCBoaW50KTtcblx0XHRpZiAoaXNQcmltaXRpdmUocmVzdWx0KSkge1xuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcigndW5hYmxlIHRvIGNvbnZlcnQgZXhvdGljIG9iamVjdCB0byBwcmltaXRpdmUnKTtcblx0fVxuXHRpZiAoaGludCA9PT0gJ2RlZmF1bHQnICYmIChpc0RhdGUoaW5wdXQpIHx8IGlzU3ltYm9sKGlucHV0KSkpIHtcblx0XHRoaW50ID0gJ3N0cmluZyc7XG5cdH1cblx0cmV0dXJuIG9yZGluYXJ5VG9QcmltaXRpdmUoaW5wdXQsIGhpbnQgPT09ICdkZWZhdWx0JyA/ICdudW1iZXInIDogaGludCk7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBXM0MgU09GVFdBUkUgQU5EIERPQ1VNRU5UIE5PVElDRSBBTkQgTElDRU5TRS5cbiAqXG4gKiAgaHR0cHM6Ly93d3cudzMub3JnL0NvbnNvcnRpdW0vTGVnYWwvMjAxNS9jb3B5cmlnaHQtc29mdHdhcmUtYW5kLWRvY3VtZW50XG4gKlxuICovXG5cbihmdW5jdGlvbih3aW5kb3csIGRvY3VtZW50KSB7XG4ndXNlIHN0cmljdCc7XG5cblxuLy8gRXhpdHMgZWFybHkgaWYgYWxsIEludGVyc2VjdGlvbk9ic2VydmVyIGFuZCBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5XG4vLyBmZWF0dXJlcyBhcmUgbmF0aXZlbHkgc3VwcG9ydGVkLlxuaWYgKCdJbnRlcnNlY3Rpb25PYnNlcnZlcicgaW4gd2luZG93ICYmXG4gICAgJ0ludGVyc2VjdGlvbk9ic2VydmVyRW50cnknIGluIHdpbmRvdyAmJlxuICAgICdpbnRlcnNlY3Rpb25SYXRpbycgaW4gd2luZG93LkludGVyc2VjdGlvbk9ic2VydmVyRW50cnkucHJvdG90eXBlKSB7XG5cbiAgLy8gTWluaW1hbCBwb2x5ZmlsbCBmb3IgRWRnZSAxNSdzIGxhY2sgb2YgYGlzSW50ZXJzZWN0aW5nYFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS93M2MvSW50ZXJzZWN0aW9uT2JzZXJ2ZXIvaXNzdWVzLzIxMVxuICBpZiAoISgnaXNJbnRlcnNlY3RpbmcnIGluIHdpbmRvdy5JbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5LnByb3RvdHlwZSkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LkludGVyc2VjdGlvbk9ic2VydmVyRW50cnkucHJvdG90eXBlLFxuICAgICAgJ2lzSW50ZXJzZWN0aW5nJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVyc2VjdGlvblJhdGlvID4gMDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm47XG59XG5cblxuLyoqXG4gKiBBbiBJbnRlcnNlY3Rpb25PYnNlcnZlciByZWdpc3RyeS4gVGhpcyByZWdpc3RyeSBleGlzdHMgdG8gaG9sZCBhIHN0cm9uZ1xuICogcmVmZXJlbmNlIHRvIEludGVyc2VjdGlvbk9ic2VydmVyIGluc3RhbmNlcyBjdXJyZW50bHkgb2JzZXJ2aW5nIGEgdGFyZ2V0XG4gKiBlbGVtZW50LiBXaXRob3V0IHRoaXMgcmVnaXN0cnksIGluc3RhbmNlcyB3aXRob3V0IGFub3RoZXIgcmVmZXJlbmNlIG1heSBiZVxuICogZ2FyYmFnZSBjb2xsZWN0ZWQuXG4gKi9cbnZhciByZWdpc3RyeSA9IFtdO1xuXG5cbi8qKlxuICogQ3JlYXRlcyB0aGUgZ2xvYmFsIEludGVyc2VjdGlvbk9ic2VydmVyRW50cnkgY29uc3RydWN0b3IuXG4gKiBodHRwczovL3czYy5naXRodWIuaW8vSW50ZXJzZWN0aW9uT2JzZXJ2ZXIvI2ludGVyc2VjdGlvbi1vYnNlcnZlci1lbnRyeVxuICogQHBhcmFtIHtPYmplY3R9IGVudHJ5IEEgZGljdGlvbmFyeSBvZiBpbnN0YW5jZSBwcm9wZXJ0aWVzLlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEludGVyc2VjdGlvbk9ic2VydmVyRW50cnkoZW50cnkpIHtcbiAgdGhpcy50aW1lID0gZW50cnkudGltZTtcbiAgdGhpcy50YXJnZXQgPSBlbnRyeS50YXJnZXQ7XG4gIHRoaXMucm9vdEJvdW5kcyA9IGVudHJ5LnJvb3RCb3VuZHM7XG4gIHRoaXMuYm91bmRpbmdDbGllbnRSZWN0ID0gZW50cnkuYm91bmRpbmdDbGllbnRSZWN0O1xuICB0aGlzLmludGVyc2VjdGlvblJlY3QgPSBlbnRyeS5pbnRlcnNlY3Rpb25SZWN0IHx8IGdldEVtcHR5UmVjdCgpO1xuICB0aGlzLmlzSW50ZXJzZWN0aW5nID0gISFlbnRyeS5pbnRlcnNlY3Rpb25SZWN0O1xuXG4gIC8vIENhbGN1bGF0ZXMgdGhlIGludGVyc2VjdGlvbiByYXRpby5cbiAgdmFyIHRhcmdldFJlY3QgPSB0aGlzLmJvdW5kaW5nQ2xpZW50UmVjdDtcbiAgdmFyIHRhcmdldEFyZWEgPSB0YXJnZXRSZWN0LndpZHRoICogdGFyZ2V0UmVjdC5oZWlnaHQ7XG4gIHZhciBpbnRlcnNlY3Rpb25SZWN0ID0gdGhpcy5pbnRlcnNlY3Rpb25SZWN0O1xuICB2YXIgaW50ZXJzZWN0aW9uQXJlYSA9IGludGVyc2VjdGlvblJlY3Qud2lkdGggKiBpbnRlcnNlY3Rpb25SZWN0LmhlaWdodDtcblxuICAvLyBTZXRzIGludGVyc2VjdGlvbiByYXRpby5cbiAgaWYgKHRhcmdldEFyZWEpIHtcbiAgICAvLyBSb3VuZCB0aGUgaW50ZXJzZWN0aW9uIHJhdGlvIHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IG1hdGggaXNzdWVzOlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93M2MvSW50ZXJzZWN0aW9uT2JzZXJ2ZXIvaXNzdWVzLzMyNFxuICAgIHRoaXMuaW50ZXJzZWN0aW9uUmF0aW8gPSBOdW1iZXIoKGludGVyc2VjdGlvbkFyZWEgLyB0YXJnZXRBcmVhKS50b0ZpeGVkKDQpKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBJZiBhcmVhIGlzIHplcm8gYW5kIGlzIGludGVyc2VjdGluZywgc2V0cyB0byAxLCBvdGhlcndpc2UgdG8gMFxuICAgIHRoaXMuaW50ZXJzZWN0aW9uUmF0aW8gPSB0aGlzLmlzSW50ZXJzZWN0aW5nID8gMSA6IDA7XG4gIH1cbn1cblxuXG4vKipcbiAqIENyZWF0ZXMgdGhlIGdsb2JhbCBJbnRlcnNlY3Rpb25PYnNlcnZlciBjb25zdHJ1Y3Rvci5cbiAqIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby9JbnRlcnNlY3Rpb25PYnNlcnZlci8jaW50ZXJzZWN0aW9uLW9ic2VydmVyLWludGVyZmFjZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGJlIGludm9rZWQgYWZ0ZXIgaW50ZXJzZWN0aW9uXG4gKiAgICAgY2hhbmdlcyBoYXZlIHF1ZXVlZC4gVGhlIGZ1bmN0aW9uIGlzIG5vdCBpbnZva2VkIGlmIHRoZSBxdWV1ZSBoYXNcbiAqICAgICBiZWVuIGVtcHRpZWQgYnkgY2FsbGluZyB0aGUgYHRha2VSZWNvcmRzYCBtZXRob2QuXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9vcHRpb25zIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb3B0aW9ucy5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBJbnRlcnNlY3Rpb25PYnNlcnZlcihjYWxsYmFjaywgb3B0X29wdGlvbnMpIHtcblxuICB2YXIgb3B0aW9ucyA9IG9wdF9vcHRpb25zIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgY2FsbGJhY2sgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5yb290ICYmIG9wdGlvbnMucm9vdC5ub2RlVHlwZSAhPSAxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdyb290IG11c3QgYmUgYW4gRWxlbWVudCcpO1xuICB9XG5cbiAgLy8gQmluZHMgYW5kIHRocm90dGxlcyBgdGhpcy5fY2hlY2tGb3JJbnRlcnNlY3Rpb25zYC5cbiAgdGhpcy5fY2hlY2tGb3JJbnRlcnNlY3Rpb25zID0gdGhyb3R0bGUoXG4gICAgICB0aGlzLl9jaGVja0ZvckludGVyc2VjdGlvbnMuYmluZCh0aGlzKSwgdGhpcy5USFJPVFRMRV9USU1FT1VUKTtcblxuICAvLyBQcml2YXRlIHByb3BlcnRpZXMuXG4gIHRoaXMuX2NhbGxiYWNrID0gY2FsbGJhY2s7XG4gIHRoaXMuX29ic2VydmF0aW9uVGFyZ2V0cyA9IFtdO1xuICB0aGlzLl9xdWV1ZWRFbnRyaWVzID0gW107XG4gIHRoaXMuX3Jvb3RNYXJnaW5WYWx1ZXMgPSB0aGlzLl9wYXJzZVJvb3RNYXJnaW4ob3B0aW9ucy5yb290TWFyZ2luKTtcblxuICAvLyBQdWJsaWMgcHJvcGVydGllcy5cbiAgdGhpcy50aHJlc2hvbGRzID0gdGhpcy5faW5pdFRocmVzaG9sZHMob3B0aW9ucy50aHJlc2hvbGQpO1xuICB0aGlzLnJvb3QgPSBvcHRpb25zLnJvb3QgfHwgbnVsbDtcbiAgdGhpcy5yb290TWFyZ2luID0gdGhpcy5fcm9vdE1hcmdpblZhbHVlcy5tYXAoZnVuY3Rpb24obWFyZ2luKSB7XG4gICAgcmV0dXJuIG1hcmdpbi52YWx1ZSArIG1hcmdpbi51bml0O1xuICB9KS5qb2luKCcgJyk7XG59XG5cblxuLyoqXG4gKiBUaGUgbWluaW11bSBpbnRlcnZhbCB3aXRoaW4gd2hpY2ggdGhlIGRvY3VtZW50IHdpbGwgYmUgY2hlY2tlZCBmb3JcbiAqIGludGVyc2VjdGlvbiBjaGFuZ2VzLlxuICovXG5JbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuVEhST1RUTEVfVElNRU9VVCA9IDEwMDtcblxuXG4vKipcbiAqIFRoZSBmcmVxdWVuY3kgaW4gd2hpY2ggdGhlIHBvbHlmaWxsIHBvbGxzIGZvciBpbnRlcnNlY3Rpb24gY2hhbmdlcy5cbiAqIHRoaXMgY2FuIGJlIHVwZGF0ZWQgb24gYSBwZXIgaW5zdGFuY2UgYmFzaXMgYW5kIG11c3QgYmUgc2V0IHByaW9yIHRvXG4gKiBjYWxsaW5nIGBvYnNlcnZlYCBvbiB0aGUgZmlyc3QgdGFyZ2V0LlxuICovXG5JbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuUE9MTF9JTlRFUlZBTCA9IG51bGw7XG5cbi8qKlxuICogVXNlIGEgbXV0YXRpb24gb2JzZXJ2ZXIgb24gdGhlIHJvb3QgZWxlbWVudFxuICogdG8gZGV0ZWN0IGludGVyc2VjdGlvbiBjaGFuZ2VzLlxuICovXG5JbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuVVNFX01VVEFUSU9OX09CU0VSVkVSID0gdHJ1ZTtcblxuXG4vKipcbiAqIFN0YXJ0cyBvYnNlcnZpbmcgYSB0YXJnZXQgZWxlbWVudCBmb3IgaW50ZXJzZWN0aW9uIGNoYW5nZXMgYmFzZWQgb25cbiAqIHRoZSB0aHJlc2hvbGRzIHZhbHVlcy5cbiAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IFRoZSBET00gZWxlbWVudCB0byBvYnNlcnZlLlxuICovXG5JbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uKHRhcmdldCkge1xuICB2YXIgaXNUYXJnZXRBbHJlYWR5T2JzZXJ2ZWQgPSB0aGlzLl9vYnNlcnZhdGlvblRhcmdldHMuc29tZShmdW5jdGlvbihpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW0uZWxlbWVudCA9PSB0YXJnZXQ7XG4gIH0pO1xuXG4gIGlmIChpc1RhcmdldEFscmVhZHlPYnNlcnZlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghKHRhcmdldCAmJiB0YXJnZXQubm9kZVR5cGUgPT0gMSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3RhcmdldCBtdXN0IGJlIGFuIEVsZW1lbnQnKTtcbiAgfVxuXG4gIHRoaXMuX3JlZ2lzdGVySW5zdGFuY2UoKTtcbiAgdGhpcy5fb2JzZXJ2YXRpb25UYXJnZXRzLnB1c2goe2VsZW1lbnQ6IHRhcmdldCwgZW50cnk6IG51bGx9KTtcbiAgdGhpcy5fbW9uaXRvckludGVyc2VjdGlvbnMoKTtcbiAgdGhpcy5fY2hlY2tGb3JJbnRlcnNlY3Rpb25zKCk7XG59O1xuXG5cbi8qKlxuICogU3RvcHMgb2JzZXJ2aW5nIGEgdGFyZ2V0IGVsZW1lbnQgZm9yIGludGVyc2VjdGlvbiBjaGFuZ2VzLlxuICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgVGhlIERPTSBlbGVtZW50IHRvIG9ic2VydmUuXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS51bm9ic2VydmUgPSBmdW5jdGlvbih0YXJnZXQpIHtcbiAgdGhpcy5fb2JzZXJ2YXRpb25UYXJnZXRzID1cbiAgICAgIHRoaXMuX29ic2VydmF0aW9uVGFyZ2V0cy5maWx0ZXIoZnVuY3Rpb24oaXRlbSkge1xuXG4gICAgcmV0dXJuIGl0ZW0uZWxlbWVudCAhPSB0YXJnZXQ7XG4gIH0pO1xuICBpZiAoIXRoaXMuX29ic2VydmF0aW9uVGFyZ2V0cy5sZW5ndGgpIHtcbiAgICB0aGlzLl91bm1vbml0b3JJbnRlcnNlY3Rpb25zKCk7XG4gICAgdGhpcy5fdW5yZWdpc3Rlckluc3RhbmNlKCk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBTdG9wcyBvYnNlcnZpbmcgYWxsIHRhcmdldCBlbGVtZW50cyBmb3IgaW50ZXJzZWN0aW9uIGNoYW5nZXMuXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX29ic2VydmF0aW9uVGFyZ2V0cyA9IFtdO1xuICB0aGlzLl91bm1vbml0b3JJbnRlcnNlY3Rpb25zKCk7XG4gIHRoaXMuX3VucmVnaXN0ZXJJbnN0YW5jZSgpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgYW55IHF1ZXVlIGVudHJpZXMgdGhhdCBoYXZlIG5vdCB5ZXQgYmVlbiByZXBvcnRlZCB0byB0aGVcbiAqIGNhbGxiYWNrIGFuZCBjbGVhcnMgdGhlIHF1ZXVlLiBUaGlzIGNhbiBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlXG4gKiBjYWxsYmFjayB0byBvYnRhaW4gdGhlIGFic29sdXRlIG1vc3QgdXAtdG8tZGF0ZSBpbnRlcnNlY3Rpb24gaW5mb3JtYXRpb24uXG4gKiBAcmV0dXJuIHtBcnJheX0gVGhlIGN1cnJlbnRseSBxdWV1ZWQgZW50cmllcy5cbiAqL1xuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLnRha2VSZWNvcmRzID0gZnVuY3Rpb24oKSB7XG4gIHZhciByZWNvcmRzID0gdGhpcy5fcXVldWVkRW50cmllcy5zbGljZSgpO1xuICB0aGlzLl9xdWV1ZWRFbnRyaWVzID0gW107XG4gIHJldHVybiByZWNvcmRzO1xufTtcblxuXG4vKipcbiAqIEFjY2VwdHMgdGhlIHRocmVzaG9sZCB2YWx1ZSBmcm9tIHRoZSB1c2VyIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGFuZFxuICogcmV0dXJucyBhIHNvcnRlZCBhcnJheSBvZiB1bmlxdWUgdGhyZXNob2xkIHZhbHVlcy4gSWYgYSB2YWx1ZSBpcyBub3RcbiAqIGJldHdlZW4gMCBhbmQgMSBhbmQgZXJyb3IgaXMgdGhyb3duLlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8bnVtYmVyPX0gb3B0X3RocmVzaG9sZCBBbiBvcHRpb25hbCB0aHJlc2hvbGQgdmFsdWUgb3JcbiAqICAgICBhIGxpc3Qgb2YgdGhyZXNob2xkIHZhbHVlcywgZGVmYXVsdGluZyB0byBbMF0uXG4gKiBAcmV0dXJuIHtBcnJheX0gQSBzb3J0ZWQgbGlzdCBvZiB1bmlxdWUgYW5kIHZhbGlkIHRocmVzaG9sZCB2YWx1ZXMuXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5faW5pdFRocmVzaG9sZHMgPSBmdW5jdGlvbihvcHRfdGhyZXNob2xkKSB7XG4gIHZhciB0aHJlc2hvbGQgPSBvcHRfdGhyZXNob2xkIHx8IFswXTtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHRocmVzaG9sZCkpIHRocmVzaG9sZCA9IFt0aHJlc2hvbGRdO1xuXG4gIHJldHVybiB0aHJlc2hvbGQuc29ydCgpLmZpbHRlcihmdW5jdGlvbih0LCBpLCBhKSB7XG4gICAgaWYgKHR5cGVvZiB0ICE9ICdudW1iZXInIHx8IGlzTmFOKHQpIHx8IHQgPCAwIHx8IHQgPiAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3RocmVzaG9sZCBtdXN0IGJlIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMSBpbmNsdXNpdmVseScpO1xuICAgIH1cbiAgICByZXR1cm4gdCAhPT0gYVtpIC0gMV07XG4gIH0pO1xufTtcblxuXG4vKipcbiAqIEFjY2VwdHMgdGhlIHJvb3RNYXJnaW4gdmFsdWUgZnJvbSB0aGUgdXNlciBjb25maWd1cmF0aW9uIG9iamVjdFxuICogYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlIGZvdXIgbWFyZ2luIHZhbHVlcyBhcyBhbiBvYmplY3QgY29udGFpbmluZ1xuICogdGhlIHZhbHVlIGFuZCB1bml0IHByb3BlcnRpZXMuIElmIGFueSBvZiB0aGUgdmFsdWVzIGFyZSBub3QgcHJvcGVybHlcbiAqIGZvcm1hdHRlZCBvciB1c2UgYSB1bml0IG90aGVyIHRoYW4gcHggb3IgJSwgYW5kIGVycm9yIGlzIHRocm93bi5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdF9yb290TWFyZ2luIEFuIG9wdGlvbmFsIHJvb3RNYXJnaW4gdmFsdWUsXG4gKiAgICAgZGVmYXVsdGluZyB0byAnMHB4Jy5cbiAqIEByZXR1cm4ge0FycmF5PE9iamVjdD59IEFuIGFycmF5IG9mIG1hcmdpbiBvYmplY3RzIHdpdGggdGhlIGtleXNcbiAqICAgICB2YWx1ZSBhbmQgdW5pdC5cbiAqL1xuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLl9wYXJzZVJvb3RNYXJnaW4gPSBmdW5jdGlvbihvcHRfcm9vdE1hcmdpbikge1xuICB2YXIgbWFyZ2luU3RyaW5nID0gb3B0X3Jvb3RNYXJnaW4gfHwgJzBweCc7XG4gIHZhciBtYXJnaW5zID0gbWFyZ2luU3RyaW5nLnNwbGl0KC9cXHMrLykubWFwKGZ1bmN0aW9uKG1hcmdpbikge1xuICAgIHZhciBwYXJ0cyA9IC9eKC0/XFxkKlxcLj9cXGQrKShweHwlKSQvLmV4ZWMobWFyZ2luKTtcbiAgICBpZiAoIXBhcnRzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Jvb3RNYXJnaW4gbXVzdCBiZSBzcGVjaWZpZWQgaW4gcGl4ZWxzIG9yIHBlcmNlbnQnKTtcbiAgICB9XG4gICAgcmV0dXJuIHt2YWx1ZTogcGFyc2VGbG9hdChwYXJ0c1sxXSksIHVuaXQ6IHBhcnRzWzJdfTtcbiAgfSk7XG5cbiAgLy8gSGFuZGxlcyBzaG9ydGhhbmQuXG4gIG1hcmdpbnNbMV0gPSBtYXJnaW5zWzFdIHx8IG1hcmdpbnNbMF07XG4gIG1hcmdpbnNbMl0gPSBtYXJnaW5zWzJdIHx8IG1hcmdpbnNbMF07XG4gIG1hcmdpbnNbM10gPSBtYXJnaW5zWzNdIHx8IG1hcmdpbnNbMV07XG5cbiAgcmV0dXJuIG1hcmdpbnM7XG59O1xuXG5cbi8qKlxuICogU3RhcnRzIHBvbGxpbmcgZm9yIGludGVyc2VjdGlvbiBjaGFuZ2VzIGlmIHRoZSBwb2xsaW5nIGlzIG5vdCBhbHJlYWR5XG4gKiBoYXBwZW5pbmcsIGFuZCBpZiB0aGUgcGFnZSdzIHZpc2liaWxpdHkgc3RhdGUgaXMgdmlzaWJsZS5cbiAqIEBwcml2YXRlXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5fbW9uaXRvckludGVyc2VjdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLl9tb25pdG9yaW5nSW50ZXJzZWN0aW9ucykge1xuICAgIHRoaXMuX21vbml0b3JpbmdJbnRlcnNlY3Rpb25zID0gdHJ1ZTtcblxuICAgIC8vIElmIGEgcG9sbCBpbnRlcnZhbCBpcyBzZXQsIHVzZSBwb2xsaW5nIGluc3RlYWQgb2YgbGlzdGVuaW5nIHRvXG4gICAgLy8gcmVzaXplIGFuZCBzY3JvbGwgZXZlbnRzIG9yIERPTSBtdXRhdGlvbnMuXG4gICAgaWYgKHRoaXMuUE9MTF9JTlRFUlZBTCkge1xuICAgICAgdGhpcy5fbW9uaXRvcmluZ0ludGVydmFsID0gc2V0SW50ZXJ2YWwoXG4gICAgICAgICAgdGhpcy5fY2hlY2tGb3JJbnRlcnNlY3Rpb25zLCB0aGlzLlBPTExfSU5URVJWQUwpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGFkZEV2ZW50KHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMuX2NoZWNrRm9ySW50ZXJzZWN0aW9ucywgdHJ1ZSk7XG4gICAgICBhZGRFdmVudChkb2N1bWVudCwgJ3Njcm9sbCcsIHRoaXMuX2NoZWNrRm9ySW50ZXJzZWN0aW9ucywgdHJ1ZSk7XG5cbiAgICAgIGlmICh0aGlzLlVTRV9NVVRBVElPTl9PQlNFUlZFUiAmJiAnTXV0YXRpb25PYnNlcnZlcicgaW4gd2luZG93KSB7XG4gICAgICAgIHRoaXMuX2RvbU9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIodGhpcy5fY2hlY2tGb3JJbnRlcnNlY3Rpb25zKTtcbiAgICAgICAgdGhpcy5fZG9tT2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudCwge1xuICAgICAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICAgIGNoYXJhY3RlckRhdGE6IHRydWUsXG4gICAgICAgICAgc3VidHJlZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cblxuLyoqXG4gKiBTdG9wcyBwb2xsaW5nIGZvciBpbnRlcnNlY3Rpb24gY2hhbmdlcy5cbiAqIEBwcml2YXRlXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5fdW5tb25pdG9ySW50ZXJzZWN0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5fbW9uaXRvcmluZ0ludGVyc2VjdGlvbnMpIHtcbiAgICB0aGlzLl9tb25pdG9yaW5nSW50ZXJzZWN0aW9ucyA9IGZhbHNlO1xuXG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9tb25pdG9yaW5nSW50ZXJ2YWwpO1xuICAgIHRoaXMuX21vbml0b3JpbmdJbnRlcnZhbCA9IG51bGw7XG5cbiAgICByZW1vdmVFdmVudCh3aW5kb3csICdyZXNpemUnLCB0aGlzLl9jaGVja0ZvckludGVyc2VjdGlvbnMsIHRydWUpO1xuICAgIHJlbW92ZUV2ZW50KGRvY3VtZW50LCAnc2Nyb2xsJywgdGhpcy5fY2hlY2tGb3JJbnRlcnNlY3Rpb25zLCB0cnVlKTtcblxuICAgIGlmICh0aGlzLl9kb21PYnNlcnZlcikge1xuICAgICAgdGhpcy5fZG9tT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgdGhpcy5fZG9tT2JzZXJ2ZXIgPSBudWxsO1xuICAgIH1cbiAgfVxufTtcblxuXG4vKipcbiAqIFNjYW5zIGVhY2ggb2JzZXJ2YXRpb24gdGFyZ2V0IGZvciBpbnRlcnNlY3Rpb24gY2hhbmdlcyBhbmQgYWRkcyB0aGVtXG4gKiB0byB0aGUgaW50ZXJuYWwgZW50cmllcyBxdWV1ZS4gSWYgbmV3IGVudHJpZXMgYXJlIGZvdW5kLCBpdFxuICogc2NoZWR1bGVzIHRoZSBjYWxsYmFjayB0byBiZSBpbnZva2VkLlxuICogQHByaXZhdGVcbiAqL1xuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLl9jaGVja0ZvckludGVyc2VjdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJvb3RJc0luRG9tID0gdGhpcy5fcm9vdElzSW5Eb20oKTtcbiAgdmFyIHJvb3RSZWN0ID0gcm9vdElzSW5Eb20gPyB0aGlzLl9nZXRSb290UmVjdCgpIDogZ2V0RW1wdHlSZWN0KCk7XG5cbiAgdGhpcy5fb2JzZXJ2YXRpb25UYXJnZXRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgIHZhciB0YXJnZXQgPSBpdGVtLmVsZW1lbnQ7XG4gICAgdmFyIHRhcmdldFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QodGFyZ2V0KTtcbiAgICB2YXIgcm9vdENvbnRhaW5zVGFyZ2V0ID0gdGhpcy5fcm9vdENvbnRhaW5zVGFyZ2V0KHRhcmdldCk7XG4gICAgdmFyIG9sZEVudHJ5ID0gaXRlbS5lbnRyeTtcbiAgICB2YXIgaW50ZXJzZWN0aW9uUmVjdCA9IHJvb3RJc0luRG9tICYmIHJvb3RDb250YWluc1RhcmdldCAmJlxuICAgICAgICB0aGlzLl9jb21wdXRlVGFyZ2V0QW5kUm9vdEludGVyc2VjdGlvbih0YXJnZXQsIHJvb3RSZWN0KTtcblxuICAgIHZhciBuZXdFbnRyeSA9IGl0ZW0uZW50cnkgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeSh7XG4gICAgICB0aW1lOiBub3coKSxcbiAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgYm91bmRpbmdDbGllbnRSZWN0OiB0YXJnZXRSZWN0LFxuICAgICAgcm9vdEJvdW5kczogcm9vdFJlY3QsXG4gICAgICBpbnRlcnNlY3Rpb25SZWN0OiBpbnRlcnNlY3Rpb25SZWN0XG4gICAgfSk7XG5cbiAgICBpZiAoIW9sZEVudHJ5KSB7XG4gICAgICB0aGlzLl9xdWV1ZWRFbnRyaWVzLnB1c2gobmV3RW50cnkpO1xuICAgIH0gZWxzZSBpZiAocm9vdElzSW5Eb20gJiYgcm9vdENvbnRhaW5zVGFyZ2V0KSB7XG4gICAgICAvLyBJZiB0aGUgbmV3IGVudHJ5IGludGVyc2VjdGlvbiByYXRpbyBoYXMgY3Jvc3NlZCBhbnkgb2YgdGhlXG4gICAgICAvLyB0aHJlc2hvbGRzLCBhZGQgYSBuZXcgZW50cnkuXG4gICAgICBpZiAodGhpcy5faGFzQ3Jvc3NlZFRocmVzaG9sZChvbGRFbnRyeSwgbmV3RW50cnkpKSB7XG4gICAgICAgIHRoaXMuX3F1ZXVlZEVudHJpZXMucHVzaChuZXdFbnRyeSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIHRoZSByb290IGlzIG5vdCBpbiB0aGUgRE9NIG9yIHRhcmdldCBpcyBub3QgY29udGFpbmVkIHdpdGhpblxuICAgICAgLy8gcm9vdCBidXQgdGhlIHByZXZpb3VzIGVudHJ5IGZvciB0aGlzIHRhcmdldCBoYWQgYW4gaW50ZXJzZWN0aW9uLFxuICAgICAgLy8gYWRkIGEgbmV3IHJlY29yZCBpbmRpY2F0aW5nIHJlbW92YWwuXG4gICAgICBpZiAob2xkRW50cnkgJiYgb2xkRW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgdGhpcy5fcXVldWVkRW50cmllcy5wdXNoKG5ld0VudHJ5KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHRoaXMpO1xuXG4gIGlmICh0aGlzLl9xdWV1ZWRFbnRyaWVzLmxlbmd0aCkge1xuICAgIHRoaXMuX2NhbGxiYWNrKHRoaXMudGFrZVJlY29yZHMoKSwgdGhpcyk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBBY2NlcHRzIGEgdGFyZ2V0IGFuZCByb290IHJlY3QgY29tcHV0ZXMgdGhlIGludGVyc2VjdGlvbiBiZXR3ZWVuIHRoZW5cbiAqIGZvbGxvd2luZyB0aGUgYWxnb3JpdGhtIGluIHRoZSBzcGVjLlxuICogVE9ETyhwaGlsaXB3YWx0b24pOiBhdCB0aGlzIHRpbWUgY2xpcC1wYXRoIGlzIG5vdCBjb25zaWRlcmVkLlxuICogaHR0cHM6Ly93M2MuZ2l0aHViLmlvL0ludGVyc2VjdGlvbk9ic2VydmVyLyNjYWxjdWxhdGUtaW50ZXJzZWN0aW9uLXJlY3QtYWxnb1xuICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgVGhlIHRhcmdldCBET00gZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IHJvb3RSZWN0IFRoZSBib3VuZGluZyByZWN0IG9mIHRoZSByb290IGFmdGVyIGJlaW5nXG4gKiAgICAgZXhwYW5kZWQgYnkgdGhlIHJvb3RNYXJnaW4gdmFsdWUuXG4gKiBAcmV0dXJuIHs/T2JqZWN0fSBUaGUgZmluYWwgaW50ZXJzZWN0aW9uIHJlY3Qgb2JqZWN0IG9yIHVuZGVmaW5lZCBpZiBub1xuICogICAgIGludGVyc2VjdGlvbiBpcyBmb3VuZC5cbiAqIEBwcml2YXRlXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5fY29tcHV0ZVRhcmdldEFuZFJvb3RJbnRlcnNlY3Rpb24gPVxuICAgIGZ1bmN0aW9uKHRhcmdldCwgcm9vdFJlY3QpIHtcblxuICAvLyBJZiB0aGUgZWxlbWVudCBpc24ndCBkaXNwbGF5ZWQsIGFuIGludGVyc2VjdGlvbiBjYW4ndCBoYXBwZW4uXG4gIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpLmRpc3BsYXkgPT0gJ25vbmUnKSByZXR1cm47XG5cbiAgdmFyIHRhcmdldFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QodGFyZ2V0KTtcbiAgdmFyIGludGVyc2VjdGlvblJlY3QgPSB0YXJnZXRSZWN0O1xuICB2YXIgcGFyZW50ID0gZ2V0UGFyZW50Tm9kZSh0YXJnZXQpO1xuICB2YXIgYXRSb290ID0gZmFsc2U7XG5cbiAgd2hpbGUgKCFhdFJvb3QpIHtcbiAgICB2YXIgcGFyZW50UmVjdCA9IG51bGw7XG4gICAgdmFyIHBhcmVudENvbXB1dGVkU3R5bGUgPSBwYXJlbnQubm9kZVR5cGUgPT0gMSA/XG4gICAgICAgIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHBhcmVudCkgOiB7fTtcblxuICAgIC8vIElmIHRoZSBwYXJlbnQgaXNuJ3QgZGlzcGxheWVkLCBhbiBpbnRlcnNlY3Rpb24gY2FuJ3QgaGFwcGVuLlxuICAgIGlmIChwYXJlbnRDb21wdXRlZFN0eWxlLmRpc3BsYXkgPT0gJ25vbmUnKSByZXR1cm47XG5cbiAgICBpZiAocGFyZW50ID09IHRoaXMucm9vdCB8fCBwYXJlbnQgPT0gZG9jdW1lbnQpIHtcbiAgICAgIGF0Um9vdCA9IHRydWU7XG4gICAgICBwYXJlbnRSZWN0ID0gcm9vdFJlY3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIG5vbi12aXNpYmxlIG92ZXJmbG93LCBhbmQgaXQncyBub3QgdGhlIDxib2R5PlxuICAgICAgLy8gb3IgPGh0bWw+IGVsZW1lbnQsIHVwZGF0ZSB0aGUgaW50ZXJzZWN0aW9uIHJlY3QuXG4gICAgICAvLyBOb3RlOiA8Ym9keT4gYW5kIDxodG1sPiBjYW5ub3QgYmUgY2xpcHBlZCB0byBhIHJlY3QgdGhhdCdzIG5vdCBhbHNvXG4gICAgICAvLyB0aGUgZG9jdW1lbnQgcmVjdCwgc28gbm8gbmVlZCB0byBjb21wdXRlIGEgbmV3IGludGVyc2VjdGlvbi5cbiAgICAgIGlmIChwYXJlbnQgIT0gZG9jdW1lbnQuYm9keSAmJlxuICAgICAgICAgIHBhcmVudCAhPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiZcbiAgICAgICAgICBwYXJlbnRDb21wdXRlZFN0eWxlLm92ZXJmbG93ICE9ICd2aXNpYmxlJykge1xuICAgICAgICBwYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHBhcmVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgZWl0aGVyIG9mIHRoZSBhYm92ZSBjb25kaXRpb25hbHMgc2V0IGEgbmV3IHBhcmVudFJlY3QsXG4gICAgLy8gY2FsY3VsYXRlIG5ldyBpbnRlcnNlY3Rpb24gZGF0YS5cbiAgICBpZiAocGFyZW50UmVjdCkge1xuICAgICAgaW50ZXJzZWN0aW9uUmVjdCA9IGNvbXB1dGVSZWN0SW50ZXJzZWN0aW9uKHBhcmVudFJlY3QsIGludGVyc2VjdGlvblJlY3QpO1xuXG4gICAgICBpZiAoIWludGVyc2VjdGlvblJlY3QpIGJyZWFrO1xuICAgIH1cbiAgICBwYXJlbnQgPSBnZXRQYXJlbnROb2RlKHBhcmVudCk7XG4gIH1cbiAgcmV0dXJuIGludGVyc2VjdGlvblJlY3Q7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgcm9vdCByZWN0IGFmdGVyIGJlaW5nIGV4cGFuZGVkIGJ5IHRoZSByb290TWFyZ2luIHZhbHVlLlxuICogQHJldHVybiB7T2JqZWN0fSBUaGUgZXhwYW5kZWQgcm9vdCByZWN0LlxuICogQHByaXZhdGVcbiAqL1xuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLl9nZXRSb290UmVjdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcm9vdFJlY3Q7XG4gIGlmICh0aGlzLnJvb3QpIHtcbiAgICByb290UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdCh0aGlzLnJvb3QpO1xuICB9IGVsc2Uge1xuICAgIC8vIFVzZSA8aHRtbD4vPGJvZHk+IGluc3RlYWQgb2Ygd2luZG93IHNpbmNlIHNjcm9sbCBiYXJzIGFmZmVjdCBzaXplLlxuICAgIHZhciBodG1sID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgICByb290UmVjdCA9IHtcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICByaWdodDogaHRtbC5jbGllbnRXaWR0aCB8fCBib2R5LmNsaWVudFdpZHRoLFxuICAgICAgd2lkdGg6IGh0bWwuY2xpZW50V2lkdGggfHwgYm9keS5jbGllbnRXaWR0aCxcbiAgICAgIGJvdHRvbTogaHRtbC5jbGllbnRIZWlnaHQgfHwgYm9keS5jbGllbnRIZWlnaHQsXG4gICAgICBoZWlnaHQ6IGh0bWwuY2xpZW50SGVpZ2h0IHx8IGJvZHkuY2xpZW50SGVpZ2h0XG4gICAgfTtcbiAgfVxuICByZXR1cm4gdGhpcy5fZXhwYW5kUmVjdEJ5Um9vdE1hcmdpbihyb290UmVjdCk7XG59O1xuXG5cbi8qKlxuICogQWNjZXB0cyBhIHJlY3QgYW5kIGV4cGFuZHMgaXQgYnkgdGhlIHJvb3RNYXJnaW4gdmFsdWUuXG4gKiBAcGFyYW0ge09iamVjdH0gcmVjdCBUaGUgcmVjdCBvYmplY3QgdG8gZXhwYW5kLlxuICogQHJldHVybiB7T2JqZWN0fSBUaGUgZXhwYW5kZWQgcmVjdC5cbiAqIEBwcml2YXRlXG4gKi9cbkludGVyc2VjdGlvbk9ic2VydmVyLnByb3RvdHlwZS5fZXhwYW5kUmVjdEJ5Um9vdE1hcmdpbiA9IGZ1bmN0aW9uKHJlY3QpIHtcbiAgdmFyIG1hcmdpbnMgPSB0aGlzLl9yb290TWFyZ2luVmFsdWVzLm1hcChmdW5jdGlvbihtYXJnaW4sIGkpIHtcbiAgICByZXR1cm4gbWFyZ2luLnVuaXQgPT0gJ3B4JyA/IG1hcmdpbi52YWx1ZSA6XG4gICAgICAgIG1hcmdpbi52YWx1ZSAqIChpICUgMiA/IHJlY3Qud2lkdGggOiByZWN0LmhlaWdodCkgLyAxMDA7XG4gIH0pO1xuICB2YXIgbmV3UmVjdCA9IHtcbiAgICB0b3A6IHJlY3QudG9wIC0gbWFyZ2luc1swXSxcbiAgICByaWdodDogcmVjdC5yaWdodCArIG1hcmdpbnNbMV0sXG4gICAgYm90dG9tOiByZWN0LmJvdHRvbSArIG1hcmdpbnNbMl0sXG4gICAgbGVmdDogcmVjdC5sZWZ0IC0gbWFyZ2luc1szXVxuICB9O1xuICBuZXdSZWN0LndpZHRoID0gbmV3UmVjdC5yaWdodCAtIG5ld1JlY3QubGVmdDtcbiAgbmV3UmVjdC5oZWlnaHQgPSBuZXdSZWN0LmJvdHRvbSAtIG5ld1JlY3QudG9wO1xuXG4gIHJldHVybiBuZXdSZWN0O1xufTtcblxuXG4vKipcbiAqIEFjY2VwdHMgYW4gb2xkIGFuZCBuZXcgZW50cnkgYW5kIHJldHVybnMgdHJ1ZSBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlXG4gKiB0aHJlc2hvbGQgdmFsdWVzIGhhcyBiZWVuIGNyb3NzZWQuXG4gKiBAcGFyYW0gez9JbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5fSBvbGRFbnRyeSBUaGUgcHJldmlvdXMgZW50cnkgZm9yIGFcbiAqICAgIHBhcnRpY3VsYXIgdGFyZ2V0IGVsZW1lbnQgb3IgbnVsbCBpZiBubyBwcmV2aW91cyBlbnRyeSBleGlzdHMuXG4gKiBAcGFyYW0ge0ludGVyc2VjdGlvbk9ic2VydmVyRW50cnl9IG5ld0VudHJ5IFRoZSBjdXJyZW50IGVudHJ5IGZvciBhXG4gKiAgICBwYXJ0aWN1bGFyIHRhcmdldCBlbGVtZW50LlxuICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGEgYW55IHRocmVzaG9sZCBoYXMgYmVlbiBjcm9zc2VkLlxuICogQHByaXZhdGVcbiAqL1xuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLl9oYXNDcm9zc2VkVGhyZXNob2xkID1cbiAgICBmdW5jdGlvbihvbGRFbnRyeSwgbmV3RW50cnkpIHtcblxuICAvLyBUbyBtYWtlIGNvbXBhcmluZyBlYXNpZXIsIGFuIGVudHJ5IHRoYXQgaGFzIGEgcmF0aW8gb2YgMFxuICAvLyBidXQgZG9lcyBub3QgYWN0dWFsbHkgaW50ZXJzZWN0IGlzIGdpdmVuIGEgdmFsdWUgb2YgLTFcbiAgdmFyIG9sZFJhdGlvID0gb2xkRW50cnkgJiYgb2xkRW50cnkuaXNJbnRlcnNlY3RpbmcgP1xuICAgICAgb2xkRW50cnkuaW50ZXJzZWN0aW9uUmF0aW8gfHwgMCA6IC0xO1xuICB2YXIgbmV3UmF0aW8gPSBuZXdFbnRyeS5pc0ludGVyc2VjdGluZyA/XG4gICAgICBuZXdFbnRyeS5pbnRlcnNlY3Rpb25SYXRpbyB8fCAwIDogLTE7XG5cbiAgLy8gSWdub3JlIHVuY2hhbmdlZCByYXRpb3NcbiAgaWYgKG9sZFJhdGlvID09PSBuZXdSYXRpbykgcmV0dXJuO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50aHJlc2hvbGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRocmVzaG9sZCA9IHRoaXMudGhyZXNob2xkc1tpXTtcblxuICAgIC8vIFJldHVybiB0cnVlIGlmIGFuIGVudHJ5IG1hdGNoZXMgYSB0aHJlc2hvbGQgb3IgaWYgdGhlIG5ldyByYXRpb1xuICAgIC8vIGFuZCB0aGUgb2xkIHJhdGlvIGFyZSBvbiB0aGUgb3Bwb3NpdGUgc2lkZXMgb2YgYSB0aHJlc2hvbGQuXG4gICAgaWYgKHRocmVzaG9sZCA9PSBvbGRSYXRpbyB8fCB0aHJlc2hvbGQgPT0gbmV3UmF0aW8gfHxcbiAgICAgICAgdGhyZXNob2xkIDwgb2xkUmF0aW8gIT09IHRocmVzaG9sZCA8IG5ld1JhdGlvKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSByb290IGVsZW1lbnQgaXMgYW4gZWxlbWVudCBhbmQgaXMgaW4gdGhlIERPTS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIHJvb3QgZWxlbWVudCBpcyBhbiBlbGVtZW50IGFuZCBpcyBpbiB0aGUgRE9NLlxuICogQHByaXZhdGVcbiAqL1xuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLl9yb290SXNJbkRvbSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gIXRoaXMucm9vdCB8fCBjb250YWluc0RlZXAoZG9jdW1lbnQsIHRoaXMucm9vdCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdGFyZ2V0IGVsZW1lbnQgaXMgYSBjaGlsZCBvZiByb290LlxuICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgVGhlIHRhcmdldCBlbGVtZW50IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdGFyZ2V0IGVsZW1lbnQgaXMgYSBjaGlsZCBvZiByb290LlxuICogQHByaXZhdGVcbiAqL1xuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLl9yb290Q29udGFpbnNUYXJnZXQgPSBmdW5jdGlvbih0YXJnZXQpIHtcbiAgcmV0dXJuIGNvbnRhaW5zRGVlcCh0aGlzLnJvb3QgfHwgZG9jdW1lbnQsIHRhcmdldCk7XG59O1xuXG5cbi8qKlxuICogQWRkcyB0aGUgaW5zdGFuY2UgdG8gdGhlIGdsb2JhbCBJbnRlcnNlY3Rpb25PYnNlcnZlciByZWdpc3RyeSBpZiBpdCBpc24ndFxuICogYWxyZWFkeSBwcmVzZW50LlxuICogQHByaXZhdGVcbiAqL1xuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIucHJvdG90eXBlLl9yZWdpc3Rlckluc3RhbmNlID0gZnVuY3Rpb24oKSB7XG4gIGlmIChyZWdpc3RyeS5pbmRleE9mKHRoaXMpIDwgMCkge1xuICAgIHJlZ2lzdHJ5LnB1c2godGhpcyk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBpbnN0YW5jZSBmcm9tIHRoZSBnbG9iYWwgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgcmVnaXN0cnkuXG4gKiBAcHJpdmF0ZVxuICovXG5JbnRlcnNlY3Rpb25PYnNlcnZlci5wcm90b3R5cGUuX3VucmVnaXN0ZXJJbnN0YW5jZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaW5kZXggPSByZWdpc3RyeS5pbmRleE9mKHRoaXMpO1xuICBpZiAoaW5kZXggIT0gLTEpIHJlZ2lzdHJ5LnNwbGljZShpbmRleCwgMSk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBwZXJmb3JtYW5jZS5ub3coKSBtZXRob2Qgb3IgbnVsbCBpbiBicm93c2Vyc1xuICogdGhhdCBkb24ndCBzdXBwb3J0IHRoZSBBUEkuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBlbGFwc2VkIHRpbWUgc2luY2UgdGhlIHBhZ2Ugd2FzIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gbm93KCkge1xuICByZXR1cm4gd2luZG93LnBlcmZvcm1hbmNlICYmIHBlcmZvcm1hbmNlLm5vdyAmJiBwZXJmb3JtYW5jZS5ub3coKTtcbn1cblxuXG4vKipcbiAqIFRocm90dGxlcyBhIGZ1bmN0aW9uIGFuZCBkZWxheXMgaXRzIGV4ZWN1dGlvbiwgc28gaXQncyBvbmx5IGNhbGxlZCBhdCBtb3N0XG4gKiBvbmNlIHdpdGhpbiBhIGdpdmVuIHRpbWUgcGVyaW9kLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXQgVGhlIGFtb3VudCBvZiB0aW1lIHRoYXQgbXVzdCBwYXNzIGJlZm9yZSB0aGVcbiAqICAgICBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIGFnYWluLlxuICogQHJldHVybiB7RnVuY3Rpb259IFRoZSB0aHJvdHRsZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRocm90dGxlKGZuLCB0aW1lb3V0KSB7XG4gIHZhciB0aW1lciA9IG51bGw7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aW1lcikge1xuICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBmbigpO1xuICAgICAgICB0aW1lciA9IG51bGw7XG4gICAgICB9LCB0aW1lb3V0KTtcbiAgICB9XG4gIH07XG59XG5cblxuLyoqXG4gKiBBZGRzIGFuIGV2ZW50IGhhbmRsZXIgdG8gYSBET00gbm9kZSBlbnN1cmluZyBjcm9zcy1icm93c2VyIGNvbXBhdGliaWxpdHkuXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgVGhlIERPTSBub2RlIHRvIGFkZCB0aGUgZXZlbnQgaGFuZGxlciB0by5cbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCBUaGUgZXZlbnQgbmFtZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBldmVudCBoYW5kbGVyIHRvIGFkZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0X3VzZUNhcHR1cmUgT3B0aW9uYWxseSBhZGRzIHRoZSBldmVuIHRvIHRoZSBjYXB0dXJlXG4gKiAgICAgcGhhc2UuIE5vdGU6IHRoaXMgb25seSB3b3JrcyBpbiBtb2Rlcm4gYnJvd3NlcnMuXG4gKi9cbmZ1bmN0aW9uIGFkZEV2ZW50KG5vZGUsIGV2ZW50LCBmbiwgb3B0X3VzZUNhcHR1cmUpIHtcbiAgaWYgKHR5cGVvZiBub2RlLmFkZEV2ZW50TGlzdGVuZXIgPT0gJ2Z1bmN0aW9uJykge1xuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgZm4sIG9wdF91c2VDYXB0dXJlIHx8IGZhbHNlKTtcbiAgfVxuICBlbHNlIGlmICh0eXBlb2Ygbm9kZS5hdHRhY2hFdmVudCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgbm9kZS5hdHRhY2hFdmVudCgnb24nICsgZXZlbnQsIGZuKTtcbiAgfVxufVxuXG5cbi8qKlxuICogUmVtb3ZlcyBhIHByZXZpb3VzbHkgYWRkZWQgZXZlbnQgaGFuZGxlciBmcm9tIGEgRE9NIG5vZGUuXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgVGhlIERPTSBub2RlIHRvIHJlbW92ZSB0aGUgZXZlbnQgaGFuZGxlciBmcm9tLlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGV2ZW50IGhhbmRsZXIgdG8gcmVtb3ZlLlxuICogQHBhcmFtIHtib29sZWFufSBvcHRfdXNlQ2FwdHVyZSBJZiB0aGUgZXZlbnQgaGFuZGxlciB3YXMgYWRkZWQgd2l0aCB0aGlzXG4gKiAgICAgZmxhZyBzZXQgdG8gdHJ1ZSwgaXQgc2hvdWxkIGJlIHNldCB0byB0cnVlIGhlcmUgaW4gb3JkZXIgdG8gcmVtb3ZlIGl0LlxuICovXG5mdW5jdGlvbiByZW1vdmVFdmVudChub2RlLCBldmVudCwgZm4sIG9wdF91c2VDYXB0dXJlKSB7XG4gIGlmICh0eXBlb2Ygbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyID09ICdmdW5jdGlvbicpIHtcbiAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGZuLCBvcHRfdXNlQ2FwdHVyZSB8fCBmYWxzZSk7XG4gIH1cbiAgZWxzZSBpZiAodHlwZW9mIG5vZGUuZGV0YXRjaEV2ZW50ID09ICdmdW5jdGlvbicpIHtcbiAgICBub2RlLmRldGF0Y2hFdmVudCgnb24nICsgZXZlbnQsIGZuKTtcbiAgfVxufVxuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgaW50ZXJzZWN0aW9uIGJldHdlZW4gdHdvIHJlY3Qgb2JqZWN0cy5cbiAqIEBwYXJhbSB7T2JqZWN0fSByZWN0MSBUaGUgZmlyc3QgcmVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSByZWN0MiBUaGUgc2Vjb25kIHJlY3QuXG4gKiBAcmV0dXJuIHs/T2JqZWN0fSBUaGUgaW50ZXJzZWN0aW9uIHJlY3Qgb3IgdW5kZWZpbmVkIGlmIG5vIGludGVyc2VjdGlvblxuICogICAgIGlzIGZvdW5kLlxuICovXG5mdW5jdGlvbiBjb21wdXRlUmVjdEludGVyc2VjdGlvbihyZWN0MSwgcmVjdDIpIHtcbiAgdmFyIHRvcCA9IE1hdGgubWF4KHJlY3QxLnRvcCwgcmVjdDIudG9wKTtcbiAgdmFyIGJvdHRvbSA9IE1hdGgubWluKHJlY3QxLmJvdHRvbSwgcmVjdDIuYm90dG9tKTtcbiAgdmFyIGxlZnQgPSBNYXRoLm1heChyZWN0MS5sZWZ0LCByZWN0Mi5sZWZ0KTtcbiAgdmFyIHJpZ2h0ID0gTWF0aC5taW4ocmVjdDEucmlnaHQsIHJlY3QyLnJpZ2h0KTtcbiAgdmFyIHdpZHRoID0gcmlnaHQgLSBsZWZ0O1xuICB2YXIgaGVpZ2h0ID0gYm90dG9tIC0gdG9wO1xuXG4gIHJldHVybiAod2lkdGggPj0gMCAmJiBoZWlnaHQgPj0gMCkgJiYge1xuICAgIHRvcDogdG9wLFxuICAgIGJvdHRvbTogYm90dG9tLFxuICAgIGxlZnQ6IGxlZnQsXG4gICAgcmlnaHQ6IHJpZ2h0LFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodFxuICB9O1xufVxuXG5cbi8qKlxuICogU2hpbXMgdGhlIG5hdGl2ZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBvbGRlciBJRS5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWwgVGhlIGVsZW1lbnQgd2hvc2UgYm91bmRpbmcgcmVjdCB0byBnZXQuXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSAocG9zc2libHkgc2hpbW1lZCkgcmVjdCBvZiB0aGUgZWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsKSB7XG4gIHZhciByZWN0O1xuXG4gIHRyeSB7XG4gICAgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBJZ25vcmUgV2luZG93cyA3IElFMTEgXCJVbnNwZWNpZmllZCBlcnJvclwiXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3czYy9JbnRlcnNlY3Rpb25PYnNlcnZlci9wdWxsLzIwNVxuICB9XG5cbiAgaWYgKCFyZWN0KSByZXR1cm4gZ2V0RW1wdHlSZWN0KCk7XG5cbiAgLy8gT2xkZXIgSUVcbiAgaWYgKCEocmVjdC53aWR0aCAmJiByZWN0LmhlaWdodCkpIHtcbiAgICByZWN0ID0ge1xuICAgICAgdG9wOiByZWN0LnRvcCxcbiAgICAgIHJpZ2h0OiByZWN0LnJpZ2h0LFxuICAgICAgYm90dG9tOiByZWN0LmJvdHRvbSxcbiAgICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICAgIHdpZHRoOiByZWN0LnJpZ2h0IC0gcmVjdC5sZWZ0LFxuICAgICAgaGVpZ2h0OiByZWN0LmJvdHRvbSAtIHJlY3QudG9wXG4gICAgfTtcbiAgfVxuICByZXR1cm4gcmVjdDtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgYW4gZW1wdHkgcmVjdCBvYmplY3QuIEFuIGVtcHR5IHJlY3QgaXMgcmV0dXJuZWQgd2hlbiBhbiBlbGVtZW50XG4gKiBpcyBub3QgaW4gdGhlIERPTS5cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIGVtcHR5IHJlY3QuXG4gKi9cbmZ1bmN0aW9uIGdldEVtcHR5UmVjdCgpIHtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgd2lkdGg6IDAsXG4gICAgaGVpZ2h0OiAwXG4gIH07XG59XG5cbi8qKlxuICogQ2hlY2tzIHRvIHNlZSBpZiBhIHBhcmVudCBlbGVtZW50IGNvbnRhaW5zIGEgY2hpbGQgZWxlbWVudCAoaW5jbHVkaW5nIGluc2lkZVxuICogc2hhZG93IERPTSkuXG4gKiBAcGFyYW0ge05vZGV9IHBhcmVudCBUaGUgcGFyZW50IGVsZW1lbnQuXG4gKiBAcGFyYW0ge05vZGV9IGNoaWxkIFRoZSBjaGlsZCBlbGVtZW50LlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGFyZW50IG5vZGUgY29udGFpbnMgdGhlIGNoaWxkIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5zRGVlcChwYXJlbnQsIGNoaWxkKSB7XG4gIHZhciBub2RlID0gY2hpbGQ7XG4gIHdoaWxlIChub2RlKSB7XG4gICAgaWYgKG5vZGUgPT0gcGFyZW50KSByZXR1cm4gdHJ1ZTtcblxuICAgIG5vZGUgPSBnZXRQYXJlbnROb2RlKG5vZGUpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuXG4vKipcbiAqIEdldHMgdGhlIHBhcmVudCBub2RlIG9mIGFuIGVsZW1lbnQgb3IgaXRzIGhvc3QgZWxlbWVudCBpZiB0aGUgcGFyZW50IG5vZGVcbiAqIGlzIGEgc2hhZG93IHJvb3QuXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgVGhlIG5vZGUgd2hvc2UgcGFyZW50IHRvIGdldC5cbiAqIEByZXR1cm4ge05vZGV8bnVsbH0gVGhlIHBhcmVudCBub2RlIG9yIG51bGwgaWYgbm8gcGFyZW50IGV4aXN0cy5cbiAqL1xuZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZShub2RlKSB7XG4gIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG5cbiAgaWYgKHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgPT0gMTEgJiYgcGFyZW50Lmhvc3QpIHtcbiAgICAvLyBJZiB0aGUgcGFyZW50IGlzIGEgc2hhZG93IHJvb3QsIHJldHVybiB0aGUgaG9zdCBlbGVtZW50LlxuICAgIHJldHVybiBwYXJlbnQuaG9zdDtcbiAgfVxuICByZXR1cm4gcGFyZW50O1xufVxuXG5cbi8vIEV4cG9zZXMgdGhlIGNvbnN0cnVjdG9ycyBnbG9iYWxseS5cbndpbmRvdy5JbnRlcnNlY3Rpb25PYnNlcnZlciA9IEludGVyc2VjdGlvbk9ic2VydmVyO1xud2luZG93LkludGVyc2VjdGlvbk9ic2VydmVyRW50cnkgPSBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5O1xuXG59KHdpbmRvdywgZG9jdW1lbnQpKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIEdldFYgPSByZXF1aXJlKCcuL0dldFYnKTtcbnZhciBJc0NhbGxhYmxlID0gcmVxdWlyZSgnLi9Jc0NhbGxhYmxlJyk7XG52YXIgSXNQcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4vSXNQcm9wZXJ0eUtleScpO1xuXG4vKipcbiAqIDcuMy45IC0gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWdldG1ldGhvZFxuICogMS4gQXNzZXJ0OiBJc1Byb3BlcnR5S2V5KFApIGlzIHRydWUuXG4gKiAyLiBMZXQgZnVuYyBiZSBHZXRWKE8sIFApLlxuICogMy4gUmV0dXJuSWZBYnJ1cHQoZnVuYykuXG4gKiA0LiBJZiBmdW5jIGlzIGVpdGhlciB1bmRlZmluZWQgb3IgbnVsbCwgcmV0dXJuIHVuZGVmaW5lZC5cbiAqIDUuIElmIElzQ2FsbGFibGUoZnVuYykgaXMgZmFsc2UsIHRocm93IGEgVHlwZUVycm9yIGV4Y2VwdGlvbi5cbiAqIDYuIFJldHVybiBmdW5jLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gR2V0TWV0aG9kKE8sIFApIHtcblx0Ly8gNy4zLjkuMVxuXHRpZiAoIUlzUHJvcGVydHlLZXkoUCkpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogSXNQcm9wZXJ0eUtleShQKSBpcyBub3QgdHJ1ZScpO1xuXHR9XG5cblx0Ly8gNy4zLjkuMlxuXHR2YXIgZnVuYyA9IEdldFYoTywgUCk7XG5cblx0Ly8gNy4zLjkuNFxuXHRpZiAoZnVuYyA9PSBudWxsKSB7XG5cdFx0cmV0dXJuIHZvaWQgMDtcblx0fVxuXG5cdC8vIDcuMy45LjVcblx0aWYgKCFJc0NhbGxhYmxlKGZ1bmMpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoUCArICdpcyBub3QgYSBmdW5jdGlvbicpO1xuXHR9XG5cblx0Ly8gNy4zLjkuNlxuXHRyZXR1cm4gZnVuYztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0cmV0dXJuIHR5cGVvZiBTdHJpbmcucHJvdG90eXBlLnBhZEVuZCA9PT0gJ2Z1bmN0aW9uJyA/IFN0cmluZy5wcm90b3R5cGUucGFkRW5kIDogaW1wbGVtZW50YXRpb247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtOS4yXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVG9Cb29sZWFuKHZhbHVlKSB7IHJldHVybiAhIXZhbHVlOyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVG9OdW1iZXIgPSByZXF1aXJlKCcuL1RvTnVtYmVyJyk7XG5cbi8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy05LjZcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb1VpbnQzMih4KSB7XG5cdHJldHVybiBUb051bWJlcih4KSA+Pj4gMDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9HZXRJbnRyaW5zaWMnKTtcbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcbnZhciBjaGFubmVsID0gcmVxdWlyZSgnc2lkZS1jaGFubmVsJykoKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBTTE9UID0ge1xuXHRhc3NlcnQ6IGZ1bmN0aW9uIChPLCBzbG90KSB7XG5cdFx0aWYgKCFPIHx8ICh0eXBlb2YgTyAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIE8gIT09ICdmdW5jdGlvbicpKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYE9gIGlzIG5vdCBhbiBvYmplY3QnKTtcblx0XHR9XG5cdFx0aWYgKHR5cGVvZiBzbG90ICE9PSAnc3RyaW5nJykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2BzbG90YCBtdXN0IGJlIGEgc3RyaW5nJyk7XG5cdFx0fVxuXHRcdGNoYW5uZWwuYXNzZXJ0KE8pO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uIChPLCBzbG90KSB7XG5cdFx0aWYgKCFPIHx8ICh0eXBlb2YgTyAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIE8gIT09ICdmdW5jdGlvbicpKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYE9gIGlzIG5vdCBhbiBvYmplY3QnKTtcblx0XHR9XG5cdFx0aWYgKHR5cGVvZiBzbG90ICE9PSAnc3RyaW5nJykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2BzbG90YCBtdXN0IGJlIGEgc3RyaW5nJyk7XG5cdFx0fVxuXHRcdHZhciBzbG90cyA9IGNoYW5uZWwuZ2V0KE8pO1xuXHRcdHJldHVybiBzbG90cyAmJiBzbG90c1snJCcgKyBzbG90XTtcblx0fSxcblx0aGFzOiBmdW5jdGlvbiAoTywgc2xvdCkge1xuXHRcdGlmICghTyB8fCAodHlwZW9mIE8gIT09ICdvYmplY3QnICYmIHR5cGVvZiBPICE9PSAnZnVuY3Rpb24nKSkge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2BPYCBpcyBub3QgYW4gb2JqZWN0Jyk7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2Ygc2xvdCAhPT0gJ3N0cmluZycpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgc2xvdGAgbXVzdCBiZSBhIHN0cmluZycpO1xuXHRcdH1cblx0XHR2YXIgc2xvdHMgPSBjaGFubmVsLmdldChPKTtcblx0XHRyZXR1cm4gISFzbG90cyAmJiBoYXMoc2xvdHMsICckJyArIHNsb3QpO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uIChPLCBzbG90LCBWKSB7XG5cdFx0aWYgKCFPIHx8ICh0eXBlb2YgTyAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIE8gIT09ICdmdW5jdGlvbicpKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYE9gIGlzIG5vdCBhbiBvYmplY3QnKTtcblx0XHR9XG5cdFx0aWYgKHR5cGVvZiBzbG90ICE9PSAnc3RyaW5nJykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2BzbG90YCBtdXN0IGJlIGEgc3RyaW5nJyk7XG5cdFx0fVxuXHRcdHZhciBzbG90cyA9IGNoYW5uZWwuZ2V0KE8pO1xuXHRcdGlmICghc2xvdHMpIHtcblx0XHRcdHNsb3RzID0ge307XG5cdFx0XHRjaGFubmVsLnNldChPLCBzbG90cyk7XG5cdFx0fVxuXHRcdHNsb3RzWyckJyArIHNsb3RdID0gVjtcblx0fVxufTtcblxuaWYgKE9iamVjdC5mcmVlemUpIHtcblx0T2JqZWN0LmZyZWV6ZShTTE9UKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTTE9UO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBBZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0FkdmFuY2VTdHJpbmdJbmRleCcpO1xudmFyIENyZWF0ZUl0ZXJSZXN1bHRPYmplY3QgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0NyZWF0ZUl0ZXJSZXN1bHRPYmplY3QnKTtcbnZhciBHZXQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0dldCcpO1xudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L0dldEludHJpbnNpYycpO1xudmFyIE9iamVjdENyZWF0ZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvT2JqZWN0Q3JlYXRlJyk7XG52YXIgUmVnRXhwRXhlYyA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvUmVnRXhwRXhlYycpO1xudmFyIFNldCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvU2V0Jyk7XG52YXIgVG9MZW5ndGggPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1RvTGVuZ3RoJyk7XG52YXIgVG9TdHJpbmcgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1RvU3RyaW5nJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvVHlwZScpO1xudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scycpKCk7XG5cbnZhciBTTE9UID0gcmVxdWlyZSgnaW50ZXJuYWwtc2xvdCcpO1xudmFyIHVuZGVmaW5lZDtcblxudmFyIFJlZ0V4cFN0cmluZ0l0ZXJhdG9yID0gZnVuY3Rpb24gUmVnRXhwU3RyaW5nSXRlcmF0b3IoUiwgUywgZ2xvYmFsLCBmdWxsVW5pY29kZSkge1xuXHRpZiAoVHlwZShTKSAhPT0gJ1N0cmluZycpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdTIG11c3QgYmUgYSBzdHJpbmcnKTtcblx0fVxuXHRpZiAoVHlwZShnbG9iYWwpICE9PSAnQm9vbGVhbicpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdnbG9iYWwgbXVzdCBiZSBhIGJvb2xlYW4nKTtcblx0fVxuXHRpZiAoVHlwZShmdWxsVW5pY29kZSkgIT09ICdCb29sZWFuJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2Z1bGxVbmljb2RlIG11c3QgYmUgYSBib29sZWFuJyk7XG5cdH1cblx0U0xPVC5zZXQodGhpcywgJ1tbSXRlcmF0aW5nUmVnRXhwXV0nLCBSKTtcblx0U0xPVC5zZXQodGhpcywgJ1tbSXRlcmF0ZWRTdHJpbmddXScsIFMpO1xuXHRTTE9ULnNldCh0aGlzLCAnW1tHbG9iYWxdXScsIGdsb2JhbCk7XG5cdFNMT1Quc2V0KHRoaXMsICdbW1VuaWNvZGVdXScsIGZ1bGxVbmljb2RlKTtcblx0U0xPVC5zZXQodGhpcywgJ1tbRG9uZV1dJywgZmFsc2UpO1xufTtcblxudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gR2V0SW50cmluc2ljKCclSXRlcmF0b3JQcm90b3R5cGUlJywgdHJ1ZSk7XG5pZiAoSXRlcmF0b3JQcm90b3R5cGUpIHtcblx0UmVnRXhwU3RyaW5nSXRlcmF0b3IucHJvdG90eXBlID0gT2JqZWN0Q3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbn1cblxuZGVmaW5lKFJlZ0V4cFN0cmluZ0l0ZXJhdG9yLnByb3RvdHlwZSwge1xuXHRuZXh0OiBmdW5jdGlvbiBuZXh0KCkge1xuXHRcdHZhciBPID0gdGhpcztcblx0XHRpZiAoVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ3JlY2VpdmVyIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG5cdFx0fVxuXHRcdGlmIChcblx0XHRcdCEoTyBpbnN0YW5jZW9mIFJlZ0V4cFN0cmluZ0l0ZXJhdG9yKVxuXHRcdFx0fHwgIVNMT1QuaGFzKE8sICdbW0l0ZXJhdGluZ1JlZ0V4cF1dJylcblx0XHRcdHx8ICFTTE9ULmhhcyhPLCAnW1tJdGVyYXRlZFN0cmluZ11dJylcblx0XHRcdHx8ICFTTE9ULmhhcyhPLCAnW1tHbG9iYWxdXScpXG5cdFx0XHR8fCAhU0xPVC5oYXMoTywgJ1tbVW5pY29kZV1dJylcblx0XHRcdHx8ICFTTE9ULmhhcyhPLCAnW1tEb25lXV0nKVxuXHRcdCkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignXCJ0aGlzXCIgdmFsdWUgbXVzdCBiZSBhIFJlZ0V4cFN0cmluZ0l0ZXJhdG9yIGluc3RhbmNlJyk7XG5cdFx0fVxuXHRcdGlmIChTTE9ULmdldChPLCAnW1tEb25lXV0nKSkge1xuXHRcdFx0cmV0dXJuIENyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodW5kZWZpbmVkLCB0cnVlKTtcblx0XHR9XG5cdFx0dmFyIFIgPSBTTE9ULmdldChPLCAnW1tJdGVyYXRpbmdSZWdFeHBdXScpO1xuXHRcdHZhciBTID0gU0xPVC5nZXQoTywgJ1tbSXRlcmF0ZWRTdHJpbmddXScpO1xuXHRcdHZhciBnbG9iYWwgPSBTTE9ULmdldChPLCAnW1tHbG9iYWxdXScpO1xuXHRcdHZhciBmdWxsVW5pY29kZSA9IFNMT1QuZ2V0KE8sICdbW1VuaWNvZGVdXScpO1xuXHRcdHZhciBtYXRjaCA9IFJlZ0V4cEV4ZWMoUiwgUyk7XG5cdFx0aWYgKG1hdGNoID09PSBudWxsKSB7XG5cdFx0XHRTTE9ULnNldChPLCAnW1tEb25lXV0nLCB0cnVlKTtcblx0XHRcdHJldHVybiBDcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHVuZGVmaW5lZCwgdHJ1ZSk7XG5cdFx0fVxuXHRcdGlmIChnbG9iYWwpIHtcblx0XHRcdHZhciBtYXRjaFN0ciA9IFRvU3RyaW5nKEdldChtYXRjaCwgJzAnKSk7XG5cdFx0XHRpZiAobWF0Y2hTdHIgPT09ICcnKSB7XG5cdFx0XHRcdHZhciB0aGlzSW5kZXggPSBUb0xlbmd0aChHZXQoUiwgJ2xhc3RJbmRleCcpKTtcblx0XHRcdFx0dmFyIG5leHRJbmRleCA9IEFkdmFuY2VTdHJpbmdJbmRleChTLCB0aGlzSW5kZXgsIGZ1bGxVbmljb2RlKTtcblx0XHRcdFx0U2V0KFIsICdsYXN0SW5kZXgnLCBuZXh0SW5kZXgsIHRydWUpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIENyZWF0ZUl0ZXJSZXN1bHRPYmplY3QobWF0Y2gsIGZhbHNlKTtcblx0XHR9XG5cdFx0U0xPVC5zZXQoTywgJ1tbRG9uZV1dJywgdHJ1ZSk7XG5cdFx0cmV0dXJuIENyZWF0ZUl0ZXJSZXN1bHRPYmplY3QobWF0Y2gsIGZhbHNlKTtcblx0fVxufSk7XG5pZiAoaGFzU3ltYm9scykge1xuXHR2YXIgZGVmaW5lUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblx0aWYgKFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdGlmIChkZWZpbmVQKSB7XG5cdFx0XHRkZWZpbmVQKFJlZ0V4cFN0cmluZ0l0ZXJhdG9yLnByb3RvdHlwZSwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7XG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdHZhbHVlOiAnUmVnRXhwIFN0cmluZyBJdGVyYXRvcicsXG5cdFx0XHRcdHdyaXRhYmxlOiBmYWxzZVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFJlZ0V4cFN0cmluZ0l0ZXJhdG9yLnByb3RvdHlwZVtTeW1ib2wudG9TdHJpbmdUYWddID0gJ1JlZ0V4cCBTdHJpbmcgSXRlcmF0b3InO1xuXHRcdH1cblx0fVxuXG5cdGlmICghSXRlcmF0b3JQcm90b3R5cGUgJiYgU3ltYm9sLml0ZXJhdG9yKSB7XG5cdFx0dmFyIGZ1bmMgPSB7fTtcblx0XHRmdW5jW1N5bWJvbC5pdGVyYXRvcl0gPSBSZWdFeHBTdHJpbmdJdGVyYXRvci5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSB8fCBmdW5jdGlvbiBTeW1ib2xJdGVyYXRvcigpIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cdFx0dmFyIHByZWRpY2F0ZSA9IHt9O1xuXHRcdHByZWRpY2F0ZVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIFJlZ0V4cFN0cmluZ0l0ZXJhdG9yLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdICE9PSBmdW5jW1N5bWJvbC5pdGVyYXRvcl07XG5cdFx0fTtcblx0XHRkZWZpbmUoUmVnRXhwU3RyaW5nSXRlcmF0b3IucHJvdG90eXBlLCBmdW5jLCBwcmVkaWNhdGUpO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVnRXhwU3RyaW5nSXRlcmF0b3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXRlcmF0ZUl0ZXJhdG9yKGl0ZXJhdG9yKSB7XG5cdGlmICghaXRlcmF0b3IgfHwgdHlwZW9mIGl0ZXJhdG9yLm5leHQgIT09ICdmdW5jdGlvbicpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignaXRlcmF0b3IgbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCBhIGBuZXh0YCBtZXRob2QnKTtcblx0fVxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHNbMV07XG5cdFx0aWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2BjYWxsYmFja2AsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblx0XHR9XG5cdH1cblx0dmFyIHZhbHVlcyA9IGNhbGxiYWNrIHx8IFtdO1xuXHR2YXIgcmVzdWx0O1xuXHR3aGlsZSAoKHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKSkgJiYgIXJlc3VsdC5kb25lKSB7XG5cdFx0aWYgKGNhbGxiYWNrKSB7XG5cdFx0XHRjYWxsYmFjayhyZXN1bHQudmFsdWUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbGxiYWNrLXJldHVyblxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YWx1ZXMucHVzaChyZXN1bHQudmFsdWUpO1xuXHRcdH1cblx0fVxuXHRpZiAoIWNhbGxiYWNrKSB7XG5cdFx0cmV0dXJuIHZhbHVlcztcblx0fVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogZXNsaW50IG5vLWludmFsaWQtdGhpczogMSAqL1xuXG52YXIgRVJST1JfTUVTU0FHRSA9ICdGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBjYWxsZWQgb24gaW5jb21wYXRpYmxlICc7XG52YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGZ1bmNUeXBlID0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKHRoYXQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gJ2Z1bmN0aW9uJyB8fCB0b1N0ci5jYWxsKHRhcmdldCkgIT09IGZ1bmNUeXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRVJST1JfTUVTU0FHRSArIHRhcmdldCk7XG4gICAgfVxuICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXG4gICAgdmFyIGJvdW5kO1xuICAgIHZhciBiaW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgYm91bmQpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKE9iamVjdChyZXN1bHQpID09PSByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgICAgIHRoYXQsXG4gICAgICAgICAgICAgICAgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgYm91bmRMZW5ndGggPSBNYXRoLm1heCgwLCB0YXJnZXQubGVuZ3RoIC0gYXJncy5sZW5ndGgpO1xuICAgIHZhciBib3VuZEFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvdW5kTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYm91bmRBcmdzLnB1c2goJyQnICsgaSk7XG4gICAgfVxuXG4gICAgYm91bmQgPSBGdW5jdGlvbignYmluZGVyJywgJ3JldHVybiBmdW5jdGlvbiAoJyArIGJvdW5kQXJncy5qb2luKCcsJykgKyAnKXsgcmV0dXJuIGJpbmRlci5hcHBseSh0aGlzLGFyZ3VtZW50cyk7IH0nKShiaW5kZXIpO1xuXG4gICAgaWYgKHRhcmdldC5wcm90b3R5cGUpIHtcbiAgICAgICAgdmFyIEVtcHR5ID0gZnVuY3Rpb24gRW1wdHkoKSB7fTtcbiAgICAgICAgRW1wdHkucHJvdG90eXBlID0gdGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgYm91bmQucHJvdG90eXBlID0gbmV3IEVtcHR5KCk7XG4gICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJvdW5kO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1JlcXVpcmVPYmplY3RDb2VyY2libGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9oZWxwZXJzL2NhbGxCb3VuZCcpO1xudmFyICRpc0VudW1lcmFibGUgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbnRyaWVzKE8pIHtcblx0dmFyIG9iaiA9IFJlcXVpcmVPYmplY3RDb2VyY2libGUoTyk7XG5cdHZhciBlbnRyeXMgPSBbXTtcblx0Zm9yICh2YXIga2V5IGluIG9iaikge1xuXHRcdGlmIChoYXMob2JqLCBrZXkpICYmICRpc0VudW1lcmFibGUob2JqLCBrZXkpKSB7XG5cdFx0XHRlbnRyeXMucHVzaChba2V5LCBvYmpba2V5XV0pO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZW50cnlzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlcXVpcmVQcm9taXNlID0gcmVxdWlyZSgnLi9yZXF1aXJlUHJvbWlzZScpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdHJlcXVpcmVQcm9taXNlKCk7XG5cdHJldHVybiB0eXBlb2YgUHJvbWlzZS5hbGxTZXR0bGVkID09PSAnZnVuY3Rpb24nID8gUHJvbWlzZS5hbGxTZXR0bGVkIDogaW1wbGVtZW50YXRpb247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgaW5zcGVjdCA9IHJlcXVpcmUoJ29iamVjdC1pbnNwZWN0Jyk7XG5cbnZhciBJc0NhbGxhYmxlID0gcmVxdWlyZSgnLi9Jc0NhbGxhYmxlJyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtY2FsbFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIENhbGwoRiwgVikge1xuXHR2YXIgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogW107XG5cdGlmICghSXNDYWxsYWJsZShGKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKGluc3BlY3QoRikgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG5cdH1cblx0cmV0dXJuIEYuYXBwbHkoViwgYXJncyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuL3NoaW0nKSgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltR2xvYmFsKCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRpZiAoZGVmaW5lLnN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcblx0XHR2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocG9seWZpbGwsICdnbG9iYWxUaGlzJyk7XG5cdFx0aWYgKCFkZXNjcmlwdG9yIHx8IChkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSAmJiAoZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGRlc2NyaXB0b3Iud3JpdGFibGUgfHwgZ2xvYmFsVGhpcyAhPT0gcG9seWZpbGwpKSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG1heC1sZW5cblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwb2x5ZmlsbCwgJ2dsb2JhbFRoaXMnLCB7XG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdHZhbHVlOiBwb2x5ZmlsbCxcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlXG5cdFx0XHR9KTtcblx0XHR9XG5cdH0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICdvYmplY3QnIHx8IGdsb2JhbFRoaXMgIT09IHBvbHlmaWxsKSB7XG5cdFx0cG9seWZpbGwuZ2xvYmFsVGhpcyA9IHBvbHlmaWxsO1xuXHR9XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJ3N0cmluZy5wcm90b3R5cGUubWF0Y2hhbGwvYXV0bycpO1xuXG5yZXF1aXJlKCdnbG9iYWx0aGlzL2F1dG8nKTtcblxucmVxdWlyZSgncHJvbWlzZS5hbGxzZXR0bGVkL2F1dG8nKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgSXNJbnRlZ2VyID0gcmVxdWlyZSgnLi9Jc0ludGVnZXInKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gcmVxdWlyZSgnLi4vaGVscGVycy9tYXhTYWZlSW50ZWdlcicpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyICRjaGFyQ29kZUF0ID0gcmVxdWlyZSgnLi4vaGVscGVycy9jYWxsQm91bmQnKSgnU3RyaW5nLnByb3RvdHlwZS5jaGFyQ29kZUF0Jyk7XG5cbi8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBBZHZhbmNlU3RyaW5nSW5kZXgoUywgaW5kZXgsIHVuaWNvZGUpIHtcblx0aWYgKFR5cGUoUykgIT09ICdTdHJpbmcnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGBTYCBtdXN0IGJlIGEgU3RyaW5nJyk7XG5cdH1cblx0aWYgKCFJc0ludGVnZXIoaW5kZXgpIHx8IGluZGV4IDwgMCB8fCBpbmRleCA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogYGxlbmd0aGAgbXVzdCBiZSBhbiBpbnRlZ2VyID49IDAgYW5kIDw9IDIqKjUzJyk7XG5cdH1cblx0aWYgKFR5cGUodW5pY29kZSkgIT09ICdCb29sZWFuJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgdW5pY29kZWAgbXVzdCBiZSBhIEJvb2xlYW4nKTtcblx0fVxuXHRpZiAoIXVuaWNvZGUpIHtcblx0XHRyZXR1cm4gaW5kZXggKyAxO1xuXHR9XG5cdHZhciBsZW5ndGggPSBTLmxlbmd0aDtcblx0aWYgKChpbmRleCArIDEpID49IGxlbmd0aCkge1xuXHRcdHJldHVybiBpbmRleCArIDE7XG5cdH1cblxuXHR2YXIgZmlyc3QgPSAkY2hhckNvZGVBdChTLCBpbmRleCk7XG5cdGlmIChmaXJzdCA8IDB4RDgwMCB8fCBmaXJzdCA+IDB4REJGRikge1xuXHRcdHJldHVybiBpbmRleCArIDE7XG5cdH1cblxuXHR2YXIgc2Vjb25kID0gJGNoYXJDb2RlQXQoUywgaW5kZXggKyAxKTtcblx0aWYgKHNlY29uZCA8IDB4REMwMCB8fCBzZWNvbmQgPiAweERGRkYpIHtcblx0XHRyZXR1cm4gaW5kZXggKyAxO1xuXHR9XG5cblx0cmV0dXJuIGluZGV4ICsgMjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXNTeW1ib2xzID0gcmVxdWlyZSgnaGFzLXN5bWJvbHMnKSgpO1xudmFyIHJlZ2V4cE1hdGNoQWxsID0gcmVxdWlyZSgnLi9yZWdleHAtbWF0Y2hhbGwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRSZWdFeHBNYXRjaEFsbFBvbHlmaWxsKCkge1xuXHRpZiAoIWhhc1N5bWJvbHMgfHwgdHlwZW9mIFN5bWJvbC5tYXRjaEFsbCAhPT0gJ3N5bWJvbCcgfHwgdHlwZW9mIFJlZ0V4cC5wcm90b3R5cGVbU3ltYm9sLm1hdGNoQWxsXSAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHJldHVybiByZWdleHBNYXRjaEFsbDtcblx0fVxuXHRyZXR1cm4gUmVnRXhwLnByb3RvdHlwZVtTeW1ib2wubWF0Y2hBbGxdO1xufTtcbiIsIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi4yXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBnZXROYW5vU2Vjb25kcywgaHJ0aW1lLCBsb2FkVGltZSwgbW9kdWxlTG9hZFRpbWUsIG5vZGVMb2FkVGltZSwgdXBUaW1lO1xuXG4gIGlmICgodHlwZW9mIHBlcmZvcm1hbmNlICE9PSBcInVuZGVmaW5lZFwiICYmIHBlcmZvcm1hbmNlICE9PSBudWxsKSAmJiBwZXJmb3JtYW5jZS5ub3cpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIH07XG4gIH0gZWxzZSBpZiAoKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmIHByb2Nlc3MgIT09IG51bGwpICYmIHByb2Nlc3MuaHJ0aW1lKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAoZ2V0TmFub1NlY29uZHMoKSAtIG5vZGVMb2FkVGltZSkgLyAxZTY7XG4gICAgfTtcbiAgICBocnRpbWUgPSBwcm9jZXNzLmhydGltZTtcbiAgICBnZXROYW5vU2Vjb25kcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGhyO1xuICAgICAgaHIgPSBocnRpbWUoKTtcbiAgICAgIHJldHVybiBoclswXSAqIDFlOSArIGhyWzFdO1xuICAgIH07XG4gICAgbW9kdWxlTG9hZFRpbWUgPSBnZXROYW5vU2Vjb25kcygpO1xuICAgIHVwVGltZSA9IHByb2Nlc3MudXB0aW1lKCkgKiAxZTk7XG4gICAgbm9kZUxvYWRUaW1lID0gbW9kdWxlTG9hZFRpbWUgLSB1cFRpbWU7XG4gIH0gZWxzZSBpZiAoRGF0ZS5ub3cpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIERhdGUubm93KCkgLSBsb2FkVGltZTtcbiAgICB9O1xuICAgIGxvYWRUaW1lID0gRGF0ZS5ub3coKTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gbG9hZFRpbWU7XG4gICAgfTtcbiAgICBsb2FkVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICB9XG5cbn0pLmNhbGwodGhpcyk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBlcmZvcm1hbmNlLW5vdy5qcy5tYXBcbiIsIihmdW5jdGlvbihzZWxmKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBpZiAoc2VsZi5mZXRjaCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplTmFtZShuYW1lKSB7XG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgbmFtZSA9IFN0cmluZyhuYW1lKVxuICAgIH1cbiAgICBpZiAoL1teYS16MC05XFwtIyQlJicqKy5cXF5fYHx+XS9pLnRlc3QobmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBmaWVsZCBuYW1lJylcbiAgICB9XG4gICAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKVxuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpXG4gICAgfVxuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgZnVuY3Rpb24gSGVhZGVycyhoZWFkZXJzKSB7XG4gICAgdGhpcy5tYXAgPSB7fVxuXG4gICAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgdmFsdWUpXG4gICAgICB9LCB0aGlzKVxuXG4gICAgfSBlbHNlIGlmIChoZWFkZXJzKSB7XG4gICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgaGVhZGVyc1tuYW1lXSlcbiAgICAgIH0sIHRoaXMpXG4gICAgfVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICAgIHZhbHVlID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG4gICAgdmFyIGxpc3QgPSB0aGlzLm1hcFtuYW1lXVxuICAgIGlmICghbGlzdCkge1xuICAgICAgbGlzdCA9IFtdXG4gICAgICB0aGlzLm1hcFtuYW1lXSA9IGxpc3RcbiAgICB9XG4gICAgbGlzdC5wdXNoKHZhbHVlKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24obmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciB2YWx1ZXMgPSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxuICAgIHJldHVybiB2YWx1ZXMgPyB2YWx1ZXNbMF0gOiBudWxsXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5nZXRBbGwgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldIHx8IFtdXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldID0gW25vcm1hbGl6ZVZhbHVlKHZhbHVlKV1cbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaywgdGhpc0FyZykge1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMubWFwKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHRoaXMubWFwW25hbWVdLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB2YWx1ZSwgbmFtZSwgdGhpcylcbiAgICAgIH0sIHRoaXMpXG4gICAgfSwgdGhpcylcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN1bWVkKGJvZHkpIHtcbiAgICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpKVxuICAgIH1cbiAgICBib2R5LmJvZHlVc2VkID0gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gZmlsZVJlYWRlclJlYWR5KHJlYWRlcikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0KVxuICAgICAgfVxuICAgICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KHJlYWRlci5lcnJvcilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKVxuICAgIHJldHVybiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gICAgcmVhZGVyLnJlYWRBc1RleHQoYmxvYilcbiAgICByZXR1cm4gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgfVxuXG4gIHZhciBzdXBwb3J0ID0ge1xuICAgIGJsb2I6ICdGaWxlUmVhZGVyJyBpbiBzZWxmICYmICdCbG9iJyBpbiBzZWxmICYmIChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ldyBCbG9iKClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9KSgpLFxuICAgIGZvcm1EYXRhOiAnRm9ybURhdGEnIGluIHNlbGYsXG4gICAgYXJyYXlCdWZmZXI6ICdBcnJheUJ1ZmZlcicgaW4gc2VsZlxuICB9XG5cbiAgZnVuY3Rpb24gQm9keSgpIHtcbiAgICB0aGlzLmJvZHlVc2VkID0gZmFsc2VcblxuXG4gICAgdGhpcy5faW5pdEJvZHkgPSBmdW5jdGlvbihib2R5KSB7XG4gICAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHlcbiAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYmxvYiAmJiBCbG9iLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlCbG9iID0gYm9keVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmZvcm1EYXRhICYmIEZvcm1EYXRhLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHlcbiAgICAgIH0gZWxzZSBpZiAoIWJvZHkpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSAnJ1xuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIEFycmF5QnVmZmVyLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIC8vIE9ubHkgc3VwcG9ydCBBcnJheUJ1ZmZlcnMgZm9yIFBPU1QgbWV0aG9kLlxuICAgICAgICAvLyBSZWNlaXZpbmcgQXJyYXlCdWZmZXJzIGhhcHBlbnMgdmlhIEJsb2JzLCBpbnN0ZWFkLlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnN1cHBvcnRlZCBCb2R5SW5pdCB0eXBlJylcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkge1xuICAgICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUJsb2IgJiYgdGhpcy5fYm9keUJsb2IudHlwZSkge1xuICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsIHRoaXMuX2JvZHlCbG9iLnR5cGUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydC5ibG9iKSB7XG4gICAgICB0aGlzLmJsb2IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlCbG9iKVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyBibG9iJylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5VGV4dF0pKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYXJyYXlCdWZmZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmxvYigpLnRoZW4ocmVhZEJsb2JBc0FycmF5QnVmZmVyKVxuICAgICAgfVxuXG4gICAgICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgICByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIHRleHQnKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICAgIHJldHVybiByZWplY3RlZCA/IHJlamVjdGVkIDogUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlUZXh0KVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdXBwb3J0LmZvcm1EYXRhKSB7XG4gICAgICB0aGlzLmZvcm1EYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKGRlY29kZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmpzb24gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKEpTT04ucGFyc2UpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8vIEhUVFAgbWV0aG9kcyB3aG9zZSBjYXBpdGFsaXphdGlvbiBzaG91bGQgYmUgbm9ybWFsaXplZFxuICB2YXIgbWV0aG9kcyA9IFsnREVMRVRFJywgJ0dFVCcsICdIRUFEJywgJ09QVElPTlMnLCAnUE9TVCcsICdQVVQnXVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZU1ldGhvZChtZXRob2QpIHtcbiAgICB2YXIgdXBjYXNlZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpXG4gICAgcmV0dXJuIChtZXRob2RzLmluZGV4T2YodXBjYXNlZCkgPiAtMSkgPyB1cGNhc2VkIDogbWV0aG9kXG4gIH1cblxuICBmdW5jdGlvbiBSZXF1ZXN0KGlucHV0LCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keVxuICAgIGlmIChSZXF1ZXN0LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGlucHV0KSkge1xuICAgICAgaWYgKGlucHV0LmJvZHlVc2VkKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpXG4gICAgICB9XG4gICAgICB0aGlzLnVybCA9IGlucHV0LnVybFxuICAgICAgdGhpcy5jcmVkZW50aWFscyA9IGlucHV0LmNyZWRlbnRpYWxzXG4gICAgICBpZiAoIW9wdGlvbnMuaGVhZGVycykge1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbnB1dC5oZWFkZXJzKVxuICAgICAgfVxuICAgICAgdGhpcy5tZXRob2QgPSBpbnB1dC5tZXRob2RcbiAgICAgIHRoaXMubW9kZSA9IGlucHV0Lm1vZGVcbiAgICAgIGlmICghYm9keSkge1xuICAgICAgICBib2R5ID0gaW5wdXQuX2JvZHlJbml0XG4gICAgICAgIGlucHV0LmJvZHlVc2VkID0gdHJ1ZVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVybCA9IGlucHV0XG4gICAgfVxuXG4gICAgdGhpcy5jcmVkZW50aWFscyA9IG9wdGlvbnMuY3JlZGVudGlhbHMgfHwgdGhpcy5jcmVkZW50aWFscyB8fCAnb21pdCdcbiAgICBpZiAob3B0aW9ucy5oZWFkZXJzIHx8ICF0aGlzLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgICB9XG4gICAgdGhpcy5tZXRob2QgPSBub3JtYWxpemVNZXRob2Qob3B0aW9ucy5tZXRob2QgfHwgdGhpcy5tZXRob2QgfHwgJ0dFVCcpXG4gICAgdGhpcy5tb2RlID0gb3B0aW9ucy5tb2RlIHx8IHRoaXMubW9kZSB8fCBudWxsXG4gICAgdGhpcy5yZWZlcnJlciA9IG51bGxcblxuICAgIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIGJvZHkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JvZHkgbm90IGFsbG93ZWQgZm9yIEdFVCBvciBIRUFEIHJlcXVlc3RzJylcbiAgICB9XG4gICAgdGhpcy5faW5pdEJvZHkoYm9keSlcbiAgfVxuXG4gIFJlcXVlc3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMpXG4gIH1cblxuICBmdW5jdGlvbiBkZWNvZGUoYm9keSkge1xuICAgIHZhciBmb3JtID0gbmV3IEZvcm1EYXRhKClcbiAgICBib2R5LnRyaW0oKS5zcGxpdCgnJicpLmZvckVhY2goZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGlmIChieXRlcykge1xuICAgICAgICB2YXIgc3BsaXQgPSBieXRlcy5zcGxpdCgnPScpXG4gICAgICAgIHZhciBuYW1lID0gc3BsaXQuc2hpZnQoKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICB2YXIgdmFsdWUgPSBzcGxpdC5qb2luKCc9JykucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgZm9ybS5hcHBlbmQoZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpLCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIGZvcm1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhlYWRlcnMoeGhyKSB7XG4gICAgdmFyIGhlYWQgPSBuZXcgSGVhZGVycygpXG4gICAgdmFyIHBhaXJzID0gKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSB8fCAnJykudHJpbSgpLnNwbGl0KCdcXG4nKVxuICAgIHBhaXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICB2YXIgc3BsaXQgPSBoZWFkZXIudHJpbSgpLnNwbGl0KCc6JylcbiAgICAgIHZhciBrZXkgPSBzcGxpdC5zaGlmdCgpLnRyaW0oKVxuICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignOicpLnRyaW0oKVxuICAgICAgaGVhZC5hcHBlbmQoa2V5LCB2YWx1ZSlcbiAgICB9KVxuICAgIHJldHVybiBoZWFkXG4gIH1cblxuICBCb2R5LmNhbGwoUmVxdWVzdC5wcm90b3R5cGUpXG5cbiAgZnVuY3Rpb24gUmVzcG9uc2UoYm9keUluaXQsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSB7fVxuICAgIH1cblxuICAgIHRoaXMudHlwZSA9ICdkZWZhdWx0J1xuICAgIHRoaXMuc3RhdHVzID0gb3B0aW9ucy5zdGF0dXNcbiAgICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwXG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gb3B0aW9ucy5zdGF0dXNUZXh0XG4gICAgdGhpcy5oZWFkZXJzID0gb3B0aW9ucy5oZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycyA/IG9wdGlvbnMuaGVhZGVycyA6IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgICB0aGlzLnVybCA9IG9wdGlvbnMudXJsIHx8ICcnXG4gICAgdGhpcy5faW5pdEJvZHkoYm9keUluaXQpXG4gIH1cblxuICBCb2R5LmNhbGwoUmVzcG9uc2UucHJvdG90eXBlKVxuXG4gIFJlc3BvbnNlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgUmVzcG9uc2UodGhpcy5fYm9keUluaXQsIHtcbiAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgICBzdGF0dXNUZXh0OiB0aGlzLnN0YXR1c1RleHQsXG4gICAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh0aGlzLmhlYWRlcnMpLFxuICAgICAgdXJsOiB0aGlzLnVybFxuICAgIH0pXG4gIH1cblxuICBSZXNwb25zZS5lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXNwb25zZSA9IG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiAwLCBzdGF0dXNUZXh0OiAnJ30pXG4gICAgcmVzcG9uc2UudHlwZSA9ICdlcnJvcidcbiAgICByZXR1cm4gcmVzcG9uc2VcbiAgfVxuXG4gIHZhciByZWRpcmVjdFN0YXR1c2VzID0gWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XVxuXG4gIFJlc3BvbnNlLnJlZGlyZWN0ID0gZnVuY3Rpb24odXJsLCBzdGF0dXMpIHtcbiAgICBpZiAocmVkaXJlY3RTdGF0dXNlcy5pbmRleE9mKHN0YXR1cykgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCBzdGF0dXMgY29kZScpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiBzdGF0dXMsIGhlYWRlcnM6IHtsb2NhdGlvbjogdXJsfX0pXG4gIH1cblxuICBzZWxmLkhlYWRlcnMgPSBIZWFkZXJzXG4gIHNlbGYuUmVxdWVzdCA9IFJlcXVlc3RcbiAgc2VsZi5SZXNwb25zZSA9IFJlc3BvbnNlXG5cbiAgc2VsZi5mZXRjaCA9IGZ1bmN0aW9uKGlucHV0LCBpbml0KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlcXVlc3RcbiAgICAgIGlmIChSZXF1ZXN0LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGlucHV0KSAmJiAhaW5pdCkge1xuICAgICAgICByZXF1ZXN0ID0gaW5wdXRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChpbnB1dCwgaW5pdClcbiAgICAgIH1cblxuICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXG5cbiAgICAgIGZ1bmN0aW9uIHJlc3BvbnNlVVJMKCkge1xuICAgICAgICBpZiAoJ3Jlc3BvbnNlVVJMJyBpbiB4aHIpIHtcbiAgICAgICAgICByZXR1cm4geGhyLnJlc3BvbnNlVVJMXG4gICAgICAgIH1cblxuICAgICAgICAvLyBBdm9pZCBzZWN1cml0eSB3YXJuaW5ncyBvbiBnZXRSZXNwb25zZUhlYWRlciB3aGVuIG5vdCBhbGxvd2VkIGJ5IENPUlNcbiAgICAgICAgaWYgKC9eWC1SZXF1ZXN0LVVSTDovbS50ZXN0KHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkpIHtcbiAgICAgICAgICByZXR1cm4geGhyLmdldFJlc3BvbnNlSGVhZGVyKCdYLVJlcXVlc3QtVVJMJylcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzdGF0dXMgPSAoeGhyLnN0YXR1cyA9PT0gMTIyMykgPyAyMDQgOiB4aHIuc3RhdHVzXG4gICAgICAgIGlmIChzdGF0dXMgPCAxMDAgfHwgc3RhdHVzID4gNTk5KSB7XG4gICAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICBzdGF0dXM6IHN0YXR1cyxcbiAgICAgICAgICBzdGF0dXNUZXh0OiB4aHIuc3RhdHVzVGV4dCxcbiAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzKHhociksXG4gICAgICAgICAgdXJsOiByZXNwb25zZVVSTCgpXG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHRcbiAgICAgICAgcmVzb2x2ZShuZXcgUmVzcG9uc2UoYm9keSwgb3B0aW9ucykpXG4gICAgICB9XG5cbiAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgICB9XG5cbiAgICAgIHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgIH1cblxuICAgICAgeGhyLm9wZW4ocmVxdWVzdC5tZXRob2QsIHJlcXVlc3QudXJsLCB0cnVlKVxuXG4gICAgICBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ2luY2x1ZGUnKSB7XG4gICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlXG4gICAgICB9XG5cbiAgICAgIGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIgJiYgc3VwcG9ydC5ibG9iKSB7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYmxvYidcbiAgICAgIH1cblxuICAgICAgcmVxdWVzdC5oZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgdmFsdWUpXG4gICAgICB9KVxuXG4gICAgICB4aHIuc2VuZCh0eXBlb2YgcmVxdWVzdC5fYm9keUluaXQgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHJlcXVlc3QuX2JvZHlJbml0KVxuICAgIH0pXG4gIH1cbiAgc2VsZi5mZXRjaC5wb2x5ZmlsbCA9IHRydWVcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbVBhZFN0YXJ0KCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgeyBwYWRTdGFydDogcG9seWZpbGwgfSwge1xuXHRcdHBhZFN0YXJ0OiBmdW5jdGlvbiB0ZXN0UGFkU3RhcnQoKSB7XG5cdFx0XHRyZXR1cm4gU3RyaW5nLnByb3RvdHlwZS5wYWRTdGFydCAhPT0gcG9seWZpbGw7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJE9iamVjdCA9IEdldEludHJpbnNpYygnJU9iamVjdCUnKTtcblxudmFyIFJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuL1JlcXVpcmVPYmplY3RDb2VyY2libGUnKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b29iamVjdFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvT2JqZWN0KHZhbHVlKSB7XG5cdFJlcXVpcmVPYmplY3RDb2VyY2libGUodmFsdWUpO1xuXHRyZXR1cm4gJE9iamVjdCh2YWx1ZSk7XG59O1xuIiwiZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSByZXF1aXJlKCcuLi9oZWxwZXJzL21heFNhZmVJbnRlZ2VyJyk7XG5cbnZhciBUb0ludGVnZXIgPSByZXF1aXJlKCcuL1RvSW50ZWdlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvTGVuZ3RoKGFyZ3VtZW50KSB7XG5cdHZhciBsZW4gPSBUb0ludGVnZXIoYXJndW1lbnQpO1xuXHRpZiAobGVuIDw9IDApIHsgcmV0dXJuIDA7IH0gLy8gaW5jbHVkZXMgY29udmVydGluZyAtMCB0byArMFxuXHRpZiAobGVuID4gTUFYX1NBRkVfSU5URUdFUikgeyByZXR1cm4gTUFYX1NBRkVfSU5URUdFUjsgfVxuXHRyZXR1cm4gbGVuO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbUdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoKSB7XG5cdHZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG5cdGRlZmluZShcblx0XHRPYmplY3QsXG5cdFx0eyBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBwb2x5ZmlsbCB9LFxuXHRcdHsgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgIT09IHBvbHlmaWxsOyB9IH1cblx0KTtcblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsIi8qXG4gKiBzbW9vdGhzY3JvbGwgcG9seWZpbGwgLSB2MC4zLjVcbiAqIGh0dHBzOi8vaWFtZHVzdGFuLmdpdGh1Yi5pby9zbW9vdGhzY3JvbGxcbiAqIDIwMTYgKGMpIER1c3RhbiBLYXN0ZW4sIEplcmVtaWFzIE1lbmljaGVsbGkgLSBNSVQgTGljZW5zZVxuICovXG5cbihmdW5jdGlvbih3LCBkLCB1bmRlZmluZWQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qXG4gICAqIGFsaWFzZXNcbiAgICogdzogd2luZG93IGdsb2JhbCBvYmplY3RcbiAgICogZDogZG9jdW1lbnRcbiAgICogdW5kZWZpbmVkOiB1bmRlZmluZWRcbiAgICovXG5cbiAgLy8gcG9seWZpbGxcbiAgZnVuY3Rpb24gcG9seWZpbGwoKSB7XG4gICAgLy8gcmV0dXJuIHdoZW4gc2Nyb2xsQmVoYXZpb3IgaW50ZXJmYWNlIGlzIHN1cHBvcnRlZFxuICAgIGlmICgnc2Nyb2xsQmVoYXZpb3InIGluIGQuZG9jdW1lbnRFbGVtZW50LnN0eWxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBnbG9iYWxzXG4gICAgICovXG4gICAgdmFyIEVsZW1lbnQgPSB3LkhUTUxFbGVtZW50IHx8IHcuRWxlbWVudDtcbiAgICB2YXIgU0NST0xMX1RJTUUgPSA0Njg7XG5cbiAgICAvKlxuICAgICAqIG9iamVjdCBnYXRoZXJpbmcgb3JpZ2luYWwgc2Nyb2xsIG1ldGhvZHNcbiAgICAgKi9cbiAgICB2YXIgb3JpZ2luYWwgPSB7XG4gICAgICBzY3JvbGw6IHcuc2Nyb2xsIHx8IHcuc2Nyb2xsVG8sXG4gICAgICBzY3JvbGxCeTogdy5zY3JvbGxCeSxcbiAgICAgIGVsU2Nyb2xsOiBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGwgfHwgc2Nyb2xsRWxlbWVudCxcbiAgICAgIHNjcm9sbEludG9WaWV3OiBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxJbnRvVmlld1xuICAgIH07XG5cbiAgICAvKlxuICAgICAqIGRlZmluZSB0aW1pbmcgbWV0aG9kXG4gICAgICovXG4gICAgdmFyIG5vdyA9IHcucGVyZm9ybWFuY2UgJiYgdy5wZXJmb3JtYW5jZS5ub3dcbiAgICAgID8gdy5wZXJmb3JtYW5jZS5ub3cuYmluZCh3LnBlcmZvcm1hbmNlKSA6IERhdGUubm93O1xuXG4gICAgLyoqXG4gICAgICogY2hhbmdlcyBzY3JvbGwgcG9zaXRpb24gaW5zaWRlIGFuIGVsZW1lbnRcbiAgICAgKiBAbWV0aG9kIHNjcm9sbEVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2Nyb2xsRWxlbWVudCh4LCB5KSB7XG4gICAgICB0aGlzLnNjcm9sbExlZnQgPSB4O1xuICAgICAgdGhpcy5zY3JvbGxUb3AgPSB5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJldHVybnMgcmVzdWx0IG9mIGFwcGx5aW5nIGVhc2UgbWF0aCBmdW5jdGlvbiB0byBhIG51bWJlclxuICAgICAqIEBtZXRob2QgZWFzZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBrXG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlYXNlKGspIHtcbiAgICAgIHJldHVybiAwLjUgKiAoMSAtIE1hdGguY29zKE1hdGguUEkgKiBrKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogaW5kaWNhdGVzIGlmIGEgc21vb3RoIGJlaGF2aW9yIHNob3VsZCBiZSBhcHBsaWVkXG4gICAgICogQG1ldGhvZCBzaG91bGRCYWlsT3V0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ8T2JqZWN0fSB4XG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2hvdWxkQmFpbE91dCh4KSB7XG4gICAgICBpZiAodHlwZW9mIHggIT09ICdvYmplY3QnXG4gICAgICAgICAgICB8fCB4ID09PSBudWxsXG4gICAgICAgICAgICB8fCB4LmJlaGF2aW9yID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgIHx8IHguYmVoYXZpb3IgPT09ICdhdXRvJ1xuICAgICAgICAgICAgfHwgeC5iZWhhdmlvciA9PT0gJ2luc3RhbnQnKSB7XG4gICAgICAgIC8vIGZpcnN0IGFyZyBub3QgYW4gb2JqZWN0L251bGxcbiAgICAgICAgLy8gb3IgYmVoYXZpb3IgaXMgYXV0bywgaW5zdGFudCBvciB1bmRlZmluZWRcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgeCA9PT0gJ29iamVjdCdcbiAgICAgICAgICAgICYmIHguYmVoYXZpb3IgPT09ICdzbW9vdGgnKSB7XG4gICAgICAgIC8vIGZpcnN0IGFyZ3VtZW50IGlzIGFuIG9iamVjdCBhbmQgYmVoYXZpb3IgaXMgc21vb3RoXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gdGhyb3cgZXJyb3Igd2hlbiBiZWhhdmlvciBpcyBub3Qgc3VwcG9ydGVkXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdiZWhhdmlvciBub3QgdmFsaWQnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBmaW5kcyBzY3JvbGxhYmxlIHBhcmVudCBvZiBhbiBlbGVtZW50XG4gICAgICogQG1ldGhvZCBmaW5kU2Nyb2xsYWJsZVBhcmVudFxuICAgICAqIEBwYXJhbSB7Tm9kZX0gZWxcbiAgICAgKiBAcmV0dXJucyB7Tm9kZX0gZWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kU2Nyb2xsYWJsZVBhcmVudChlbCkge1xuICAgICAgdmFyIGlzQm9keTtcbiAgICAgIHZhciBoYXNTY3JvbGxhYmxlU3BhY2U7XG4gICAgICB2YXIgaGFzVmlzaWJsZU92ZXJmbG93O1xuXG4gICAgICBkbyB7XG4gICAgICAgIGVsID0gZWwucGFyZW50Tm9kZTtcblxuICAgICAgICAvLyBzZXQgY29uZGl0aW9uIHZhcmlhYmxlc1xuICAgICAgICBpc0JvZHkgPSBlbCA9PT0gZC5ib2R5O1xuICAgICAgICBoYXNTY3JvbGxhYmxlU3BhY2UgPVxuICAgICAgICAgIGVsLmNsaWVudEhlaWdodCA8IGVsLnNjcm9sbEhlaWdodCB8fFxuICAgICAgICAgIGVsLmNsaWVudFdpZHRoIDwgZWwuc2Nyb2xsV2lkdGg7XG4gICAgICAgIGhhc1Zpc2libGVPdmVyZmxvdyA9XG4gICAgICAgICAgdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5vdmVyZmxvdyA9PT0gJ3Zpc2libGUnO1xuICAgICAgfSB3aGlsZSAoIWlzQm9keSAmJiAhKGhhc1Njcm9sbGFibGVTcGFjZSAmJiAhaGFzVmlzaWJsZU92ZXJmbG93KSk7XG5cbiAgICAgIGlzQm9keSA9IGhhc1Njcm9sbGFibGVTcGFjZSA9IGhhc1Zpc2libGVPdmVyZmxvdyA9IG51bGw7XG5cbiAgICAgIHJldHVybiBlbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzZWxmIGludm9rZWQgZnVuY3Rpb24gdGhhdCwgZ2l2ZW4gYSBjb250ZXh0LCBzdGVwcyB0aHJvdWdoIHNjcm9sbGluZ1xuICAgICAqIEBtZXRob2Qgc3RlcFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RlcChjb250ZXh0KSB7XG4gICAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgICAgdmFyIHZhbHVlO1xuICAgICAgdmFyIGN1cnJlbnRYO1xuICAgICAgdmFyIGN1cnJlbnRZO1xuICAgICAgdmFyIGVsYXBzZWQgPSAodGltZSAtIGNvbnRleHQuc3RhcnRUaW1lKSAvIFNDUk9MTF9USU1FO1xuXG4gICAgICAvLyBhdm9pZCBlbGFwc2VkIHRpbWVzIGhpZ2hlciB0aGFuIG9uZVxuICAgICAgZWxhcHNlZCA9IGVsYXBzZWQgPiAxID8gMSA6IGVsYXBzZWQ7XG5cbiAgICAgIC8vIGFwcGx5IGVhc2luZyB0byBlbGFwc2VkIHRpbWVcbiAgICAgIHZhbHVlID0gZWFzZShlbGFwc2VkKTtcblxuICAgICAgY3VycmVudFggPSBjb250ZXh0LnN0YXJ0WCArIChjb250ZXh0LnggLSBjb250ZXh0LnN0YXJ0WCkgKiB2YWx1ZTtcbiAgICAgIGN1cnJlbnRZID0gY29udGV4dC5zdGFydFkgKyAoY29udGV4dC55IC0gY29udGV4dC5zdGFydFkpICogdmFsdWU7XG5cbiAgICAgIGNvbnRleHQubWV0aG9kLmNhbGwoY29udGV4dC5zY3JvbGxhYmxlLCBjdXJyZW50WCwgY3VycmVudFkpO1xuXG4gICAgICAvLyBzY3JvbGwgbW9yZSBpZiB3ZSBoYXZlIG5vdCByZWFjaGVkIG91ciBkZXN0aW5hdGlvblxuICAgICAgaWYgKGN1cnJlbnRYICE9PSBjb250ZXh0LnggfHwgY3VycmVudFkgIT09IGNvbnRleHQueSkge1xuICAgICAgICB3LnJlcXVlc3RBbmltYXRpb25GcmFtZShzdGVwLmJpbmQodywgY29udGV4dCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNjcm9sbHMgd2luZG93IHdpdGggYSBzbW9vdGggYmVoYXZpb3JcbiAgICAgKiBAbWV0aG9kIHNtb290aFNjcm9sbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fE5vZGV9IGVsXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNtb290aFNjcm9sbChlbCwgeCwgeSkge1xuICAgICAgdmFyIHNjcm9sbGFibGU7XG4gICAgICB2YXIgc3RhcnRYO1xuICAgICAgdmFyIHN0YXJ0WTtcbiAgICAgIHZhciBtZXRob2Q7XG4gICAgICB2YXIgc3RhcnRUaW1lID0gbm93KCk7XG5cbiAgICAgIC8vIGRlZmluZSBzY3JvbGwgY29udGV4dFxuICAgICAgaWYgKGVsID09PSBkLmJvZHkpIHtcbiAgICAgICAgc2Nyb2xsYWJsZSA9IHc7XG4gICAgICAgIHN0YXJ0WCA9IHcuc2Nyb2xsWCB8fCB3LnBhZ2VYT2Zmc2V0O1xuICAgICAgICBzdGFydFkgPSB3LnNjcm9sbFkgfHwgdy5wYWdlWU9mZnNldDtcbiAgICAgICAgbWV0aG9kID0gb3JpZ2luYWwuc2Nyb2xsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2Nyb2xsYWJsZSA9IGVsO1xuICAgICAgICBzdGFydFggPSBlbC5zY3JvbGxMZWZ0O1xuICAgICAgICBzdGFydFkgPSBlbC5zY3JvbGxUb3A7XG4gICAgICAgIG1ldGhvZCA9IHNjcm9sbEVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIC8vIHNjcm9sbCBsb29waW5nIG92ZXIgYSBmcmFtZVxuICAgICAgc3RlcCh7XG4gICAgICAgIHNjcm9sbGFibGU6IHNjcm9sbGFibGUsXG4gICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICBzdGFydFRpbWU6IHN0YXJ0VGltZSxcbiAgICAgICAgc3RhcnRYOiBzdGFydFgsXG4gICAgICAgIHN0YXJ0WTogc3RhcnRZLFxuICAgICAgICB4OiB4LFxuICAgICAgICB5OiB5XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIE9SSUdJTkFMIE1FVEhPRFMgT1ZFUlJJREVTXG4gICAgICovXG5cbiAgICAvLyB3LnNjcm9sbCBhbmQgdy5zY3JvbGxUb1xuICAgIHcuc2Nyb2xsID0gdy5zY3JvbGxUbyA9IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gYXZvaWQgc21vb3RoIGJlaGF2aW9yIGlmIG5vdCByZXF1aXJlZFxuICAgICAgaWYgKHNob3VsZEJhaWxPdXQoYXJndW1lbnRzWzBdKSkge1xuICAgICAgICBvcmlnaW5hbC5zY3JvbGwuY2FsbChcbiAgICAgICAgICB3LFxuICAgICAgICAgIGFyZ3VtZW50c1swXS5sZWZ0IHx8IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICBhcmd1bWVudHNbMF0udG9wIHx8IGFyZ3VtZW50c1sxXVxuICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIExFVCBUSEUgU01PT1RITkVTUyBCRUdJTiFcbiAgICAgIHNtb290aFNjcm9sbC5jYWxsKFxuICAgICAgICB3LFxuICAgICAgICBkLmJvZHksXG4gICAgICAgIH5+YXJndW1lbnRzWzBdLmxlZnQsXG4gICAgICAgIH5+YXJndW1lbnRzWzBdLnRvcFxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgLy8gdy5zY3JvbGxCeVxuICAgIHcuc2Nyb2xsQnkgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGF2b2lkIHNtb290aCBiZWhhdmlvciBpZiBub3QgcmVxdWlyZWRcbiAgICAgIGlmIChzaG91bGRCYWlsT3V0KGFyZ3VtZW50c1swXSkpIHtcbiAgICAgICAgb3JpZ2luYWwuc2Nyb2xsQnkuY2FsbChcbiAgICAgICAgICB3LFxuICAgICAgICAgIGFyZ3VtZW50c1swXS5sZWZ0IHx8IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICBhcmd1bWVudHNbMF0udG9wIHx8IGFyZ3VtZW50c1sxXVxuICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIExFVCBUSEUgU01PT1RITkVTUyBCRUdJTiFcbiAgICAgIHNtb290aFNjcm9sbC5jYWxsKFxuICAgICAgICB3LFxuICAgICAgICBkLmJvZHksXG4gICAgICAgIH5+YXJndW1lbnRzWzBdLmxlZnQgKyAody5zY3JvbGxYIHx8IHcucGFnZVhPZmZzZXQpLFxuICAgICAgICB+fmFyZ3VtZW50c1swXS50b3AgKyAody5zY3JvbGxZIHx8IHcucGFnZVlPZmZzZXQpXG4gICAgICApO1xuICAgIH07XG5cbiAgICAvLyBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGwgYW5kIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbFRvXG4gICAgRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsID0gRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsVG8gPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGF2b2lkIHNtb290aCBiZWhhdmlvciBpZiBub3QgcmVxdWlyZWRcbiAgICAgIGlmIChzaG91bGRCYWlsT3V0KGFyZ3VtZW50c1swXSkpIHtcbiAgICAgICAgb3JpZ2luYWwuZWxTY3JvbGwuY2FsbChcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBhcmd1bWVudHNbMF0ubGVmdCB8fCBhcmd1bWVudHNbMF0sXG4gICAgICAgICAgICBhcmd1bWVudHNbMF0udG9wIHx8IGFyZ3VtZW50c1sxXVxuICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBsZWZ0ID0gYXJndW1lbnRzWzBdLmxlZnQ7XG4gICAgICB2YXIgdG9wID0gYXJndW1lbnRzWzBdLnRvcDtcblxuICAgICAgLy8gTEVUIFRIRSBTTU9PVEhORVNTIEJFR0lOIVxuICAgICAgc21vb3RoU2Nyb2xsLmNhbGwoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIHR5cGVvZiBsZWZ0ID09PSAnbnVtYmVyJyA/IGxlZnQgOiB0aGlzLnNjcm9sbExlZnQsXG4gICAgICAgICAgdHlwZW9mIHRvcCA9PT0gJ251bWJlcicgPyB0b3AgOiB0aGlzLnNjcm9sbFRvcFxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgLy8gRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsQnlcbiAgICBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxCeSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFyZzAgPSBhcmd1bWVudHNbMF07XG5cbiAgICAgIGlmICh0eXBlb2YgYXJnMCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdGhpcy5zY3JvbGwoe1xuICAgICAgICAgIGxlZnQ6IGFyZzAubGVmdCArIHRoaXMuc2Nyb2xsTGVmdCxcbiAgICAgICAgICB0b3A6IGFyZzAudG9wICsgdGhpcy5zY3JvbGxUb3AsXG4gICAgICAgICAgYmVoYXZpb3I6IGFyZzAuYmVoYXZpb3JcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNjcm9sbChcbiAgICAgICAgICB0aGlzLnNjcm9sbExlZnQgKyBhcmcwLFxuICAgICAgICAgIHRoaXMuc2Nyb2xsVG9wICsgYXJndW1lbnRzWzFdXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEludG9WaWV3XG4gICAgRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsSW50b1ZpZXcgPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGF2b2lkIHNtb290aCBiZWhhdmlvciBpZiBub3QgcmVxdWlyZWRcbiAgICAgIGlmIChzaG91bGRCYWlsT3V0KGFyZ3VtZW50c1swXSkpIHtcbiAgICAgICAgb3JpZ2luYWwuc2Nyb2xsSW50b1ZpZXcuY2FsbChcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGFyZ3VtZW50c1swXVxuICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIExFVCBUSEUgU01PT1RITkVTUyBCRUdJTiFcbiAgICAgIHZhciBzY3JvbGxhYmxlUGFyZW50ID0gZmluZFNjcm9sbGFibGVQYXJlbnQodGhpcyk7XG4gICAgICB2YXIgcGFyZW50UmVjdHMgPSBzY3JvbGxhYmxlUGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIGNsaWVudFJlY3RzID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgaWYgKHNjcm9sbGFibGVQYXJlbnQgIT09IGQuYm9keSkge1xuICAgICAgICAvLyByZXZlYWwgZWxlbWVudCBpbnNpZGUgcGFyZW50XG4gICAgICAgIHNtb290aFNjcm9sbC5jYWxsKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgc2Nyb2xsYWJsZVBhcmVudCxcbiAgICAgICAgICBzY3JvbGxhYmxlUGFyZW50LnNjcm9sbExlZnQgKyBjbGllbnRSZWN0cy5sZWZ0IC0gcGFyZW50UmVjdHMubGVmdCxcbiAgICAgICAgICBzY3JvbGxhYmxlUGFyZW50LnNjcm9sbFRvcCArIGNsaWVudFJlY3RzLnRvcCAtIHBhcmVudFJlY3RzLnRvcFxuICAgICAgICApO1xuICAgICAgICAvLyByZXZlYWwgcGFyZW50IGluIHZpZXdwb3J0XG4gICAgICAgIHcuc2Nyb2xsQnkoe1xuICAgICAgICAgIGxlZnQ6IHBhcmVudFJlY3RzLmxlZnQsXG4gICAgICAgICAgdG9wOiBwYXJlbnRSZWN0cy50b3AsXG4gICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcmV2ZWFsIGVsZW1lbnQgaW4gdmlld3BvcnRcbiAgICAgICAgdy5zY3JvbGxCeSh7XG4gICAgICAgICAgbGVmdDogY2xpZW50UmVjdHMubGVmdCxcbiAgICAgICAgICB0b3A6IGNsaWVudFJlY3RzLnRvcCxcbiAgICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBjb21tb25qc1xuICAgIG1vZHVsZS5leHBvcnRzID0geyBwb2x5ZmlsbDogcG9seWZpbGwgfTtcbiAgfSBlbHNlIHtcbiAgICAvLyBnbG9iYWxcbiAgICBwb2x5ZmlsbCgpO1xuICB9XG59KSh3aW5kb3csIGRvY3VtZW50KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gQXJyYXkjaW5jbHVkZXMgaXMgc3RhZ2UgNCwgaW4gRVM3L0VTMjAxNlxucmVxdWlyZSgnYXJyYXktaW5jbHVkZXMvc2hpbScpKCk7XG5cbnJlcXVpcmUoJy4vZXMyMDE3Jyk7XG4iLCJmdW5jdGlvbiBoaWRlUGxhY2Vob2xkZXJPbkZvY3VzKGEpe3RhcmdldD1hLmN1cnJlbnRUYXJnZXQ/YS5jdXJyZW50VGFyZ2V0OmEuc3JjRWxlbWVudCx0YXJnZXQudmFsdWU9PXRhcmdldC5nZXRBdHRyaWJ1dGUoXCJwbGFjZWhvbGRlclwiKSYmKHRhcmdldC52YWx1ZT1cIlwiKX1mdW5jdGlvbiB1bmZvY3VzT25BbkVsZW1lbnQoYSl7dGFyZ2V0PWEuY3VycmVudFRhcmdldD9hLmN1cnJlbnRUYXJnZXQ6YS5zcmNFbGVtZW50LFwiXCI9PXRhcmdldC52YWx1ZSYmKHRhcmdldC52YWx1ZT10YXJnZXQuZ2V0QXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIikpfWlmKCEoXCJwbGFjZWhvbGRlclwiaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpKSlmb3IodmFyIGlucHV0cz1kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlucHV0XCIpLGk9MDtpPGlucHV0cy5sZW5ndGg7aSsrKWlucHV0c1tpXS52YWx1ZXx8KGlucHV0c1tpXS52YWx1ZT1pbnB1dHNbaV0uZ2V0QXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIikpLGlucHV0c1tpXS5hZGRFdmVudExpc3RlbmVyPyhpbnB1dHNbaV0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsaGlkZVBsYWNlaG9sZGVyT25Gb2N1cywhMSksaW5wdXRzW2ldLmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsdW5mb2N1c09uQW5FbGVtZW50LCExKSk6aW5wdXRzW2ldLmF0dGFjaEV2ZW50JiYoaW5wdXRzW2ldLmF0dGFjaEV2ZW50KFwib25jbGlja1wiLGhpZGVQbGFjZWhvbGRlck9uRm9jdXMpLGlucHV0c1tpXS5hdHRhY2hFdmVudChcIm9uYmx1clwiLHVuZm9jdXNPbkFuRWxlbWVudCkpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlcXVpcmVQcm9taXNlID0gcmVxdWlyZSgnLi9yZXF1aXJlUHJvbWlzZScpO1xuXG5yZXF1aXJlUHJvbWlzZSgpO1xuXG52YXIgSXNDYWxsYWJsZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTgvSXNDYWxsYWJsZScpO1xudmFyIFNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTgvU3BlY2llc0NvbnN0cnVjdG9yJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTgvVHlwZScpO1xuXG52YXIgcHJvbWlzZVJlc29sdmUgPSBmdW5jdGlvbiBQcm9taXNlUmVzb2x2ZShDLCB2YWx1ZSkge1xuXHRyZXR1cm4gbmV3IEMoZnVuY3Rpb24gKHJlc29sdmUpIHtcblx0XHRyZXNvbHZlKHZhbHVlKTtcblx0fSk7XG59O1xuXG52YXIgT3JpZ2luYWxQcm9taXNlID0gUHJvbWlzZTtcblxudmFyIGNyZWF0ZVRoZW5GaW5hbGx5ID0gZnVuY3Rpb24gQ3JlYXRlVGhlbkZpbmFsbHkoQywgb25GaW5hbGx5KSB7XG5cdHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHR2YXIgcmVzdWx0ID0gb25GaW5hbGx5KCk7XG5cdFx0dmFyIHByb21pc2UgPSBwcm9taXNlUmVzb2x2ZShDLCByZXN1bHQpO1xuXHRcdHZhciB2YWx1ZVRodW5rID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH07XG5cdFx0cmV0dXJuIHByb21pc2UudGhlbih2YWx1ZVRodW5rKTtcblx0fTtcbn07XG5cbnZhciBjcmVhdGVDYXRjaEZpbmFsbHkgPSBmdW5jdGlvbiBDcmVhdGVDYXRjaEZpbmFsbHkoQywgb25GaW5hbGx5KSB7XG5cdHJldHVybiBmdW5jdGlvbiAocmVhc29uKSB7XG5cdFx0dmFyIHJlc3VsdCA9IG9uRmluYWxseSgpO1xuXHRcdHZhciBwcm9taXNlID0gcHJvbWlzZVJlc29sdmUoQywgcmVzdWx0KTtcblx0XHR2YXIgdGhyb3dlciA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHRocm93IHJlYXNvbjtcblx0XHR9O1xuXHRcdHJldHVybiBwcm9taXNlLnRoZW4odGhyb3dlcik7XG5cdH07XG59O1xuXG52YXIgcHJvbWlzZUZpbmFsbHkgPSBmdW5jdGlvbiBmaW5hbGx5XyhvbkZpbmFsbHkpIHtcblx0LyogZXNsaW50IG5vLWludmFsaWQtdGhpczogMCAqL1xuXG5cdHZhciBwcm9taXNlID0gdGhpcztcblxuXHRpZiAoVHlwZShwcm9taXNlKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdyZWNlaXZlciBpcyBub3QgYW4gT2JqZWN0Jyk7XG5cdH1cblxuXHR2YXIgQyA9IFNwZWNpZXNDb25zdHJ1Y3Rvcihwcm9taXNlLCBPcmlnaW5hbFByb21pc2UpOyAvLyBtYXkgdGhyb3dcblxuXHR2YXIgdGhlbkZpbmFsbHkgPSBvbkZpbmFsbHk7XG5cdHZhciBjYXRjaEZpbmFsbHkgPSBvbkZpbmFsbHk7XG5cdGlmIChJc0NhbGxhYmxlKG9uRmluYWxseSkpIHtcblx0XHR0aGVuRmluYWxseSA9IGNyZWF0ZVRoZW5GaW5hbGx5KEMsIG9uRmluYWxseSk7XG5cdFx0Y2F0Y2hGaW5hbGx5ID0gY3JlYXRlQ2F0Y2hGaW5hbGx5KEMsIG9uRmluYWxseSk7XG5cdH1cblxuXHRyZXR1cm4gcHJvbWlzZS50aGVuKHRoZW5GaW5hbGx5LCBjYXRjaEZpbmFsbHkpO1xufTtcblxuaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IpIHtcblx0dmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb21pc2VGaW5hbGx5LCAnbmFtZScpO1xuXHRpZiAoZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlRmluYWxseSwgJ25hbWUnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6ICdmaW5hbGx5JyB9KTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHByb21pc2VGaW5hbGx5O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtOS4xMVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ2lzLWNhbGxhYmxlJyk7XG4iLCIvKiFcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbVxuICogQGxpY2Vuc2UgZXM1LXNoaW0gQ29weXJpZ2h0IDIwMDktMjAyMCBieSBjb250cmlidXRvcnMsIE1JVCBMaWNlbnNlXG4gKiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG4vLyB2aW06IHRzPTQgc3RzPTQgc3c9NCBleHBhbmR0YWJcblxuLy8gQWRkIHNlbWljb2xvbiB0byBwcmV2ZW50IElJRkUgZnJvbSBiZWluZyBwYXNzZWQgYXMgYXJndW1lbnQgdG8gY29uY2F0ZW5hdGVkIGNvZGUuXG47XG5cbi8vIFVNRCAoVW5pdmVyc2FsIE1vZHVsZSBEZWZpbml0aW9uKVxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91bWRqcy91bWQvYmxvYi9tYXN0ZXIvdGVtcGxhdGVzL3JldHVybkV4cG9ydHMuanNcbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8qIGdsb2JhbCBkZWZpbmUgKi9cbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cbiAgICAgICAgZGVmaW5lKGZhY3RvcnkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vIE5vZGUuIERvZXMgbm90IHdvcmsgd2l0aCBzdHJpY3QgQ29tbW9uSlMsIGJ1dFxuICAgICAgICAvLyBvbmx5IENvbW1vbkpTLWxpa2UgZW52aXJvbWVudHMgdGhhdCBzdXBwb3J0IG1vZHVsZS5leHBvcnRzLFxuICAgICAgICAvLyBsaWtlIE5vZGUuXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEJyb3dzZXIgZ2xvYmFscyAocm9vdCBpcyB3aW5kb3cpXG4gICAgICAgIHJvb3QucmV0dXJuRXhwb3J0cyA9IGZhY3RvcnkoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIH1cbn0odGhpcywgZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIGNhbGwgPSBGdW5jdGlvbi5jYWxsO1xuICAgIHZhciBwcm90b3R5cGVPZk9iamVjdCA9IE9iamVjdC5wcm90b3R5cGU7XG4gICAgdmFyIG93bnMgPSBjYWxsLmJpbmQocHJvdG90eXBlT2ZPYmplY3QuaGFzT3duUHJvcGVydHkpO1xuICAgIHZhciBpc0VudW1lcmFibGUgPSBjYWxsLmJpbmQocHJvdG90eXBlT2ZPYmplY3QucHJvcGVydHlJc0VudW1lcmFibGUpO1xuICAgIHZhciB0b1N0ciA9IGNhbGwuYmluZChwcm90b3R5cGVPZk9iamVjdC50b1N0cmluZyk7XG5cbiAgICAvLyBJZiBKUyBlbmdpbmUgc3VwcG9ydHMgYWNjZXNzb3JzIGNyZWF0aW5nIHNob3J0Y3V0cy5cbiAgICB2YXIgZGVmaW5lR2V0dGVyO1xuICAgIHZhciBkZWZpbmVTZXR0ZXI7XG4gICAgdmFyIGxvb2t1cEdldHRlcjtcbiAgICB2YXIgbG9va3VwU2V0dGVyO1xuICAgIHZhciBzdXBwb3J0c0FjY2Vzc29ycyA9IG93bnMocHJvdG90eXBlT2ZPYmplY3QsICdfX2RlZmluZUdldHRlcl9fJyk7XG4gICAgaWYgKHN1cHBvcnRzQWNjZXNzb3JzKSB7XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlLCBuby1yZXN0cmljdGVkLXByb3BlcnRpZXMgKi9cbiAgICAgICAgZGVmaW5lR2V0dGVyID0gY2FsbC5iaW5kKHByb3RvdHlwZU9mT2JqZWN0Ll9fZGVmaW5lR2V0dGVyX18pO1xuICAgICAgICBkZWZpbmVTZXR0ZXIgPSBjYWxsLmJpbmQocHJvdG90eXBlT2ZPYmplY3QuX19kZWZpbmVTZXR0ZXJfXyk7XG4gICAgICAgIGxvb2t1cEdldHRlciA9IGNhbGwuYmluZChwcm90b3R5cGVPZk9iamVjdC5fX2xvb2t1cEdldHRlcl9fKTtcbiAgICAgICAgbG9va3VwU2V0dGVyID0gY2FsbC5iaW5kKHByb3RvdHlwZU9mT2JqZWN0Ll9fbG9va3VwU2V0dGVyX18pO1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlLCBuby1yZXN0cmljdGVkLXByb3BlcnRpZXMgKi9cbiAgICB9XG5cbiAgICB2YXIgaXNQcmltaXRpdmUgPSBmdW5jdGlvbiBpc1ByaW1pdGl2ZShvKSB7XG4gICAgICAgIHJldHVybiBvID09IG51bGwgfHwgKHR5cGVvZiBvICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgbyAhPT0gJ2Z1bmN0aW9uJyk7XG4gICAgfTtcblxuICAgIC8vIEVTNSAxNS4yLjMuMlxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjIuMy4yXG4gICAgaWYgKCFPYmplY3QuZ2V0UHJvdG90eXBlT2YpIHtcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3VlcyNpc3N1ZS8yXG4gICAgICAgIC8vIGh0dHA6Ly9lam9obi5vcmcvYmxvZy9vYmplY3RnZXRwcm90b3R5cGVvZi9cbiAgICAgICAgLy8gcmVjb21tZW5kZWQgYnkgZnNjaGFlZmVyIG9uIGdpdGh1YlxuICAgICAgICAvL1xuICAgICAgICAvLyBzdXJlLCBhbmQgd2VicmVmbGVjdGlvbiBzYXlzIF5fXlxuICAgICAgICAvLyAuLi4gdGhpcyB3aWxsIG5lcmV2ZXIgcG9zc2libHkgcmV0dXJuIG51bGxcbiAgICAgICAgLy8gLi4uIE9wZXJhIE1pbmkgYnJlYWtzIGhlcmUgd2l0aCBpbmZpbml0ZSBsb29wc1xuICAgICAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YgPSBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihvYmplY3QpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b1xuICAgICAgICAgICAgdmFyIHByb3RvID0gb2JqZWN0Ll9fcHJvdG9fXztcbiAgICAgICAgICAgIGlmIChwcm90byB8fCBwcm90byA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcm90bztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG9TdHIob2JqZWN0LmNvbnN0cnVjdG9yKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3QuY29uc3RydWN0b3IucHJvdG90eXBlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChvYmplY3QgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvdG90eXBlT2ZPYmplY3Q7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIENvcnJlY3RseSByZXR1cm4gbnVsbCBmb3IgT2JqZWN0cyBjcmVhdGVkIHdpdGggYE9iamVjdC5jcmVhdGUobnVsbClgXG4gICAgICAgICAgICAgICAgLy8gKHNoYW1tZWQgb3IgbmF0aXZlKSBvciBgeyBfX3Byb3RvX186IG51bGx9YC4gIEFsc28gcmV0dXJucyBudWxsIGZvclxuICAgICAgICAgICAgICAgIC8vIGNyb3NzLXJlYWxtIG9iamVjdHMgb24gYnJvd3NlcnMgdGhhdCBsYWNrIGBfX3Byb3RvX19gIHN1cHBvcnQgKGxpa2VcbiAgICAgICAgICAgICAgICAvLyBJRSA8MTEpLCBidXQgdGhhdCdzIHRoZSBiZXN0IHdlIGNhbiBkby5cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBFUzUgMTUuMi4zLjNcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4yLjMuM1xuXG4gICAgLy8gY2hlY2sgd2hldGhlciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Igd29ya3MgaWYgaXQncyBnaXZlbi4gT3RoZXJ3aXNlLCBzaGltIHBhcnRpYWxseS5cbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgIHZhciBkb2VzR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yV29yayA9IGZ1bmN0aW9uIGRvZXNHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JXb3JrKG9iamVjdCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBvYmplY3Quc2VudGluZWwgPSAwOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCAnc2VudGluZWwnKS52YWx1ZSA9PT0gMDtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvcldvcmtzT25PYmplY3QgPSBkb2VzR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yV29yayh7fSk7XG4gICAgICAgIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JXb3Jrc09uRG9tID0gdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgfHwgZG9lc0dldE93blByb3BlcnR5RGVzY3JpcHRvcldvcmsoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xuICAgICAgICBpZiAoIWdldE93blByb3BlcnR5RGVzY3JpcHRvcldvcmtzT25Eb20gfHwgIWdldE93blByb3BlcnR5RGVzY3JpcHRvcldvcmtzT25PYmplY3QpIHtcbiAgICAgICAgICAgIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JGYWxsYmFjayA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgfHwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yRmFsbGJhY2spIHtcbiAgICAgICAgdmFyIEVSUl9OT05fT0JKRUNUID0gJ09iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgY2FsbGVkIG9uIGEgbm9uLW9iamVjdDogJztcblxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpIHtcbiAgICAgICAgICAgIGlmIChpc1ByaW1pdGl2ZShvYmplY3QpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihFUlJfTk9OX09CSkVDVCArIG9iamVjdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIG1ha2UgYSB2YWxpYW50IGF0dGVtcHQgdG8gdXNlIHRoZSByZWFsIGdldE93blByb3BlcnR5RGVzY3JpcHRvclxuICAgICAgICAgICAgLy8gZm9yIEk4J3MgRE9NIGVsZW1lbnRzLlxuICAgICAgICAgICAgaWYgKGdldE93blByb3BlcnR5RGVzY3JpcHRvckZhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldE93blByb3BlcnR5RGVzY3JpcHRvckZhbGxiYWNrLmNhbGwoT2JqZWN0LCBvYmplY3QsIHByb3BlcnR5KTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdHJ5IHRoZSBzaGltIGlmIHRoZSByZWFsIG9uZSBkb2Vzbid0IHdvcmtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yO1xuXG4gICAgICAgICAgICAvLyBJZiBvYmplY3QgZG9lcyBub3Qgb3ducyBwcm9wZXJ0eSByZXR1cm4gdW5kZWZpbmVkIGltbWVkaWF0ZWx5LlxuICAgICAgICAgICAgaWYgKCFvd25zKG9iamVjdCwgcHJvcGVydHkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIG9iamVjdCBoYXMgYSBwcm9wZXJ0eSB0aGVuIGl0J3MgZm9yIHN1cmUgYGNvbmZpZ3VyYWJsZWAsIGFuZFxuICAgICAgICAgICAgLy8gcHJvYmFibHkgYGVudW1lcmFibGVgLiBEZXRlY3QgZW51bWVyYWJpbGl0eSB0aG91Z2guXG4gICAgICAgICAgICBkZXNjcmlwdG9yID0ge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGlzRW51bWVyYWJsZShvYmplY3QsIHByb3BlcnR5KSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIElmIEpTIGVuZ2luZSBzdXBwb3J0cyBhY2Nlc3NvciBwcm9wZXJ0aWVzIHRoZW4gcHJvcGVydHkgbWF5IGJlIGFcbiAgICAgICAgICAgIC8vIGdldHRlciBvciBzZXR0ZXIuXG4gICAgICAgICAgICBpZiAoc3VwcG9ydHNBY2Nlc3NvcnMpIHtcbiAgICAgICAgICAgICAgICAvLyBVbmZvcnR1bmF0ZWx5IGBfX2xvb2t1cEdldHRlcl9fYCB3aWxsIHJldHVybiBhIGdldHRlciBldmVuXG4gICAgICAgICAgICAgICAgLy8gaWYgb2JqZWN0IGhhcyBvd24gbm9uIGdldHRlciBwcm9wZXJ0eSBhbG9uZyB3aXRoIGEgc2FtZSBuYW1lZFxuICAgICAgICAgICAgICAgIC8vIGluaGVyaXRlZCBnZXR0ZXIuIFRvIGF2b2lkIG1pc2JlaGF2aW9yIHdlIHRlbXBvcmFyeSByZW1vdmVcbiAgICAgICAgICAgICAgICAvLyBgX19wcm90b19fYCBzbyB0aGF0IGBfX2xvb2t1cEdldHRlcl9fYCB3aWxsIHJldHVybiBnZXR0ZXIgb25seVxuICAgICAgICAgICAgICAgIC8vIGlmIGl0J3Mgb3duZWQgYnkgYW4gb2JqZWN0LlxuICAgICAgICAgICAgICAgIHZhciBwcm90b3R5cGUgPSBvYmplY3QuX19wcm90b19fO1xuICAgICAgICAgICAgICAgIHZhciBub3RQcm90b3R5cGVPZk9iamVjdCA9IG9iamVjdCAhPT0gcHJvdG90eXBlT2ZPYmplY3Q7XG4gICAgICAgICAgICAgICAgLy8gYXZvaWQgcmVjdXJzaW9uIHByb2JsZW0sIGJyZWFraW5nIGluIE9wZXJhIE1pbmkgd2hlblxuICAgICAgICAgICAgICAgIC8vIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJylcbiAgICAgICAgICAgICAgICAvLyBvciBhbnkgb3RoZXIgT2JqZWN0LnByb3RvdHlwZSBhY2Nlc3NvclxuICAgICAgICAgICAgICAgIGlmIChub3RQcm90b3R5cGVPZk9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QuX19wcm90b19fID0gcHJvdG90eXBlT2ZPYmplY3Q7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgZ2V0dGVyID0gbG9va3VwR2V0dGVyKG9iamVjdCwgcHJvcGVydHkpO1xuICAgICAgICAgICAgICAgIHZhciBzZXR0ZXIgPSBsb29rdXBTZXR0ZXIob2JqZWN0LCBwcm9wZXJ0eSk7XG5cbiAgICAgICAgICAgICAgICBpZiAobm90UHJvdG90eXBlT2ZPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gT25jZSB3ZSBoYXZlIGdldHRlciBhbmQgc2V0dGVyIHdlIGNhbiBwdXQgdmFsdWVzIGJhY2suXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5fX3Byb3RvX18gPSBwcm90b3R5cGU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZ2V0dGVyIHx8IHNldHRlcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0dGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLmdldCA9IGdldHRlcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc2V0dGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLnNldCA9IHNldHRlcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBJZiBpdCB3YXMgYWNjZXNzb3IgcHJvcGVydHkgd2UncmUgZG9uZSBhbmQgcmV0dXJuIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgLy8gaW4gb3JkZXIgdG8gYXZvaWQgYWRkaW5nIGB2YWx1ZWAgdG8gdGhlIGRlc2NyaXB0b3IuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgd2UgZ290IHRoaXMgZmFyIHdlIGtub3cgdGhhdCBvYmplY3QgaGFzIGFuIG93biBwcm9wZXJ0eSB0aGF0IGlzXG4gICAgICAgICAgICAvLyBub3QgYW4gYWNjZXNzb3Igc28gd2Ugc2V0IGl0IGFzIGEgdmFsdWUgYW5kIHJldHVybiBkZXNjcmlwdG9yLlxuICAgICAgICAgICAgZGVzY3JpcHRvci52YWx1ZSA9IG9iamVjdFtwcm9wZXJ0eV07XG4gICAgICAgICAgICBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICAgICAgICB9O1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb3RvICovXG4gICAgfVxuXG4gICAgLy8gRVM1IDE1LjIuMy40XG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMi4zLjRcbiAgICBpZiAoIU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKSB7XG4gICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhvYmplY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmplY3QpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIEVTNSAxNS4yLjMuNVxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjIuMy41XG4gICAgaWYgKCFPYmplY3QuY3JlYXRlKSB7XG5cbiAgICAgICAgLy8gQ29udHJpYnV0ZWQgYnkgQnJhbmRvbiBCZW52aWUsIE9jdG9iZXIsIDIwMTJcbiAgICAgICAgdmFyIGNyZWF0ZUVtcHR5O1xuICAgICAgICB2YXIgc3VwcG9ydHNQcm90byA9ICEoeyBfX3Byb3RvX186IG51bGwgfSBpbnN0YW5jZW9mIE9iamVjdCk7XG4gICAgICAgIC8vIHRoZSBmb2xsb3dpbmcgcHJvZHVjZXMgZmFsc2UgcG9zaXRpdmVzXG4gICAgICAgIC8vIGluIE9wZXJhIE1pbmkgPT4gbm90IGEgcmVsaWFibGUgY2hlY2tcbiAgICAgICAgLy8gT2JqZWN0LnByb3RvdHlwZS5fX3Byb3RvX18gPT09IG51bGxcblxuICAgICAgICAvLyBDaGVjayBmb3IgZG9jdW1lbnQuZG9tYWluIGFuZCBhY3RpdmUgeCBzdXBwb3J0XG4gICAgICAgIC8vIE5vIG5lZWQgdG8gdXNlIGFjdGl2ZSB4IGFwcHJvYWNoIHdoZW4gZG9jdW1lbnQuZG9tYWluIGlzIG5vdCBzZXRcbiAgICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMTUwXG4gICAgICAgIC8vIHZhcmlhdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2l0Y2FtYnJpZGdlL2VzNS1zaGltL2NvbW1pdC80ZjczOGFjMDY2MzQ2XG4gICAgICAgIC8qIGdsb2JhbCBBY3RpdmVYT2JqZWN0ICovXG4gICAgICAgIHZhciBzaG91bGRVc2VBY3RpdmVYID0gZnVuY3Rpb24gc2hvdWxkVXNlQWN0aXZlWCgpIHtcbiAgICAgICAgICAgIC8vIHJldHVybiBlYXJseSBpZiBkb2N1bWVudC5kb21haW4gbm90IHNldFxuICAgICAgICAgICAgaWYgKCFkb2N1bWVudC5kb21haW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhbmV3IEFjdGl2ZVhPYmplY3QoJ2h0bWxmaWxlJyk7XG4gICAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gVGhpcyBzdXBwb3J0cyBJRTggd2hlbiBkb2N1bWVudC5kb21haW4gaXMgdXNlZFxuICAgICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbiAgICAgICAgLy8gdmFyaWF0aW9uIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9raXRjYW1icmlkZ2UvZXM1LXNoaW0vY29tbWl0LzRmNzM4YWMwNjYzNDZcbiAgICAgICAgdmFyIGdldEVtcHR5VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIGdldEVtcHR5VmlhQWN0aXZlWCgpIHtcbiAgICAgICAgICAgIHZhciBlbXB0eTtcbiAgICAgICAgICAgIHZhciB4RG9jO1xuXG4gICAgICAgICAgICB4RG9jID0gbmV3IEFjdGl2ZVhPYmplY3QoJ2h0bWxmaWxlJyk7XG5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSAnc2NyaXB0JztcbiAgICAgICAgICAgIHhEb2Mud3JpdGUoJzwnICsgc2NyaXB0ICsgJz48LycgKyBzY3JpcHQgKyAnPicpO1xuICAgICAgICAgICAgeERvYy5jbG9zZSgpO1xuXG4gICAgICAgICAgICBlbXB0eSA9IHhEb2MucGFyZW50V2luZG93Lk9iamVjdC5wcm90b3R5cGU7XG4gICAgICAgICAgICB4RG9jID0gbnVsbDtcblxuICAgICAgICAgICAgcmV0dXJuIGVtcHR5O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFRoZSBvcmlnaW5hbCBpbXBsZW1lbnRhdGlvbiB1c2luZyBhbiBpZnJhbWVcbiAgICAgICAgLy8gYmVmb3JlIHRoZSBhY3RpdmV4IGFwcHJvYWNoIHdhcyBhZGRlZFxuICAgICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbiAgICAgICAgdmFyIGdldEVtcHR5VmlhSUZyYW1lID0gZnVuY3Rpb24gZ2V0RW1wdHlWaWFJRnJhbWUoKSB7XG4gICAgICAgICAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gZG9jdW1lbnQuYm9keSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgICAgICB2YXIgZW1wdHk7XG5cbiAgICAgICAgICAgIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2NyaXB0LXVybFxuICAgICAgICAgICAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7XG5cbiAgICAgICAgICAgIGVtcHR5ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0LnByb3RvdHlwZTtcbiAgICAgICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICAgICAgICAgICAgaWZyYW1lID0gbnVsbDtcblxuICAgICAgICAgICAgcmV0dXJuIGVtcHR5O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qIGdsb2JhbCBkb2N1bWVudCAqL1xuICAgICAgICBpZiAoc3VwcG9ydHNQcm90byB8fCB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBjcmVhdGVFbXB0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBfX3Byb3RvX186IG51bGwgfTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJbiBvbGQgSUUgX19wcm90b19fIGNhbid0IGJlIHVzZWQgdG8gbWFudWFsbHkgc2V0IGBudWxsYCwgbm9yIGRvZXNcbiAgICAgICAgICAgIC8vIGFueSBvdGhlciBtZXRob2QgZXhpc3QgdG8gbWFrZSBhbiBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIG5vdGhpbmcsXG4gICAgICAgICAgICAvLyBhc2lkZSBmcm9tIE9iamVjdC5wcm90b3R5cGUgaXRzZWxmLiBJbnN0ZWFkLCBjcmVhdGUgYSBuZXcgZ2xvYmFsXG4gICAgICAgICAgICAvLyBvYmplY3QgYW5kICpzdGVhbCogaXRzIE9iamVjdC5wcm90b3R5cGUgYW5kIHN0cmlwIGl0IGJhcmUuIFRoaXMgaXNcbiAgICAgICAgICAgIC8vIHVzZWQgYXMgdGhlIHByb3RvdHlwZSB0byBjcmVhdGUgbnVsbGFyeSBvYmplY3RzLlxuICAgICAgICAgICAgY3JlYXRlRW1wdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIHdoaWNoIGFwcHJvYWNoIHRvIHVzZVxuICAgICAgICAgICAgICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzLzE1MFxuICAgICAgICAgICAgICAgIHZhciBlbXB0eSA9IHNob3VsZFVzZUFjdGl2ZVgoKSA/IGdldEVtcHR5VmlhQWN0aXZlWCgpIDogZ2V0RW1wdHlWaWFJRnJhbWUoKTtcblxuICAgICAgICAgICAgICAgIGRlbGV0ZSBlbXB0eS5jb25zdHJ1Y3RvcjtcbiAgICAgICAgICAgICAgICBkZWxldGUgZW1wdHkuaGFzT3duUHJvcGVydHk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGVtcHR5LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBlbXB0eS5pc1Byb3RvdHlwZU9mO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBlbXB0eS50b0xvY2FsZVN0cmluZztcbiAgICAgICAgICAgICAgICBkZWxldGUgZW1wdHkudG9TdHJpbmc7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGVtcHR5LnZhbHVlT2Y7XG5cbiAgICAgICAgICAgICAgICB2YXIgRW1wdHkgPSBmdW5jdGlvbiBFbXB0eSgpIHt9O1xuICAgICAgICAgICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IGVtcHR5O1xuICAgICAgICAgICAgICAgIC8vIHNob3J0LWNpcmN1aXQgZnV0dXJlIGNhbGxzXG4gICAgICAgICAgICAgICAgY3JlYXRlRW1wdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRW1wdHkoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRW1wdHkoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBPYmplY3QuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHByb3RvdHlwZSwgcHJvcGVydGllcykge1xuXG4gICAgICAgICAgICB2YXIgb2JqZWN0O1xuICAgICAgICAgICAgdmFyIFR5cGUgPSBmdW5jdGlvbiBUeXBlKCkge307IC8vIEFuIGVtcHR5IGNvbnN0cnVjdG9yLlxuXG4gICAgICAgICAgICBpZiAocHJvdG90eXBlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0ID0gY3JlYXRlRW1wdHkoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUocHJvdG90eXBlKSkge1xuICAgICAgICAgICAgICAgIC8vIEluIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24gYHBhcmVudGAgY2FuIGJlIGBudWxsYFxuICAgICAgICAgICAgICAgIC8vIE9SICphbnkqIGBpbnN0YW5jZW9mIE9iamVjdGAgIChPYmplY3R8RnVuY3Rpb258QXJyYXl8UmVnRXhwfGV0YylcbiAgICAgICAgICAgICAgICAvLyBVc2UgYHR5cGVvZmAgdGhvLCBiL2MgaW4gb2xkIElFLCBET00gZWxlbWVudHMgYXJlIG5vdCBgaW5zdGFuY2VvZiBPYmplY3RgXG4gICAgICAgICAgICAgICAgLy8gbGlrZSB0aGV5IGFyZSBpbiBtb2Rlcm4gYnJvd3NlcnMuIFVzaW5nIGBPYmplY3QuY3JlYXRlYCBvbiBET00gZWxlbWVudHNcbiAgICAgICAgICAgICAgICAvLyBpcy4uLmVyci4uLnByb2JhYmx5IGluYXBwcm9wcmlhdGUsIGJ1dCB0aGUgbmF0aXZlIHZlcnNpb24gYWxsb3dzIGZvciBpdC5cbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QgcHJvdG90eXBlIG1heSBvbmx5IGJlIGFuIE9iamVjdCBvciBudWxsJyk7IC8vIHNhbWUgbXNnIGFzIENocm9tZVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBUeXBlLnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgICAgICAgICAgICAgICBvYmplY3QgPSBuZXcgVHlwZSgpO1xuICAgICAgICAgICAgICAgIC8vIElFIGhhcyBubyBidWlsdC1pbiBpbXBsZW1lbnRhdGlvbiBvZiBgT2JqZWN0LmdldFByb3RvdHlwZU9mYFxuICAgICAgICAgICAgICAgIC8vIG5laXRoZXIgYF9fcHJvdG9fX2AsIGJ1dCB0aGlzIG1hbnVhbGx5IHNldHRpbmcgYF9fcHJvdG9fX2Agd2lsbFxuICAgICAgICAgICAgICAgIC8vIGd1YXJhbnRlZSB0aGF0IGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIHdpbGwgd29yayBhcyBleHBlY3RlZCB3aXRoXG4gICAgICAgICAgICAgICAgLy8gb2JqZWN0cyBjcmVhdGVkIHVzaW5nIGBPYmplY3QuY3JlYXRlYFxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b1xuICAgICAgICAgICAgICAgIG9iamVjdC5fX3Byb3RvX18gPSBwcm90b3R5cGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhvYmplY3QsIHByb3BlcnRpZXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIEVTNSAxNS4yLjMuNlxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjIuMy42XG5cbiAgICAvLyBQYXRjaCBmb3IgV2ViS2l0IGFuZCBJRTggc3RhbmRhcmQgbW9kZVxuICAgIC8vIERlc2lnbmVkIGJ5IGhheCA8aGF4LmdpdGh1Yi5jb20+XG4gICAgLy8gcmVsYXRlZCBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3VlcyNpc3N1ZS81XG4gICAgLy8gSUU4IFJlZmVyZW5jZTpcbiAgICAvLyAgICAgaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2RkMjgyOTAwLmFzcHhcbiAgICAvLyAgICAgaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2RkMjI5OTE2LmFzcHhcbiAgICAvLyBXZWJLaXQgQnVnczpcbiAgICAvLyAgICAgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTM2NDIzXG5cbiAgICB2YXIgZG9lc0RlZmluZVByb3BlcnR5V29yayA9IGZ1bmN0aW9uIGRvZXNEZWZpbmVQcm9wZXJ0eVdvcmsob2JqZWN0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCAnc2VudGluZWwnLCB7fSk7XG4gICAgICAgICAgICByZXR1cm4gJ3NlbnRpbmVsJyBpbiBvYmplY3Q7XG4gICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIGNoZWNrIHdoZXRoZXIgZGVmaW5lUHJvcGVydHkgd29ya3MgaWYgaXQncyBnaXZlbi4gT3RoZXJ3aXNlLFxuICAgIC8vIHNoaW0gcGFydGlhbGx5LlxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgdmFyIGRlZmluZVByb3BlcnR5V29ya3NPbk9iamVjdCA9IGRvZXNEZWZpbmVQcm9wZXJ0eVdvcmsoe30pO1xuICAgICAgICB2YXIgZGVmaW5lUHJvcGVydHlXb3Jrc09uRG9tID0gdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgfHwgZG9lc0RlZmluZVByb3BlcnR5V29yayhkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSk7XG4gICAgICAgIGlmICghZGVmaW5lUHJvcGVydHlXb3Jrc09uT2JqZWN0IHx8ICFkZWZpbmVQcm9wZXJ0eVdvcmtzT25Eb20pIHtcbiAgICAgICAgICAgIHZhciBkZWZpbmVQcm9wZXJ0eUZhbGxiYWNrID0gT2JqZWN0LmRlZmluZVByb3BlcnR5LFxuICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnRpZXNGYWxsYmFjayA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFPYmplY3QuZGVmaW5lUHJvcGVydHkgfHwgZGVmaW5lUHJvcGVydHlGYWxsYmFjaykge1xuICAgICAgICB2YXIgRVJSX05PTl9PQkpFQ1RfREVTQ1JJUFRPUiA9ICdQcm9wZXJ0eSBkZXNjcmlwdGlvbiBtdXN0IGJlIGFuIG9iamVjdDogJztcbiAgICAgICAgdmFyIEVSUl9OT05fT0JKRUNUX1RBUkdFVCA9ICdPYmplY3QuZGVmaW5lUHJvcGVydHkgY2FsbGVkIG9uIG5vbi1vYmplY3Q6ICc7XG4gICAgICAgIHZhciBFUlJfQUNDRVNTT1JTX05PVF9TVVBQT1JURUQgPSAnZ2V0dGVycyAmIHNldHRlcnMgY2FuIG5vdCBiZSBkZWZpbmVkIG9uIHRoaXMgamF2YXNjcmlwdCBlbmdpbmUnO1xuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgIGlmIChpc1ByaW1pdGl2ZShvYmplY3QpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihFUlJfTk9OX09CSkVDVF9UQVJHRVQgKyBvYmplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzUHJpbWl0aXZlKGRlc2NyaXB0b3IpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihFUlJfTk9OX09CSkVDVF9ERVNDUklQVE9SICsgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBtYWtlIGEgdmFsaWFudCBhdHRlbXB0IHRvIHVzZSB0aGUgcmVhbCBkZWZpbmVQcm9wZXJ0eVxuICAgICAgICAgICAgLy8gZm9yIEk4J3MgRE9NIGVsZW1lbnRzLlxuICAgICAgICAgICAgaWYgKGRlZmluZVByb3BlcnR5RmFsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHlGYWxsYmFjay5jYWxsKE9iamVjdCwgb2JqZWN0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRyeSB0aGUgc2hpbSBpZiB0aGUgcmVhbCBvbmUgZG9lc24ndCB3b3JrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiBpdCdzIGEgZGF0YSBwcm9wZXJ0eS5cbiAgICAgICAgICAgIGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgICAgICAvLyBmYWlsIHNpbGVudGx5IGlmICd3cml0YWJsZScsICdlbnVtZXJhYmxlJywgb3IgJ2NvbmZpZ3VyYWJsZSdcbiAgICAgICAgICAgICAgICAvLyBhcmUgcmVxdWVzdGVkIGJ1dCBub3Qgc3VwcG9ydGVkXG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAvLyBhbHRlcm5hdGUgYXBwcm9hY2g6XG4gICAgICAgICAgICAgICAgaWYgKCAvLyBjYW4ndCBpbXBsZW1lbnQgdGhlc2UgZmVhdHVyZXM7IGFsbG93IGZhbHNlIGJ1dCBub3QgdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAoJ3dyaXRhYmxlJyBpbiBkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLndyaXRhYmxlKSB8fFxuICAgICAgICAgICAgICAgICAgICAoJ2VudW1lcmFibGUnIGluIGRlc2NyaXB0b3IgJiYgIWRlc2NyaXB0b3IuZW51bWVyYWJsZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgKCdjb25maWd1cmFibGUnIGluIGRlc2NyaXB0b3IgJiYgIWRlc2NyaXB0b3IuY29uZmlndXJhYmxlKVxuICAgICAgICAgICAgICAgICkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1RoaXMgaW1wbGVtZW50YXRpb24gb2YgT2JqZWN0LmRlZmluZVByb3BlcnR5IGRvZXMgbm90IHN1cHBvcnQgY29uZmlndXJhYmxlLCBlbnVtZXJhYmxlLCBvciB3cml0YWJsZS4nXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgICAgIGlmIChzdXBwb3J0c0FjY2Vzc29ycyAmJiAobG9va3VwR2V0dGVyKG9iamVjdCwgcHJvcGVydHkpIHx8IGxvb2t1cFNldHRlcihvYmplY3QsIHByb3BlcnR5KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXMgYWNjZXNzb3JzIGFyZSBzdXBwb3J0ZWQgb25seSBvbiBlbmdpbmVzIGltcGxlbWVudGluZ1xuICAgICAgICAgICAgICAgICAgICAvLyBgX19wcm90b19fYCB3ZSBjYW4gc2FmZWx5IG92ZXJyaWRlIGBfX3Byb3RvX19gIHdoaWxlIGRlZmluaW5nXG4gICAgICAgICAgICAgICAgICAgIC8vIGEgcHJvcGVydHkgdG8gbWFrZSBzdXJlIHRoYXQgd2UgZG9uJ3QgaGl0IGFuIGluaGVyaXRlZFxuICAgICAgICAgICAgICAgICAgICAvLyBhY2Nlc3Nvci5cbiAgICAgICAgICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8sIG5vLXBhcmFtLXJlYXNzaWduICovXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm90b3R5cGUgPSBvYmplY3QuX19wcm90b19fO1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QuX19wcm90b19fID0gcHJvdG90eXBlT2ZPYmplY3Q7XG4gICAgICAgICAgICAgICAgICAgIC8vIERlbGV0aW5nIGEgcHJvcGVydHkgYW55d2F5IHNpbmNlIGdldHRlciAvIHNldHRlciBtYXkgYmVcbiAgICAgICAgICAgICAgICAgICAgLy8gZGVmaW5lZCBvbiBvYmplY3QgaXRzZWxmLlxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgb2JqZWN0W3Byb3BlcnR5XTtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0W3Byb3BlcnR5XSA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNldHRpbmcgb3JpZ2luYWwgYF9fcHJvdG9fX2AgYmFjayBub3cuXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5fX3Byb3RvX18gPSBwcm90b3R5cGU7XG4gICAgICAgICAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tcHJvdG8sIG5vLXBhcmFtLXJlYXNzaWduICovXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0W3Byb3BlcnR5XSA9IGRlc2NyaXB0b3IudmFsdWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBoYXNHZXR0ZXIgPSAnZ2V0JyBpbiBkZXNjcmlwdG9yO1xuICAgICAgICAgICAgICAgIHZhciBoYXNTZXR0ZXIgPSAnc2V0JyBpbiBkZXNjcmlwdG9yO1xuICAgICAgICAgICAgICAgIGlmICghc3VwcG9ydHNBY2Nlc3NvcnMgJiYgKGhhc0dldHRlciB8fCBoYXNTZXR0ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRVJSX0FDQ0VTU09SU19OT1RfU1VQUE9SVEVEKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgZ290IHRoYXQgZmFyIHRoZW4gZ2V0dGVycyBhbmQgc2V0dGVycyBjYW4gYmUgZGVmaW5lZCAhIVxuICAgICAgICAgICAgICAgIGlmIChoYXNHZXR0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lR2V0dGVyKG9iamVjdCwgcHJvcGVydHksIGRlc2NyaXB0b3IuZ2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGhhc1NldHRlcikge1xuICAgICAgICAgICAgICAgICAgICBkZWZpbmVTZXR0ZXIob2JqZWN0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvci5zZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRVM1IDE1LjIuMy43XG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMi4zLjdcbiAgICBpZiAoIU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIHx8IGRlZmluZVByb3BlcnRpZXNGYWxsYmFjaykge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMob2JqZWN0LCBwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAvLyBtYWtlIGEgdmFsaWFudCBhdHRlbXB0IHRvIHVzZSB0aGUgcmVhbCBkZWZpbmVQcm9wZXJ0aWVzXG4gICAgICAgICAgICBpZiAoZGVmaW5lUHJvcGVydGllc0ZhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnRpZXNGYWxsYmFjay5jYWxsKE9iamVjdCwgb2JqZWN0LCBwcm9wZXJ0aWVzKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdHJ5IHRoZSBzaGltIGlmIHRoZSByZWFsIG9uZSBkb2Vzbid0IHdvcmtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnR5ICE9PSAnX19wcm90b19fJykge1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wZXJ0eSwgcHJvcGVydGllc1twcm9wZXJ0eV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBFUzUgMTUuMi4zLjhcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4yLjMuOFxuICAgIGlmICghT2JqZWN0LnNlYWwpIHtcbiAgICAgICAgT2JqZWN0LnNlYWwgPSBmdW5jdGlvbiBzZWFsKG9iamVjdCkge1xuICAgICAgICAgICAgaWYgKE9iamVjdChvYmplY3QpICE9PSBvYmplY3QpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3Quc2VhbCBjYW4gb25seSBiZSBjYWxsZWQgb24gT2JqZWN0cy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRoaXMgaXMgbWlzbGVhZGluZyBhbmQgYnJlYWtzIGZlYXR1cmUtZGV0ZWN0aW9uLCBidXRcbiAgICAgICAgICAgIC8vIGFsbG93cyBcInNlY3VyYWJsZVwiIGNvZGUgdG8gXCJncmFjZWZ1bGx5XCIgZGVncmFkZSB0byB3b3JraW5nXG4gICAgICAgICAgICAvLyBidXQgaW5zZWN1cmUgY29kZS5cbiAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRVM1IDE1LjIuMy45XG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMi4zLjlcbiAgICBpZiAoIU9iamVjdC5mcmVlemUpIHtcbiAgICAgICAgT2JqZWN0LmZyZWV6ZSA9IGZ1bmN0aW9uIGZyZWV6ZShvYmplY3QpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qob2JqZWN0KSAhPT0gb2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmZyZWV6ZSBjYW4gb25seSBiZSBjYWxsZWQgb24gT2JqZWN0cy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRoaXMgaXMgbWlzbGVhZGluZyBhbmQgYnJlYWtzIGZlYXR1cmUtZGV0ZWN0aW9uLCBidXRcbiAgICAgICAgICAgIC8vIGFsbG93cyBcInNlY3VyYWJsZVwiIGNvZGUgdG8gXCJncmFjZWZ1bGx5XCIgZGVncmFkZSB0byB3b3JraW5nXG4gICAgICAgICAgICAvLyBidXQgaW5zZWN1cmUgY29kZS5cbiAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gZGV0ZWN0IGEgUmhpbm8gYnVnIGFuZCBwYXRjaCBpdFxuICAgIHRyeSB7XG4gICAgICAgIE9iamVjdC5mcmVlemUoZnVuY3Rpb24gKCkge30pO1xuICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICBPYmplY3QuZnJlZXplID0gKGZ1bmN0aW9uIChmcmVlemVPYmplY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBmcmVlemUob2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmplY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnJlZXplT2JqZWN0KG9iamVjdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfShPYmplY3QuZnJlZXplKSk7XG4gICAgfVxuXG4gICAgLy8gRVM1IDE1LjIuMy4xMFxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjIuMy4xMFxuICAgIGlmICghT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKSB7XG4gICAgICAgIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyA9IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKG9iamVjdCkge1xuICAgICAgICAgICAgaWYgKE9iamVjdChvYmplY3QpICE9PSBvYmplY3QpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QucHJldmVudEV4dGVuc2lvbnMgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIE9iamVjdHMuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG1pc2xlYWRpbmcgYW5kIGJyZWFrcyBmZWF0dXJlLWRldGVjdGlvbiwgYnV0XG4gICAgICAgICAgICAvLyBhbGxvd3MgXCJzZWN1cmFibGVcIiBjb2RlIHRvIFwiZ3JhY2VmdWxseVwiIGRlZ3JhZGUgdG8gd29ya2luZ1xuICAgICAgICAgICAgLy8gYnV0IGluc2VjdXJlIGNvZGUuXG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIEVTNSAxNS4yLjMuMTFcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4yLjMuMTFcbiAgICBpZiAoIU9iamVjdC5pc1NlYWxlZCkge1xuICAgICAgICBPYmplY3QuaXNTZWFsZWQgPSBmdW5jdGlvbiBpc1NlYWxlZChvYmplY3QpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qob2JqZWN0KSAhPT0gb2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmlzU2VhbGVkIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBPYmplY3RzLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIEVTNSAxNS4yLjMuMTJcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4yLjMuMTJcbiAgICBpZiAoIU9iamVjdC5pc0Zyb3plbikge1xuICAgICAgICBPYmplY3QuaXNGcm96ZW4gPSBmdW5jdGlvbiBpc0Zyb3plbihvYmplY3QpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3Qob2JqZWN0KSAhPT0gb2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmlzRnJvemVuIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBPYmplY3RzLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIEVTNSAxNS4yLjMuMTNcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4yLjMuMTNcbiAgICBpZiAoIU9iamVjdC5pc0V4dGVuc2libGUpIHtcbiAgICAgICAgT2JqZWN0LmlzRXh0ZW5zaWJsZSA9IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShvYmplY3QpIHtcbiAgICAgICAgICAgIC8vIDEuIElmIFR5cGUoTykgaXMgbm90IE9iamVjdCB0aHJvdyBhIFR5cGVFcnJvciBleGNlcHRpb24uXG4gICAgICAgICAgICBpZiAoT2JqZWN0KG9iamVjdCkgIT09IG9iamVjdCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5pc0V4dGVuc2libGUgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIE9iamVjdHMuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyAyLiBSZXR1cm4gdGhlIEJvb2xlYW4gdmFsdWUgb2YgdGhlIFtbRXh0ZW5zaWJsZV1dIGludGVybmFsIHByb3BlcnR5IG9mIE8uXG4gICAgICAgICAgICB2YXIgbmFtZSA9ICcnO1xuICAgICAgICAgICAgd2hpbGUgKG93bnMob2JqZWN0LCBuYW1lKSkge1xuICAgICAgICAgICAgICAgIG5hbWUgKz0gJz8nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2JqZWN0W25hbWVdID0gdHJ1ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgICAgdmFyIHJldHVyblZhbHVlID0gb3ducyhvYmplY3QsIG5hbWUpO1xuICAgICAgICAgICAgZGVsZXRlIG9iamVjdFtuYW1lXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICAgICAgICB9O1xuICAgIH1cblxufSkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkZ09QRCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJyk7XG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY2FsbEJvdW5kJyk7XG5cbnZhciAkaXNFbnVtZXJhYmxlID0gY2FsbEJvdW5kKCdPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlJyk7XG5cbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcblxudmFyIElzQXJyYXkgPSByZXF1aXJlKCcuL0lzQXJyYXknKTtcbnZhciBJc1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi9Jc1Byb3BlcnR5S2V5Jyk7XG52YXIgSXNSZWdFeHAgPSByZXF1aXJlKCcuL0lzUmVnRXhwJyk7XG52YXIgVG9Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL1RvUHJvcGVydHlEZXNjcmlwdG9yJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW9yZGluYXJ5Z2V0b3ducHJvcGVydHlcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBPcmRpbmFyeUdldE93blByb3BlcnR5KE8sIFApIHtcblx0aWYgKFR5cGUoTykgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IE8gbXVzdCBiZSBhbiBPYmplY3QnKTtcblx0fVxuXHRpZiAoIUlzUHJvcGVydHlLZXkoUCkpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogUCBtdXN0IGJlIGEgUHJvcGVydHkgS2V5Jyk7XG5cdH1cblx0aWYgKCFoYXMoTywgUCkpIHtcblx0XHRyZXR1cm4gdm9pZCAwO1xuXHR9XG5cdGlmICghJGdPUEQpIHtcblx0XHQvLyBFUzMgLyBJRSA4IGZhbGxiYWNrXG5cdFx0dmFyIGFycmF5TGVuZ3RoID0gSXNBcnJheShPKSAmJiBQID09PSAnbGVuZ3RoJztcblx0XHR2YXIgcmVnZXhMYXN0SW5kZXggPSBJc1JlZ0V4cChPKSAmJiBQID09PSAnbGFzdEluZGV4Jztcblx0XHRyZXR1cm4ge1xuXHRcdFx0J1tbQ29uZmlndXJhYmxlXV0nOiAhKGFycmF5TGVuZ3RoIHx8IHJlZ2V4TGFzdEluZGV4KSxcblx0XHRcdCdbW0VudW1lcmFibGVdXSc6ICRpc0VudW1lcmFibGUoTywgUCksXG5cdFx0XHQnW1tWYWx1ZV1dJzogT1tQXSxcblx0XHRcdCdbW1dyaXRhYmxlXV0nOiB0cnVlXG5cdFx0fTtcblx0fVxuXHRyZXR1cm4gVG9Qcm9wZXJ0eURlc2NyaXB0b3IoJGdPUEQoTywgUCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRyZXR1cm4gaW1wbGVtZW50YXRpb247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkc3BlY2llcyA9IEdldEludHJpbnNpYygnJVN5bWJvbC5zcGVjaWVzJScsIHRydWUpO1xudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBJc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9Jc0NvbnN0cnVjdG9yJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtc3BlY2llc2NvbnN0cnVjdG9yXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3Rvcikge1xuXHRpZiAoVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShPKSBpcyBub3QgT2JqZWN0Jyk7XG5cdH1cblx0dmFyIEMgPSBPLmNvbnN0cnVjdG9yO1xuXHRpZiAodHlwZW9mIEMgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIGRlZmF1bHRDb25zdHJ1Y3Rvcjtcblx0fVxuXHRpZiAoVHlwZShDKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignTy5jb25zdHJ1Y3RvciBpcyBub3QgYW4gT2JqZWN0Jyk7XG5cdH1cblx0dmFyIFMgPSAkc3BlY2llcyA/IENbJHNwZWNpZXNdIDogdm9pZCAwO1xuXHRpZiAoUyA9PSBudWxsKSB7XG5cdFx0cmV0dXJuIGRlZmF1bHRDb25zdHJ1Y3Rvcjtcblx0fVxuXHRpZiAoSXNDb25zdHJ1Y3RvcihTKSkge1xuXHRcdHJldHVybiBTO1xuXHR9XG5cdHRocm93IG5ldyAkVHlwZUVycm9yKCdubyBjb25zdHJ1Y3RvciBmb3VuZCcpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcbnZhciAkTnVtYmVyID0gR2V0SW50cmluc2ljKCclTnVtYmVyJScpO1xudmFyICRSZWdFeHAgPSBHZXRJbnRyaW5zaWMoJyVSZWdFeHAlJyk7XG52YXIgJHBhcnNlSW50ZWdlciA9IEdldEludHJpbnNpYygnJXBhcnNlSW50JScpO1xuXG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnLi4vaGVscGVycy9jYWxsQm91bmQnKTtcbnZhciByZWdleFRlc3RlciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvcmVnZXhUZXN0ZXInKTtcbnZhciBpc1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNQcmltaXRpdmUnKTtcblxudmFyICRzdHJTbGljZSA9IGNhbGxCb3VuZCgnU3RyaW5nLnByb3RvdHlwZS5zbGljZScpO1xudmFyIGlzQmluYXJ5ID0gcmVnZXhUZXN0ZXIoL14wYlswMV0rJC9pKTtcbnZhciBpc09jdGFsID0gcmVnZXhUZXN0ZXIoL14wb1swLTddKyQvaSk7XG52YXIgaXNJbnZhbGlkSGV4TGl0ZXJhbCA9IHJlZ2V4VGVzdGVyKC9eWy0rXTB4WzAtOWEtZl0rJC9pKTtcbnZhciBub25XUyA9IFsnXFx1MDA4NScsICdcXHUyMDBiJywgJ1xcdWZmZmUnXS5qb2luKCcnKTtcbnZhciBub25XU3JlZ2V4ID0gbmV3ICRSZWdFeHAoJ1snICsgbm9uV1MgKyAnXScsICdnJyk7XG52YXIgaGFzTm9uV1MgPSByZWdleFRlc3Rlcihub25XU3JlZ2V4KTtcblxuLy8gd2hpdGVzcGFjZSBmcm9tOiBodHRwczovL2VzNS5naXRodWIuaW8vI3gxNS41LjQuMjBcbi8vIGltcGxlbWVudGF0aW9uIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2Jsb2IvdjMuNC4wL2VzNS1zaGltLmpzI0wxMzA0LUwxMzI0XG52YXIgd3MgPSBbXG5cdCdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycsXG5cdCdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOCcsXG5cdCdcXHUyMDI5XFx1RkVGRidcbl0uam9pbignJyk7XG52YXIgdHJpbVJlZ2V4ID0gbmV3IFJlZ0V4cCgnKF5bJyArIHdzICsgJ10rKXwoWycgKyB3cyArICddKyQpJywgJ2cnKTtcbnZhciAkcmVwbGFjZSA9IGNhbGxCb3VuZCgnU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlJyk7XG52YXIgJHRyaW0gPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0cmV0dXJuICRyZXBsYWNlKHZhbHVlLCB0cmltUmVnZXgsICcnKTtcbn07XG5cbnZhciBUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vVG9QcmltaXRpdmUnKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b251bWJlclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvTnVtYmVyKGFyZ3VtZW50KSB7XG5cdHZhciB2YWx1ZSA9IGlzUHJpbWl0aXZlKGFyZ3VtZW50KSA/IGFyZ3VtZW50IDogVG9QcmltaXRpdmUoYXJndW1lbnQsICROdW1iZXIpO1xuXHRpZiAodHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBhIFN5bWJvbCB2YWx1ZSB0byBhIG51bWJlcicpO1xuXHR9XG5cdGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG5cdFx0aWYgKGlzQmluYXJ5KHZhbHVlKSkge1xuXHRcdFx0cmV0dXJuIFRvTnVtYmVyKCRwYXJzZUludGVnZXIoJHN0clNsaWNlKHZhbHVlLCAyKSwgMikpO1xuXHRcdH0gZWxzZSBpZiAoaXNPY3RhbCh2YWx1ZSkpIHtcblx0XHRcdHJldHVybiBUb051bWJlcigkcGFyc2VJbnRlZ2VyKCRzdHJTbGljZSh2YWx1ZSwgMiksIDgpKTtcblx0XHR9IGVsc2UgaWYgKGhhc05vbldTKHZhbHVlKSB8fCBpc0ludmFsaWRIZXhMaXRlcmFsKHZhbHVlKSkge1xuXHRcdFx0cmV0dXJuIE5hTjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHRyaW1tZWQgPSAkdHJpbSh2YWx1ZSk7XG5cdFx0XHRpZiAodHJpbW1lZCAhPT0gdmFsdWUpIHtcblx0XHRcdFx0cmV0dXJuIFRvTnVtYmVyKHRyaW1tZWQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gJE51bWJlcih2YWx1ZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0SW5mZXJyZWROYW1lO1xudHJ5IHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG5cdGdldEluZmVycmVkTmFtZSA9IEZ1bmN0aW9uKCdzJywgJ3JldHVybiB7IFtzXSgpIHt9IH1bc10ubmFtZTsnKTtcbn0gY2F0Y2ggKGUpIHt9XG5cbnZhciBpbmZlcnJlZCA9IGZ1bmN0aW9uICgpIHt9O1xubW9kdWxlLmV4cG9ydHMgPSBnZXRJbmZlcnJlZE5hbWUgJiYgaW5mZXJyZWQubmFtZSA9PT0gJ2luZmVycmVkJyA/IGdldEluZmVycmVkTmFtZSA6IG51bGw7XG4iLCIvKiBlc2xpbnQgbm8tbmVnYXRlZC1jb25kaXRpb246IDAsIG5vLW5ldy1mdW5jOiAwICovXG5cbid1c2Ugc3RyaWN0JztcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuXHRtb2R1bGUuZXhwb3J0cyA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG5cdG1vZHVsZS5leHBvcnRzID0gd2luZG93O1xufSBlbHNlIHtcblx0bW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuIiwiLy8gZWxlbWVudC1jbG9zZXN0IHwgQ0MwLTEuMCB8IGdpdGh1Yi5jb20vam9uYXRoYW50bmVhbC9jbG9zZXN0XG5cbihmdW5jdGlvbiAoRWxlbWVudFByb3RvKSB7XG5cdGlmICh0eXBlb2YgRWxlbWVudFByb3RvLm1hdGNoZXMgIT09ICdmdW5jdGlvbicpIHtcblx0XHRFbGVtZW50UHJvdG8ubWF0Y2hlcyA9IEVsZW1lbnRQcm90by5tc01hdGNoZXNTZWxlY3RvciB8fCBFbGVtZW50UHJvdG8ubW96TWF0Y2hlc1NlbGVjdG9yIHx8IEVsZW1lbnRQcm90by53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHwgZnVuY3Rpb24gbWF0Y2hlcyhzZWxlY3Rvcikge1xuXHRcdFx0dmFyIGVsZW1lbnQgPSB0aGlzO1xuXHRcdFx0dmFyIGVsZW1lbnRzID0gKGVsZW1lbnQuZG9jdW1lbnQgfHwgZWxlbWVudC5vd25lckRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcblx0XHRcdHZhciBpbmRleCA9IDA7XG5cblx0XHRcdHdoaWxlIChlbGVtZW50c1tpbmRleF0gJiYgZWxlbWVudHNbaW5kZXhdICE9PSBlbGVtZW50KSB7XG5cdFx0XHRcdCsraW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBCb29sZWFuKGVsZW1lbnRzW2luZGV4XSk7XG5cdFx0fTtcblx0fVxuXG5cdGlmICh0eXBlb2YgRWxlbWVudFByb3RvLmNsb3Nlc3QgIT09ICdmdW5jdGlvbicpIHtcblx0XHRFbGVtZW50UHJvdG8uY2xvc2VzdCA9IGZ1bmN0aW9uIGNsb3Nlc3Qoc2VsZWN0b3IpIHtcblx0XHRcdHZhciBlbGVtZW50ID0gdGhpcztcblxuXHRcdFx0d2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlVHlwZSA9PT0gMSkge1xuXHRcdFx0XHRpZiAoZWxlbWVudC5tYXRjaGVzKHNlbGVjdG9yKSkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtZW50O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fTtcblx0fVxufSkod2luZG93LkVsZW1lbnQucHJvdG90eXBlKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyICRhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaGVscGVycy9jYWxsQm91bmQnKSgnQXJyYXkucHJvdG90eXBlLnNsaWNlJyk7XG5cbnZhciBDYWxsID0gcmVxdWlyZSgnLi9DYWxsJyk7XG52YXIgR2V0ViA9IHJlcXVpcmUoJy4vR2V0VicpO1xudmFyIElzUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuL0lzUHJvcGVydHlLZXknKTtcblxuLy8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWludm9rZVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEludm9rZShPLCBQKSB7XG5cdGlmICghSXNQcm9wZXJ0eUtleShQKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdQIG11c3QgYmUgYSBQcm9wZXJ0eSBLZXknKTtcblx0fVxuXHR2YXIgYXJndW1lbnRzTGlzdCA9ICRhcnJheVNsaWNlKGFyZ3VtZW50cywgMik7XG5cdHZhciBmdW5jID0gR2V0VihPLCBQKTtcblx0cmV0dXJuIENhbGwoZnVuYywgTywgYXJndW1lbnRzTGlzdCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gcmVxdWlyZSgnaGFzJyk7XG5cbnZhciBhc3NlcnRSZWNvcmQgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2Fzc2VydFJlY29yZCcpO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWlzZGF0YWRlc2NyaXB0b3JcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBJc0RhdGFEZXNjcmlwdG9yKERlc2MpIHtcblx0aWYgKHR5cGVvZiBEZXNjID09PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGFzc2VydFJlY29yZChUeXBlLCAnUHJvcGVydHkgRGVzY3JpcHRvcicsICdEZXNjJywgRGVzYyk7XG5cblx0aWYgKCFoYXMoRGVzYywgJ1tbVmFsdWVdXScpICYmICFoYXMoRGVzYywgJ1tbV3JpdGFibGVdXScpKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtOS4xMVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ2lzLWNhbGxhYmxlJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1BcnJheVByb3RvdHlwZUluY2x1ZGVzKCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoXG5cdFx0QXJyYXkucHJvdG90eXBlLFxuXHRcdHsgaW5jbHVkZXM6IHBvbHlmaWxsIH0sXG5cdFx0eyBpbmNsdWRlczogZnVuY3Rpb24gKCkgeyByZXR1cm4gQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzICE9PSBwb2x5ZmlsbDsgfSB9XG5cdCk7XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZXF1aXJlUHJvbWlzZSA9IHJlcXVpcmUoJy4vcmVxdWlyZVByb21pc2UnKTtcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRyZXF1aXJlUHJvbWlzZSgpO1xuXHRyZXR1cm4gdHlwZW9mIFByb21pc2UucHJvdG90eXBlWydmaW5hbGx5J10gPT09ICdmdW5jdGlvbicgPyBQcm9taXNlLnByb3RvdHlwZVsnZmluYWxseSddIDogaW1wbGVtZW50YXRpb247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltVmFsdWVzKCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoT2JqZWN0LCB7IHZhbHVlczogcG9seWZpbGwgfSwge1xuXHRcdHZhbHVlczogZnVuY3Rpb24gdGVzdFZhbHVlcygpIHtcblx0XHRcdHJldHVybiBPYmplY3QudmFsdWVzICE9PSBwb2x5ZmlsbDtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuL3NoaW0nKSgpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwcm9wZXJseUJveGVkKG1ldGhvZCkge1xuXHQvLyBDaGVjayBub2RlIDAuNi4yMSBidWcgd2hlcmUgdGhpcmQgcGFyYW1ldGVyIGlzIG5vdCBib3hlZFxuXHR2YXIgcHJvcGVybHlCb3hlc05vblN0cmljdCA9IHRydWU7XG5cdHZhciBwcm9wZXJseUJveGVzU3RyaWN0ID0gdHJ1ZTtcblx0dmFyIHRocmV3RXhjZXB0aW9uID0gZmFsc2U7XG5cdGlmICh0eXBlb2YgbWV0aG9kID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dHJ5IHtcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtcGFyYW1zXG5cdFx0XHRtZXRob2QuY2FsbCgnZicsIGZ1bmN0aW9uIChfLCBfXywgTykge1xuXHRcdFx0XHRpZiAodHlwZW9mIE8gIT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdFx0cHJvcGVybHlCb3hlc05vblN0cmljdCA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0bWV0aG9kLmNhbGwoXG5cdFx0XHRcdFtudWxsXSxcblx0XHRcdFx0ZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdCd1c2Ugc3RyaWN0JztcblxuXHRcdFx0XHRcdHByb3Blcmx5Qm94ZXNTdHJpY3QgPSB0eXBlb2YgdGhpcyA9PT0gJ3N0cmluZyc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8taW52YWxpZC10aGlzXG5cdFx0XHRcdH0sXG5cdFx0XHRcdCd4J1xuXHRcdFx0KTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHR0aHJld0V4Y2VwdGlvbiA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAhdGhyZXdFeGNlcHRpb24gJiYgcHJvcGVybHlCb3hlc05vblN0cmljdCAmJiBwcm9wZXJseUJveGVzU3RyaWN0O1xuXHR9XG5cdHJldHVybiBmYWxzZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0cmV0dXJuIEFycmF5LnByb3RvdHlwZS5mbGF0TWFwIHx8IGltcGxlbWVudGF0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIElzQ2FsbGFibGUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0lzQ2FsbGFibGUnKTtcbnZhciBmdW5jdGlvbnNIYXZlTmFtZXMgPSByZXF1aXJlKCdmdW5jdGlvbnMtaGF2ZS1uYW1lcycpKCk7XG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvaGVscGVycy9jYWxsQm91bmQnKTtcbnZhciAkZnVuY3Rpb25Ub1N0cmluZyA9IGNhbGxCb3VuZCgnRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nJyk7XG52YXIgJHN0cmluZ01hdGNoID0gY2FsbEJvdW5kKCdTdHJpbmcucHJvdG90eXBlLm1hdGNoJyk7XG5cbnZhciBjbGFzc1JlZ2V4ID0gL15jbGFzcyAvO1xuXG52YXIgaXNDbGFzcyA9IGZ1bmN0aW9uIGlzQ2xhc3NDb25zdHJ1Y3Rvcihmbikge1xuXHRpZiAoSXNDYWxsYWJsZShmbikpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHR0cnkge1xuXHRcdHZhciBtYXRjaCA9ICRzdHJpbmdNYXRjaCgkZnVuY3Rpb25Ub1N0cmluZyhmbiksIGNsYXNzUmVnZXgpO1xuXHRcdHJldHVybiAhIW1hdGNoO1xuXHR9IGNhdGNoIChlKSB7fVxuXHRyZXR1cm4gZmFsc2U7XG59O1xuXG52YXIgcmVnZXggPSAvXFxzKmZ1bmN0aW9uXFxzKyhbXihcXHNdKilcXHMqLztcblxudmFyIGZ1bmN0aW9uUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0TmFtZSgpIHtcblx0aWYgKCFpc0NsYXNzKHRoaXMpICYmICFJc0NhbGxhYmxlKHRoaXMpKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRnVuY3Rpb24ucHJvdG90eXBlLm5hbWUgc2hhbSBnZXR0ZXIgY2FsbGVkIG9uIG5vbi1mdW5jdGlvbicpO1xuXHR9XG5cdGlmIChmdW5jdGlvbnNIYXZlTmFtZXMpIHtcblx0XHRyZXR1cm4gdGhpcy5uYW1lO1xuXHR9XG5cdGlmICh0aGlzID09PSBmdW5jdGlvblByb3RvKSB7XG5cdFx0cmV0dXJuICcnO1xuXHR9XG5cdHZhciBzdHIgPSAkZnVuY3Rpb25Ub1N0cmluZyh0aGlzKTtcblx0dmFyIG1hdGNoID0gJHN0cmluZ01hdGNoKHN0ciwgcmVnZXgpO1xuXHR2YXIgbmFtZSA9IG1hdGNoICYmIG1hdGNoWzFdO1xuXHRyZXR1cm4gbmFtZTtcbn07XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KCkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAoZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSA6Zm9jdXMtdmlzaWJsZSBwb2x5ZmlsbCBhdCB0aGUgZ2l2ZW4gc2NvcGUuXG4gICAqIEEgc2NvcGUgaW4gdGhpcyBjYXNlIGlzIGVpdGhlciB0aGUgdG9wLWxldmVsIERvY3VtZW50IG9yIGEgU2hhZG93IFJvb3QuXG4gICAqXG4gICAqIEBwYXJhbSB7KERvY3VtZW50fFNoYWRvd1Jvb3QpfSBzY29wZVxuICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGVcbiAgICovXG4gIGZ1bmN0aW9uIGFwcGx5Rm9jdXNWaXNpYmxlUG9seWZpbGwoc2NvcGUpIHtcbiAgICB2YXIgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG4gICAgdmFyIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gZmFsc2U7XG4gICAgdmFyIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCA9IG51bGw7XG5cbiAgICB2YXIgaW5wdXRUeXBlc1doaXRlbGlzdCA9IHtcbiAgICAgIHRleHQ6IHRydWUsXG4gICAgICBzZWFyY2g6IHRydWUsXG4gICAgICB1cmw6IHRydWUsXG4gICAgICB0ZWw6IHRydWUsXG4gICAgICBlbWFpbDogdHJ1ZSxcbiAgICAgIHBhc3N3b3JkOiB0cnVlLFxuICAgICAgbnVtYmVyOiB0cnVlLFxuICAgICAgZGF0ZTogdHJ1ZSxcbiAgICAgIG1vbnRoOiB0cnVlLFxuICAgICAgd2VlazogdHJ1ZSxcbiAgICAgIHRpbWU6IHRydWUsXG4gICAgICBkYXRldGltZTogdHJ1ZSxcbiAgICAgICdkYXRldGltZS1sb2NhbCc6IHRydWVcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSGVscGVyIGZ1bmN0aW9uIGZvciBsZWdhY3kgYnJvd3NlcnMgYW5kIGlmcmFtZXMgd2hpY2ggc29tZXRpbWVzIGZvY3VzXG4gICAgICogZWxlbWVudHMgbGlrZSBkb2N1bWVudCwgYm9keSwgYW5kIG5vbi1pbnRlcmFjdGl2ZSBTVkcuXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzVmFsaWRGb2N1c1RhcmdldChlbCkge1xuICAgICAgaWYgKFxuICAgICAgICBlbCAmJlxuICAgICAgICBlbCAhPT0gZG9jdW1lbnQgJiZcbiAgICAgICAgZWwubm9kZU5hbWUgIT09ICdIVE1MJyAmJlxuICAgICAgICBlbC5ub2RlTmFtZSAhPT0gJ0JPRFknICYmXG4gICAgICAgICdjbGFzc0xpc3QnIGluIGVsICYmXG4gICAgICAgICdjb250YWlucycgaW4gZWwuY2xhc3NMaXN0XG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgd2hldGhlciB0aGUgZ2l2ZW4gZWxlbWVudCBzaG91bGQgYXV0b21hdGljYWxseSB0cmlnZ2VyIHRoZVxuICAgICAqIGBmb2N1cy12aXNpYmxlYCBjbGFzcyBiZWluZyBhZGRlZCwgaS5lLiB3aGV0aGVyIGl0IHNob3VsZCBhbHdheXMgbWF0Y2hcbiAgICAgKiBgOmZvY3VzLXZpc2libGVgIHdoZW4gZm9jdXNlZC5cbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eShlbCkge1xuICAgICAgdmFyIHR5cGUgPSBlbC50eXBlO1xuICAgICAgdmFyIHRhZ05hbWUgPSBlbC50YWdOYW1lO1xuXG4gICAgICBpZiAodGFnTmFtZSA9PT0gJ0lOUFVUJyAmJiBpbnB1dFR5cGVzV2hpdGVsaXN0W3R5cGVdICYmICFlbC5yZWFkT25seSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRhZ05hbWUgPT09ICdURVhUQVJFQScgJiYgIWVsLnJlYWRPbmx5KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZWwuaXNDb250ZW50RWRpdGFibGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIGBmb2N1cy12aXNpYmxlYCBjbGFzcyB0byB0aGUgZ2l2ZW4gZWxlbWVudCBpZiBpdCB3YXMgbm90IGFkZGVkIGJ5XG4gICAgICogdGhlIGF1dGhvci5cbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkRm9jdXNWaXNpYmxlQ2xhc3MoZWwpIHtcbiAgICAgIGlmIChlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2ZvY3VzLXZpc2libGUnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKCdmb2N1cy12aXNpYmxlJyk7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtZm9jdXMtdmlzaWJsZS1hZGRlZCcsICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhlIGBmb2N1cy12aXNpYmxlYCBjbGFzcyBmcm9tIHRoZSBnaXZlbiBlbGVtZW50IGlmIGl0IHdhcyBub3RcbiAgICAgKiBvcmlnaW5hbGx5IGFkZGVkIGJ5IHRoZSBhdXRob3IuXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZUZvY3VzVmlzaWJsZUNsYXNzKGVsKSB7XG4gICAgICBpZiAoIWVsLmhhc0F0dHJpYnV0ZSgnZGF0YS1mb2N1cy12aXNpYmxlLWFkZGVkJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnZm9jdXMtdmlzaWJsZScpO1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWZvY3VzLXZpc2libGUtYWRkZWQnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJZiB0aGUgbW9zdCByZWNlbnQgdXNlciBpbnRlcmFjdGlvbiB3YXMgdmlhIHRoZSBrZXlib2FyZDtcbiAgICAgKiBhbmQgdGhlIGtleSBwcmVzcyBkaWQgbm90IGluY2x1ZGUgYSBtZXRhLCBhbHQvb3B0aW9uLCBvciBjb250cm9sIGtleTtcbiAgICAgKiB0aGVuIHRoZSBtb2RhbGl0eSBpcyBrZXlib2FyZC4gT3RoZXJ3aXNlLCB0aGUgbW9kYWxpdHkgaXMgbm90IGtleWJvYXJkLlxuICAgICAqIEFwcGx5IGBmb2N1cy12aXNpYmxlYCB0byBhbnkgY3VycmVudCBhY3RpdmUgZWxlbWVudCBhbmQga2VlcCB0cmFja1xuICAgICAqIG9mIG91ciBrZXlib2FyZCBtb2RhbGl0eSBzdGF0ZSB3aXRoIGBoYWRLZXlib2FyZEV2ZW50YC5cbiAgICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbktleURvd24oZSkge1xuICAgICAgaWYgKGUubWV0YUtleSB8fCBlLmFsdEtleSB8fCBlLmN0cmxLZXkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNWYWxpZEZvY3VzVGFyZ2V0KHNjb3BlLmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgIGFkZEZvY3VzVmlzaWJsZUNsYXNzKHNjb3BlLmFjdGl2ZUVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJZiBhdCBhbnkgcG9pbnQgYSB1c2VyIGNsaWNrcyB3aXRoIGEgcG9pbnRpbmcgZGV2aWNlLCBlbnN1cmUgdGhhdCB3ZSBjaGFuZ2VcbiAgICAgKiB0aGUgbW9kYWxpdHkgYXdheSBmcm9tIGtleWJvYXJkLlxuICAgICAqIFRoaXMgYXZvaWRzIHRoZSBzaXR1YXRpb24gd2hlcmUgYSB1c2VyIHByZXNzZXMgYSBrZXkgb24gYW4gYWxyZWFkeSBmb2N1c2VkXG4gICAgICogZWxlbWVudCwgYW5kIHRoZW4gY2xpY2tzIG9uIGEgZGlmZmVyZW50IGVsZW1lbnQsIGZvY3VzaW5nIGl0IHdpdGggYVxuICAgICAqIHBvaW50aW5nIGRldmljZSwgd2hpbGUgd2Ugc3RpbGwgdGhpbmsgd2UncmUgaW4ga2V5Ym9hcmQgbW9kYWxpdHkuXG4gICAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uUG9pbnRlckRvd24oZSkge1xuICAgICAgaGFkS2V5Ym9hcmRFdmVudCA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9uIGBmb2N1c2AsIGFkZCB0aGUgYGZvY3VzLXZpc2libGVgIGNsYXNzIHRvIHRoZSB0YXJnZXQgaWY6XG4gICAgICogLSB0aGUgdGFyZ2V0IHJlY2VpdmVkIGZvY3VzIGFzIGEgcmVzdWx0IG9mIGtleWJvYXJkIG5hdmlnYXRpb24sIG9yXG4gICAgICogLSB0aGUgZXZlbnQgdGFyZ2V0IGlzIGFuIGVsZW1lbnQgdGhhdCB3aWxsIGxpa2VseSByZXF1aXJlIGludGVyYWN0aW9uXG4gICAgICogICB2aWEgdGhlIGtleWJvYXJkIChlLmcuIGEgdGV4dCBib3gpXG4gICAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uRm9jdXMoZSkge1xuICAgICAgLy8gUHJldmVudCBJRSBmcm9tIGZvY3VzaW5nIHRoZSBkb2N1bWVudCBvciBIVE1MIGVsZW1lbnQuXG4gICAgICBpZiAoIWlzVmFsaWRGb2N1c1RhcmdldChlLnRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFkS2V5Ym9hcmRFdmVudCB8fCBmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eShlLnRhcmdldCkpIHtcbiAgICAgICAgYWRkRm9jdXNWaXNpYmxlQ2xhc3MoZS50YXJnZXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9uIGBibHVyYCwgcmVtb3ZlIHRoZSBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgZnJvbSB0aGUgdGFyZ2V0LlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbkJsdXIoZSkge1xuICAgICAgaWYgKCFpc1ZhbGlkRm9jdXNUYXJnZXQoZS50YXJnZXQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2ZvY3VzLXZpc2libGUnKSB8fFxuICAgICAgICBlLnRhcmdldC5oYXNBdHRyaWJ1dGUoJ2RhdGEtZm9jdXMtdmlzaWJsZS1hZGRlZCcpXG4gICAgICApIHtcbiAgICAgICAgLy8gVG8gZGV0ZWN0IGEgdGFiL3dpbmRvdyBzd2l0Y2gsIHdlIGxvb2sgZm9yIGEgYmx1ciBldmVudCBmb2xsb3dlZFxuICAgICAgICAvLyByYXBpZGx5IGJ5IGEgdmlzaWJpbGl0eSBjaGFuZ2UuXG4gICAgICAgIC8vIElmIHdlIGRvbid0IHNlZSBhIHZpc2liaWxpdHkgY2hhbmdlIHdpdGhpbiAxMDBtcywgaXQncyBwcm9iYWJseSBhXG4gICAgICAgIC8vIHJlZ3VsYXIgZm9jdXMgY2hhbmdlLlxuICAgICAgICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IHRydWU7XG4gICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0KTtcbiAgICAgICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSBmYWxzZTtcbiAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgcmVtb3ZlRm9jdXNWaXNpYmxlQ2xhc3MoZS50YXJnZXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElmIHRoZSB1c2VyIGNoYW5nZXMgdGFicywga2VlcCB0cmFjayBvZiB3aGV0aGVyIG9yIG5vdCB0aGUgcHJldmlvdXNseVxuICAgICAqIGZvY3VzZWQgZWxlbWVudCBoYWQgLmZvY3VzLXZpc2libGUuXG4gICAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uVmlzaWJpbGl0eUNoYW5nZShlKSB7XG4gICAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSAnaGlkZGVuJykge1xuICAgICAgICAvLyBJZiB0aGUgdGFiIGJlY29tZXMgYWN0aXZlIGFnYWluLCB0aGUgYnJvd3NlciB3aWxsIGhhbmRsZSBjYWxsaW5nIGZvY3VzXG4gICAgICAgIC8vIG9uIHRoZSBlbGVtZW50IChTYWZhcmkgYWN0dWFsbHkgY2FsbHMgaXQgdHdpY2UpLlxuICAgICAgICAvLyBJZiB0aGlzIHRhYiBjaGFuZ2UgY2F1c2VkIGEgYmx1ciBvbiBhbiBlbGVtZW50IHdpdGggZm9jdXMtdmlzaWJsZSxcbiAgICAgICAgLy8gcmUtYXBwbHkgdGhlIGNsYXNzIHdoZW4gdGhlIHVzZXIgc3dpdGNoZXMgYmFjayB0byB0aGUgdGFiLlxuICAgICAgICBpZiAoaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkpIHtcbiAgICAgICAgICBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBhZGRJbml0aWFsUG9pbnRlck1vdmVMaXN0ZW5lcnMoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBncm91cCBvZiBsaXN0ZW5lcnMgdG8gZGV0ZWN0IHVzYWdlIG9mIGFueSBwb2ludGluZyBkZXZpY2VzLlxuICAgICAqIFRoZXNlIGxpc3RlbmVycyB3aWxsIGJlIGFkZGVkIHdoZW4gdGhlIHBvbHlmaWxsIGZpcnN0IGxvYWRzLCBhbmQgYW55dGltZVxuICAgICAqIHRoZSB3aW5kb3cgaXMgYmx1cnJlZCwgc28gdGhhdCB0aGV5IGFyZSBhY3RpdmUgd2hlbiB0aGUgd2luZG93IHJlZ2FpbnNcbiAgICAgKiBmb2N1cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGRJbml0aWFsUG9pbnRlck1vdmVMaXN0ZW5lcnMoKSB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVJbml0aWFsUG9pbnRlck1vdmVMaXN0ZW5lcnMoKSB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZSBwb2xmeWlsbCBmaXJzdCBsb2FkcywgYXNzdW1lIHRoZSB1c2VyIGlzIGluIGtleWJvYXJkIG1vZGFsaXR5LlxuICAgICAqIElmIGFueSBldmVudCBpcyByZWNlaXZlZCBmcm9tIGEgcG9pbnRpbmcgZGV2aWNlIChlLmcuIG1vdXNlLCBwb2ludGVyLFxuICAgICAqIHRvdWNoKSwgdHVybiBvZmYga2V5Ym9hcmQgbW9kYWxpdHkuXG4gICAgICogVGhpcyBhY2NvdW50cyBmb3Igc2l0dWF0aW9ucyB3aGVyZSBmb2N1cyBlbnRlcnMgdGhlIHBhZ2UgZnJvbSB0aGUgVVJMIGJhci5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25Jbml0aWFsUG9pbnRlck1vdmUoZSkge1xuICAgICAgLy8gV29yayBhcm91bmQgYSBTYWZhcmkgcXVpcmsgdGhhdCBmaXJlcyBhIG1vdXNlbW92ZSBvbiA8aHRtbD4gd2hlbmV2ZXIgdGhlXG4gICAgICAvLyB3aW5kb3cgYmx1cnMsIGV2ZW4gaWYgeW91J3JlIHRhYmJpbmcgb3V0IG9mIHRoZSBwYWdlLiDCr1xcXyjjg4QpXy/Cr1xuICAgICAgaWYgKGUudGFyZ2V0Lm5vZGVOYW1lICYmIGUudGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdodG1sJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGhhZEtleWJvYXJkRXZlbnQgPSBmYWxzZTtcbiAgICAgIHJlbW92ZUluaXRpYWxQb2ludGVyTW92ZUxpc3RlbmVycygpO1xuICAgIH1cblxuICAgIC8vIEZvciBzb21lIGtpbmRzIG9mIHN0YXRlLCB3ZSBhcmUgaW50ZXJlc3RlZCBpbiBjaGFuZ2VzIGF0IHRoZSBnbG9iYWwgc2NvcGVcbiAgICAvLyBvbmx5LiBGb3IgZXhhbXBsZSwgZ2xvYmFsIHBvaW50ZXIgaW5wdXQsIGdsb2JhbCBrZXkgcHJlc3NlcyBhbmQgZ2xvYmFsXG4gICAgLy8gdmlzaWJpbGl0eSBjaGFuZ2Ugc2hvdWxkIGFmZmVjdCB0aGUgc3RhdGUgYXQgZXZlcnkgc2NvcGU6XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9uS2V5RG93biwgdHJ1ZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgb25Qb2ludGVyRG93biwgdHJ1ZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBvblBvaW50ZXJEb3duLCB0cnVlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb25Qb2ludGVyRG93biwgdHJ1ZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIG9uVmlzaWJpbGl0eUNoYW5nZSwgdHJ1ZSk7XG5cbiAgICBhZGRJbml0aWFsUG9pbnRlck1vdmVMaXN0ZW5lcnMoKTtcblxuICAgIC8vIEZvciBmb2N1cyBhbmQgYmx1ciwgd2Ugc3BlY2lmaWNhbGx5IGNhcmUgYWJvdXQgc3RhdGUgY2hhbmdlcyBpbiB0aGUgbG9jYWxcbiAgICAvLyBzY29wZS4gVGhpcyBpcyBiZWNhdXNlIGZvY3VzIC8gYmx1ciBldmVudHMgdGhhdCBvcmlnaW5hdGUgZnJvbSB3aXRoaW4gYVxuICAgIC8vIHNoYWRvdyByb290IGFyZSBub3QgcmUtZGlzcGF0Y2hlZCBmcm9tIHRoZSBob3N0IGVsZW1lbnQgaWYgaXQgd2FzIGFscmVhZHlcbiAgICAvLyB0aGUgYWN0aXZlIGVsZW1lbnQgaW4gaXRzIG93biBzY29wZTpcbiAgICBzY29wZS5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIG9uRm9jdXMsIHRydWUpO1xuICAgIHNjb3BlLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBvbkJsdXIsIHRydWUpO1xuXG4gICAgLy8gV2UgZGV0ZWN0IHRoYXQgYSBub2RlIGlzIGEgU2hhZG93Um9vdCBieSBlbnN1cmluZyB0aGF0IGl0IGlzIGFcbiAgICAvLyBEb2N1bWVudEZyYWdtZW50IGFuZCBhbHNvIGhhcyBhIGhvc3QgcHJvcGVydHkuIFRoaXMgY2hlY2sgY292ZXJzIG5hdGl2ZVxuICAgIC8vIGltcGxlbWVudGF0aW9uIGFuZCBwb2x5ZmlsbCBpbXBsZW1lbnRhdGlvbiB0cmFuc3BhcmVudGx5LiBJZiB3ZSBvbmx5IGNhcmVkXG4gICAgLy8gYWJvdXQgdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiwgd2UgY291bGQganVzdCBjaGVjayBpZiB0aGUgc2NvcGUgd2FzXG4gICAgLy8gYW4gaW5zdGFuY2Ugb2YgYSBTaGFkb3dSb290LlxuICAgIGlmIChzY29wZS5ub2RlVHlwZSA9PT0gTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFICYmIHNjb3BlLmhvc3QpIHtcbiAgICAgIC8vIFNpbmNlIGEgU2hhZG93Um9vdCBpcyBhIHNwZWNpYWwga2luZCBvZiBEb2N1bWVudEZyYWdtZW50LCBpdCBkb2VzIG5vdFxuICAgICAgLy8gaGF2ZSBhIHJvb3QgZWxlbWVudCB0byBhZGQgYSBjbGFzcyB0by4gU28sIHdlIGFkZCB0aGlzIGF0dHJpYnV0ZSB0byB0aGVcbiAgICAgIC8vIGhvc3QgZWxlbWVudCBpbnN0ZWFkOlxuICAgICAgc2NvcGUuaG9zdC5zZXRBdHRyaWJ1dGUoJ2RhdGEtanMtZm9jdXMtdmlzaWJsZScsICcnKTtcbiAgICB9IGVsc2UgaWYgKHNjb3BlLm5vZGVUeXBlID09PSBOb2RlLkRPQ1VNRU5UX05PREUpIHtcbiAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdqcy1mb2N1cy12aXNpYmxlJyk7XG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWpzLWZvY3VzLXZpc2libGUnLCAnJyk7XG4gICAgfVxuICB9XG5cbiAgLy8gSXQgaXMgaW1wb3J0YW50IHRvIHdyYXAgYWxsIHJlZmVyZW5jZXMgdG8gZ2xvYmFsIHdpbmRvdyBhbmQgZG9jdW1lbnQgaW5cbiAgLy8gdGhlc2UgY2hlY2tzIHRvIHN1cHBvcnQgc2VydmVyLXNpZGUgcmVuZGVyaW5nIHVzZSBjYXNlc1xuICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvaXNzdWVzLzE5OVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIE1ha2UgdGhlIHBvbHlmaWxsIGhlbHBlciBnbG9iYWxseSBhdmFpbGFibGUuIFRoaXMgY2FuIGJlIHVzZWQgYXMgYSBzaWduYWxcbiAgICAvLyB0byBpbnRlcmVzdGVkIGxpYnJhcmllcyB0aGF0IHdpc2ggdG8gY29vcmRpbmF0ZSB3aXRoIHRoZSBwb2x5ZmlsbCBmb3IgZS5nLixcbiAgICAvLyBhcHBseWluZyB0aGUgcG9seWZpbGwgdG8gYSBzaGFkb3cgcm9vdDpcbiAgICB3aW5kb3cuYXBwbHlGb2N1c1Zpc2libGVQb2x5ZmlsbCA9IGFwcGx5Rm9jdXNWaXNpYmxlUG9seWZpbGw7XG5cbiAgICAvLyBOb3RpZnkgaW50ZXJlc3RlZCBsaWJyYXJpZXMgb2YgdGhlIHBvbHlmaWxsJ3MgcHJlc2VuY2UsIGluIGNhc2UgdGhlXG4gICAgLy8gcG9seWZpbGwgd2FzIGxvYWRlZCBsYXppbHk6XG4gICAgdmFyIGV2ZW50O1xuXG4gICAgdHJ5IHtcbiAgICAgIGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdmb2N1cy12aXNpYmxlLXBvbHlmaWxsLXJlYWR5Jyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIElFMTEgZG9lcyBub3Qgc3VwcG9ydCB1c2luZyBDdXN0b21FdmVudCBhcyBhIGNvbnN0cnVjdG9yIGRpcmVjdGx5OlxuICAgICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICAgIGV2ZW50LmluaXRDdXN0b21FdmVudCgnZm9jdXMtdmlzaWJsZS1wb2x5ZmlsbC1yZWFkeScsIGZhbHNlLCBmYWxzZSwge30pO1xuICAgIH1cblxuICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gQXBwbHkgdGhlIHBvbHlmaWxsIHRvIHRoZSBnbG9iYWwgZG9jdW1lbnQsIHNvIHRoYXQgbm8gSmF2YVNjcmlwdFxuICAgIC8vIGNvb3JkaW5hdGlvbiBpcyByZXF1aXJlZCB0byB1c2UgdGhlIHBvbHlmaWxsIGluIHRoZSB0b3AtbGV2ZWwgZG9jdW1lbnQ6XG4gICAgYXBwbHlGb2N1c1Zpc2libGVQb2x5ZmlsbChkb2N1bWVudCk7XG4gIH1cblxufSkpKTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksXG4gICAgICBQcm9taXNlSW1wbFxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsIihmdW5jdGlvbigpIHtcbiAgXCJ1c2Ugc3RyaWN0XCJcblxuICBpZiAoIXNlbGYuZG9jdW1lbnQpIHJldHVyblxuXG4gIHZhciBldmVudCA9IEtleWJvYXJkRXZlbnQucHJvdG90eXBlXG4gIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihldmVudCwgXCJrZXlcIilcbiAgaWYgKCFkZXNjKSByZXR1cm5cblxuICB2YXIga2V5cyA9IHtcbiAgICBXaW46IFwiTWV0YVwiLFxuICAgIFNjcm9sbDogXCJTY3JvbGxMb2NrXCIsXG4gICAgU3BhY2ViYXI6IFwiIFwiLFxuXG4gICAgRG93bjogXCJBcnJvd0Rvd25cIixcbiAgICBMZWZ0OiBcIkFycm93TGVmdFwiLFxuICAgIFJpZ2h0OiBcIkFycm93UmlnaHRcIixcbiAgICBVcDogXCJBcnJvd1VwXCIsXG5cbiAgICBEZWw6IFwiRGVsZXRlXCIsXG4gICAgQXBwczogXCJDb250ZXh0TWVudVwiLFxuICAgIEVzYzogXCJFc2NhcGVcIixcblxuICAgIE11bHRpcGx5OiBcIipcIixcbiAgICBBZGQ6IFwiK1wiLFxuICAgIFN1YnRyYWN0OiBcIi1cIixcbiAgICBEZWNpbWFsOiBcIi5cIixcbiAgICBEaXZpZGU6IFwiL1wiLFxuICB9XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV2ZW50LCBcImtleVwiLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBrZXkgPSBkZXNjLmdldC5jYWxsKHRoaXMpXG5cbiAgICAgIHJldHVybiBrZXlzLmhhc093blByb3BlcnR5KGtleSkgPyBrZXlzW2tleV0gOiBrZXlcbiAgICB9LFxuICB9KVxufSkoKVxuIiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY2xhc3NDYWxsQ2hlY2s7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgSXRlcmF0b3JDb21wbGV0ZSA9IHJlcXVpcmUoJy4vSXRlcmF0b3JDb21wbGV0ZScpO1xudmFyIEl0ZXJhdG9yTmV4dCA9IHJlcXVpcmUoJy4vSXRlcmF0b3JOZXh0Jyk7XG5cbi8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1pdGVyYXRvcnN0ZXBcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBJdGVyYXRvclN0ZXAoaXRlcmF0b3IpIHtcblx0dmFyIHJlc3VsdCA9IEl0ZXJhdG9yTmV4dChpdGVyYXRvcik7XG5cdHZhciBkb25lID0gSXRlcmF0b3JDb21wbGV0ZShyZXN1bHQpO1xuXHRyZXR1cm4gZG9uZSA9PT0gdHJ1ZSA/IGZhbHNlIDogcmVzdWx0O1xufTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvbWF4U2FmZUludGVnZXInKTtcblxudmFyIENhbGwgPSByZXF1aXJlKCcuL0NhbGwnKTtcbnZhciBDcmVhdGVEYXRhUHJvcGVydHlPclRocm93ID0gcmVxdWlyZSgnLi9DcmVhdGVEYXRhUHJvcGVydHlPclRocm93Jyk7XG52YXIgR2V0ID0gcmVxdWlyZSgnLi9HZXQnKTtcbnZhciBIYXNQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vSGFzUHJvcGVydHknKTtcbnZhciBJc0FycmF5ID0gcmVxdWlyZSgnLi9Jc0FycmF5Jyk7XG52YXIgVG9MZW5ndGggPSByZXF1aXJlKCcuL1RvTGVuZ3RoJyk7XG52YXIgVG9TdHJpbmcgPSByZXF1aXJlKCcuL1RvU3RyaW5nJyk7XG5cbi8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi8xMC4wLyNzZWMtZmxhdHRlbmludG9hcnJheVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXBhcmFtcywgbWF4LXN0YXRlbWVudHNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gRmxhdHRlbkludG9BcnJheSh0YXJnZXQsIHNvdXJjZSwgc291cmNlTGVuLCBzdGFydCwgZGVwdGgpIHtcblx0dmFyIG1hcHBlckZ1bmN0aW9uO1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDUpIHtcblx0XHRtYXBwZXJGdW5jdGlvbiA9IGFyZ3VtZW50c1s1XTtcblx0fVxuXG5cdHZhciB0YXJnZXRJbmRleCA9IHN0YXJ0O1xuXHR2YXIgc291cmNlSW5kZXggPSAwO1xuXHR3aGlsZSAoc291cmNlSW5kZXggPCBzb3VyY2VMZW4pIHtcblx0XHR2YXIgUCA9IFRvU3RyaW5nKHNvdXJjZUluZGV4KTtcblx0XHR2YXIgZXhpc3RzID0gSGFzUHJvcGVydHkoc291cmNlLCBQKTtcblx0XHRpZiAoZXhpc3RzID09PSB0cnVlKSB7XG5cdFx0XHR2YXIgZWxlbWVudCA9IEdldChzb3VyY2UsIFApO1xuXHRcdFx0aWYgKHR5cGVvZiBtYXBwZXJGdW5jdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPD0gNikge1xuXHRcdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiB0aGlzQXJnIGlzIHJlcXVpcmVkIHdoZW4gbWFwcGVyRnVuY3Rpb24gaXMgcHJvdmlkZWQnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbGVtZW50ID0gQ2FsbChtYXBwZXJGdW5jdGlvbiwgYXJndW1lbnRzWzZdLCBbZWxlbWVudCwgc291cmNlSW5kZXgsIHNvdXJjZV0pO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHNob3VsZEZsYXR0ZW4gPSBmYWxzZTtcblx0XHRcdGlmIChkZXB0aCA+IDApIHtcblx0XHRcdFx0c2hvdWxkRmxhdHRlbiA9IElzQXJyYXkoZWxlbWVudCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoc2hvdWxkRmxhdHRlbikge1xuXHRcdFx0XHR2YXIgZWxlbWVudExlbiA9IFRvTGVuZ3RoKEdldChlbGVtZW50LCAnbGVuZ3RoJykpO1xuXHRcdFx0XHR0YXJnZXRJbmRleCA9IEZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBlbGVtZW50LCBlbGVtZW50TGVuLCB0YXJnZXRJbmRleCwgZGVwdGggLSAxKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICh0YXJnZXRJbmRleCA+PSBNQVhfU0FGRV9JTlRFR0VSKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2luZGV4IHRvbyBsYXJnZScpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdENyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3codGFyZ2V0LCBUb1N0cmluZyh0YXJnZXRJbmRleCksIGVsZW1lbnQpO1xuXHRcdFx0XHR0YXJnZXRJbmRleCArPSAxO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRzb3VyY2VJbmRleCArPSAxO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldEluZGV4O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgaGFzU3ltYm9scyA9IHJlcXVpcmUoJ2hhcy1zeW1ib2xzJykoKTtcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbnZhciByZWdleHBNYXRjaEFsbFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbC1yZWdleHAtbWF0Y2hhbGwnKTtcblxudmFyIGRlZmluZVAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbU1hdGNoQWxsKCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoXG5cdFx0U3RyaW5nLnByb3RvdHlwZSxcblx0XHR7IG1hdGNoQWxsOiBwb2x5ZmlsbCB9LFxuXHRcdHsgbWF0Y2hBbGw6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFN0cmluZy5wcm90b3R5cGUubWF0Y2hBbGwgIT09IHBvbHlmaWxsOyB9IH1cblx0KTtcblx0aWYgKGhhc1N5bWJvbHMpIHtcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1wcm9wZXJ0aWVzXG5cdFx0dmFyIHN5bWJvbCA9IFN5bWJvbC5tYXRjaEFsbCB8fCAoU3ltYm9sWydmb3InXSA/IFN5bWJvbFsnZm9yJ10oJ1N5bWJvbC5tYXRjaEFsbCcpIDogU3ltYm9sKCdTeW1ib2wubWF0Y2hBbGwnKSk7XG5cdFx0ZGVmaW5lKFxuXHRcdFx0U3ltYm9sLFxuXHRcdFx0eyBtYXRjaEFsbDogc3ltYm9sIH0sXG5cdFx0XHR7IG1hdGNoQWxsOiBmdW5jdGlvbiAoKSB7IHJldHVybiBTeW1ib2wubWF0Y2hBbGwgIT09IHN5bWJvbDsgfSB9XG5cdFx0KTtcblxuXHRcdGlmIChkZWZpbmVQICYmIGdPUEQpIHtcblx0XHRcdHZhciBkZXNjID0gZ09QRChTeW1ib2wsIHN5bWJvbCk7XG5cdFx0XHRpZiAoIWRlc2MgfHwgZGVzYy5jb25maWd1cmFibGUpIHtcblx0XHRcdFx0ZGVmaW5lUChTeW1ib2wsIHN5bWJvbCwge1xuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdFx0dmFsdWU6IHN5bWJvbCxcblx0XHRcdFx0XHR3cml0YWJsZTogZmFsc2Vcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIHJlZ2V4cE1hdGNoQWxsID0gcmVnZXhwTWF0Y2hBbGxQb2x5ZmlsbCgpO1xuXHRcdHZhciBmdW5jID0ge307XG5cdFx0ZnVuY1tzeW1ib2xdID0gcmVnZXhwTWF0Y2hBbGw7XG5cdFx0dmFyIHByZWRpY2F0ZSA9IHt9O1xuXHRcdHByZWRpY2F0ZVtzeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIFJlZ0V4cC5wcm90b3R5cGVbc3ltYm9sXSAhPT0gcmVnZXhwTWF0Y2hBbGw7XG5cdFx0fTtcblx0XHRkZWZpbmUoUmVnRXhwLnByb3RvdHlwZSwgZnVuYywgcHJlZGljYXRlKTtcblx0fVxuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbnRhaW5zKG90aGVyKSB7XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJzEgYXJndW1lbnQgaXMgcmVxdWlyZWQnKTtcblx0fVxuXHRpZiAodHlwZW9mIG90aGVyICE9PSAnb2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IDEgKOKAnW90aGVy4oCcKSB0byBOb2RlLmNvbnRhaW5zIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgTm9kZScpO1xuXHR9XG5cblx0dmFyIG5vZGUgPSBvdGhlcjtcblx0ZG8ge1xuXHRcdGlmICh0aGlzID09PSBub2RlKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0aWYgKG5vZGUpIHtcblx0XHRcdG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG5cdFx0fVxuXHR9IHdoaWxlIChub2RlKTtcblxuXHRyZXR1cm4gZmFsc2U7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuL3NoaW0nKSgpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIEdldCA9IHJlcXVpcmUoJy4vR2V0Jyk7XG52YXIgVG9Cb29sZWFuID0gcmVxdWlyZSgnLi9Ub0Jvb2xlYW4nKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1pdGVyYXRvcmNvbXBsZXRlXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSXRlcmF0b3JDb21wbGV0ZShpdGVyUmVzdWx0KSB7XG5cdGlmIChUeXBlKGl0ZXJSZXN1bHQpICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKGl0ZXJSZXN1bHQpIGlzIG5vdCBPYmplY3QnKTtcblx0fVxuXHRyZXR1cm4gVG9Cb29sZWFuKEdldChpdGVyUmVzdWx0LCAnZG9uZScpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgUmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvUmVxdWlyZU9iamVjdENvZXJjaWJsZScpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L2hlbHBlcnMvY2FsbEJvdW5kJyk7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbnZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG52YXIgc2hpbSA9IHJlcXVpcmUoJy4vc2hpbScpO1xuXG52YXIgJHNsaWNlID0gY2FsbEJvdW5kKCdBcnJheS5wcm90b3R5cGUuc2xpY2UnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG52YXIgYm91bmRNYXBTaGltID0gZnVuY3Rpb24gbWFwKGFycmF5LCBjYWxsYmFja2ZuKSB7XG5cdFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJyYXkpO1xuXHRyZXR1cm4gcG9seWZpbGwuYXBwbHkoYXJyYXksICRzbGljZShhcmd1bWVudHMsIDEpKTtcbn07XG5kZWZpbmUoYm91bmRNYXBTaGltLCB7XG5cdGdldFBvbHlmaWxsOiBnZXRQb2x5ZmlsbCxcblx0aW1wbGVtZW50YXRpb246IGltcGxlbWVudGF0aW9uLFxuXHRzaGltOiBzaGltXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBib3VuZE1hcFNoaW07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBHZXQgPSByZXF1aXJlKCcuL0dldCcpO1xudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWl0ZXJhdG9ydmFsdWVcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBJdGVyYXRvclZhbHVlKGl0ZXJSZXN1bHQpIHtcblx0aWYgKFR5cGUoaXRlclJlc3VsdCkgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFR5cGUoaXRlclJlc3VsdCkgaXMgbm90IE9iamVjdCcpO1xuXHR9XG5cdHJldHVybiBHZXQoaXRlclJlc3VsdCwgJ3ZhbHVlJyk7XG59O1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRBcnJheSA9IEdldEludHJpbnNpYygnJUFycmF5JScpO1xudmFyICRzcGVjaWVzID0gR2V0SW50cmluc2ljKCclU3ltYm9sLnNwZWNpZXMlJywgdHJ1ZSk7XG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIEdldCA9IHJlcXVpcmUoJy4vR2V0Jyk7XG52YXIgSXNBcnJheSA9IHJlcXVpcmUoJy4vSXNBcnJheScpO1xudmFyIElzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL0lzQ29uc3RydWN0b3InKTtcbnZhciBJc0ludGVnZXIgPSByZXF1aXJlKCcuL0lzSW50ZWdlcicpO1xudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWFycmF5c3BlY2llc2NyZWF0ZVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcblx0aWYgKCFJc0ludGVnZXIobGVuZ3RoKSB8fCBsZW5ndGggPCAwKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGxlbmd0aCBtdXN0IGJlIGFuIGludGVnZXIgPj0gMCcpO1xuXHR9XG5cdHZhciBsZW4gPSBsZW5ndGggPT09IDAgPyAwIDogbGVuZ3RoO1xuXHR2YXIgQztcblx0dmFyIGlzQXJyYXkgPSBJc0FycmF5KG9yaWdpbmFsQXJyYXkpO1xuXHRpZiAoaXNBcnJheSkge1xuXHRcdEMgPSBHZXQob3JpZ2luYWxBcnJheSwgJ2NvbnN0cnVjdG9yJyk7XG5cdFx0Ly8gVE9ETzogZmlndXJlIG91dCBob3cgdG8gbWFrZSBhIGNyb3NzLXJlYWxtIG5vcm1hbCBBcnJheSwgYSBzYW1lLXJlYWxtIEFycmF5XG5cdFx0Ly8gaWYgKElzQ29uc3RydWN0b3IoQykpIHtcblx0XHQvLyBcdGlmIEMgaXMgYW5vdGhlciByZWFsbSdzIEFycmF5LCBDID0gdW5kZWZpbmVkXG5cdFx0Ly8gXHRPYmplY3QuZ2V0UHJvdG90eXBlT2YoT2JqZWN0LmdldFByb3RvdHlwZU9mKE9iamVjdC5nZXRQcm90b3R5cGVPZihBcnJheSkpKSA9PT0gbnVsbCA/XG5cdFx0Ly8gfVxuXHRcdGlmICgkc3BlY2llcyAmJiBUeXBlKEMpID09PSAnT2JqZWN0Jykge1xuXHRcdFx0QyA9IEdldChDLCAkc3BlY2llcyk7XG5cdFx0XHRpZiAoQyA9PT0gbnVsbCkge1xuXHRcdFx0XHRDID0gdm9pZCAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRpZiAodHlwZW9mIEMgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuICRBcnJheShsZW4pO1xuXHR9XG5cdGlmICghSXNDb25zdHJ1Y3RvcihDKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdDIG11c3QgYmUgYSBjb25zdHJ1Y3RvcicpO1xuXHR9XG5cdHJldHVybiBuZXcgQyhsZW4pOyAvLyBDb25zdHJ1Y3QoQywgbGVuKTtcbn07XG5cbiIsIi8qIVxuICogaHR0cHM6Ly9naXRodWIuY29tL3BhdWxtaWxsci9lczYtc2hpbVxuICogQGxpY2Vuc2UgZXM2LXNoaW0gQ29weXJpZ2h0IDIwMTMtMjAxNiBieSBQYXVsIE1pbGxlciAoaHR0cDovL3BhdWxtaWxsci5jb20pXG4gKiAgIGFuZCBjb250cmlidXRvcnMsICBNSVQgTGljZW5zZVxuICogZXM2LXNoaW06IHYwLjM1LjRcbiAqIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGF1bG1pbGxyL2VzNi1zaGltL2Jsb2IvMC4zNS4zL0xJQ0VOU0VcbiAqIERldGFpbHMgYW5kIGRvY3VtZW50YXRpb246XG4gKiBodHRwczovL2dpdGh1Yi5jb20vcGF1bG1pbGxyL2VzNi1zaGltL1xuICovXG5cbi8vIFVNRCAoVW5pdmVyc2FsIE1vZHVsZSBEZWZpbml0aW9uKVxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91bWRqcy91bWQvYmxvYi9tYXN0ZXIvcmV0dXJuRXhwb3J0cy5qc1xuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gIC8qZ2xvYmFsIGRlZmluZSwgbW9kdWxlLCBleHBvcnRzICovXG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgZGVmaW5lKGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIC8vIE5vZGUuIERvZXMgbm90IHdvcmsgd2l0aCBzdHJpY3QgQ29tbW9uSlMsIGJ1dFxuICAgIC8vIG9ubHkgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgdGhhdCBzdXBwb3J0IG1vZHVsZS5leHBvcnRzLFxuICAgIC8vIGxpa2UgTm9kZS5cbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBCcm93c2VyIGdsb2JhbHMgKHJvb3QgaXMgd2luZG93KVxuICAgIHJvb3QucmV0dXJuRXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfVxufSh0aGlzLCBmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgX2FwcGx5ID0gRnVuY3Rpb24uY2FsbC5iaW5kKEZ1bmN0aW9uLmFwcGx5KTtcbiAgdmFyIF9jYWxsID0gRnVuY3Rpb24uY2FsbC5iaW5kKEZ1bmN0aW9uLmNhbGwpO1xuICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXM7XG5cbiAgdmFyIG5vdCA9IGZ1bmN0aW9uIG5vdFRodW5rZXIoZnVuYykge1xuICAgIHJldHVybiBmdW5jdGlvbiBub3RUaHVuaygpIHtcbiAgICAgIHJldHVybiAhX2FwcGx5KGZ1bmMsIHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfTtcbiAgdmFyIHRocm93c0Vycm9yID0gZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICB0cnkge1xuICAgICAgZnVuYygpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfTtcbiAgdmFyIHZhbHVlT3JGYWxzZUlmVGhyb3dzID0gZnVuY3Rpb24gdmFsdWVPckZhbHNlSWZUaHJvd3MoZnVuYykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuYygpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQ2FsbGFibGVXaXRob3V0TmV3ID0gbm90KHRocm93c0Vycm9yKTtcbiAgdmFyIGFyZVByb3BlcnR5RGVzY3JpcHRvcnNTdXBwb3J0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gaWYgT2JqZWN0LmRlZmluZVByb3BlcnR5IGV4aXN0cyBidXQgdGhyb3dzLCBpdCdzIElFIDhcbiAgICByZXR1cm4gIXRocm93c0Vycm9yKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICd4JywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgfSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBnZXR0ZXItcmV0dXJuXG4gICAgfSk7XG4gIH07XG4gIHZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gISFPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgYXJlUHJvcGVydHlEZXNjcmlwdG9yc1N1cHBvcnRlZCgpO1xuICB2YXIgZnVuY3Rpb25zSGF2ZU5hbWVzID0gKGZ1bmN0aW9uIGZvbygpIHt9KS5uYW1lID09PSAnZm9vJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1leHRyYS1wYXJlbnNcblxuICB2YXIgX2ZvckVhY2ggPSBGdW5jdGlvbi5jYWxsLmJpbmQoQXJyYXkucHJvdG90eXBlLmZvckVhY2gpO1xuICB2YXIgX3JlZHVjZSA9IEZ1bmN0aW9uLmNhbGwuYmluZChBcnJheS5wcm90b3R5cGUucmVkdWNlKTtcbiAgdmFyIF9maWx0ZXIgPSBGdW5jdGlvbi5jYWxsLmJpbmQoQXJyYXkucHJvdG90eXBlLmZpbHRlcik7XG4gIHZhciBfc29tZSA9IEZ1bmN0aW9uLmNhbGwuYmluZChBcnJheS5wcm90b3R5cGUuc29tZSk7XG5cbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgdmFsdWUsIGZvcmNlKSB7XG4gICAgaWYgKCFmb3JjZSAmJiBuYW1lIGluIG9iamVjdCkgeyByZXR1cm47IH1cbiAgICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgbmFtZSwge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqZWN0W25hbWVdID0gdmFsdWU7XG4gICAgfVxuICB9O1xuXG4gIC8vIERlZmluZSBjb25maWd1cmFibGUsIHdyaXRhYmxlIGFuZCBub24tZW51bWVyYWJsZSBwcm9wc1xuICAvLyBpZiB0aGV5IGRvbuKAmXQgZXhpc3QuXG4gIHZhciBkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9iamVjdCwgbWFwLCBmb3JjZU92ZXJyaWRlKSB7XG4gICAgX2ZvckVhY2goa2V5cyhtYXApLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIG1ldGhvZCA9IG1hcFtuYW1lXTtcbiAgICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwgbmFtZSwgbWV0aG9kLCAhIWZvcmNlT3ZlcnJpZGUpO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBfdG9TdHJpbmcgPSBGdW5jdGlvbi5jYWxsLmJpbmQoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyk7XG4gIHZhciBpc0NhbGxhYmxlID0gdHlwZW9mIC9hYmMvID09PSAnZnVuY3Rpb24nID8gZnVuY3Rpb24gSXNDYWxsYWJsZVNsb3coeCkge1xuICAgIC8vIFNvbWUgb2xkIGJyb3dzZXJzIChJRSwgRkYpIHNheSB0aGF0IHR5cGVvZiAvYWJjLyA9PT0gJ2Z1bmN0aW9uJ1xuICAgIHJldHVybiB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJyAmJiBfdG9TdHJpbmcoeCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG4gIH0gOiBmdW5jdGlvbiBJc0NhbGxhYmxlRmFzdCh4KSB7IHJldHVybiB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJzsgfTtcblxuICB2YXIgVmFsdWUgPSB7XG4gICAgZ2V0dGVyOiBmdW5jdGlvbiAob2JqZWN0LCBuYW1lLCBnZXR0ZXIpIHtcbiAgICAgIGlmICghc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdnZXR0ZXJzIHJlcXVpcmUgdHJ1ZSBFUzUgc3VwcG9ydCcpO1xuICAgICAgfVxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgbmFtZSwge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBnZXQ6IGdldHRlclxuICAgICAgfSk7XG4gICAgfSxcbiAgICBwcm94eTogZnVuY3Rpb24gKG9yaWdpbmFsT2JqZWN0LCBrZXksIHRhcmdldE9iamVjdCkge1xuICAgICAgaWYgKCFzdXBwb3J0c0Rlc2NyaXB0b3JzKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2dldHRlcnMgcmVxdWlyZSB0cnVlIEVTNSBzdXBwb3J0Jyk7XG4gICAgICB9XG4gICAgICB2YXIgb3JpZ2luYWxEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvcmlnaW5hbE9iamVjdCwga2V5KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXRPYmplY3QsIGtleSwge1xuICAgICAgICBjb25maWd1cmFibGU6IG9yaWdpbmFsRGVzY3JpcHRvci5jb25maWd1cmFibGUsXG4gICAgICAgIGVudW1lcmFibGU6IG9yaWdpbmFsRGVzY3JpcHRvci5lbnVtZXJhYmxlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldEtleSgpIHsgcmV0dXJuIG9yaWdpbmFsT2JqZWN0W2tleV07IH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0S2V5KHZhbHVlKSB7IG9yaWdpbmFsT2JqZWN0W2tleV0gPSB2YWx1ZTsgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICByZWRlZmluZTogZnVuY3Rpb24gKG9iamVjdCwgcHJvcGVydHksIG5ld1ZhbHVlKSB7XG4gICAgICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7XG4gICAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIGRlc2NyaXB0b3IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0W3Byb3BlcnR5XSA9IG5ld1ZhbHVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVmaW5lQnlEZXNjcmlwdG9yOiBmdW5jdGlvbiAob2JqZWN0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvcikge1xuICAgICAgaWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIGRlc2NyaXB0b3IpO1xuICAgICAgfSBlbHNlIGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgb2JqZWN0W3Byb3BlcnR5XSA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBwcmVzZXJ2ZVRvU3RyaW5nOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICAgIGlmIChzb3VyY2UgJiYgaXNDYWxsYWJsZShzb3VyY2UudG9TdHJpbmcpKSB7XG4gICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwgJ3RvU3RyaW5nJywgc291cmNlLnRvU3RyaW5nLmJpbmQoc291cmNlKSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIFNpbXBsZSBzaGltIGZvciBPYmplY3QuY3JlYXRlIG9uIEVTMyBicm93c2Vyc1xuICAvLyAodW5saWtlIHJlYWwgc2hpbSwgbm8gYXR0ZW1wdCB0byBzdXBwb3J0IGBwcm90b3R5cGUgPT09IG51bGxgKVxuICB2YXIgY3JlYXRlID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiAocHJvdG90eXBlLCBwcm9wZXJ0aWVzKSB7XG4gICAgdmFyIFByb3RvdHlwZSA9IGZ1bmN0aW9uIFByb3RvdHlwZSgpIHt9O1xuICAgIFByb3RvdHlwZS5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gICAgdmFyIG9iamVjdCA9IG5ldyBQcm90b3R5cGUoKTtcbiAgICBpZiAodHlwZW9mIHByb3BlcnRpZXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBrZXlzKHByb3BlcnRpZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBWYWx1ZS5kZWZpbmVCeURlc2NyaXB0b3Iob2JqZWN0LCBrZXksIHByb3BlcnRpZXNba2V5XSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfTtcblxuICB2YXIgc3VwcG9ydHNTdWJjbGFzc2luZyA9IGZ1bmN0aW9uIChDLCBmKSB7XG4gICAgaWYgKCFPYmplY3Quc2V0UHJvdG90eXBlT2YpIHsgcmV0dXJuIGZhbHNlOyAvKiBza2lwIHRlc3Qgb24gSUUgPCAxMSAqLyB9XG4gICAgcmV0dXJuIHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBTdWIgPSBmdW5jdGlvbiBTdWJjbGFzcyhhcmcpIHtcbiAgICAgICAgdmFyIG8gPSBuZXcgQyhhcmcpO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YobywgU3ViY2xhc3MucHJvdG90eXBlKTtcbiAgICAgICAgcmV0dXJuIG87XG4gICAgICB9O1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKFN1YiwgQyk7XG4gICAgICBTdWIucHJvdG90eXBlID0gY3JlYXRlKEMucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBTdWIgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZihTdWIpO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnZXRHbG9iYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgLyogZ2xvYmFsIHNlbGYsIHdpbmRvdywgZ2xvYmFsICovXG4gICAgLy8gdGhlIG9ubHkgcmVsaWFibGUgbWVhbnMgdG8gZ2V0IHRoZSBnbG9iYWwgb2JqZWN0IGlzXG4gICAgLy8gYEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKClgXG4gICAgLy8gSG93ZXZlciwgdGhpcyBjYXVzZXMgQ1NQIHZpb2xhdGlvbnMgaW4gQ2hyb21lIGFwcHMuXG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykgeyByZXR1cm4gc2VsZjsgfVxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykgeyByZXR1cm4gd2luZG93OyB9XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7IHJldHVybiBnbG9iYWw7IH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBsb2NhdGUgZ2xvYmFsIG9iamVjdCcpO1xuICB9O1xuXG4gIHZhciBnbG9iYWxzID0gZ2V0R2xvYmFsKCk7XG4gIHZhciBnbG9iYWxJc0Zpbml0ZSA9IGdsb2JhbHMuaXNGaW5pdGU7XG4gIHZhciBfaW5kZXhPZiA9IEZ1bmN0aW9uLmNhbGwuYmluZChTdHJpbmcucHJvdG90eXBlLmluZGV4T2YpO1xuICB2YXIgX2FycmF5SW5kZXhPZkFwcGx5ID0gRnVuY3Rpb24uYXBwbHkuYmluZChBcnJheS5wcm90b3R5cGUuaW5kZXhPZik7XG4gIHZhciBfY29uY2F0ID0gRnVuY3Rpb24uY2FsbC5iaW5kKEFycmF5LnByb3RvdHlwZS5jb25jYXQpO1xuICAvLyB2YXIgX3NvcnQgPSBGdW5jdGlvbi5jYWxsLmJpbmQoQXJyYXkucHJvdG90eXBlLnNvcnQpO1xuICB2YXIgX3N0clNsaWNlID0gRnVuY3Rpb24uY2FsbC5iaW5kKFN0cmluZy5wcm90b3R5cGUuc2xpY2UpO1xuICB2YXIgX3B1c2ggPSBGdW5jdGlvbi5jYWxsLmJpbmQoQXJyYXkucHJvdG90eXBlLnB1c2gpO1xuICB2YXIgX3B1c2hBcHBseSA9IEZ1bmN0aW9uLmFwcGx5LmJpbmQoQXJyYXkucHJvdG90eXBlLnB1c2gpO1xuICB2YXIgX3NoaWZ0ID0gRnVuY3Rpb24uY2FsbC5iaW5kKEFycmF5LnByb3RvdHlwZS5zaGlmdCk7XG4gIHZhciBfbWF4ID0gTWF0aC5tYXg7XG4gIHZhciBfbWluID0gTWF0aC5taW47XG4gIHZhciBfZmxvb3IgPSBNYXRoLmZsb29yO1xuICB2YXIgX2FicyA9IE1hdGguYWJzO1xuICB2YXIgX2V4cCA9IE1hdGguZXhwO1xuICB2YXIgX2xvZyA9IE1hdGgubG9nO1xuICB2YXIgX3NxcnQgPSBNYXRoLnNxcnQ7XG4gIHZhciBfaGFzT3duUHJvcGVydHkgPSBGdW5jdGlvbi5jYWxsLmJpbmQoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSk7XG4gIHZhciBBcnJheUl0ZXJhdG9yOyAvLyBtYWtlIG91ciBpbXBsZW1lbnRhdGlvbiBwcml2YXRlXG4gIHZhciBub29wID0gZnVuY3Rpb24gKCkge307XG5cbiAgdmFyIE9yaWdNYXAgPSBnbG9iYWxzLk1hcDtcbiAgdmFyIG9yaWdNYXBEZWxldGUgPSBPcmlnTWFwICYmIE9yaWdNYXAucHJvdG90eXBlWydkZWxldGUnXTtcbiAgdmFyIG9yaWdNYXBHZXQgPSBPcmlnTWFwICYmIE9yaWdNYXAucHJvdG90eXBlLmdldDtcbiAgdmFyIG9yaWdNYXBIYXMgPSBPcmlnTWFwICYmIE9yaWdNYXAucHJvdG90eXBlLmhhcztcbiAgdmFyIG9yaWdNYXBTZXQgPSBPcmlnTWFwICYmIE9yaWdNYXAucHJvdG90eXBlLnNldDtcblxuICB2YXIgU3ltYm9sID0gZ2xvYmFscy5TeW1ib2wgfHwge307XG4gIHZhciBzeW1ib2xTcGVjaWVzID0gU3ltYm9sLnNwZWNpZXMgfHwgJ0BAc3BlY2llcyc7XG5cbiAgdmFyIG51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XG4gICAgLy8gTmFOICE9PSBOYU4sIGJ1dCB0aGV5IGFyZSBpZGVudGljYWwuXG4gICAgLy8gTmFOcyBhcmUgdGhlIG9ubHkgbm9uLXJlZmxleGl2ZSB2YWx1ZSwgaS5lLiwgaWYgeCAhPT0geCxcbiAgICAvLyB0aGVuIHggaXMgTmFOLlxuICAgIC8vIGlzTmFOIGlzIGJyb2tlbjogaXQgY29udmVydHMgaXRzIGFyZ3VtZW50IHRvIG51bWJlciwgc29cbiAgICAvLyBpc05hTignZm9vJykgPT4gdHJ1ZVxuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG4gIH07XG4gIHZhciBudW1iZXJJc0Zpbml0ZSA9IE51bWJlci5pc0Zpbml0ZSB8fCBmdW5jdGlvbiBpc0Zpbml0ZSh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIGdsb2JhbElzRmluaXRlKHZhbHVlKTtcbiAgfTtcbiAgdmFyIF9zaWduID0gaXNDYWxsYWJsZShNYXRoLnNpZ24pID8gTWF0aC5zaWduIDogZnVuY3Rpb24gc2lnbih2YWx1ZSkge1xuICAgIHZhciBudW1iZXIgPSBOdW1iZXIodmFsdWUpO1xuICAgIGlmIChudW1iZXIgPT09IDApIHsgcmV0dXJuIG51bWJlcjsgfVxuICAgIGlmIChudW1iZXJJc05hTihudW1iZXIpKSB7IHJldHVybiBudW1iZXI7IH1cbiAgICByZXR1cm4gbnVtYmVyIDwgMCA/IC0xIDogMTtcbiAgfTtcbiAgdmFyIF9sb2cxcCA9IGZ1bmN0aW9uIGxvZzFwKHZhbHVlKSB7XG4gICAgdmFyIHggPSBOdW1iZXIodmFsdWUpO1xuICAgIGlmICh4IDwgLTEgfHwgbnVtYmVySXNOYU4oeCkpIHsgcmV0dXJuIE5hTjsgfVxuICAgIGlmICh4ID09PSAwIHx8IHggPT09IEluZmluaXR5KSB7IHJldHVybiB4OyB9XG4gICAgaWYgKHggPT09IC0xKSB7IHJldHVybiAtSW5maW5pdHk7IH1cblxuICAgIHJldHVybiAoMSArIHgpIC0gMSA9PT0gMCA/IHggOiB4ICogKF9sb2coMSArIHgpIC8gKCgxICsgeCkgLSAxKSk7XG4gIH07XG5cbiAgLy8gdGFrZW4gZGlyZWN0bHkgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbGpoYXJiL2lzLWFyZ3VtZW50cy9ibG9iL21hc3Rlci9pbmRleC5qc1xuICAvLyBjYW4gYmUgcmVwbGFjZWQgd2l0aCByZXF1aXJlKCdpcy1hcmd1bWVudHMnKSBpZiB3ZSBldmVyIHVzZSBhIGJ1aWxkIHByb2Nlc3MgaW5zdGVhZFxuICB2YXIgaXNTdGFuZGFyZEFyZ3VtZW50cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG4gICAgcmV0dXJuIF90b1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuICB9O1xuICB2YXIgaXNMZWdhY3lBcmd1bWVudHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJlxuICAgICAgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuICAgICAgdHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ251bWJlcicgJiZcbiAgICAgIHZhbHVlLmxlbmd0aCA+PSAwICYmXG4gICAgICBfdG9TdHJpbmcodmFsdWUpICE9PSAnW29iamVjdCBBcnJheV0nICYmXG4gICAgICBfdG9TdHJpbmcodmFsdWUuY2FsbGVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbiAgfTtcbiAgdmFyIGlzQXJndW1lbnRzID0gaXNTdGFuZGFyZEFyZ3VtZW50cyhhcmd1bWVudHMpID8gaXNTdGFuZGFyZEFyZ3VtZW50cyA6IGlzTGVnYWN5QXJndW1lbnRzO1xuXG4gIHZhciBUeXBlID0ge1xuICAgIHByaW1pdGl2ZTogZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggPT09IG51bGwgfHwgKHR5cGVvZiB4ICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB4ICE9PSAnb2JqZWN0Jyk7IH0sXG4gICAgc3RyaW5nOiBmdW5jdGlvbiAoeCkgeyByZXR1cm4gX3RvU3RyaW5nKHgpID09PSAnW29iamVjdCBTdHJpbmddJzsgfSxcbiAgICByZWdleDogZnVuY3Rpb24gKHgpIHsgcmV0dXJuIF90b1N0cmluZyh4KSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7IH0sXG4gICAgc3ltYm9sOiBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBnbG9iYWxzLlN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgeCA9PT0gJ3N5bWJvbCc7XG4gICAgfVxuICB9O1xuXG4gIHZhciBvdmVycmlkZU5hdGl2ZSA9IGZ1bmN0aW9uIG92ZXJyaWRlTmF0aXZlKG9iamVjdCwgcHJvcGVydHksIHJlcGxhY2VtZW50KSB7XG4gICAgdmFyIG9yaWdpbmFsID0gb2JqZWN0W3Byb3BlcnR5XTtcbiAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIHByb3BlcnR5LCByZXBsYWNlbWVudCwgdHJ1ZSk7XG4gICAgVmFsdWUucHJlc2VydmVUb1N0cmluZyhvYmplY3RbcHJvcGVydHldLCBvcmlnaW5hbCk7XG4gIH07XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllc1xuICB2YXIgaGFzU3ltYm9scyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbFsnZm9yJ10gPT09ICdmdW5jdGlvbicgJiYgVHlwZS5zeW1ib2woU3ltYm9sKCkpO1xuXG4gIC8vIFRoaXMgaXMgYSBwcml2YXRlIG5hbWUgaW4gdGhlIGVzNiBzcGVjLCBlcXVhbCB0byAnW1N5bWJvbC5pdGVyYXRvcl0nXG4gIC8vIHdlJ3JlIGdvaW5nIHRvIHVzZSBhbiBhcmJpdHJhcnkgXy1wcmVmaXhlZCBuYW1lIHRvIG1ha2Ugb3VyIHNoaW1zXG4gIC8vIHdvcmsgcHJvcGVybHkgd2l0aCBlYWNoIG90aGVyLCBldmVuIHRob3VnaCB3ZSBkb24ndCBoYXZlIGZ1bGwgSXRlcmF0b3JcbiAgLy8gc3VwcG9ydC4gIFRoYXQgaXMsIGBBcnJheS5mcm9tKG1hcC5rZXlzKCkpYCB3aWxsIHdvcmssIGJ1dCB3ZSBkb24ndFxuICAvLyBwcmV0ZW5kIHRvIGV4cG9ydCBhIFwicmVhbFwiIEl0ZXJhdG9yIGludGVyZmFjZS5cbiAgdmFyICRpdGVyYXRvciQgPSBUeXBlLnN5bWJvbChTeW1ib2wuaXRlcmF0b3IpID8gU3ltYm9sLml0ZXJhdG9yIDogJ19lczYtc2hpbSBpdGVyYXRvcl8nO1xuICAvLyBGaXJlZm94IHNoaXBzIGEgcGFydGlhbCBpbXBsZW1lbnRhdGlvbiB1c2luZyB0aGUgbmFtZSBAQGl0ZXJhdG9yLlxuICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD05MDcwNzcjYzE0XG4gIC8vIFNvIHVzZSB0aGF0IG5hbWUgaWYgd2UgZGV0ZWN0IGl0LlxuICBpZiAoZ2xvYmFscy5TZXQgJiYgdHlwZW9mIG5ldyBnbG9iYWxzLlNldCgpWydAQGl0ZXJhdG9yJ10gPT09ICdmdW5jdGlvbicpIHtcbiAgICAkaXRlcmF0b3IkID0gJ0BAaXRlcmF0b3InO1xuICB9XG5cbiAgLy8gUmVmbGVjdFxuICBpZiAoIWdsb2JhbHMuUmVmbGVjdCkge1xuICAgIGRlZmluZVByb3BlcnR5KGdsb2JhbHMsICdSZWZsZWN0Jywge30sIHRydWUpO1xuICB9XG4gIHZhciBSZWZsZWN0ID0gZ2xvYmFscy5SZWZsZWN0O1xuXG4gIHZhciAkU3RyaW5nID0gU3RyaW5nO1xuXG4gIC8qIGdsb2JhbCBkb2N1bWVudCAqL1xuICB2YXIgZG9tQWxsID0gKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcgfHwgIWRvY3VtZW50KSA/IG51bGwgOiBkb2N1bWVudC5hbGw7XG4gIHZhciBpc051bGxPclVuZGVmaW5lZCA9IGRvbUFsbCA9PSBudWxsID8gZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoeCkge1xuICAgIHJldHVybiB4ID09IG51bGw7XG4gIH0gOiBmdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZEFuZE5vdERvY3VtZW50QWxsKHgpIHtcbiAgICByZXR1cm4geCA9PSBudWxsICYmIHggIT09IGRvbUFsbDtcbiAgfTtcblxuICB2YXIgRVMgPSB7XG4gICAgLy8gaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWNhbGxcbiAgICBDYWxsOiBmdW5jdGlvbiBDYWxsKEYsIFYpIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiBbXTtcbiAgICAgIGlmICghRVMuSXNDYWxsYWJsZShGKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEYgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2FwcGx5KEYsIFYsIGFyZ3MpO1xuICAgIH0sXG5cbiAgICBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlOiBmdW5jdGlvbiAoeCwgb3B0TWVzc2FnZSkge1xuICAgICAgaWYgKGlzTnVsbE9yVW5kZWZpbmVkKHgpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3Iob3B0TWVzc2FnZSB8fCAnQ2Fubm90IGNhbGwgbWV0aG9kIG9uICcgKyB4KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB4O1xuICAgIH0sXG5cbiAgICAvLyBUaGlzIG1pZ2h0IG1pc3MgdGhlIFwiKG5vbi1zdGFuZGFyZCBleG90aWMgYW5kIGRvZXMgbm90IGltcGxlbWVudFxuICAgIC8vIFtbQ2FsbF1dKVwiIGNhc2UgZnJvbVxuICAgIC8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10eXBlb2Ytb3BlcmF0b3ItcnVudGltZS1zZW1hbnRpY3MtZXZhbHVhdGlvblxuICAgIC8vIGJ1dCB3ZSBjYW4ndCBmaW5kIGFueSBldmlkZW5jZSB0aGVzZSBvYmplY3RzIGV4aXN0IGluIHByYWN0aWNlLlxuICAgIC8vIElmIHdlIGZpbmQgc29tZSBpbiB0aGUgZnV0dXJlLCB5b3UgY291bGQgdGVzdCBgT2JqZWN0KHgpID09PSB4YCxcbiAgICAvLyB3aGljaCBpcyByZWxpYWJsZSBhY2NvcmRpbmcgdG9cbiAgICAvLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9vYmplY3RcbiAgICAvLyBidXQgaXMgbm90IHdlbGwgb3B0aW1pemVkIGJ5IHJ1bnRpbWVzIGFuZCBjcmVhdGVzIGFuIG9iamVjdFxuICAgIC8vIHdoZW5ldmVyIGl0IHJldHVybnMgZmFsc2UsIGFuZCB0aHVzIGlzIHZlcnkgc2xvdy5cbiAgICBUeXBlSXNPYmplY3Q6IGZ1bmN0aW9uICh4KSB7XG4gICAgICBpZiAoeCA9PT0gdm9pZCAwIHx8IHggPT09IG51bGwgfHwgeCA9PT0gdHJ1ZSB8fCB4ID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHggPT09ICdvYmplY3QnIHx8IHggPT09IGRvbUFsbDtcbiAgICB9LFxuXG4gICAgVG9PYmplY3Q6IGZ1bmN0aW9uIChvLCBvcHRNZXNzYWdlKSB7XG4gICAgICByZXR1cm4gT2JqZWN0KEVTLlJlcXVpcmVPYmplY3RDb2VyY2libGUobywgb3B0TWVzc2FnZSkpO1xuICAgIH0sXG5cbiAgICBJc0NhbGxhYmxlOiBpc0NhbGxhYmxlLFxuXG4gICAgSXNDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHgpIHtcbiAgICAgIC8vIFdlIGNhbid0IHRlbGwgY2FsbGFibGVzIGZyb20gY29uc3RydWN0b3JzIGluIEVTNVxuICAgICAgcmV0dXJuIEVTLklzQ2FsbGFibGUoeCk7XG4gICAgfSxcblxuICAgIFRvSW50MzI6IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gRVMuVG9OdW1iZXIoeCkgPj4gMDtcbiAgICB9LFxuXG4gICAgVG9VaW50MzI6IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gRVMuVG9OdW1iZXIoeCkgPj4+IDA7XG4gICAgfSxcblxuICAgIFRvTnVtYmVyOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmIChfdG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBTeW1ib2xdJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBhIFN5bWJvbCB2YWx1ZSB0byBhIG51bWJlcicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuICt2YWx1ZTtcbiAgICB9LFxuXG4gICAgVG9JbnRlZ2VyOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHZhciBudW1iZXIgPSBFUy5Ub051bWJlcih2YWx1ZSk7XG4gICAgICBpZiAobnVtYmVySXNOYU4obnVtYmVyKSkgeyByZXR1cm4gMDsgfVxuICAgICAgaWYgKG51bWJlciA9PT0gMCB8fCAhbnVtYmVySXNGaW5pdGUobnVtYmVyKSkgeyByZXR1cm4gbnVtYmVyOyB9XG4gICAgICByZXR1cm4gKG51bWJlciA+IDAgPyAxIDogLTEpICogX2Zsb29yKF9hYnMobnVtYmVyKSk7XG4gICAgfSxcblxuICAgIFRvTGVuZ3RoOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHZhciBsZW4gPSBFUy5Ub0ludGVnZXIodmFsdWUpO1xuICAgICAgaWYgKGxlbiA8PSAwKSB7IHJldHVybiAwOyB9IC8vIGluY2x1ZGVzIGNvbnZlcnRpbmcgLTAgdG8gKzBcbiAgICAgIGlmIChsZW4gPiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikgeyByZXR1cm4gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7IH1cbiAgICAgIHJldHVybiBsZW47XG4gICAgfSxcblxuICAgIFNhbWVWYWx1ZTogZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIGlmIChhID09PSBiKSB7XG4gICAgICAgIC8vIDAgPT09IC0wLCBidXQgdGhleSBhcmUgbm90IGlkZW50aWNhbC5cbiAgICAgICAgaWYgKGEgPT09IDApIHsgcmV0dXJuIDEgLyBhID09PSAxIC8gYjsgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudW1iZXJJc05hTihhKSAmJiBudW1iZXJJc05hTihiKTtcbiAgICB9LFxuXG4gICAgU2FtZVZhbHVlWmVybzogZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIC8vIHNhbWUgYXMgU2FtZVZhbHVlIGV4Y2VwdCBmb3IgU2FtZVZhbHVlWmVybygrMCwgLTApID09IHRydWVcbiAgICAgIHJldHVybiAoYSA9PT0gYikgfHwgKG51bWJlcklzTmFOKGEpICYmIG51bWJlcklzTmFOKGIpKTtcbiAgICB9LFxuXG4gICAgSXNJdGVyYWJsZTogZnVuY3Rpb24gKG8pIHtcbiAgICAgIHJldHVybiBFUy5UeXBlSXNPYmplY3QobykgJiYgKHR5cGVvZiBvWyRpdGVyYXRvciRdICE9PSAndW5kZWZpbmVkJyB8fCBpc0FyZ3VtZW50cyhvKSk7XG4gICAgfSxcblxuICAgIEdldEl0ZXJhdG9yOiBmdW5jdGlvbiAobykge1xuICAgICAgaWYgKGlzQXJndW1lbnRzKG8pKSB7XG4gICAgICAgIC8vIHNwZWNpYWwgY2FzZSBzdXBwb3J0IGZvciBgYXJndW1lbnRzYFxuICAgICAgICByZXR1cm4gbmV3IEFycmF5SXRlcmF0b3IobywgJ3ZhbHVlJyk7XG4gICAgICB9XG4gICAgICB2YXIgaXRGbiA9IEVTLkdldE1ldGhvZChvLCAkaXRlcmF0b3IkKTtcbiAgICAgIGlmICghRVMuSXNDYWxsYWJsZShpdEZuKSkge1xuICAgICAgICAvLyBCZXR0ZXIgZGlhZ25vc3RpY3MgaWYgaXRGbiBpcyBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWx1ZSBpcyBub3QgYW4gaXRlcmFibGUnKTtcbiAgICAgIH1cbiAgICAgIHZhciBpdCA9IEVTLkNhbGwoaXRGbiwgbyk7XG4gICAgICBpZiAoIUVTLlR5cGVJc09iamVjdChpdCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYmFkIGl0ZXJhdG9yJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXQ7XG4gICAgfSxcblxuICAgIEdldE1ldGhvZDogZnVuY3Rpb24gKG8sIHApIHtcbiAgICAgIHZhciBmdW5jID0gRVMuVG9PYmplY3QobylbcF07XG4gICAgICBpZiAoaXNOdWxsT3JVbmRlZmluZWQoZnVuYykpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIGlmICghRVMuSXNDYWxsYWJsZShmdW5jKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdNZXRob2Qgbm90IGNhbGxhYmxlOiAnICsgcCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuYztcbiAgICB9LFxuXG4gICAgSXRlcmF0b3JDb21wbGV0ZTogZnVuY3Rpb24gKGl0ZXJSZXN1bHQpIHtcbiAgICAgIHJldHVybiAhIWl0ZXJSZXN1bHQuZG9uZTtcbiAgICB9LFxuXG4gICAgSXRlcmF0b3JDbG9zZTogZnVuY3Rpb24gKGl0ZXJhdG9yLCBjb21wbGV0aW9uSXNUaHJvdykge1xuICAgICAgdmFyIHJldHVybk1ldGhvZCA9IEVTLkdldE1ldGhvZChpdGVyYXRvciwgJ3JldHVybicpO1xuICAgICAgaWYgKHJldHVybk1ldGhvZCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBpbm5lclJlc3VsdCwgaW5uZXJFeGNlcHRpb247XG4gICAgICB0cnkge1xuICAgICAgICBpbm5lclJlc3VsdCA9IEVTLkNhbGwocmV0dXJuTWV0aG9kLCBpdGVyYXRvcik7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlubmVyRXhjZXB0aW9uID0gZTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wbGV0aW9uSXNUaHJvdykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaW5uZXJFeGNlcHRpb24pIHtcbiAgICAgICAgdGhyb3cgaW5uZXJFeGNlcHRpb247XG4gICAgICB9XG4gICAgICBpZiAoIUVTLlR5cGVJc09iamVjdChpbm5lclJlc3VsdCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkl0ZXJhdG9yJ3MgcmV0dXJuIG1ldGhvZCByZXR1cm5lZCBhIG5vbi1vYmplY3QuXCIpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBJdGVyYXRvck5leHQ6IGZ1bmN0aW9uIChpdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gaXQubmV4dChhcmd1bWVudHNbMV0pIDogaXQubmV4dCgpO1xuICAgICAgaWYgKCFFUy5UeXBlSXNPYmplY3QocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdiYWQgaXRlcmF0b3InKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIEl0ZXJhdG9yU3RlcDogZnVuY3Rpb24gKGl0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gRVMuSXRlcmF0b3JOZXh0KGl0KTtcbiAgICAgIHZhciBkb25lID0gRVMuSXRlcmF0b3JDb21wbGV0ZShyZXN1bHQpO1xuICAgICAgcmV0dXJuIGRvbmUgPyBmYWxzZSA6IHJlc3VsdDtcbiAgICB9LFxuXG4gICAgQ29uc3RydWN0OiBmdW5jdGlvbiAoQywgYXJncywgbmV3VGFyZ2V0LCBpc0VTNmludGVybmFsKSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gdHlwZW9mIG5ld1RhcmdldCA9PT0gJ3VuZGVmaW5lZCcgPyBDIDogbmV3VGFyZ2V0O1xuXG4gICAgICBpZiAoIWlzRVM2aW50ZXJuYWwgJiYgUmVmbGVjdC5jb25zdHJ1Y3QpIHtcbiAgICAgICAgLy8gVHJ5IHRvIHVzZSBSZWZsZWN0LmNvbnN0cnVjdCBpZiBhdmFpbGFibGVcbiAgICAgICAgcmV0dXJuIFJlZmxlY3QuY29uc3RydWN0KEMsIGFyZ3MsIHRhcmdldCk7XG4gICAgICB9XG4gICAgICAvLyBPSywgd2UgaGF2ZSB0byBmYWtlIGl0LiAgVGhpcyB3aWxsIG9ubHkgd29yayBpZiB0aGVcbiAgICAgIC8vIEMuW1tDb25zdHJ1Y3RvcktpbmRdXSA9PSBcImJhc2VcIiAtLSBidXQgdGhhdCdzIHRoZSBvbmx5XG4gICAgICAvLyBraW5kIHdlIGNhbiBtYWtlIGluIEVTNSBjb2RlIGFueXdheS5cblxuICAgICAgLy8gT3JkaW5hcnlDcmVhdGVGcm9tQ29uc3RydWN0b3IodGFyZ2V0LCBcIiVPYmplY3RQcm90b3R5cGUlXCIpXG4gICAgICB2YXIgcHJvdG8gPSB0YXJnZXQucHJvdG90eXBlO1xuICAgICAgaWYgKCFFUy5UeXBlSXNPYmplY3QocHJvdG8pKSB7XG4gICAgICAgIHByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgICAgIH1cbiAgICAgIHZhciBvYmogPSBjcmVhdGUocHJvdG8pO1xuICAgICAgLy8gQ2FsbCB0aGUgY29uc3RydWN0b3IuXG4gICAgICB2YXIgcmVzdWx0ID0gRVMuQ2FsbChDLCBvYmosIGFyZ3MpO1xuICAgICAgcmV0dXJuIEVTLlR5cGVJc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogb2JqO1xuICAgIH0sXG5cbiAgICBTcGVjaWVzQ29uc3RydWN0b3I6IGZ1bmN0aW9uIChPLCBkZWZhdWx0Q29uc3RydWN0b3IpIHtcbiAgICAgIHZhciBDID0gTy5jb25zdHJ1Y3RvcjtcbiAgICAgIGlmIChDID09PSB2b2lkIDApIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRDb25zdHJ1Y3RvcjtcbiAgICAgIH1cbiAgICAgIGlmICghRVMuVHlwZUlzT2JqZWN0KEMpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBjb25zdHJ1Y3RvcicpO1xuICAgICAgfVxuICAgICAgdmFyIFMgPSBDW3N5bWJvbFNwZWNpZXNdO1xuICAgICAgaWYgKGlzTnVsbE9yVW5kZWZpbmVkKFMpKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0Q29uc3RydWN0b3I7XG4gICAgICB9XG4gICAgICBpZiAoIUVTLklzQ29uc3RydWN0b3IoUykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQmFkIEBAc3BlY2llcycpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFM7XG4gICAgfSxcblxuICAgIENyZWF0ZUhUTUw6IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgICAgdmFyIFMgPSBFUy5Ub1N0cmluZyhzdHJpbmcpO1xuICAgICAgdmFyIHAxID0gJzwnICsgdGFnO1xuICAgICAgaWYgKGF0dHJpYnV0ZSAhPT0gJycpIHtcbiAgICAgICAgdmFyIFYgPSBFUy5Ub1N0cmluZyh2YWx1ZSk7XG4gICAgICAgIHZhciBlc2NhcGVkViA9IFYucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xuICAgICAgICBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIGVzY2FwZWRWICsgJ1wiJztcbiAgICAgIH1cbiAgICAgIHZhciBwMiA9IHAxICsgJz4nO1xuICAgICAgdmFyIHAzID0gcDIgKyBTO1xuICAgICAgcmV0dXJuIHAzICsgJzwvJyArIHRhZyArICc+JztcbiAgICB9LFxuXG4gICAgSXNSZWdFeHA6IGZ1bmN0aW9uIElzUmVnRXhwKGFyZ3VtZW50KSB7XG4gICAgICBpZiAoIUVTLlR5cGVJc09iamVjdChhcmd1bWVudCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGlzUmVnRXhwID0gYXJndW1lbnRbU3ltYm9sLm1hdGNoXTtcbiAgICAgIGlmICh0eXBlb2YgaXNSZWdFeHAgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiAhIWlzUmVnRXhwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFR5cGUucmVnZXgoYXJndW1lbnQpO1xuICAgIH0sXG5cbiAgICBUb1N0cmluZzogZnVuY3Rpb24gVG9TdHJpbmcoc3RyaW5nKSB7XG4gICAgICByZXR1cm4gJFN0cmluZyhzdHJpbmcpO1xuICAgIH1cbiAgfTtcblxuICAvLyBXZWxsLWtub3duIFN5bWJvbCBzaGltc1xuICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycyAmJiBoYXNTeW1ib2xzKSB7XG4gICAgdmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IGZ1bmN0aW9uIGRlZmluZVdlbGxLbm93blN5bWJvbChuYW1lKSB7XG4gICAgICBpZiAoVHlwZS5zeW1ib2woU3ltYm9sW25hbWVdKSkge1xuICAgICAgICByZXR1cm4gU3ltYm9sW25hbWVdO1xuICAgICAgfVxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllc1xuICAgICAgdmFyIHN5bSA9IFN5bWJvbFsnZm9yJ10oJ1N5bWJvbC4nICsgbmFtZSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3ltYm9sLCBuYW1lLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBzeW1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHN5bTtcbiAgICB9O1xuICAgIGlmICghVHlwZS5zeW1ib2woU3ltYm9sLnNlYXJjaCkpIHtcbiAgICAgIHZhciBzeW1ib2xTZWFyY2ggPSBkZWZpbmVXZWxsS25vd25TeW1ib2woJ3NlYXJjaCcpO1xuICAgICAgdmFyIG9yaWdpbmFsU2VhcmNoID0gU3RyaW5nLnByb3RvdHlwZS5zZWFyY2g7XG4gICAgICBkZWZpbmVQcm9wZXJ0eShSZWdFeHAucHJvdG90eXBlLCBzeW1ib2xTZWFyY2gsIGZ1bmN0aW9uIHNlYXJjaChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIEVTLkNhbGwob3JpZ2luYWxTZWFyY2gsIHN0cmluZywgW3RoaXNdKTtcbiAgICAgIH0pO1xuICAgICAgdmFyIHNlYXJjaFNoaW0gPSBmdW5jdGlvbiBzZWFyY2gocmVnZXhwKSB7XG4gICAgICAgIHZhciBPID0gRVMuUmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgICAgaWYgKCFpc051bGxPclVuZGVmaW5lZChyZWdleHApKSB7XG4gICAgICAgICAgdmFyIHNlYXJjaGVyID0gRVMuR2V0TWV0aG9kKHJlZ2V4cCwgc3ltYm9sU2VhcmNoKTtcbiAgICAgICAgICBpZiAodHlwZW9mIHNlYXJjaGVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIEVTLkNhbGwoc2VhcmNoZXIsIHJlZ2V4cCwgW09dKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEVTLkNhbGwob3JpZ2luYWxTZWFyY2gsIE8sIFtFUy5Ub1N0cmluZyhyZWdleHApXSk7XG4gICAgICB9O1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoU3RyaW5nLnByb3RvdHlwZSwgJ3NlYXJjaCcsIHNlYXJjaFNoaW0pO1xuICAgIH1cbiAgICBpZiAoIVR5cGUuc3ltYm9sKFN5bWJvbC5yZXBsYWNlKSkge1xuICAgICAgdmFyIHN5bWJvbFJlcGxhY2UgPSBkZWZpbmVXZWxsS25vd25TeW1ib2woJ3JlcGxhY2UnKTtcbiAgICAgIHZhciBvcmlnaW5hbFJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG4gICAgICBkZWZpbmVQcm9wZXJ0eShSZWdFeHAucHJvdG90eXBlLCBzeW1ib2xSZXBsYWNlLCBmdW5jdGlvbiByZXBsYWNlKHN0cmluZywgcmVwbGFjZVZhbHVlKSB7XG4gICAgICAgIHJldHVybiBFUy5DYWxsKG9yaWdpbmFsUmVwbGFjZSwgc3RyaW5nLCBbdGhpcywgcmVwbGFjZVZhbHVlXSk7XG4gICAgICB9KTtcbiAgICAgIHZhciByZXBsYWNlU2hpbSA9IGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgICB2YXIgTyA9IEVTLlJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICAgIGlmICghaXNOdWxsT3JVbmRlZmluZWQoc2VhcmNoVmFsdWUpKSB7XG4gICAgICAgICAgdmFyIHJlcGxhY2VyID0gRVMuR2V0TWV0aG9kKHNlYXJjaFZhbHVlLCBzeW1ib2xSZXBsYWNlKTtcbiAgICAgICAgICBpZiAodHlwZW9mIHJlcGxhY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIEVTLkNhbGwocmVwbGFjZXIsIHNlYXJjaFZhbHVlLCBbTywgcmVwbGFjZVZhbHVlXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBFUy5DYWxsKG9yaWdpbmFsUmVwbGFjZSwgTywgW0VTLlRvU3RyaW5nKHNlYXJjaFZhbHVlKSwgcmVwbGFjZVZhbHVlXSk7XG4gICAgICB9O1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoU3RyaW5nLnByb3RvdHlwZSwgJ3JlcGxhY2UnLCByZXBsYWNlU2hpbSk7XG4gICAgfVxuICAgIGlmICghVHlwZS5zeW1ib2woU3ltYm9sLnNwbGl0KSkge1xuICAgICAgdmFyIHN5bWJvbFNwbGl0ID0gZGVmaW5lV2VsbEtub3duU3ltYm9sKCdzcGxpdCcpO1xuICAgICAgdmFyIG9yaWdpbmFsU3BsaXQgPSBTdHJpbmcucHJvdG90eXBlLnNwbGl0O1xuICAgICAgZGVmaW5lUHJvcGVydHkoUmVnRXhwLnByb3RvdHlwZSwgc3ltYm9sU3BsaXQsIGZ1bmN0aW9uIHNwbGl0KHN0cmluZywgbGltaXQpIHtcbiAgICAgICAgcmV0dXJuIEVTLkNhbGwob3JpZ2luYWxTcGxpdCwgc3RyaW5nLCBbdGhpcywgbGltaXRdKTtcbiAgICAgIH0pO1xuICAgICAgdmFyIHNwbGl0U2hpbSA9IGZ1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgICAgdmFyIE8gPSBFUy5SZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKHNlcGFyYXRvcikpIHtcbiAgICAgICAgICB2YXIgc3BsaXR0ZXIgPSBFUy5HZXRNZXRob2Qoc2VwYXJhdG9yLCBzeW1ib2xTcGxpdCk7XG4gICAgICAgICAgaWYgKHR5cGVvZiBzcGxpdHRlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBFUy5DYWxsKHNwbGl0dGVyLCBzZXBhcmF0b3IsIFtPLCBsaW1pdF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRVMuQ2FsbChvcmlnaW5hbFNwbGl0LCBPLCBbRVMuVG9TdHJpbmcoc2VwYXJhdG9yKSwgbGltaXRdKTtcbiAgICAgIH07XG4gICAgICBvdmVycmlkZU5hdGl2ZShTdHJpbmcucHJvdG90eXBlLCAnc3BsaXQnLCBzcGxpdFNoaW0pO1xuICAgIH1cbiAgICB2YXIgc3ltYm9sTWF0Y2hFeGlzdHMgPSBUeXBlLnN5bWJvbChTeW1ib2wubWF0Y2gpO1xuICAgIHZhciBzdHJpbmdNYXRjaElnbm9yZXNTeW1ib2xNYXRjaCA9IHN5bWJvbE1hdGNoRXhpc3RzICYmIChmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBGaXJlZm94IDQxLCB0aHJvdWdoIE5pZ2h0bHkgNDUgaGFzIFN5bWJvbC5tYXRjaCwgYnV0IFN0cmluZyNtYXRjaCBpZ25vcmVzIGl0LlxuICAgICAgLy8gRmlyZWZveCA0MCBhbmQgYmVsb3cgaGF2ZSBTeW1ib2wubWF0Y2ggYnV0IFN0cmluZyNtYXRjaCB3b3JrcyBmaW5lLlxuICAgICAgdmFyIG8gPSB7fTtcbiAgICAgIG9bU3ltYm9sLm1hdGNoXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyOyB9O1xuICAgICAgcmV0dXJuICdhJy5tYXRjaChvKSAhPT0gNDI7XG4gICAgfSgpKTtcbiAgICBpZiAoIXN5bWJvbE1hdGNoRXhpc3RzIHx8IHN0cmluZ01hdGNoSWdub3Jlc1N5bWJvbE1hdGNoKSB7XG4gICAgICB2YXIgc3ltYm9sTWF0Y2ggPSBkZWZpbmVXZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG5cbiAgICAgIHZhciBvcmlnaW5hbE1hdGNoID0gU3RyaW5nLnByb3RvdHlwZS5tYXRjaDtcbiAgICAgIGRlZmluZVByb3BlcnR5KFJlZ0V4cC5wcm90b3R5cGUsIHN5bWJvbE1hdGNoLCBmdW5jdGlvbiBtYXRjaChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIEVTLkNhbGwob3JpZ2luYWxNYXRjaCwgc3RyaW5nLCBbdGhpc10pO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBtYXRjaFNoaW0gPSBmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAgICAgdmFyIE8gPSBFUy5SZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKHJlZ2V4cCkpIHtcbiAgICAgICAgICB2YXIgbWF0Y2hlciA9IEVTLkdldE1ldGhvZChyZWdleHAsIHN5bWJvbE1hdGNoKTtcbiAgICAgICAgICBpZiAodHlwZW9mIG1hdGNoZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gRVMuQ2FsbChtYXRjaGVyLCByZWdleHAsIFtPXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBFUy5DYWxsKG9yaWdpbmFsTWF0Y2gsIE8sIFtFUy5Ub1N0cmluZyhyZWdleHApXSk7XG4gICAgICB9O1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoU3RyaW5nLnByb3RvdHlwZSwgJ21hdGNoJywgbWF0Y2hTaGltKTtcbiAgICB9XG4gIH1cblxuICB2YXIgd3JhcENvbnN0cnVjdG9yID0gZnVuY3Rpb24gd3JhcENvbnN0cnVjdG9yKG9yaWdpbmFsLCByZXBsYWNlbWVudCwga2V5c1RvU2tpcCkge1xuICAgIFZhbHVlLnByZXNlcnZlVG9TdHJpbmcocmVwbGFjZW1lbnQsIG9yaWdpbmFsKTtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICAvLyBzZXRzIHVwIHByb3BlciBwcm90b3R5cGUgY2hhaW4gd2hlcmUgcG9zc2libGVcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihvcmlnaW5hbCwgcmVwbGFjZW1lbnQpO1xuICAgIH1cbiAgICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuICAgICAgX2ZvckVhY2goT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob3JpZ2luYWwpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChrZXkgaW4gbm9vcCB8fCBrZXlzVG9Ta2lwW2tleV0pIHsgcmV0dXJuOyB9XG4gICAgICAgIFZhbHVlLnByb3h5KG9yaWdpbmFsLCBrZXksIHJlcGxhY2VtZW50KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBfZm9yRWFjaChPYmplY3Qua2V5cyhvcmlnaW5hbCksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKGtleSBpbiBub29wIHx8IGtleXNUb1NraXBba2V5XSkgeyByZXR1cm47IH1cbiAgICAgICAgcmVwbGFjZW1lbnRba2V5XSA9IG9yaWdpbmFsW2tleV07XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmVwbGFjZW1lbnQucHJvdG90eXBlID0gb3JpZ2luYWwucHJvdG90eXBlO1xuICAgIFZhbHVlLnJlZGVmaW5lKG9yaWdpbmFsLnByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgcmVwbGFjZW1lbnQpO1xuICB9O1xuXG4gIHZhciBkZWZhdWx0U3BlY2llc0dldHRlciA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG4gIHZhciBhZGREZWZhdWx0U3BlY2llcyA9IGZ1bmN0aW9uIChDKSB7XG4gICAgaWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMgJiYgIV9oYXNPd25Qcm9wZXJ0eShDLCBzeW1ib2xTcGVjaWVzKSkge1xuICAgICAgVmFsdWUuZ2V0dGVyKEMsIHN5bWJvbFNwZWNpZXMsIGRlZmF1bHRTcGVjaWVzR2V0dGVyKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGFkZEl0ZXJhdG9yID0gZnVuY3Rpb24gKHByb3RvdHlwZSwgaW1wbCkge1xuICAgIHZhciBpbXBsZW1lbnRhdGlvbiA9IGltcGwgfHwgZnVuY3Rpb24gaXRlcmF0b3IoKSB7IHJldHVybiB0aGlzOyB9O1xuICAgIGRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgJGl0ZXJhdG9yJCwgaW1wbGVtZW50YXRpb24pO1xuICAgIGlmICghcHJvdG90eXBlWyRpdGVyYXRvciRdICYmIFR5cGUuc3ltYm9sKCRpdGVyYXRvciQpKSB7XG4gICAgICAvLyBpbXBsZW1lbnRhdGlvbnMgYXJlIGJ1Z2d5IHdoZW4gJGl0ZXJhdG9yJCBpcyBhIFN5bWJvbFxuICAgICAgcHJvdG90eXBlWyRpdGVyYXRvciRdID0gaW1wbGVtZW50YXRpb247XG4gICAgfVxuICB9O1xuXG4gIHZhciBjcmVhdGVEYXRhUHJvcGVydHkgPSBmdW5jdGlvbiBjcmVhdGVEYXRhUHJvcGVydHkob2JqZWN0LCBuYW1lLCB2YWx1ZSkge1xuICAgIGlmIChzdXBwb3J0c0Rlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBuYW1lLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9iamVjdFtuYW1lXSA9IHZhbHVlO1xuICAgIH1cbiAgfTtcbiAgdmFyIGNyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3cgPSBmdW5jdGlvbiBjcmVhdGVEYXRhUHJvcGVydHlPclRocm93KG9iamVjdCwgbmFtZSwgdmFsdWUpIHtcbiAgICBjcmVhdGVEYXRhUHJvcGVydHkob2JqZWN0LCBuYW1lLCB2YWx1ZSk7XG4gICAgaWYgKCFFUy5TYW1lVmFsdWUob2JqZWN0W25hbWVdLCB2YWx1ZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Byb3BlcnR5IGlzIG5vbmNvbmZpZ3VyYWJsZScpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgZW11bGF0ZUVTNmNvbnN0cnVjdCA9IGZ1bmN0aW9uIChvLCBkZWZhdWx0TmV3VGFyZ2V0LCBkZWZhdWx0UHJvdG8sIHNsb3RzKSB7XG4gICAgLy8gVGhpcyBpcyBhbiBlczUgYXBwcm94aW1hdGlvbiB0byBlczYgY29uc3RydWN0IHNlbWFudGljcy4gIGluIGVzNixcbiAgICAvLyAnbmV3IEZvbycgaW52b2tlcyBGb28uW1tDb25zdHJ1Y3RdXSB3aGljaCAoZm9yIGFsbW9zdCBhbGwgb2JqZWN0cylcbiAgICAvLyBqdXN0IHNldHMgdGhlIGludGVybmFsIHZhcmlhYmxlIE5ld1RhcmdldCAoaW4gZXM2IHN5bnRheCBgbmV3LnRhcmdldGApXG4gICAgLy8gdG8gRm9vIGFuZCB0aGVuIHJldHVybnMgRm9vKCkuXG5cbiAgICAvLyBNYW55IEVTNiBvYmplY3QgdGhlbiBoYXZlIGNvbnN0cnVjdG9ycyBvZiB0aGUgZm9ybTpcbiAgICAvLyAxLiBJZiBOZXdUYXJnZXQgaXMgdW5kZWZpbmVkLCB0aHJvdyBhIFR5cGVFcnJvciBleGNlcHRpb25cbiAgICAvLyAyLiBMZXQgeHh4IGJ5IE9yZGluYXJ5Q3JlYXRlRnJvbUNvbnN0cnVjdG9yKE5ld1RhcmdldCwgeXl5LCB6enopXG5cbiAgICAvLyBTbyB3ZSdyZSBnb2luZyB0byBlbXVsYXRlIHRob3NlIGZpcnN0IHR3byBzdGVwcy5cbiAgICBpZiAoIUVTLlR5cGVJc09iamVjdChvKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ29uc3RydWN0b3IgcmVxdWlyZXMgYG5ld2A6ICcgKyBkZWZhdWx0TmV3VGFyZ2V0Lm5hbWUpO1xuICAgIH1cbiAgICB2YXIgcHJvdG8gPSBkZWZhdWx0TmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICBpZiAoIUVTLlR5cGVJc09iamVjdChwcm90bykpIHtcbiAgICAgIHByb3RvID0gZGVmYXVsdFByb3RvO1xuICAgIH1cbiAgICB2YXIgb2JqID0gY3JlYXRlKHByb3RvKTtcbiAgICBmb3IgKHZhciBuYW1lIGluIHNsb3RzKSB7XG4gICAgICBpZiAoX2hhc093blByb3BlcnR5KHNsb3RzLCBuYW1lKSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBzbG90c1tuYW1lXTtcbiAgICAgICAgZGVmaW5lUHJvcGVydHkob2JqLCBuYW1lLCB2YWx1ZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gRmlyZWZveCAzMSByZXBvcnRzIHRoaXMgZnVuY3Rpb24ncyBsZW5ndGggYXMgMFxuICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMDYyNDg0XG4gIGlmIChTdHJpbmcuZnJvbUNvZGVQb2ludCAmJiBTdHJpbmcuZnJvbUNvZGVQb2ludC5sZW5ndGggIT09IDEpIHtcbiAgICB2YXIgb3JpZ2luYWxGcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG4gICAgb3ZlcnJpZGVOYXRpdmUoU3RyaW5nLCAnZnJvbUNvZGVQb2ludCcsIGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoY29kZVBvaW50cykge1xuICAgICAgcmV0dXJuIEVTLkNhbGwob3JpZ2luYWxGcm9tQ29kZVBvaW50LCB0aGlzLCBhcmd1bWVudHMpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIFN0cmluZ1NoaW1zID0ge1xuICAgIGZyb21Db2RlUG9pbnQ6IGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoY29kZVBvaW50cykge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgdmFyIG5leHQ7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG5leHQgPSBOdW1iZXIoYXJndW1lbnRzW2ldKTtcbiAgICAgICAgaWYgKCFFUy5TYW1lVmFsdWUobmV4dCwgRVMuVG9JbnRlZ2VyKG5leHQpKSB8fCBuZXh0IDwgMCB8fCBuZXh0ID4gMHgxMEZGRkYpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCBjb2RlIHBvaW50ICcgKyBuZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXh0IDwgMHgxMDAwMCkge1xuICAgICAgICAgIF9wdXNoKHJlc3VsdCwgU3RyaW5nLmZyb21DaGFyQ29kZShuZXh0KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dCAtPSAweDEwMDAwO1xuICAgICAgICAgIF9wdXNoKHJlc3VsdCwgU3RyaW5nLmZyb21DaGFyQ29kZSgobmV4dCA+PiAxMCkgKyAweEQ4MDApKTtcbiAgICAgICAgICBfcHVzaChyZXN1bHQsIFN0cmluZy5mcm9tQ2hhckNvZGUoKG5leHQgJSAweDQwMCkgKyAweERDMDApKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKCcnKTtcbiAgICB9LFxuXG4gICAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpIHtcbiAgICAgIHZhciBjb29rZWQgPSBFUy5Ub09iamVjdChjYWxsU2l0ZSwgJ2JhZCBjYWxsU2l0ZScpO1xuICAgICAgdmFyIHJhd1N0cmluZyA9IEVTLlRvT2JqZWN0KGNvb2tlZC5yYXcsICdiYWQgcmF3IHZhbHVlJyk7XG4gICAgICB2YXIgbGVuID0gcmF3U3RyaW5nLmxlbmd0aDtcbiAgICAgIHZhciBsaXRlcmFsc2VnbWVudHMgPSBFUy5Ub0xlbmd0aChsZW4pO1xuICAgICAgaWYgKGxpdGVyYWxzZWdtZW50cyA8PSAwKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgICAgdmFyIHN0cmluZ0VsZW1lbnRzID0gW107XG4gICAgICB2YXIgbmV4dEluZGV4ID0gMDtcbiAgICAgIHZhciBuZXh0S2V5LCBuZXh0LCBuZXh0U2VnLCBuZXh0U3ViO1xuICAgICAgd2hpbGUgKG5leHRJbmRleCA8IGxpdGVyYWxzZWdtZW50cykge1xuICAgICAgICBuZXh0S2V5ID0gRVMuVG9TdHJpbmcobmV4dEluZGV4KTtcbiAgICAgICAgbmV4dFNlZyA9IEVTLlRvU3RyaW5nKHJhd1N0cmluZ1tuZXh0S2V5XSk7XG4gICAgICAgIF9wdXNoKHN0cmluZ0VsZW1lbnRzLCBuZXh0U2VnKTtcbiAgICAgICAgaWYgKG5leHRJbmRleCArIDEgPj0gbGl0ZXJhbHNlZ21lbnRzKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dCA9IG5leHRJbmRleCArIDEgPCBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzW25leHRJbmRleCArIDFdIDogJyc7XG4gICAgICAgIG5leHRTdWIgPSBFUy5Ub1N0cmluZyhuZXh0KTtcbiAgICAgICAgX3B1c2goc3RyaW5nRWxlbWVudHMsIG5leHRTdWIpO1xuICAgICAgICBuZXh0SW5kZXggKz0gMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmdFbGVtZW50cy5qb2luKCcnKTtcbiAgICB9XG4gIH07XG4gIGlmIChTdHJpbmcucmF3ICYmIFN0cmluZy5yYXcoeyByYXc6IHsgMDogJ3gnLCAxOiAneScsIGxlbmd0aDogMiB9IH0pICE9PSAneHknKSB7XG4gICAgLy8gSUUgMTEgVFAgaGFzIGEgYnJva2VuIFN0cmluZy5yYXcgaW1wbGVtZW50YXRpb25cbiAgICBvdmVycmlkZU5hdGl2ZShTdHJpbmcsICdyYXcnLCBTdHJpbmdTaGltcy5yYXcpO1xuICB9XG4gIGRlZmluZVByb3BlcnRpZXMoU3RyaW5nLCBTdHJpbmdTaGltcyk7XG5cbiAgLy8gRmFzdCByZXBlYXQsIHVzZXMgdGhlIGBFeHBvbmVudGlhdGlvbiBieSBzcXVhcmluZ2AgYWxnb3JpdGhtLlxuICAvLyBQZXJmOiBodHRwOi8vanNwZXJmLmNvbS9zdHJpbmctcmVwZWF0Mi8yXG4gIHZhciBzdHJpbmdSZXBlYXQgPSBmdW5jdGlvbiByZXBlYXQocywgdGltZXMpIHtcbiAgICBpZiAodGltZXMgPCAxKSB7IHJldHVybiAnJzsgfVxuICAgIGlmICh0aW1lcyAlIDIpIHsgcmV0dXJuIHJlcGVhdChzLCB0aW1lcyAtIDEpICsgczsgfVxuICAgIHZhciBoYWxmID0gcmVwZWF0KHMsIHRpbWVzIC8gMik7XG4gICAgcmV0dXJuIGhhbGYgKyBoYWxmO1xuICB9O1xuICB2YXIgc3RyaW5nTWF4TGVuZ3RoID0gSW5maW5pdHk7XG5cbiAgdmFyIFN0cmluZ1Byb3RvdHlwZVNoaW1zID0ge1xuICAgIHJlcGVhdDogZnVuY3Rpb24gcmVwZWF0KHRpbWVzKSB7XG4gICAgICB2YXIgdGhpc1N0ciA9IEVTLlRvU3RyaW5nKEVTLlJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgICAgdmFyIG51bVRpbWVzID0gRVMuVG9JbnRlZ2VyKHRpbWVzKTtcbiAgICAgIGlmIChudW1UaW1lcyA8IDAgfHwgbnVtVGltZXMgPj0gc3RyaW5nTWF4TGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdyZXBlYXQgY291bnQgbXVzdCBiZSBsZXNzIHRoYW4gaW5maW5pdHkgYW5kIG5vdCBvdmVyZmxvdyBtYXhpbXVtIHN0cmluZyBzaXplJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nUmVwZWF0KHRoaXNTdHIsIG51bVRpbWVzKTtcbiAgICB9LFxuXG4gICAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcpIHtcbiAgICAgIHZhciBTID0gRVMuVG9TdHJpbmcoRVMuUmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7XG4gICAgICBpZiAoRVMuSXNSZWdFeHAoc2VhcmNoU3RyaW5nKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBtZXRob2QgXCJzdGFydHNXaXRoXCIgd2l0aCBhIHJlZ2V4Jyk7XG4gICAgICB9XG4gICAgICB2YXIgc2VhcmNoU3RyID0gRVMuVG9TdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICAgIHZhciBwb3NpdGlvbjtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBwb3NpdGlvbiA9IGFyZ3VtZW50c1sxXTtcbiAgICAgIH1cbiAgICAgIHZhciBzdGFydCA9IF9tYXgoRVMuVG9JbnRlZ2VyKHBvc2l0aW9uKSwgMCk7XG4gICAgICByZXR1cm4gX3N0clNsaWNlKFMsIHN0YXJ0LCBzdGFydCArIHNlYXJjaFN0ci5sZW5ndGgpID09PSBzZWFyY2hTdHI7XG4gICAgfSxcblxuICAgIGVuZHNXaXRoOiBmdW5jdGlvbiBlbmRzV2l0aChzZWFyY2hTdHJpbmcpIHtcbiAgICAgIHZhciBTID0gRVMuVG9TdHJpbmcoRVMuUmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7XG4gICAgICBpZiAoRVMuSXNSZWdFeHAoc2VhcmNoU3RyaW5nKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBtZXRob2QgXCJlbmRzV2l0aFwiIHdpdGggYSByZWdleCcpO1xuICAgICAgfVxuICAgICAgdmFyIHNlYXJjaFN0ciA9IEVTLlRvU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgICB2YXIgbGVuID0gUy5sZW5ndGg7XG4gICAgICB2YXIgZW5kUG9zaXRpb247XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZW5kUG9zaXRpb24gPSBhcmd1bWVudHNbMV07XG4gICAgICB9XG4gICAgICB2YXIgcG9zID0gdHlwZW9mIGVuZFBvc2l0aW9uID09PSAndW5kZWZpbmVkJyA/IGxlbiA6IEVTLlRvSW50ZWdlcihlbmRQb3NpdGlvbik7XG4gICAgICB2YXIgZW5kID0gX21pbihfbWF4KHBvcywgMCksIGxlbik7XG4gICAgICByZXR1cm4gX3N0clNsaWNlKFMsIGVuZCAtIHNlYXJjaFN0ci5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaFN0cjtcbiAgICB9LFxuXG4gICAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZykge1xuICAgICAgaWYgKEVTLklzUmVnRXhwKHNlYXJjaFN0cmluZykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJpbmNsdWRlc1wiIGRvZXMgbm90IGFjY2VwdCBhIFJlZ0V4cCcpO1xuICAgICAgfVxuICAgICAgdmFyIHNlYXJjaFN0ciA9IEVTLlRvU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgICB2YXIgcG9zaXRpb247XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgcG9zaXRpb24gPSBhcmd1bWVudHNbMV07XG4gICAgICB9XG4gICAgICAvLyBTb21laG93IHRoaXMgdHJpY2sgbWFrZXMgbWV0aG9kIDEwMCUgY29tcGF0IHdpdGggdGhlIHNwZWMuXG4gICAgICByZXR1cm4gX2luZGV4T2YodGhpcywgc2VhcmNoU3RyLCBwb3NpdGlvbikgIT09IC0xO1xuICAgIH0sXG5cbiAgICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgICB2YXIgdGhpc1N0ciA9IEVTLlRvU3RyaW5nKEVTLlJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgICAgdmFyIHBvc2l0aW9uID0gRVMuVG9JbnRlZ2VyKHBvcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gdGhpc1N0ci5sZW5ndGg7XG4gICAgICBpZiAocG9zaXRpb24gPj0gMCAmJiBwb3NpdGlvbiA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZmlyc3QgPSB0aGlzU3RyLmNoYXJDb2RlQXQocG9zaXRpb24pO1xuICAgICAgICB2YXIgaXNFbmQgPSBwb3NpdGlvbiArIDEgPT09IGxlbmd0aDtcbiAgICAgICAgaWYgKGZpcnN0IDwgMHhEODAwIHx8IGZpcnN0ID4gMHhEQkZGIHx8IGlzRW5kKSB7IHJldHVybiBmaXJzdDsgfVxuICAgICAgICB2YXIgc2Vjb25kID0gdGhpc1N0ci5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSk7XG4gICAgICAgIGlmIChzZWNvbmQgPCAweERDMDAgfHwgc2Vjb25kID4gMHhERkZGKSB7IHJldHVybiBmaXJzdDsgfVxuICAgICAgICByZXR1cm4gKChmaXJzdCAtIDB4RDgwMCkgKiAxMDI0KSArIChzZWNvbmQgLSAweERDMDApICsgMHgxMDAwMDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGlmIChTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzICYmICdhJy5pbmNsdWRlcygnYScsIEluZmluaXR5KSAhPT0gZmFsc2UpIHtcbiAgICBvdmVycmlkZU5hdGl2ZShTdHJpbmcucHJvdG90eXBlLCAnaW5jbHVkZXMnLCBTdHJpbmdQcm90b3R5cGVTaGltcy5pbmNsdWRlcyk7XG4gIH1cblxuICBpZiAoU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoICYmIFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgpIHtcbiAgICB2YXIgc3RhcnRzV2l0aFJlamVjdHNSZWdleCA9IHRocm93c0Vycm9yKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8qIHRocm93cyBpZiBzcGVjLWNvbXBsaWFudCAqL1xuICAgICAgcmV0dXJuICcvYS8nLnN0YXJ0c1dpdGgoL2EvKTtcbiAgICB9KTtcbiAgICB2YXIgc3RhcnRzV2l0aEhhbmRsZXNJbmZpbml0eSA9IHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAnYWJjJy5zdGFydHNXaXRoKCdhJywgSW5maW5pdHkpID09PSBmYWxzZTtcbiAgICB9KTtcbiAgICBpZiAoIXN0YXJ0c1dpdGhSZWplY3RzUmVnZXggfHwgIXN0YXJ0c1dpdGhIYW5kbGVzSW5maW5pdHkpIHtcbiAgICAgIC8vIEZpcmVmb3ggKDwgMzc/KSBhbmQgSUUgMTEgVFAgaGF2ZSBhIG5vbmNvbXBsaWFudCBzdGFydHNXaXRoIGltcGxlbWVudGF0aW9uXG4gICAgICBvdmVycmlkZU5hdGl2ZShTdHJpbmcucHJvdG90eXBlLCAnc3RhcnRzV2l0aCcsIFN0cmluZ1Byb3RvdHlwZVNoaW1zLnN0YXJ0c1dpdGgpO1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoU3RyaW5nLnByb3RvdHlwZSwgJ2VuZHNXaXRoJywgU3RyaW5nUHJvdG90eXBlU2hpbXMuZW5kc1dpdGgpO1xuICAgIH1cbiAgfVxuICBpZiAoaGFzU3ltYm9scykge1xuICAgIHZhciBzdGFydHNXaXRoU3VwcG9ydHNTeW1ib2xNYXRjaCA9IHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciByZSA9IC9hLztcbiAgICAgIHJlW1N5bWJvbC5tYXRjaF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAnL2EvJy5zdGFydHNXaXRoKHJlKTtcbiAgICB9KTtcbiAgICBpZiAoIXN0YXJ0c1dpdGhTdXBwb3J0c1N5bWJvbE1hdGNoKSB7XG4gICAgICBvdmVycmlkZU5hdGl2ZShTdHJpbmcucHJvdG90eXBlLCAnc3RhcnRzV2l0aCcsIFN0cmluZ1Byb3RvdHlwZVNoaW1zLnN0YXJ0c1dpdGgpO1xuICAgIH1cbiAgICB2YXIgZW5kc1dpdGhTdXBwb3J0c1N5bWJvbE1hdGNoID0gdmFsdWVPckZhbHNlSWZUaHJvd3MoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHJlID0gL2EvO1xuICAgICAgcmVbU3ltYm9sLm1hdGNoXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICcvYS8nLmVuZHNXaXRoKHJlKTtcbiAgICB9KTtcbiAgICBpZiAoIWVuZHNXaXRoU3VwcG9ydHNTeW1ib2xNYXRjaCkge1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoU3RyaW5nLnByb3RvdHlwZSwgJ2VuZHNXaXRoJywgU3RyaW5nUHJvdG90eXBlU2hpbXMuZW5kc1dpdGgpO1xuICAgIH1cbiAgICB2YXIgaW5jbHVkZXNTdXBwb3J0c1N5bWJvbE1hdGNoID0gdmFsdWVPckZhbHNlSWZUaHJvd3MoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHJlID0gL2EvO1xuICAgICAgcmVbU3ltYm9sLm1hdGNoXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICcvYS8nLmluY2x1ZGVzKHJlKTtcbiAgICB9KTtcbiAgICBpZiAoIWluY2x1ZGVzU3VwcG9ydHNTeW1ib2xNYXRjaCkge1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoU3RyaW5nLnByb3RvdHlwZSwgJ2luY2x1ZGVzJywgU3RyaW5nUHJvdG90eXBlU2hpbXMuaW5jbHVkZXMpO1xuICAgIH1cbiAgfVxuXG4gIGRlZmluZVByb3BlcnRpZXMoU3RyaW5nLnByb3RvdHlwZSwgU3RyaW5nUHJvdG90eXBlU2hpbXMpO1xuXG4gIC8vIHdoaXRlc3BhY2UgZnJvbTogaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS41LjQuMjBcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vYmxvYi92My40LjAvZXM1LXNoaW0uanMjTDEzMDQtTDEzMjRcbiAgdmFyIHdzID0gW1xuICAgICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycsXG4gICAgJ1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4JyxcbiAgICAnXFx1MjAyOVxcdUZFRkYnXG4gIF0uam9pbignJyk7XG4gIHZhciB0cmltUmVnZXhwID0gbmV3IFJlZ0V4cCgnKF5bJyArIHdzICsgJ10rKXwoWycgKyB3cyArICddKyQpJywgJ2cnKTtcbiAgdmFyIHRyaW1TaGltID0gZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gRVMuVG9TdHJpbmcoRVMuUmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSkucmVwbGFjZSh0cmltUmVnZXhwLCAnJyk7XG4gIH07XG4gIHZhciBub25XUyA9IFsnXFx1MDA4NScsICdcXHUyMDBiJywgJ1xcdWZmZmUnXS5qb2luKCcnKTtcbiAgdmFyIG5vbldTcmVnZXggPSBuZXcgUmVnRXhwKCdbJyArIG5vbldTICsgJ10nLCAnZycpO1xuICB2YXIgaXNCYWRIZXhSZWdleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuICB2YXIgaGFzU3RyaW5nVHJpbUJ1ZyA9IG5vbldTLnRyaW0oKS5sZW5ndGggIT09IG5vbldTLmxlbmd0aDtcbiAgZGVmaW5lUHJvcGVydHkoU3RyaW5nLnByb3RvdHlwZSwgJ3RyaW0nLCB0cmltU2hpbSwgaGFzU3RyaW5nVHJpbUJ1Zyk7XG5cbiAgLy8gR2l2ZW4gYW4gYXJndW1lbnQgeCwgaXQgd2lsbCByZXR1cm4gYW4gSXRlcmF0b3JSZXN1bHQgb2JqZWN0LFxuICAvLyB3aXRoIHZhbHVlIHNldCB0byB4IGFuZCBkb25lIHRvIGZhbHNlLlxuICAvLyBHaXZlbiBubyBhcmd1bWVudHMsIGl0IHdpbGwgcmV0dXJuIGFuIGl0ZXJhdG9yIGNvbXBsZXRpb24gb2JqZWN0LlxuICB2YXIgaXRlcmF0b3JSZXN1bHQgPSBmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB4LCBkb25lOiBhcmd1bWVudHMubGVuZ3RoID09PSAwIH07XG4gIH07XG5cbiAgLy8gc2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1zdHJpbmcucHJvdG90eXBlLUBAaXRlcmF0b3JcbiAgdmFyIFN0cmluZ0l0ZXJhdG9yID0gZnVuY3Rpb24gKHMpIHtcbiAgICBFUy5SZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHMpO1xuICAgIHRoaXMuX3MgPSBFUy5Ub1N0cmluZyhzKTtcbiAgICB0aGlzLl9pID0gMDtcbiAgfTtcbiAgU3RyaW5nSXRlcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHMgPSB0aGlzLl9zO1xuICAgIHZhciBpID0gdGhpcy5faTtcbiAgICBpZiAodHlwZW9mIHMgPT09ICd1bmRlZmluZWQnIHx8IGkgPj0gcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3MgPSB2b2lkIDA7XG4gICAgICByZXR1cm4gaXRlcmF0b3JSZXN1bHQoKTtcbiAgICB9XG4gICAgdmFyIGZpcnN0ID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHZhciBzZWNvbmQsIGxlbjtcbiAgICBpZiAoZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYgfHwgKGkgKyAxKSA9PT0gcy5sZW5ndGgpIHtcbiAgICAgIGxlbiA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlY29uZCA9IHMuY2hhckNvZGVBdChpICsgMSk7XG4gICAgICBsZW4gPSAoc2Vjb25kIDwgMHhEQzAwIHx8IHNlY29uZCA+IDB4REZGRikgPyAxIDogMjtcbiAgICB9XG4gICAgdGhpcy5faSA9IGkgKyBsZW47XG4gICAgcmV0dXJuIGl0ZXJhdG9yUmVzdWx0KHMuc3Vic3RyKGksIGxlbikpO1xuICB9O1xuICBhZGRJdGVyYXRvcihTdHJpbmdJdGVyYXRvci5wcm90b3R5cGUpO1xuICBhZGRJdGVyYXRvcihTdHJpbmcucHJvdG90eXBlLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBTdHJpbmdJdGVyYXRvcih0aGlzKTtcbiAgfSk7XG5cbiAgdmFyIEFycmF5U2hpbXMgPSB7XG4gICAgZnJvbTogZnVuY3Rpb24gZnJvbShpdGVtcykge1xuICAgICAgdmFyIEMgPSB0aGlzO1xuICAgICAgdmFyIG1hcEZuO1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIG1hcEZuID0gYXJndW1lbnRzWzFdO1xuICAgICAgfVxuICAgICAgdmFyIG1hcHBpbmcsIFQ7XG4gICAgICBpZiAodHlwZW9mIG1hcEZuID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBtYXBwaW5nID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIUVTLklzQ2FsbGFibGUobWFwRm4pKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkuZnJvbTogd2hlbiBwcm92aWRlZCwgdGhlIHNlY29uZCBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICBUID0gYXJndW1lbnRzWzJdO1xuICAgICAgICB9XG4gICAgICAgIG1hcHBpbmcgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBOb3RlIHRoYXQgdGhhdCBBcnJheXMgd2lsbCB1c2UgQXJyYXlJdGVyYXRvcjpcbiAgICAgIC8vIGh0dHBzOi8vYnVncy5lY21hc2NyaXB0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjQxNlxuICAgICAgdmFyIHVzaW5nSXRlcmF0b3IgPSB0eXBlb2YgKGlzQXJndW1lbnRzKGl0ZW1zKSB8fCBFUy5HZXRNZXRob2QoaXRlbXMsICRpdGVyYXRvciQpKSAhPT0gJ3VuZGVmaW5lZCc7XG5cbiAgICAgIHZhciBsZW5ndGgsIHJlc3VsdCwgaTtcbiAgICAgIGlmICh1c2luZ0l0ZXJhdG9yKSB7XG4gICAgICAgIHJlc3VsdCA9IEVTLklzQ29uc3RydWN0b3IoQykgPyBPYmplY3QobmV3IEMoKSkgOiBbXTtcbiAgICAgICAgdmFyIGl0ZXJhdG9yID0gRVMuR2V0SXRlcmF0b3IoaXRlbXMpO1xuICAgICAgICB2YXIgbmV4dCwgbmV4dFZhbHVlO1xuXG4gICAgICAgIGkgPSAwO1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgIG5leHQgPSBFUy5JdGVyYXRvclN0ZXAoaXRlcmF0b3IpO1xuICAgICAgICAgIGlmIChuZXh0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5leHRWYWx1ZSA9IG5leHQudmFsdWU7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChtYXBwaW5nKSB7XG4gICAgICAgICAgICAgIG5leHRWYWx1ZSA9IHR5cGVvZiBUID09PSAndW5kZWZpbmVkJyA/IG1hcEZuKG5leHRWYWx1ZSwgaSkgOiBfY2FsbChtYXBGbiwgVCwgbmV4dFZhbHVlLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdFtpXSA9IG5leHRWYWx1ZTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBFUy5JdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCB0cnVlKTtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBsZW5ndGggPSBpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGFycmF5TGlrZSA9IEVTLlRvT2JqZWN0KGl0ZW1zKTtcbiAgICAgICAgbGVuZ3RoID0gRVMuVG9MZW5ndGgoYXJyYXlMaWtlLmxlbmd0aCk7XG4gICAgICAgIHJlc3VsdCA9IEVTLklzQ29uc3RydWN0b3IoQykgPyBPYmplY3QobmV3IEMobGVuZ3RoKSkgOiBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICB2YWx1ZSA9IGFycmF5TGlrZVtpXTtcbiAgICAgICAgICBpZiAobWFwcGluZykge1xuICAgICAgICAgICAgdmFsdWUgPSB0eXBlb2YgVCA9PT0gJ3VuZGVmaW5lZCcgPyBtYXBGbih2YWx1ZSwgaSkgOiBfY2FsbChtYXBGbiwgVCwgdmFsdWUsIGkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjcmVhdGVEYXRhUHJvcGVydHlPclRocm93KHJlc3VsdCwgaSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdC5sZW5ndGggPSBsZW5ndGg7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBvZjogZnVuY3Rpb24gb2YoKSB7XG4gICAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHZhciBDID0gdGhpcztcbiAgICAgIHZhciBBID0gaXNBcnJheShDKSB8fCAhRVMuSXNDYWxsYWJsZShDKSA/IG5ldyBBcnJheShsZW4pIDogRVMuQ29uc3RydWN0KEMsIFtsZW5dKTtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgbGVuOyArK2spIHtcbiAgICAgICAgY3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdyhBLCBrLCBhcmd1bWVudHNba10pO1xuICAgICAgfVxuICAgICAgQS5sZW5ndGggPSBsZW47XG4gICAgICByZXR1cm4gQTtcbiAgICB9XG4gIH07XG4gIGRlZmluZVByb3BlcnRpZXMoQXJyYXksIEFycmF5U2hpbXMpO1xuICBhZGREZWZhdWx0U3BlY2llcyhBcnJheSk7XG5cbiAgLy8gT3VyIEFycmF5SXRlcmF0b3IgaXMgcHJpdmF0ZTsgc2VlXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wYXVsbWlsbHIvZXM2LXNoaW0vaXNzdWVzLzI1MlxuICBBcnJheUl0ZXJhdG9yID0gZnVuY3Rpb24gKGFycmF5LCBraW5kKSB7XG4gICAgdGhpcy5pID0gMDtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG4gICAgdGhpcy5raW5kID0ga2luZDtcbiAgfTtcblxuICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5SXRlcmF0b3IucHJvdG90eXBlLCB7XG4gICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGkgPSB0aGlzLmk7XG4gICAgICB2YXIgYXJyYXkgPSB0aGlzLmFycmF5O1xuICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEFycmF5SXRlcmF0b3IpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05vdCBhbiBBcnJheUl0ZXJhdG9yJyk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGFycmF5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgbGVuID0gRVMuVG9MZW5ndGgoYXJyYXkubGVuZ3RoKTtcbiAgICAgICAgZm9yICg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIHZhciBraW5kID0gdGhpcy5raW5kO1xuICAgICAgICAgIHZhciByZXR2YWw7XG4gICAgICAgICAgaWYgKGtpbmQgPT09ICdrZXknKSB7XG4gICAgICAgICAgICByZXR2YWwgPSBpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoa2luZCA9PT0gJ3ZhbHVlJykge1xuICAgICAgICAgICAgcmV0dmFsID0gYXJyYXlbaV07XG4gICAgICAgICAgfSBlbHNlIGlmIChraW5kID09PSAnZW50cnknKSB7XG4gICAgICAgICAgICByZXR2YWwgPSBbaSwgYXJyYXlbaV1dO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmkgPSBpICsgMTtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0b3JSZXN1bHQocmV0dmFsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5hcnJheSA9IHZvaWQgMDtcbiAgICAgIHJldHVybiBpdGVyYXRvclJlc3VsdCgpO1xuICAgIH1cbiAgfSk7XG4gIGFkZEl0ZXJhdG9yKEFycmF5SXRlcmF0b3IucHJvdG90eXBlKTtcblxuICAvKlxuICB2YXIgb3JkZXJLZXlzID0gZnVuY3Rpb24gb3JkZXJLZXlzKGEsIGIpIHtcbiAgICB2YXIgYU51bWVyaWMgPSBTdHJpbmcoRVMuVG9JbnRlZ2VyKGEpKSA9PT0gYTtcbiAgICB2YXIgYk51bWVyaWMgPSBTdHJpbmcoRVMuVG9JbnRlZ2VyKGIpKSA9PT0gYjtcbiAgICBpZiAoYU51bWVyaWMgJiYgYk51bWVyaWMpIHtcbiAgICAgIHJldHVybiBiIC0gYTtcbiAgICB9IGVsc2UgaWYgKGFOdW1lcmljICYmICFiTnVtZXJpYykge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH0gZWxzZSBpZiAoIWFOdW1lcmljICYmIGJOdW1lcmljKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGEubG9jYWxlQ29tcGFyZShiKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGdldEFsbEtleXMgPSBmdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICAgIHZhciBvd25LZXlzID0gW107XG4gICAgdmFyIGtleXMgPSBbXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIF9wdXNoKF9oYXNPd25Qcm9wZXJ0eShvYmplY3QsIGtleSkgPyBvd25LZXlzIDoga2V5cywga2V5KTtcbiAgICB9XG4gICAgX3NvcnQob3duS2V5cywgb3JkZXJLZXlzKTtcbiAgICBfc29ydChrZXlzLCBvcmRlcktleXMpO1xuXG4gICAgcmV0dXJuIF9jb25jYXQob3duS2V5cywga2V5cyk7XG4gIH07XG4gICovXG5cbiAgLy8gbm90ZTogdGhpcyBpcyBwb3NpdGlvbmVkIGhlcmUgYmVjYXVzZSBpdCBkZXBlbmRzIG9uIEFycmF5SXRlcmF0b3JcbiAgdmFyIGFycmF5T2ZTdXBwb3J0c1N1YmNsYXNzaW5nID0gQXJyYXkub2YgPT09IEFycmF5U2hpbXMub2YgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBEZXRlY3RzIGEgYnVnIGluIFdlYmtpdCBuaWdodGx5IHIxODE4ODZcbiAgICB2YXIgRm9vID0gZnVuY3Rpb24gRm9vKGxlbikgeyB0aGlzLmxlbmd0aCA9IGxlbjsgfTtcbiAgICBGb28ucHJvdG90eXBlID0gW107XG4gICAgdmFyIGZvb0FyciA9IEFycmF5Lm9mLmFwcGx5KEZvbywgWzEsIDJdKTtcbiAgICByZXR1cm4gZm9vQXJyIGluc3RhbmNlb2YgRm9vICYmIGZvb0Fyci5sZW5ndGggPT09IDI7XG4gIH0oKSk7XG4gIGlmICghYXJyYXlPZlN1cHBvcnRzU3ViY2xhc3NpbmcpIHtcbiAgICBvdmVycmlkZU5hdGl2ZShBcnJheSwgJ29mJywgQXJyYXlTaGltcy5vZik7XG4gIH1cblxuICB2YXIgQXJyYXlQcm90b3R5cGVTaGltcyA9IHtcbiAgICBjb3B5V2l0aGluOiBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCwgc3RhcnQpIHtcbiAgICAgIHZhciBvID0gRVMuVG9PYmplY3QodGhpcyk7XG4gICAgICB2YXIgbGVuID0gRVMuVG9MZW5ndGgoby5sZW5ndGgpO1xuICAgICAgdmFyIHJlbGF0aXZlVGFyZ2V0ID0gRVMuVG9JbnRlZ2VyKHRhcmdldCk7XG4gICAgICB2YXIgcmVsYXRpdmVTdGFydCA9IEVTLlRvSW50ZWdlcihzdGFydCk7XG4gICAgICB2YXIgdG8gPSByZWxhdGl2ZVRhcmdldCA8IDAgPyBfbWF4KGxlbiArIHJlbGF0aXZlVGFyZ2V0LCAwKSA6IF9taW4ocmVsYXRpdmVUYXJnZXQsIGxlbik7XG4gICAgICB2YXIgZnJvbSA9IHJlbGF0aXZlU3RhcnQgPCAwID8gX21heChsZW4gKyByZWxhdGl2ZVN0YXJ0LCAwKSA6IF9taW4ocmVsYXRpdmVTdGFydCwgbGVuKTtcbiAgICAgIHZhciBlbmQ7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgZW5kID0gYXJndW1lbnRzWzJdO1xuICAgICAgfVxuICAgICAgdmFyIHJlbGF0aXZlRW5kID0gdHlwZW9mIGVuZCA9PT0gJ3VuZGVmaW5lZCcgPyBsZW4gOiBFUy5Ub0ludGVnZXIoZW5kKTtcbiAgICAgIHZhciBmaW5hbEl0ZW0gPSByZWxhdGl2ZUVuZCA8IDAgPyBfbWF4KGxlbiArIHJlbGF0aXZlRW5kLCAwKSA6IF9taW4ocmVsYXRpdmVFbmQsIGxlbik7XG4gICAgICB2YXIgY291bnQgPSBfbWluKGZpbmFsSXRlbSAtIGZyb20sIGxlbiAtIHRvKTtcbiAgICAgIHZhciBkaXJlY3Rpb24gPSAxO1xuICAgICAgaWYgKGZyb20gPCB0byAmJiB0byA8IChmcm9tICsgY291bnQpKSB7XG4gICAgICAgIGRpcmVjdGlvbiA9IC0xO1xuICAgICAgICBmcm9tICs9IGNvdW50IC0gMTtcbiAgICAgICAgdG8gKz0gY291bnQgLSAxO1xuICAgICAgfVxuICAgICAgd2hpbGUgKGNvdW50ID4gMCkge1xuICAgICAgICBpZiAoZnJvbSBpbiBvKSB7XG4gICAgICAgICAgb1t0b10gPSBvW2Zyb21dO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSBvW3RvXTtcbiAgICAgICAgfVxuICAgICAgICBmcm9tICs9IGRpcmVjdGlvbjtcbiAgICAgICAgdG8gKz0gZGlyZWN0aW9uO1xuICAgICAgICBjb3VudCAtPSAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG87XG4gICAgfSxcblxuICAgIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUpIHtcbiAgICAgIHZhciBzdGFydDtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBzdGFydCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgIH1cbiAgICAgIHZhciBlbmQ7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgZW5kID0gYXJndW1lbnRzWzJdO1xuICAgICAgfVxuICAgICAgdmFyIE8gPSBFUy5Ub09iamVjdCh0aGlzKTtcbiAgICAgIHZhciBsZW4gPSBFUy5Ub0xlbmd0aChPLmxlbmd0aCk7XG4gICAgICBzdGFydCA9IEVTLlRvSW50ZWdlcih0eXBlb2Ygc3RhcnQgPT09ICd1bmRlZmluZWQnID8gMCA6IHN0YXJ0KTtcbiAgICAgIGVuZCA9IEVTLlRvSW50ZWdlcih0eXBlb2YgZW5kID09PSAndW5kZWZpbmVkJyA/IGxlbiA6IGVuZCk7XG5cbiAgICAgIHZhciByZWxhdGl2ZVN0YXJ0ID0gc3RhcnQgPCAwID8gX21heChsZW4gKyBzdGFydCwgMCkgOiBfbWluKHN0YXJ0LCBsZW4pO1xuICAgICAgdmFyIHJlbGF0aXZlRW5kID0gZW5kIDwgMCA/IGxlbiArIGVuZCA6IGVuZDtcblxuICAgICAgZm9yICh2YXIgaSA9IHJlbGF0aXZlU3RhcnQ7IGkgPCBsZW4gJiYgaSA8IHJlbGF0aXZlRW5kOyArK2kpIHtcbiAgICAgICAgT1tpXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE87XG4gICAgfSxcblxuICAgIGZpbmQ6IGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlKSB7XG4gICAgICB2YXIgbGlzdCA9IEVTLlRvT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIGxlbmd0aCA9IEVTLlRvTGVuZ3RoKGxpc3QubGVuZ3RoKTtcbiAgICAgIGlmICghRVMuSXNDYWxsYWJsZShwcmVkaWNhdGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5I2ZpbmQ6IHByZWRpY2F0ZSBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICAgIHZhciB0aGlzQXJnID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIHZhbHVlOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWUgPSBsaXN0W2ldO1xuICAgICAgICBpZiAodGhpc0FyZykge1xuICAgICAgICAgIGlmIChfY2FsbChwcmVkaWNhdGUsIHRoaXNBcmcsIHZhbHVlLCBpLCBsaXN0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwcmVkaWNhdGUodmFsdWUsIGksIGxpc3QpKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGxpc3QgPSBFUy5Ub09iamVjdCh0aGlzKTtcbiAgICAgIHZhciBsZW5ndGggPSBFUy5Ub0xlbmd0aChsaXN0Lmxlbmd0aCk7XG4gICAgICBpZiAoIUVTLklzQ2FsbGFibGUocHJlZGljYXRlKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheSNmaW5kSW5kZXg6IHByZWRpY2F0ZSBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICAgIHZhciB0aGlzQXJnID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodGhpc0FyZykge1xuICAgICAgICAgIGlmIChfY2FsbChwcmVkaWNhdGUsIHRoaXNBcmcsIGxpc3RbaV0sIGksIGxpc3QpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocHJlZGljYXRlKGxpc3RbaV0sIGksIGxpc3QpKSB7XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9LFxuXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBuZXcgQXJyYXlJdGVyYXRvcih0aGlzLCAna2V5Jyk7XG4gICAgfSxcblxuICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgcmV0dXJuIG5ldyBBcnJheUl0ZXJhdG9yKHRoaXMsICd2YWx1ZScpO1xuICAgIH0sXG5cbiAgICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICAgICAgcmV0dXJuIG5ldyBBcnJheUl0ZXJhdG9yKHRoaXMsICdlbnRyeScpO1xuICAgIH1cbiAgfTtcbiAgLy8gU2FmYXJpIDcuMSBkZWZpbmVzIEFycmF5I2tleXMgYW5kIEFycmF5I2VudHJpZXMgbmF0aXZlbHksXG4gIC8vIGJ1dCB0aGUgcmVzdWx0aW5nIEFycmF5SXRlcmF0b3Igb2JqZWN0cyBkb24ndCBoYXZlIGEgXCJuZXh0XCIgbWV0aG9kLlxuICBpZiAoQXJyYXkucHJvdG90eXBlLmtleXMgJiYgIUVTLklzQ2FsbGFibGUoWzFdLmtleXMoKS5uZXh0KSkge1xuICAgIGRlbGV0ZSBBcnJheS5wcm90b3R5cGUua2V5cztcbiAgfVxuICBpZiAoQXJyYXkucHJvdG90eXBlLmVudHJpZXMgJiYgIUVTLklzQ2FsbGFibGUoWzFdLmVudHJpZXMoKS5uZXh0KSkge1xuICAgIGRlbGV0ZSBBcnJheS5wcm90b3R5cGUuZW50cmllcztcbiAgfVxuXG4gIC8vIENocm9tZSAzOCBkZWZpbmVzIEFycmF5I2tleXMgYW5kIEFycmF5I2VudHJpZXMsIGFuZCBBcnJheSNAQGl0ZXJhdG9yLCBidXQgbm90IEFycmF5I3ZhbHVlc1xuICBpZiAoQXJyYXkucHJvdG90eXBlLmtleXMgJiYgQXJyYXkucHJvdG90eXBlLmVudHJpZXMgJiYgIUFycmF5LnByb3RvdHlwZS52YWx1ZXMgJiYgQXJyYXkucHJvdG90eXBlWyRpdGVyYXRvciRdKSB7XG4gICAgZGVmaW5lUHJvcGVydGllcyhBcnJheS5wcm90b3R5cGUsIHtcbiAgICAgIHZhbHVlczogQXJyYXkucHJvdG90eXBlWyRpdGVyYXRvciRdXG4gICAgfSk7XG4gICAgaWYgKFR5cGUuc3ltYm9sKFN5bWJvbC51bnNjb3BhYmxlcykpIHtcbiAgICAgIEFycmF5LnByb3RvdHlwZVtTeW1ib2wudW5zY29wYWJsZXNdLnZhbHVlcyA9IHRydWU7XG4gICAgfVxuICB9XG4gIC8vIENocm9tZSA0MCBkZWZpbmVzIEFycmF5I3ZhbHVlcyB3aXRoIHRoZSBpbmNvcnJlY3QgbmFtZSwgYWx0aG91Z2ggQXJyYXkje2tleXMsZW50cmllc30gaGF2ZSB0aGUgY29ycmVjdCBuYW1lXG4gIGlmIChmdW5jdGlvbnNIYXZlTmFtZXMgJiYgQXJyYXkucHJvdG90eXBlLnZhbHVlcyAmJiBBcnJheS5wcm90b3R5cGUudmFsdWVzLm5hbWUgIT09ICd2YWx1ZXMnKSB7XG4gICAgdmFyIG9yaWdpbmFsQXJyYXlQcm90b3R5cGVWYWx1ZXMgPSBBcnJheS5wcm90b3R5cGUudmFsdWVzO1xuICAgIG92ZXJyaWRlTmF0aXZlKEFycmF5LnByb3RvdHlwZSwgJ3ZhbHVlcycsIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIEVTLkNhbGwob3JpZ2luYWxBcnJheVByb3RvdHlwZVZhbHVlcywgdGhpcywgYXJndW1lbnRzKTsgfSk7XG4gICAgZGVmaW5lUHJvcGVydHkoQXJyYXkucHJvdG90eXBlLCAkaXRlcmF0b3IkLCBBcnJheS5wcm90b3R5cGUudmFsdWVzLCB0cnVlKTtcbiAgfVxuICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5LnByb3RvdHlwZSwgQXJyYXlQcm90b3R5cGVTaGltcyk7XG5cbiAgaWYgKDEgLyBbdHJ1ZV0uaW5kZXhPZih0cnVlLCAtMCkgPCAwKSB7XG4gICAgLy8gaW5kZXhPZiB3aGVuIGdpdmVuIGEgcG9zaXRpb24gYXJnIG9mIC0wIHNob3VsZCByZXR1cm4gKzAuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvZWNtYTI2Mi9wdWxsLzMxNlxuICAgIGRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgJ2luZGV4T2YnLCBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQpIHtcbiAgICAgIHZhciB2YWx1ZSA9IF9hcnJheUluZGV4T2ZBcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHZhbHVlID09PSAwICYmICgxIC8gdmFsdWUpIDwgMCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LCB0cnVlKTtcbiAgfVxuXG4gIGFkZEl0ZXJhdG9yKEFycmF5LnByb3RvdHlwZSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy52YWx1ZXMoKTsgfSk7XG4gIC8vIENocm9tZSBkZWZpbmVzIGtleXMvdmFsdWVzL2VudHJpZXMgb24gQXJyYXksIGJ1dCBkb2Vzbid0IGdpdmUgdXNcbiAgLy8gYW55IHdheSB0byBpZGVudGlmeSBpdHMgaXRlcmF0b3IuICBTbyBhZGQgb3VyIG93biBzaGltbWVkIGZpZWxkLlxuICBpZiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKSB7XG4gICAgYWRkSXRlcmF0b3IoT2JqZWN0LmdldFByb3RvdHlwZU9mKFtdLnZhbHVlcygpKSk7XG4gIH1cblxuICAvLyBub3RlOiB0aGlzIGlzIHBvc2l0aW9uZWQgaGVyZSBiZWNhdXNlIGl0IHJlbGllcyBvbiBBcnJheSNlbnRyaWVzXG4gIHZhciBhcnJheUZyb21Td2FsbG93c05lZ2F0aXZlTGVuZ3RocyA9IChmdW5jdGlvbiAoKSB7XG4gICAgLy8gRGV0ZWN0cyBhIEZpcmVmb3ggYnVnIGluIHYzMlxuICAgIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEwNjM5OTNcbiAgICByZXR1cm4gdmFsdWVPckZhbHNlSWZUaHJvd3MoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIEFycmF5LmZyb20oeyBsZW5ndGg6IC0xIH0pLmxlbmd0aCA9PT0gMDtcbiAgICB9KTtcbiAgfSgpKTtcbiAgdmFyIGFycmF5RnJvbUhhbmRsZXNJdGVyYWJsZXMgPSAoZnVuY3Rpb24gKCkge1xuICAgIC8vIERldGVjdHMgYSBidWcgaW4gV2Via2l0IG5pZ2h0bHkgcjE4MTg4NlxuICAgIHZhciBhcnIgPSBBcnJheS5mcm9tKFswXS5lbnRyaWVzKCkpO1xuICAgIHJldHVybiBhcnIubGVuZ3RoID09PSAxICYmIGlzQXJyYXkoYXJyWzBdKSAmJiBhcnJbMF1bMF0gPT09IDAgJiYgYXJyWzBdWzFdID09PSAwO1xuICB9KCkpO1xuICBpZiAoIWFycmF5RnJvbVN3YWxsb3dzTmVnYXRpdmVMZW5ndGhzIHx8ICFhcnJheUZyb21IYW5kbGVzSXRlcmFibGVzKSB7XG4gICAgb3ZlcnJpZGVOYXRpdmUoQXJyYXksICdmcm9tJywgQXJyYXlTaGltcy5mcm9tKTtcbiAgfVxuICB2YXIgYXJyYXlGcm9tSGFuZGxlc1VuZGVmaW5lZE1hcEZ1bmN0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBNaWNyb3NvZnQgRWRnZSB2MC4xMSB0aHJvd3MgaWYgdGhlIG1hcEZuIGFyZ3VtZW50IGlzICpwcm92aWRlZCogYnV0IHVuZGVmaW5lZCxcbiAgICAvLyBidXQgdGhlIHNwZWMgZG9lc24ndCBjYXJlIGlmIGl0J3MgcHJvdmlkZWQgb3Igbm90IC0gdW5kZWZpbmVkIGRvZXNuJ3QgdGhyb3cuXG4gICAgcmV0dXJuIHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBBcnJheS5mcm9tKFswXSwgdm9pZCAwKTtcbiAgICB9KTtcbiAgfSgpKTtcbiAgaWYgKCFhcnJheUZyb21IYW5kbGVzVW5kZWZpbmVkTWFwRnVuY3Rpb24pIHtcbiAgICB2YXIgb3JpZ0FycmF5RnJvbSA9IEFycmF5LmZyb207XG4gICAgb3ZlcnJpZGVOYXRpdmUoQXJyYXksICdmcm9tJywgZnVuY3Rpb24gZnJvbShpdGVtcykge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIHR5cGVvZiBhcmd1bWVudHNbMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBFUy5DYWxsKG9yaWdBcnJheUZyb20sIHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gX2NhbGwob3JpZ0FycmF5RnJvbSwgdGhpcywgaXRlbXMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGludDMyc0FzT25lID0gLShNYXRoLnBvdygyLCAzMikgLSAxKTtcbiAgdmFyIHRvTGVuZ3Roc0NvcnJlY3RseSA9IGZ1bmN0aW9uIChtZXRob2QsIHJldmVyc2VkKSB7XG4gICAgdmFyIG9iaiA9IHsgbGVuZ3RoOiBpbnQzMnNBc09uZSB9O1xuICAgIG9ialtyZXZlcnNlZCA/IChvYmoubGVuZ3RoID4+PiAwKSAtIDEgOiAwXSA9IHRydWU7XG4gICAgcmV0dXJuIHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICAgIF9jYWxsKG1ldGhvZCwgb2JqLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIG5vdGU6IGluIG5vbmNvbmZvcm1pbmcgYnJvd3NlcnMsIHRoaXMgd2lsbCBiZSBjYWxsZWRcbiAgICAgICAgLy8gLTEgPj4+IDAgdGltZXMsIHdoaWNoIGlzIDQyOTQ5NjcyOTUsIHNvIHRoZSB0aHJvdyBtYXR0ZXJzLlxuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc2hvdWxkIG5vdCByZWFjaCBoZXJlJyk7XG4gICAgICB9LCBbXSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfTtcbiAgaWYgKCF0b0xlbmd0aHNDb3JyZWN0bHkoQXJyYXkucHJvdG90eXBlLmZvckVhY2gpKSB7XG4gICAgdmFyIG9yaWdpbmFsRm9yRWFjaCA9IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoO1xuICAgIG92ZXJyaWRlTmF0aXZlKEFycmF5LnByb3RvdHlwZSwgJ2ZvckVhY2gnLCBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrRm4pIHtcbiAgICAgIHJldHVybiBFUy5DYWxsKG9yaWdpbmFsRm9yRWFjaCwgdGhpcy5sZW5ndGggPj0gMCA/IHRoaXMgOiBbXSwgYXJndW1lbnRzKTtcbiAgICB9LCB0cnVlKTtcbiAgfVxuICBpZiAoIXRvTGVuZ3Roc0NvcnJlY3RseShBcnJheS5wcm90b3R5cGUubWFwKSkge1xuICAgIHZhciBvcmlnaW5hbE1hcCA9IEFycmF5LnByb3RvdHlwZS5tYXA7XG4gICAgb3ZlcnJpZGVOYXRpdmUoQXJyYXkucHJvdG90eXBlLCAnbWFwJywgZnVuY3Rpb24gbWFwKGNhbGxiYWNrRm4pIHtcbiAgICAgIHJldHVybiBFUy5DYWxsKG9yaWdpbmFsTWFwLCB0aGlzLmxlbmd0aCA+PSAwID8gdGhpcyA6IFtdLCBhcmd1bWVudHMpO1xuICAgIH0sIHRydWUpO1xuICB9XG4gIGlmICghdG9MZW5ndGhzQ29ycmVjdGx5KEFycmF5LnByb3RvdHlwZS5maWx0ZXIpKSB7XG4gICAgdmFyIG9yaWdpbmFsRmlsdGVyID0gQXJyYXkucHJvdG90eXBlLmZpbHRlcjtcbiAgICBvdmVycmlkZU5hdGl2ZShBcnJheS5wcm90b3R5cGUsICdmaWx0ZXInLCBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tGbikge1xuICAgICAgcmV0dXJuIEVTLkNhbGwob3JpZ2luYWxGaWx0ZXIsIHRoaXMubGVuZ3RoID49IDAgPyB0aGlzIDogW10sIGFyZ3VtZW50cyk7XG4gICAgfSwgdHJ1ZSk7XG4gIH1cbiAgaWYgKCF0b0xlbmd0aHNDb3JyZWN0bHkoQXJyYXkucHJvdG90eXBlLnNvbWUpKSB7XG4gICAgdmFyIG9yaWdpbmFsU29tZSA9IEFycmF5LnByb3RvdHlwZS5zb21lO1xuICAgIG92ZXJyaWRlTmF0aXZlKEFycmF5LnByb3RvdHlwZSwgJ3NvbWUnLCBmdW5jdGlvbiBzb21lKGNhbGxiYWNrRm4pIHtcbiAgICAgIHJldHVybiBFUy5DYWxsKG9yaWdpbmFsU29tZSwgdGhpcy5sZW5ndGggPj0gMCA/IHRoaXMgOiBbXSwgYXJndW1lbnRzKTtcbiAgICB9LCB0cnVlKTtcbiAgfVxuICBpZiAoIXRvTGVuZ3Roc0NvcnJlY3RseShBcnJheS5wcm90b3R5cGUuZXZlcnkpKSB7XG4gICAgdmFyIG9yaWdpbmFsRXZlcnkgPSBBcnJheS5wcm90b3R5cGUuZXZlcnk7XG4gICAgb3ZlcnJpZGVOYXRpdmUoQXJyYXkucHJvdG90eXBlLCAnZXZlcnknLCBmdW5jdGlvbiBldmVyeShjYWxsYmFja0ZuKSB7XG4gICAgICByZXR1cm4gRVMuQ2FsbChvcmlnaW5hbEV2ZXJ5LCB0aGlzLmxlbmd0aCA+PSAwID8gdGhpcyA6IFtdLCBhcmd1bWVudHMpO1xuICAgIH0sIHRydWUpO1xuICB9XG4gIGlmICghdG9MZW5ndGhzQ29ycmVjdGx5KEFycmF5LnByb3RvdHlwZS5yZWR1Y2UpKSB7XG4gICAgdmFyIG9yaWdpbmFsUmVkdWNlID0gQXJyYXkucHJvdG90eXBlLnJlZHVjZTtcbiAgICBvdmVycmlkZU5hdGl2ZShBcnJheS5wcm90b3R5cGUsICdyZWR1Y2UnLCBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tGbikge1xuICAgICAgcmV0dXJuIEVTLkNhbGwob3JpZ2luYWxSZWR1Y2UsIHRoaXMubGVuZ3RoID49IDAgPyB0aGlzIDogW10sIGFyZ3VtZW50cyk7XG4gICAgfSwgdHJ1ZSk7XG4gIH1cbiAgaWYgKCF0b0xlbmd0aHNDb3JyZWN0bHkoQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0LCB0cnVlKSkge1xuICAgIHZhciBvcmlnaW5hbFJlZHVjZVJpZ2h0ID0gQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0O1xuICAgIG92ZXJyaWRlTmF0aXZlKEFycmF5LnByb3RvdHlwZSwgJ3JlZHVjZVJpZ2h0JywgZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tGbikge1xuICAgICAgcmV0dXJuIEVTLkNhbGwob3JpZ2luYWxSZWR1Y2VSaWdodCwgdGhpcy5sZW5ndGggPj0gMCA/IHRoaXMgOiBbXSwgYXJndW1lbnRzKTtcbiAgICB9LCB0cnVlKTtcbiAgfVxuXG4gIHZhciBsYWNrc09jdGFsU3VwcG9ydCA9IE51bWJlcignMG8xMCcpICE9PSA4O1xuICB2YXIgbGFja3NCaW5hcnlTdXBwb3J0ID0gTnVtYmVyKCcwYjEwJykgIT09IDI7XG4gIHZhciB0cmltc05vbldoaXRlc3BhY2UgPSBfc29tZShub25XUywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gTnVtYmVyKGMgKyAwICsgYykgPT09IDA7XG4gIH0pO1xuICBpZiAobGFja3NPY3RhbFN1cHBvcnQgfHwgbGFja3NCaW5hcnlTdXBwb3J0IHx8IHRyaW1zTm9uV2hpdGVzcGFjZSkge1xuICAgIHZhciBPcmlnTnVtYmVyID0gTnVtYmVyO1xuICAgIHZhciBiaW5hcnlSZWdleCA9IC9eMGJbMDFdKyQvaTtcbiAgICB2YXIgb2N0YWxSZWdleCA9IC9eMG9bMC03XSskL2k7XG4gICAgLy8gTm90ZSB0aGF0IGluIElFIDgsIFJlZ0V4cC5wcm90b3R5cGUudGVzdCBkb2Vzbid0IHNlZW0gdG8gZXhpc3Q6IGllLCBcInRlc3RcIiBpcyBhbiBvd24gcHJvcGVydHkgb2YgcmVnZXhlcy4gd3RmLlxuICAgIHZhciBpc0JpbmFyeSA9IGJpbmFyeVJlZ2V4LnRlc3QuYmluZChiaW5hcnlSZWdleCk7XG4gICAgdmFyIGlzT2N0YWwgPSBvY3RhbFJlZ2V4LnRlc3QuYmluZChvY3RhbFJlZ2V4KTtcbiAgICB2YXIgdG9QcmltaXRpdmUgPSBmdW5jdGlvbiAoTykgeyAvLyBuZWVkIHRvIHJlcGxhY2UgdGhpcyB3aXRoIGBlcy10by1wcmltaXRpdmUvZXM2YFxuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmICh0eXBlb2YgTy52YWx1ZU9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJlc3VsdCA9IE8udmFsdWVPZigpO1xuICAgICAgICBpZiAoVHlwZS5wcmltaXRpdmUocmVzdWx0KSkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgTy50b1N0cmluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXN1bHQgPSBPLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmIChUeXBlLnByaW1pdGl2ZShyZXN1bHQpKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTm8gZGVmYXVsdCB2YWx1ZScpO1xuICAgIH07XG4gICAgdmFyIGhhc05vbldTID0gbm9uV1NyZWdleC50ZXN0LmJpbmQobm9uV1NyZWdleCk7XG4gICAgdmFyIGlzQmFkSGV4ID0gaXNCYWRIZXhSZWdleC50ZXN0LmJpbmQoaXNCYWRIZXhSZWdleCk7XG4gICAgdmFyIE51bWJlclNoaW0gPSAoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gdGhpcyBpcyB3cmFwcGVkIGluIGFuIElJRkUgYmVjYXVzZSBvZiBJRSA2LTgncyB3YWNreSBzY29waW5nIGlzc3VlcyB3aXRoIG5hbWVkIGZ1bmN0aW9uIGV4cHJlc3Npb25zLlxuICAgICAgdmFyIE51bWJlclNoaW0gPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcbiAgICAgICAgdmFyIHByaW1WYWx1ZTtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcHJpbVZhbHVlID0gVHlwZS5wcmltaXRpdmUodmFsdWUpID8gdmFsdWUgOiB0b1ByaW1pdGl2ZSh2YWx1ZSwgJ251bWJlcicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByaW1WYWx1ZSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBwcmltVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcHJpbVZhbHVlID0gRVMuQ2FsbCh0cmltU2hpbSwgcHJpbVZhbHVlKTtcbiAgICAgICAgICBpZiAoaXNCaW5hcnkocHJpbVZhbHVlKSkge1xuICAgICAgICAgICAgcHJpbVZhbHVlID0gcGFyc2VJbnQoX3N0clNsaWNlKHByaW1WYWx1ZSwgMiksIDIpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNPY3RhbChwcmltVmFsdWUpKSB7XG4gICAgICAgICAgICBwcmltVmFsdWUgPSBwYXJzZUludChfc3RyU2xpY2UocHJpbVZhbHVlLCAyKSwgOCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNOb25XUyhwcmltVmFsdWUpIHx8IGlzQmFkSGV4KHByaW1WYWx1ZSkpIHtcbiAgICAgICAgICAgIHByaW1WYWx1ZSA9IE5hTjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlY2VpdmVyID0gdGhpcztcbiAgICAgICAgdmFyIHZhbHVlT2ZTdWNjZWVkcyA9IHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBPcmlnTnVtYmVyLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwocmVjZWl2ZXIpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHJlY2VpdmVyIGluc3RhbmNlb2YgTnVtYmVyU2hpbSAmJiAhdmFsdWVPZlN1Y2NlZWRzKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBPcmlnTnVtYmVyKHByaW1WYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9yaWdOdW1iZXIocHJpbVZhbHVlKTtcbiAgICAgIH07XG4gICAgICByZXR1cm4gTnVtYmVyU2hpbTtcbiAgICB9KCkpO1xuICAgIHdyYXBDb25zdHJ1Y3RvcihPcmlnTnVtYmVyLCBOdW1iZXJTaGltLCB7fSk7XG4gICAgLy8gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIEVTMyBicm93c2Vycywgd2hlcmUgdGhlc2UgcHJvcGVydGllcyBhcmUgbm9uLWVudW1lcmFibGUuXG4gICAgZGVmaW5lUHJvcGVydGllcyhOdW1iZXJTaGltLCB7XG4gICAgICBOYU46IE9yaWdOdW1iZXIuTmFOLFxuICAgICAgTUFYX1ZBTFVFOiBPcmlnTnVtYmVyLk1BWF9WQUxVRSxcbiAgICAgIE1JTl9WQUxVRTogT3JpZ051bWJlci5NSU5fVkFMVUUsXG4gICAgICBORUdBVElWRV9JTkZJTklUWTogT3JpZ051bWJlci5ORUdBVElWRV9JTkZJTklUWSxcbiAgICAgIFBPU0lUSVZFX0lORklOSVRZOiBPcmlnTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZXG4gICAgfSk7XG4gICAgLyogZ2xvYmFscyBOdW1iZXI6IHRydWUgKi9cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiwgbm8tZ2xvYmFsLWFzc2lnbiAqL1xuICAgIE51bWJlciA9IE51bWJlclNoaW07XG4gICAgVmFsdWUucmVkZWZpbmUoZ2xvYmFscywgJ051bWJlcicsIE51bWJlclNoaW0pO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5kZWYsIG5vLWdsb2JhbC1hc3NpZ24gKi9cbiAgICAvKiBnbG9iYWxzIE51bWJlcjogZmFsc2UgKi9cbiAgfVxuXG4gIHZhciBtYXhTYWZlSW50ZWdlciA9IE1hdGgucG93KDIsIDUzKSAtIDE7XG4gIGRlZmluZVByb3BlcnRpZXMoTnVtYmVyLCB7XG4gICAgTUFYX1NBRkVfSU5URUdFUjogbWF4U2FmZUludGVnZXIsXG4gICAgTUlOX1NBRkVfSU5URUdFUjogLW1heFNhZmVJbnRlZ2VyLFxuICAgIEVQU0lMT046IDIuMjIwNDQ2MDQ5MjUwMzEzZS0xNixcblxuICAgIHBhcnNlSW50OiBnbG9iYWxzLnBhcnNlSW50LFxuICAgIHBhcnNlRmxvYXQ6IGdsb2JhbHMucGFyc2VGbG9hdCxcblxuICAgIGlzRmluaXRlOiBudW1iZXJJc0Zpbml0ZSxcblxuICAgIGlzSW50ZWdlcjogZnVuY3Rpb24gaXNJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gbnVtYmVySXNGaW5pdGUodmFsdWUpICYmIEVTLlRvSW50ZWdlcih2YWx1ZSkgPT09IHZhbHVlO1xuICAgIH0sXG5cbiAgICBpc1NhZmVJbnRlZ2VyOiBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSkgJiYgX2Ficyh2YWx1ZSkgPD0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfSxcblxuICAgIGlzTmFOOiBudW1iZXJJc05hTlxuICB9KTtcbiAgLy8gRmlyZWZveCAzNyBoYXMgYSBjb25mb3JtaW5nIE51bWJlci5wYXJzZUludCwgYnV0IGl0J3Mgbm90ID09PSB0byB0aGUgZ2xvYmFsIHBhcnNlSW50IChmaXhlZCBpbiB2NDApXG4gIGRlZmluZVByb3BlcnR5KE51bWJlciwgJ3BhcnNlSW50JywgZ2xvYmFscy5wYXJzZUludCwgTnVtYmVyLnBhcnNlSW50ICE9PSBnbG9iYWxzLnBhcnNlSW50KTtcblxuICAvLyBXb3JrIGFyb3VuZCBidWdzIGluIEFycmF5I2ZpbmQgYW5kIEFycmF5I2ZpbmRJbmRleCAtLSBlYXJseVxuICAvLyBpbXBsZW1lbnRhdGlvbnMgc2tpcHBlZCBob2xlcyBpbiBzcGFyc2UgYXJyYXlzLiAoTm90ZSB0aGF0IHRoZVxuICAvLyBpbXBsZW1lbnRhdGlvbnMgb2YgZmluZC9maW5kSW5kZXggaW5kaXJlY3RseSB1c2Ugc2hpbW1lZFxuICAvLyBtZXRob2RzIG9mIE51bWJlciwgc28gdGhpcyB0ZXN0IGhhcyB0byBoYXBwZW4gZG93biBoZXJlLilcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tc3BhcnNlLWFycmF5cyAqL1xuICBpZiAoWywgMV0uZmluZChmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9KSA9PT0gMSkge1xuICAgIG92ZXJyaWRlTmF0aXZlKEFycmF5LnByb3RvdHlwZSwgJ2ZpbmQnLCBBcnJheVByb3RvdHlwZVNoaW1zLmZpbmQpO1xuICB9XG4gIGlmIChbLCAxXS5maW5kSW5kZXgoZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfSkgIT09IDApIHtcbiAgICBvdmVycmlkZU5hdGl2ZShBcnJheS5wcm90b3R5cGUsICdmaW5kSW5kZXgnLCBBcnJheVByb3RvdHlwZVNoaW1zLmZpbmRJbmRleCk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1zcGFyc2UtYXJyYXlzICovXG5cbiAgdmFyIGlzRW51bWVyYWJsZU9uID0gRnVuY3Rpb24uYmluZC5jYWxsKEZ1bmN0aW9uLmJpbmQsIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUpO1xuICB2YXIgZW5zdXJlRW51bWVyYWJsZSA9IGZ1bmN0aW9uIGVuc3VyZUVudW1lcmFibGUob2JqLCBwcm9wKSB7XG4gICAgaWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMgJiYgaXNFbnVtZXJhYmxlT24ob2JqLCBwcm9wKSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgcHJvcCwgeyBlbnVtZXJhYmxlOiBmYWxzZSB9KTtcbiAgICB9XG4gIH07XG4gIHZhciBzbGljZUFyZ3MgPSBmdW5jdGlvbiBzbGljZUFyZ3MoKSB7XG4gICAgLy8gcGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9wZXRrYWFudG9ub3YvYmx1ZWJpcmQvd2lraS9PcHRpbWl6YXRpb24ta2lsbGVycyMzMi1sZWFraW5nLWFyZ3VtZW50c1xuICAgIC8vIGFuZCBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9XZWJSZWZsZWN0aW9uLzQzMjc3NjJjYjg3YThjNjM0YTI5XG4gICAgdmFyIGluaXRpYWwgPSBOdW1iZXIodGhpcyk7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGRlc2lyZWRBcmdDb3VudCA9IGxlbiAtIGluaXRpYWw7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoZGVzaXJlZEFyZ0NvdW50IDwgMCA/IDAgOiBkZXNpcmVkQXJnQ291bnQpO1xuICAgIGZvciAodmFyIGkgPSBpbml0aWFsOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIGFyZ3NbaSAtIGluaXRpYWxdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gYXJncztcbiAgfTtcbiAgdmFyIGFzc2lnblRvID0gZnVuY3Rpb24gYXNzaWduVG8oc291cmNlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGFzc2lnblRvU291cmNlKHRhcmdldCwga2V5KSB7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9O1xuICB9O1xuICB2YXIgYXNzaWduUmVkdWNlciA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuICAgIHZhciBzb3VyY2VLZXlzID0ga2V5cyhPYmplY3Qoc291cmNlKSk7XG4gICAgdmFyIHN5bWJvbHM7XG4gICAgaWYgKEVTLklzQ2FsbGFibGUoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykpIHtcbiAgICAgIHN5bWJvbHMgPSBfZmlsdGVyKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoT2JqZWN0KHNvdXJjZSkpLCBpc0VudW1lcmFibGVPbihzb3VyY2UpKTtcbiAgICB9XG4gICAgcmV0dXJuIF9yZWR1Y2UoX2NvbmNhdChzb3VyY2VLZXlzLCBzeW1ib2xzIHx8IFtdKSwgYXNzaWduVG8oc291cmNlKSwgdGFyZ2V0KTtcbiAgfTtcblxuICB2YXIgT2JqZWN0U2hpbXMgPSB7XG4gICAgLy8gMTkuMS4zLjFcbiAgICBhc3NpZ246IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuICAgICAgdmFyIHRvID0gRVMuVG9PYmplY3QodGFyZ2V0LCAnQ2Fubm90IGNvbnZlcnQgdW5kZWZpbmVkIG9yIG51bGwgdG8gb2JqZWN0Jyk7XG4gICAgICByZXR1cm4gX3JlZHVjZShFUy5DYWxsKHNsaWNlQXJncywgMSwgYXJndW1lbnRzKSwgYXNzaWduUmVkdWNlciwgdG8pO1xuICAgIH0sXG5cbiAgICAvLyBBZGRlZCBpbiBXZWJLaXQgaW4gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE0Mzg2NVxuICAgIGlzOiBmdW5jdGlvbiBpcyhhLCBiKSB7XG4gICAgICByZXR1cm4gRVMuU2FtZVZhbHVlKGEsIGIpO1xuICAgIH1cbiAgfTtcbiAgdmFyIGFzc2lnbkhhc1BlbmRpbmdFeGNlcHRpb25zID0gT2JqZWN0LmFzc2lnbiAmJiBPYmplY3QucHJldmVudEV4dGVuc2lvbnMgJiYgKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBGaXJlZm94IDM3IHN0aWxsIGhhcyBcInBlbmRpbmcgZXhjZXB0aW9uXCIgbG9naWMgaW4gaXRzIE9iamVjdC5hc3NpZ24gaW1wbGVtZW50YXRpb24sXG4gICAgLy8gd2hpY2ggaXMgNzIlIHNsb3dlciB0aGFuIG91ciBzaGltLCBhbmQgRmlyZWZveCA0MCdzIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbi5cbiAgICB2YXIgdGhyb3dlciA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7IDE6IDIgfSk7XG4gICAgdHJ5IHtcbiAgICAgIE9iamVjdC5hc3NpZ24odGhyb3dlciwgJ3h5Jyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHRocm93ZXJbMV0gPT09ICd5JztcbiAgICB9XG4gIH0oKSk7XG4gIGlmIChhc3NpZ25IYXNQZW5kaW5nRXhjZXB0aW9ucykge1xuICAgIG92ZXJyaWRlTmF0aXZlKE9iamVjdCwgJ2Fzc2lnbicsIE9iamVjdFNoaW1zLmFzc2lnbik7XG4gIH1cbiAgZGVmaW5lUHJvcGVydGllcyhPYmplY3QsIE9iamVjdFNoaW1zKTtcblxuICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuICAgIHZhciBFUzVPYmplY3RTaGltcyA9IHtcbiAgICAgIC8vIDE5LjEuMy45XG4gICAgICAvLyBzaGltIGZyb20gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vV2ViUmVmbGVjdGlvbi81NTkzNTU0XG4gICAgICBzZXRQcm90b3R5cGVPZjogKGZ1bmN0aW9uIChPYmplY3QsIG1hZ2ljKSB7XG4gICAgICAgIHZhciBzZXQ7XG5cbiAgICAgICAgdmFyIGNoZWNrQXJncyA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICAgICAgICAgIGlmICghRVMuVHlwZUlzT2JqZWN0KE8pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjYW5ub3Qgc2V0IHByb3RvdHlwZSBvbiBhIG5vbi1vYmplY3QnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCEocHJvdG8gPT09IG51bGwgfHwgRVMuVHlwZUlzT2JqZWN0KHByb3RvKSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NhbiBvbmx5IHNldCBwcm90b3R5cGUgdG8gYW4gb2JqZWN0IG9yIG51bGwnICsgcHJvdG8pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgc2V0UHJvdG90eXBlT2YgPSBmdW5jdGlvbiAoTywgcHJvdG8pIHtcbiAgICAgICAgICBjaGVja0FyZ3MoTywgcHJvdG8pO1xuICAgICAgICAgIF9jYWxsKHNldCwgTywgcHJvdG8pO1xuICAgICAgICAgIHJldHVybiBPO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gdGhpcyB3b3JrcyBhbHJlYWR5IGluIEZpcmVmb3ggYW5kIFNhZmFyaVxuICAgICAgICAgIHNldCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LnByb3RvdHlwZSwgbWFnaWMpLnNldDtcbiAgICAgICAgICBfY2FsbChzZXQsIHt9LCBudWxsKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlICE9PSB7fVttYWdpY10pIHtcbiAgICAgICAgICAgIC8vIElFIDwgMTEgY2Fubm90IGJlIHNoaW1tZWRcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gcHJvYmFibHkgQ2hyb21lIG9yIHNvbWUgb2xkIE1vYmlsZSBzdG9jayBicm93c2VyXG4gICAgICAgICAgc2V0ID0gZnVuY3Rpb24gKHByb3RvKSB7XG4gICAgICAgICAgICB0aGlzW21hZ2ljXSA9IHByb3RvO1xuICAgICAgICAgIH07XG4gICAgICAgICAgLy8gcGxlYXNlIG5vdGUgdGhhdCB0aGlzIHdpbGwgKipub3QqKiB3b3JrXG4gICAgICAgICAgLy8gaW4gdGhvc2UgYnJvd3NlcnMgdGhhdCBkbyBub3QgaW5oZXJpdFxuICAgICAgICAgIC8vIF9fcHJvdG9fXyBieSBtaXN0YWtlIGZyb20gT2JqZWN0LnByb3RvdHlwZVxuICAgICAgICAgIC8vIGluIHRoZXNlIGNhc2VzIHdlIHNob3VsZCBwcm9iYWJseSB0aHJvdyBhbiBlcnJvclxuICAgICAgICAgIC8vIG9yIGF0IGxlYXN0IGJlIGluZm9ybWVkIGFib3V0IHRoZSBpc3N1ZVxuICAgICAgICAgIHNldFByb3RvdHlwZU9mLnBvbHlmaWxsID0gc2V0UHJvdG90eXBlT2YoXG4gICAgICAgICAgICBzZXRQcm90b3R5cGVPZih7fSwgbnVsbCksXG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlXG4gICAgICAgICAgKSBpbnN0YW5jZW9mIE9iamVjdDtcbiAgICAgICAgICAvLyBzZXRQcm90b3R5cGVPZi5wb2x5ZmlsbCA9PT0gdHJ1ZSBtZWFucyBpdCB3b3JrcyBhcyBtZWFudFxuICAgICAgICAgIC8vIHNldFByb3RvdHlwZU9mLnBvbHlmaWxsID09PSBmYWxzZSBtZWFucyBpdCdzIG5vdCAxMDAlIHJlbGlhYmxlXG4gICAgICAgICAgLy8gc2V0UHJvdG90eXBlT2YucG9seWZpbGwgPT09IHVuZGVmaW5lZFxuICAgICAgICAgIC8vIG9yXG4gICAgICAgICAgLy8gc2V0UHJvdG90eXBlT2YucG9seWZpbGwgPT0gIG51bGwgbWVhbnMgaXQncyBub3QgYSBwb2x5ZmlsbFxuICAgICAgICAgIC8vIHdoaWNoIG1lYW5zIGl0IHdvcmtzIGFzIGV4cGVjdGVkXG4gICAgICAgICAgLy8gd2UgY2FuIGV2ZW4gZGVsZXRlIE9iamVjdC5wcm90b3R5cGUuX19wcm90b19fO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXRQcm90b3R5cGVPZjtcbiAgICAgIH0oT2JqZWN0LCAnX19wcm90b19fJykpXG4gICAgfTtcblxuICAgIGRlZmluZVByb3BlcnRpZXMoT2JqZWN0LCBFUzVPYmplY3RTaGltcyk7XG4gIH1cblxuICAvLyBXb3JrYXJvdW5kIGJ1ZyBpbiBPcGVyYSAxMiB3aGVyZSBzZXRQcm90b3R5cGVPZih4LCBudWxsKSBkb2Vzbid0IHdvcmssXG4gIC8vIGJ1dCBPYmplY3QuY3JlYXRlKG51bGwpIGRvZXMuXG4gIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mICYmXG4gICAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YoT2JqZWN0LnNldFByb3RvdHlwZU9mKHt9LCBudWxsKSkgIT09IG51bGwgJiZcbiAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZihPYmplY3QuY3JlYXRlKG51bGwpKSA9PT0gbnVsbCkge1xuICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgRkFLRU5VTEwgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgdmFyIGdwbyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgICAgIHZhciBzcG8gPSBPYmplY3Quc2V0UHJvdG90eXBlT2Y7XG4gICAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YgPSBmdW5jdGlvbiAobykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gZ3BvKG8pO1xuICAgICAgICByZXR1cm4gcmVzdWx0ID09PSBGQUtFTlVMTCA/IG51bGwgOiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mID0gZnVuY3Rpb24gKG8sIHApIHtcbiAgICAgICAgdmFyIHByb3RvID0gcCA9PT0gbnVsbCA/IEZBS0VOVUxMIDogcDtcbiAgICAgICAgcmV0dXJuIHNwbyhvLCBwcm90byk7XG4gICAgICB9O1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mLnBvbHlmaWxsID0gZmFsc2U7XG4gICAgfSgpKTtcbiAgfVxuXG4gIHZhciBvYmplY3RLZXlzQWNjZXB0c1ByaW1pdGl2ZXMgPSAhdGhyb3dzRXJyb3IoZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JqZWN0LmtleXMoJ2ZvbycpOyB9KTtcbiAgaWYgKCFvYmplY3RLZXlzQWNjZXB0c1ByaW1pdGl2ZXMpIHtcbiAgICB2YXIgb3JpZ2luYWxPYmplY3RLZXlzID0gT2JqZWN0LmtleXM7XG4gICAgb3ZlcnJpZGVOYXRpdmUoT2JqZWN0LCAna2V5cycsIGZ1bmN0aW9uIGtleXModmFsdWUpIHtcbiAgICAgIHJldHVybiBvcmlnaW5hbE9iamVjdEtleXMoRVMuVG9PYmplY3QodmFsdWUpKTtcbiAgICB9KTtcbiAgICBrZXlzID0gT2JqZWN0LmtleXM7XG4gIH1cbiAgdmFyIG9iamVjdEtleXNSZWplY3RzUmVnZXggPSB0aHJvd3NFcnJvcihmdW5jdGlvbiAoKSB7IHJldHVybiBPYmplY3Qua2V5cygvYS9nKTsgfSk7XG4gIGlmIChvYmplY3RLZXlzUmVqZWN0c1JlZ2V4KSB7XG4gICAgdmFyIHJlZ2V4UmVqZWN0aW5nT2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzO1xuICAgIG92ZXJyaWRlTmF0aXZlKE9iamVjdCwgJ2tleXMnLCBmdW5jdGlvbiBrZXlzKHZhbHVlKSB7XG4gICAgICBpZiAoVHlwZS5yZWdleCh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIHJlZ2V4S2V5cyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBrIGluIHZhbHVlKSB7XG4gICAgICAgICAgaWYgKF9oYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgaykpIHtcbiAgICAgICAgICAgIF9wdXNoKHJlZ2V4S2V5cywgayk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWdleEtleXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVnZXhSZWplY3RpbmdPYmplY3RLZXlzKHZhbHVlKTtcbiAgICB9KTtcbiAgICBrZXlzID0gT2JqZWN0LmtleXM7XG4gIH1cblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMpIHtcbiAgICB2YXIgb2JqZWN0R09QTkFjY2VwdHNQcmltaXRpdmVzID0gIXRocm93c0Vycm9yKGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKCdmb28nKTsgfSk7XG4gICAgaWYgKCFvYmplY3RHT1BOQWNjZXB0c1ByaW1pdGl2ZXMpIHtcbiAgICAgIHZhciBjYWNoZWRXaW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuICAgICAgdmFyIG9yaWdpbmFsT2JqZWN0R2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoT2JqZWN0LCAnZ2V0T3duUHJvcGVydHlOYW1lcycsIGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXModmFsdWUpIHtcbiAgICAgICAgdmFyIHZhbCA9IEVTLlRvT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgaWYgKF90b1N0cmluZyh2YWwpID09PSAnW29iamVjdCBXaW5kb3ddJykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxPYmplY3RHZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gSUUgYnVnIHdoZXJlIGxheW91dCBlbmdpbmUgY2FsbHMgdXNlcmxhbmQgZ09QTiBmb3IgY3Jvc3MtZG9tYWluIGB3aW5kb3dgIG9iamVjdHNcbiAgICAgICAgICAgIHJldHVybiBfY29uY2F0KFtdLCBjYWNoZWRXaW5kb3dOYW1lcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcmlnaW5hbE9iamVjdEdldE93blByb3BlcnR5TmFtZXModmFsKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcikge1xuICAgIHZhciBvYmplY3RHT1BEQWNjZXB0c1ByaW1pdGl2ZXMgPSAhdGhyb3dzRXJyb3IoZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcignZm9vJywgJ2JhcicpOyB9KTtcbiAgICBpZiAoIW9iamVjdEdPUERBY2NlcHRzUHJpbWl0aXZlcykge1xuICAgICAgdmFyIG9yaWdpbmFsT2JqZWN0R2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgICAgIG92ZXJyaWRlTmF0aXZlKE9iamVjdCwgJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwgcHJvcGVydHkpIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsT2JqZWN0R2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEVTLlRvT2JqZWN0KHZhbHVlKSwgcHJvcGVydHkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGlmIChPYmplY3Quc2VhbCkge1xuICAgIHZhciBvYmplY3RTZWFsQWNjZXB0c1ByaW1pdGl2ZXMgPSAhdGhyb3dzRXJyb3IoZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JqZWN0LnNlYWwoJ2ZvbycpOyB9KTtcbiAgICBpZiAoIW9iamVjdFNlYWxBY2NlcHRzUHJpbWl0aXZlcykge1xuICAgICAgdmFyIG9yaWdpbmFsT2JqZWN0U2VhbCA9IE9iamVjdC5zZWFsO1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoT2JqZWN0LCAnc2VhbCcsIGZ1bmN0aW9uIHNlYWwodmFsdWUpIHtcbiAgICAgICAgaWYgKCFFUy5UeXBlSXNPYmplY3QodmFsdWUpKSB7IHJldHVybiB2YWx1ZTsgfVxuICAgICAgICByZXR1cm4gb3JpZ2luYWxPYmplY3RTZWFsKHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBpZiAoT2JqZWN0LmlzU2VhbGVkKSB7XG4gICAgdmFyIG9iamVjdElzU2VhbGVkQWNjZXB0c1ByaW1pdGl2ZXMgPSAhdGhyb3dzRXJyb3IoZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JqZWN0LmlzU2VhbGVkKCdmb28nKTsgfSk7XG4gICAgaWYgKCFvYmplY3RJc1NlYWxlZEFjY2VwdHNQcmltaXRpdmVzKSB7XG4gICAgICB2YXIgb3JpZ2luYWxPYmplY3RJc1NlYWxlZCA9IE9iamVjdC5pc1NlYWxlZDtcbiAgICAgIG92ZXJyaWRlTmF0aXZlKE9iamVjdCwgJ2lzU2VhbGVkJywgZnVuY3Rpb24gaXNTZWFsZWQodmFsdWUpIHtcbiAgICAgICAgaWYgKCFFUy5UeXBlSXNPYmplY3QodmFsdWUpKSB7IHJldHVybiB0cnVlOyB9XG4gICAgICAgIHJldHVybiBvcmlnaW5hbE9iamVjdElzU2VhbGVkKHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBpZiAoT2JqZWN0LmZyZWV6ZSkge1xuICAgIHZhciBvYmplY3RGcmVlemVBY2NlcHRzUHJpbWl0aXZlcyA9ICF0aHJvd3NFcnJvcihmdW5jdGlvbiAoKSB7IHJldHVybiBPYmplY3QuZnJlZXplKCdmb28nKTsgfSk7XG4gICAgaWYgKCFvYmplY3RGcmVlemVBY2NlcHRzUHJpbWl0aXZlcykge1xuICAgICAgdmFyIG9yaWdpbmFsT2JqZWN0RnJlZXplID0gT2JqZWN0LmZyZWV6ZTtcbiAgICAgIG92ZXJyaWRlTmF0aXZlKE9iamVjdCwgJ2ZyZWV6ZScsIGZ1bmN0aW9uIGZyZWV6ZSh2YWx1ZSkge1xuICAgICAgICBpZiAoIUVTLlR5cGVJc09iamVjdCh2YWx1ZSkpIHsgcmV0dXJuIHZhbHVlOyB9XG4gICAgICAgIHJldHVybiBvcmlnaW5hbE9iamVjdEZyZWV6ZSh2YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgaWYgKE9iamVjdC5pc0Zyb3plbikge1xuICAgIHZhciBvYmplY3RJc0Zyb3plbkFjY2VwdHNQcmltaXRpdmVzID0gIXRocm93c0Vycm9yKGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9iamVjdC5pc0Zyb3plbignZm9vJyk7IH0pO1xuICAgIGlmICghb2JqZWN0SXNGcm96ZW5BY2NlcHRzUHJpbWl0aXZlcykge1xuICAgICAgdmFyIG9yaWdpbmFsT2JqZWN0SXNGcm96ZW4gPSBPYmplY3QuaXNGcm96ZW47XG4gICAgICBvdmVycmlkZU5hdGl2ZShPYmplY3QsICdpc0Zyb3plbicsIGZ1bmN0aW9uIGlzRnJvemVuKHZhbHVlKSB7XG4gICAgICAgIGlmICghRVMuVHlwZUlzT2JqZWN0KHZhbHVlKSkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgICByZXR1cm4gb3JpZ2luYWxPYmplY3RJc0Zyb3plbih2YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgaWYgKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucykge1xuICAgIHZhciBvYmplY3RQcmV2ZW50RXh0ZW5zaW9uc0FjY2VwdHNQcmltaXRpdmVzID0gIXRocm93c0Vycm9yKGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucygnZm9vJyk7IH0pO1xuICAgIGlmICghb2JqZWN0UHJldmVudEV4dGVuc2lvbnNBY2NlcHRzUHJpbWl0aXZlcykge1xuICAgICAgdmFyIG9yaWdpbmFsT2JqZWN0UHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XG4gICAgICBvdmVycmlkZU5hdGl2ZShPYmplY3QsICdwcmV2ZW50RXh0ZW5zaW9ucycsIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHZhbHVlKSB7XG4gICAgICAgIGlmICghRVMuVHlwZUlzT2JqZWN0KHZhbHVlKSkgeyByZXR1cm4gdmFsdWU7IH1cbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsT2JqZWN0UHJldmVudEV4dGVuc2lvbnModmFsdWUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGlmIChPYmplY3QuaXNFeHRlbnNpYmxlKSB7XG4gICAgdmFyIG9iamVjdElzRXh0ZW5zaWJsZUFjY2VwdHNQcmltaXRpdmVzID0gIXRocm93c0Vycm9yKGZ1bmN0aW9uICgpIHsgcmV0dXJuIE9iamVjdC5pc0V4dGVuc2libGUoJ2ZvbycpOyB9KTtcbiAgICBpZiAoIW9iamVjdElzRXh0ZW5zaWJsZUFjY2VwdHNQcmltaXRpdmVzKSB7XG4gICAgICB2YXIgb3JpZ2luYWxPYmplY3RJc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoT2JqZWN0LCAnaXNFeHRlbnNpYmxlJywgZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHZhbHVlKSB7XG4gICAgICAgIGlmICghRVMuVHlwZUlzT2JqZWN0KHZhbHVlKSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsT2JqZWN0SXNFeHRlbnNpYmxlKHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBpZiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKSB7XG4gICAgdmFyIG9iamVjdEdldFByb3RvQWNjZXB0c1ByaW1pdGl2ZXMgPSAhdGhyb3dzRXJyb3IoZnVuY3Rpb24gKCkgeyByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKCdmb28nKTsgfSk7XG4gICAgaWYgKCFvYmplY3RHZXRQcm90b0FjY2VwdHNQcmltaXRpdmVzKSB7XG4gICAgICB2YXIgb3JpZ2luYWxHZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgICAgIG92ZXJyaWRlTmF0aXZlKE9iamVjdCwgJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsR2V0UHJvdG8oRVMuVG9PYmplY3QodmFsdWUpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBoYXNGbGFncyA9IHN1cHBvcnRzRGVzY3JpcHRvcnMgJiYgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJyk7XG4gICAgcmV0dXJuIGRlc2MgJiYgRVMuSXNDYWxsYWJsZShkZXNjLmdldCk7XG4gIH0oKSk7XG4gIGlmIChzdXBwb3J0c0Rlc2NyaXB0b3JzICYmICFoYXNGbGFncykge1xuICAgIHZhciByZWdFeHBGbGFnc0dldHRlciA9IGZ1bmN0aW9uIGZsYWdzKCkge1xuICAgICAgaWYgKCFFUy5UeXBlSXNPYmplY3QodGhpcykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTWV0aG9kIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgdHlwZTogbXVzdCBiZSBhbiBvYmplY3QuJyk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICBpZiAodGhpcy5nbG9iYWwpIHtcbiAgICAgICAgcmVzdWx0ICs9ICdnJztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmlnbm9yZUNhc2UpIHtcbiAgICAgICAgcmVzdWx0ICs9ICdpJztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm11bHRpbGluZSkge1xuICAgICAgICByZXN1bHQgKz0gJ20nO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMudW5pY29kZSkge1xuICAgICAgICByZXN1bHQgKz0gJ3UnO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc3RpY2t5KSB7XG4gICAgICAgIHJlc3VsdCArPSAneSc7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBWYWx1ZS5nZXR0ZXIoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywgcmVnRXhwRmxhZ3NHZXR0ZXIpO1xuICB9XG5cbiAgdmFyIHJlZ0V4cFN1cHBvcnRzRmxhZ3NXaXRoUmVnZXggPSBzdXBwb3J0c0Rlc2NyaXB0b3JzICYmIHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gU3RyaW5nKG5ldyBSZWdFeHAoL2EvZywgJ2knKSkgPT09ICcvYS9pJztcbiAgfSk7XG4gIHZhciByZWdFeHBOZWVkc1RvU3VwcG9ydFN5bWJvbE1hdGNoID0gaGFzU3ltYm9scyAmJiBzdXBwb3J0c0Rlc2NyaXB0b3JzICYmIChmdW5jdGlvbiAoKSB7XG4gICAgLy8gRWRnZSAwLjEyIHN1cHBvcnRzIGZsYWdzIGZ1bGx5LCBidXQgZG9lcyBub3Qgc3VwcG9ydCBTeW1ib2wubWF0Y2hcbiAgICB2YXIgcmVnZXggPSAvLi87XG4gICAgcmVnZXhbU3ltYm9sLm1hdGNoXSA9IGZhbHNlO1xuICAgIHJldHVybiBSZWdFeHAocmVnZXgpID09PSByZWdleDtcbiAgfSgpKTtcblxuICB2YXIgcmVnZXhUb1N0cmluZ0lzR2VuZXJpYyA9IHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHsgc291cmNlOiAnYWJjJyB9KSA9PT0gJy9hYmMvJztcbiAgfSk7XG4gIHZhciByZWdleFRvU3RyaW5nU3VwcG9ydHNHZW5lcmljRmxhZ3MgPSByZWdleFRvU3RyaW5nSXNHZW5lcmljICYmIHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgPT09ICcvYS9iJztcbiAgfSk7XG4gIGlmICghcmVnZXhUb1N0cmluZ0lzR2VuZXJpYyB8fCAhcmVnZXhUb1N0cmluZ1N1cHBvcnRzR2VuZXJpY0ZsYWdzKSB7XG4gICAgdmFyIG9yaWdSZWdFeHBUb1N0cmluZyA9IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmc7XG4gICAgZGVmaW5lUHJvcGVydHkoUmVnRXhwLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICB2YXIgUiA9IEVTLlJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICBpZiAoVHlwZS5yZWdleChSKSkge1xuICAgICAgICByZXR1cm4gX2NhbGwob3JpZ1JlZ0V4cFRvU3RyaW5nLCBSKTtcbiAgICAgIH1cbiAgICAgIHZhciBwYXR0ZXJuID0gJFN0cmluZyhSLnNvdXJjZSk7XG4gICAgICB2YXIgZmxhZ3MgPSAkU3RyaW5nKFIuZmxhZ3MpO1xuICAgICAgcmV0dXJuICcvJyArIHBhdHRlcm4gKyAnLycgKyBmbGFncztcbiAgICB9LCB0cnVlKTtcbiAgICBWYWx1ZS5wcmVzZXJ2ZVRvU3RyaW5nKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcsIG9yaWdSZWdFeHBUb1N0cmluZyk7XG4gIH1cblxuICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycyAmJiAoIXJlZ0V4cFN1cHBvcnRzRmxhZ3NXaXRoUmVnZXggfHwgcmVnRXhwTmVlZHNUb1N1cHBvcnRTeW1ib2xNYXRjaCkpIHtcbiAgICB2YXIgZmxhZ3NHZXR0ZXIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycpLmdldDtcbiAgICB2YXIgc291cmNlRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoUmVnRXhwLnByb3RvdHlwZSwgJ3NvdXJjZScpIHx8IHt9O1xuICAgIHZhciBsZWdhY3lTb3VyY2VHZXR0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBwcmlvciB0byBpdCBiZWluZyBhIGdldHRlciwgaXQncyBvd24gKyBub25jb25maWd1cmFibGVcbiAgICAgIHJldHVybiB0aGlzLnNvdXJjZTtcbiAgICB9O1xuICAgIHZhciBzb3VyY2VHZXR0ZXIgPSBFUy5Jc0NhbGxhYmxlKHNvdXJjZURlc2MuZ2V0KSA/IHNvdXJjZURlc2MuZ2V0IDogbGVnYWN5U291cmNlR2V0dGVyO1xuXG4gICAgdmFyIE9yaWdSZWdFeHAgPSBSZWdFeHA7XG4gICAgdmFyIFJlZ0V4cFNoaW0gPSAoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIFJlZ0V4cChwYXR0ZXJuLCBmbGFncykge1xuICAgICAgICB2YXIgcGF0dGVybklzUmVnRXhwID0gRVMuSXNSZWdFeHAocGF0dGVybik7XG4gICAgICAgIHZhciBjYWxsZWRXaXRoTmV3ID0gdGhpcyBpbnN0YW5jZW9mIFJlZ0V4cDtcbiAgICAgICAgaWYgKCFjYWxsZWRXaXRoTmV3ICYmIHBhdHRlcm5Jc1JlZ0V4cCAmJiB0eXBlb2YgZmxhZ3MgPT09ICd1bmRlZmluZWQnICYmIHBhdHRlcm4uY29uc3RydWN0b3IgPT09IFJlZ0V4cCkge1xuICAgICAgICAgIHJldHVybiBwYXR0ZXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIFAgPSBwYXR0ZXJuO1xuICAgICAgICB2YXIgRiA9IGZsYWdzO1xuICAgICAgICBpZiAoVHlwZS5yZWdleChwYXR0ZXJuKSkge1xuICAgICAgICAgIFAgPSBFUy5DYWxsKHNvdXJjZUdldHRlciwgcGF0dGVybik7XG4gICAgICAgICAgRiA9IHR5cGVvZiBmbGFncyA9PT0gJ3VuZGVmaW5lZCcgPyBFUy5DYWxsKGZsYWdzR2V0dGVyLCBwYXR0ZXJuKSA6IGZsYWdzO1xuICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKFAsIEYpO1xuICAgICAgICB9IGVsc2UgaWYgKHBhdHRlcm5Jc1JlZ0V4cCkge1xuICAgICAgICAgIFAgPSBwYXR0ZXJuLnNvdXJjZTtcbiAgICAgICAgICBGID0gdHlwZW9mIGZsYWdzID09PSAndW5kZWZpbmVkJyA/IHBhdHRlcm4uZmxhZ3MgOiBmbGFncztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IE9yaWdSZWdFeHAocGF0dGVybiwgZmxhZ3MpO1xuICAgICAgfTtcbiAgICB9KCkpO1xuICAgIHdyYXBDb25zdHJ1Y3RvcihPcmlnUmVnRXhwLCBSZWdFeHBTaGltLCB7XG4gICAgICAkaW5wdXQ6IHRydWUgLy8gQ2hyb21lIDwgdjM5ICYgT3BlcmEgPCAyNiBoYXZlIGEgbm9uc3RhbmRhcmQgXCIkaW5wdXRcIiBwcm9wZXJ0eVxuICAgIH0pO1xuICAgIC8qIGdsb2JhbHMgUmVnRXhwOiB0cnVlICovXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYsIG5vLWdsb2JhbC1hc3NpZ24gKi9cbiAgICBSZWdFeHAgPSBSZWdFeHBTaGltO1xuICAgIFZhbHVlLnJlZGVmaW5lKGdsb2JhbHMsICdSZWdFeHAnLCBSZWdFeHBTaGltKTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZGVmLCBuby1nbG9iYWwtYXNzaWduICovXG4gICAgLyogZ2xvYmFscyBSZWdFeHA6IGZhbHNlICovXG4gIH1cblxuICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuICAgIHZhciByZWdleEdsb2JhbHMgPSB7XG4gICAgICBpbnB1dDogJyRfJyxcbiAgICAgIGxhc3RNYXRjaDogJyQmJyxcbiAgICAgIGxhc3RQYXJlbjogJyQrJyxcbiAgICAgIGxlZnRDb250ZXh0OiAnJGAnLFxuICAgICAgcmlnaHRDb250ZXh0OiAnJFxcJydcbiAgICB9O1xuICAgIF9mb3JFYWNoKGtleXMocmVnZXhHbG9iYWxzKSwgZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgIGlmIChwcm9wIGluIFJlZ0V4cCAmJiAhKHJlZ2V4R2xvYmFsc1twcm9wXSBpbiBSZWdFeHApKSB7XG4gICAgICAgIFZhbHVlLmdldHRlcihSZWdFeHAsIHJlZ2V4R2xvYmFsc1twcm9wXSwgZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBSZWdFeHBbcHJvcF07XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGFkZERlZmF1bHRTcGVjaWVzKFJlZ0V4cCk7XG5cbiAgdmFyIGludmVyc2VFcHNpbG9uID0gMSAvIE51bWJlci5FUFNJTE9OO1xuICB2YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24gcm91bmRUaWVzVG9FdmVuKG4pIHtcbiAgICAvLyBFdmVuIHRob3VnaCB0aGlzIHJlZHVjZXMgZG93biB0byBgcmV0dXJuIG5gLCBpdCB0YWtlcyBhZHZhbnRhZ2Ugb2YgYnVpbHQtaW4gcm91bmRpbmcuXG4gICAgcmV0dXJuIChuICsgaW52ZXJzZUVwc2lsb24pIC0gaW52ZXJzZUVwc2lsb247XG4gIH07XG4gIHZhciBCSU5BUllfMzJfRVBTSUxPTiA9IE1hdGgucG93KDIsIC0yMyk7XG4gIHZhciBCSU5BUllfMzJfTUFYX1ZBTFVFID0gTWF0aC5wb3coMiwgMTI3KSAqICgyIC0gQklOQVJZXzMyX0VQU0lMT04pO1xuICB2YXIgQklOQVJZXzMyX01JTl9WQUxVRSA9IE1hdGgucG93KDIsIC0xMjYpO1xuICB2YXIgRSA9IE1hdGguRTtcbiAgdmFyIExPRzJFID0gTWF0aC5MT0cyRTtcbiAgdmFyIExPRzEwRSA9IE1hdGguTE9HMTBFO1xuICB2YXIgbnVtYmVyQ0xaID0gTnVtYmVyLnByb3RvdHlwZS5jbHo7XG4gIGRlbGV0ZSBOdW1iZXIucHJvdG90eXBlLmNsejsgLy8gU2FmYXJpIDggaGFzIE51bWJlciNjbHpcblxuICB2YXIgTWF0aFNoaW1zID0ge1xuICAgIGFjb3NoOiBmdW5jdGlvbiBhY29zaCh2YWx1ZSkge1xuICAgICAgdmFyIHggPSBOdW1iZXIodmFsdWUpO1xuICAgICAgaWYgKG51bWJlcklzTmFOKHgpIHx8IHZhbHVlIDwgMSkgeyByZXR1cm4gTmFOOyB9XG4gICAgICBpZiAoeCA9PT0gMSkgeyByZXR1cm4gMDsgfVxuICAgICAgaWYgKHggPT09IEluZmluaXR5KSB7IHJldHVybiB4OyB9XG5cbiAgICAgIHZhciB4SW52U3F1YXJlZCA9IDEgLyAoeCAqIHgpO1xuICAgICAgaWYgKHggPCAyKSB7XG4gICAgICAgIHJldHVybiBfbG9nMXAoeCAtIDEgKyAoX3NxcnQoMSAtIHhJbnZTcXVhcmVkKSAqIHgpKTtcbiAgICAgIH1cbiAgICAgIHZhciBoYWxmWCA9IHggLyAyO1xuICAgICAgcmV0dXJuIF9sb2cxcChoYWxmWCArIChfc3FydCgxIC0geEludlNxdWFyZWQpICogaGFsZlgpIC0gMSkgKyAoMSAvIExPRzJFKTtcbiAgICB9LFxuXG4gICAgYXNpbmg6IGZ1bmN0aW9uIGFzaW5oKHZhbHVlKSB7XG4gICAgICB2YXIgeCA9IE51bWJlcih2YWx1ZSk7XG4gICAgICBpZiAoeCA9PT0gMCB8fCAhZ2xvYmFsSXNGaW5pdGUoeCkpIHtcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgICB9XG5cbiAgICAgIHZhciBhID0gX2Ficyh4KTtcbiAgICAgIHZhciBhU3F1YXJlZCA9IGEgKiBhO1xuICAgICAgdmFyIHMgPSBfc2lnbih4KTtcbiAgICAgIGlmIChhIDwgMSkge1xuICAgICAgICByZXR1cm4gcyAqIF9sb2cxcChhICsgKGFTcXVhcmVkIC8gKF9zcXJ0KGFTcXVhcmVkICsgMSkgKyAxKSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHMgKiAoX2xvZzFwKChhIC8gMikgKyAoX3NxcnQoMSArICgxIC8gYVNxdWFyZWQpKSAqIGEgLyAyKSAtIDEpICsgKDEgLyBMT0cyRSkpO1xuICAgIH0sXG5cbiAgICBhdGFuaDogZnVuY3Rpb24gYXRhbmgodmFsdWUpIHtcbiAgICAgIHZhciB4ID0gTnVtYmVyKHZhbHVlKTtcblxuICAgICAgaWYgKHggPT09IDApIHsgcmV0dXJuIHg7IH1cbiAgICAgIGlmICh4ID09PSAtMSkgeyByZXR1cm4gLUluZmluaXR5OyB9XG4gICAgICBpZiAoeCA9PT0gMSkgeyByZXR1cm4gSW5maW5pdHk7IH1cbiAgICAgIGlmIChudW1iZXJJc05hTih4KSB8fCB4IDwgLTEgfHwgeCA+IDEpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgIH1cblxuICAgICAgdmFyIGEgPSBfYWJzKHgpO1xuICAgICAgcmV0dXJuIF9zaWduKHgpICogX2xvZzFwKDIgKiBhIC8gKDEgLSBhKSkgLyAyO1xuICAgIH0sXG5cbiAgICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHZhbHVlKSB7XG4gICAgICB2YXIgeCA9IE51bWJlcih2YWx1ZSk7XG4gICAgICBpZiAoeCA9PT0gMCkgeyByZXR1cm4geDsgfVxuICAgICAgdmFyIG5lZ2F0ZSA9IHggPCAwO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmIChuZWdhdGUpIHsgeCA9IC14OyB9XG4gICAgICBpZiAoeCA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgcmVzdWx0ID0gSW5maW5pdHk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBfZXhwKF9sb2coeCkgLyAzKTtcbiAgICAgICAgLy8gZnJvbSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0N1YmVfcm9vdCNOdW1lcmljYWxfbWV0aG9kc1xuICAgICAgICByZXN1bHQgPSAoKHggLyAocmVzdWx0ICogcmVzdWx0KSkgKyAoMiAqIHJlc3VsdCkpIC8gMztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZWdhdGUgPyAtcmVzdWx0IDogcmVzdWx0O1xuICAgIH0sXG5cbiAgICBjbHozMjogZnVuY3Rpb24gY2x6MzIodmFsdWUpIHtcbiAgICAgIC8vIFNlZSBodHRwczovL2J1Z3MuZWNtYXNjcmlwdC5vcmcvc2hvd19idWcuY2dpP2lkPTI0NjVcbiAgICAgIHZhciB4ID0gTnVtYmVyKHZhbHVlKTtcbiAgICAgIHZhciBudW1iZXIgPSBFUy5Ub1VpbnQzMih4KTtcbiAgICAgIGlmIChudW1iZXIgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIDMyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bWJlckNMWiA/IEVTLkNhbGwobnVtYmVyQ0xaLCBudW1iZXIpIDogMzEgLSBfZmxvb3IoX2xvZyhudW1iZXIgKyAwLjUpICogTE9HMkUpO1xuICAgIH0sXG5cbiAgICBjb3NoOiBmdW5jdGlvbiBjb3NoKHZhbHVlKSB7XG4gICAgICB2YXIgeCA9IE51bWJlcih2YWx1ZSk7XG4gICAgICBpZiAoeCA9PT0gMCkgeyByZXR1cm4gMTsgfSAvLyArMCBvciAtMFxuICAgICAgaWYgKG51bWJlcklzTmFOKHgpKSB7IHJldHVybiBOYU47IH1cbiAgICAgIGlmICghZ2xvYmFsSXNGaW5pdGUoeCkpIHsgcmV0dXJuIEluZmluaXR5OyB9XG5cbiAgICAgIHZhciB0ID0gX2V4cChfYWJzKHgpIC0gMSk7XG4gICAgICByZXR1cm4gKHQgKyAoMSAvICh0ICogRSAqIEUpKSkgKiAoRSAvIDIpO1xuICAgIH0sXG5cbiAgICBleHBtMTogZnVuY3Rpb24gZXhwbTEodmFsdWUpIHtcbiAgICAgIHZhciB4ID0gTnVtYmVyKHZhbHVlKTtcbiAgICAgIGlmICh4ID09PSAtSW5maW5pdHkpIHsgcmV0dXJuIC0xOyB9XG4gICAgICBpZiAoIWdsb2JhbElzRmluaXRlKHgpIHx8IHggPT09IDApIHsgcmV0dXJuIHg7IH1cbiAgICAgIGlmIChfYWJzKHgpID4gMC41KSB7XG4gICAgICAgIHJldHVybiBfZXhwKHgpIC0gMTtcbiAgICAgIH1cbiAgICAgIC8vIEEgbW9yZSBwcmVjaXNlIGFwcHJveGltYXRpb24gdXNpbmcgVGF5bG9yIHNlcmllcyBleHBhbnNpb25cbiAgICAgIC8vIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3BhdWxtaWxsci9lczYtc2hpbS9pc3N1ZXMvMzE0I2lzc3VlY29tbWVudC03MDI5Mzk4NlxuICAgICAgdmFyIHQgPSB4O1xuICAgICAgdmFyIHN1bSA9IDA7XG4gICAgICB2YXIgbiA9IDE7XG4gICAgICB3aGlsZSAoc3VtICsgdCAhPT0gc3VtKSB7XG4gICAgICAgIHN1bSArPSB0O1xuICAgICAgICBuICs9IDE7XG4gICAgICAgIHQgKj0geCAvIG47XG4gICAgICB9XG4gICAgICByZXR1cm4gc3VtO1xuICAgIH0sXG5cbiAgICBoeXBvdDogZnVuY3Rpb24gaHlwb3QoeCwgeSkge1xuICAgICAgdmFyIHJlc3VsdCA9IDA7XG4gICAgICB2YXIgbGFyZ2VzdCA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBfYWJzKE51bWJlcihhcmd1bWVudHNbaV0pKTtcbiAgICAgICAgaWYgKGxhcmdlc3QgPCB2YWx1ZSkge1xuICAgICAgICAgIHJlc3VsdCAqPSAobGFyZ2VzdCAvIHZhbHVlKSAqIChsYXJnZXN0IC8gdmFsdWUpO1xuICAgICAgICAgIHJlc3VsdCArPSAxO1xuICAgICAgICAgIGxhcmdlc3QgPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgKz0gdmFsdWUgPiAwID8gKHZhbHVlIC8gbGFyZ2VzdCkgKiAodmFsdWUgLyBsYXJnZXN0KSA6IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbGFyZ2VzdCA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmdlc3QgKiBfc3FydChyZXN1bHQpO1xuICAgIH0sXG5cbiAgICBsb2cyOiBmdW5jdGlvbiBsb2cyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gX2xvZyh2YWx1ZSkgKiBMT0cyRTtcbiAgICB9LFxuXG4gICAgbG9nMTA6IGZ1bmN0aW9uIGxvZzEwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gX2xvZyh2YWx1ZSkgKiBMT0cxMEU7XG4gICAgfSxcblxuICAgIGxvZzFwOiBfbG9nMXAsXG5cbiAgICBzaWduOiBfc2lnbixcblxuICAgIHNpbmg6IGZ1bmN0aW9uIHNpbmgodmFsdWUpIHtcbiAgICAgIHZhciB4ID0gTnVtYmVyKHZhbHVlKTtcbiAgICAgIGlmICghZ2xvYmFsSXNGaW5pdGUoeCkgfHwgeCA9PT0gMCkgeyByZXR1cm4geDsgfVxuXG4gICAgICB2YXIgYSA9IF9hYnMoeCk7XG4gICAgICBpZiAoYSA8IDEpIHtcbiAgICAgICAgdmFyIHUgPSBNYXRoLmV4cG0xKGEpO1xuICAgICAgICByZXR1cm4gX3NpZ24oeCkgKiB1ICogKDEgKyAoMSAvICh1ICsgMSkpKSAvIDI7XG4gICAgICB9XG4gICAgICB2YXIgdCA9IF9leHAoYSAtIDEpO1xuICAgICAgcmV0dXJuIF9zaWduKHgpICogKHQgLSAoMSAvICh0ICogRSAqIEUpKSkgKiAoRSAvIDIpO1xuICAgIH0sXG5cbiAgICB0YW5oOiBmdW5jdGlvbiB0YW5oKHZhbHVlKSB7XG4gICAgICB2YXIgeCA9IE51bWJlcih2YWx1ZSk7XG4gICAgICBpZiAobnVtYmVySXNOYU4oeCkgfHwgeCA9PT0gMCkgeyByZXR1cm4geDsgfVxuICAgICAgLy8gY2FuIGV4aXQgZWFybHkgYXQgKy0yMCBhcyBKUyBsb3NlcyBwcmVjaXNpb24gZm9yIHRydWUgdmFsdWUgYXQgdGhpcyBpbnRlZ2VyXG4gICAgICBpZiAoeCA+PSAyMCkgeyByZXR1cm4gMTsgfVxuICAgICAgaWYgKHggPD0gLTIwKSB7IHJldHVybiAtMTsgfVxuXG4gICAgICByZXR1cm4gKE1hdGguZXhwbTEoeCkgLSBNYXRoLmV4cG0xKC14KSkgLyAoX2V4cCh4KSArIF9leHAoLXgpKTtcbiAgICB9LFxuXG4gICAgdHJ1bmM6IGZ1bmN0aW9uIHRydW5jKHZhbHVlKSB7XG4gICAgICB2YXIgeCA9IE51bWJlcih2YWx1ZSk7XG4gICAgICByZXR1cm4geCA8IDAgPyAtX2Zsb29yKC14KSA6IF9mbG9vcih4KTtcbiAgICB9LFxuXG4gICAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KSB7XG4gICAgICAvLyB0YWtlbiBmcm9tIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL01hdGgvaW11bFxuICAgICAgdmFyIGEgPSBFUy5Ub1VpbnQzMih4KTtcbiAgICAgIHZhciBiID0gRVMuVG9VaW50MzIoeSk7XG4gICAgICB2YXIgYWggPSAoYSA+Pj4gMTYpICYgMHhmZmZmO1xuICAgICAgdmFyIGFsID0gYSAmIDB4ZmZmZjtcbiAgICAgIHZhciBiaCA9IChiID4+PiAxNikgJiAweGZmZmY7XG4gICAgICB2YXIgYmwgPSBiICYgMHhmZmZmO1xuICAgICAgLy8gdGhlIHNoaWZ0IGJ5IDAgZml4ZXMgdGhlIHNpZ24gb24gdGhlIGhpZ2ggcGFydFxuICAgICAgLy8gdGhlIGZpbmFsIHwwIGNvbnZlcnRzIHRoZSB1bnNpZ25lZCB2YWx1ZSBpbnRvIGEgc2lnbmVkIHZhbHVlXG4gICAgICByZXR1cm4gKGFsICogYmwpICsgKCgoKGFoICogYmwpICsgKGFsICogYmgpKSA8PCAxNikgPj4+IDApIHwgMDtcbiAgICB9LFxuXG4gICAgZnJvdW5kOiBmdW5jdGlvbiBmcm91bmQoeCkge1xuICAgICAgdmFyIHYgPSBOdW1iZXIoeCk7XG4gICAgICBpZiAodiA9PT0gMCB8fCB2ID09PSBJbmZpbml0eSB8fCB2ID09PSAtSW5maW5pdHkgfHwgbnVtYmVySXNOYU4odikpIHtcbiAgICAgICAgcmV0dXJuIHY7XG4gICAgICB9XG4gICAgICB2YXIgc2lnbiA9IF9zaWduKHYpO1xuICAgICAgdmFyIGFicyA9IF9hYnModik7XG4gICAgICBpZiAoYWJzIDwgQklOQVJZXzMyX01JTl9WQUxVRSkge1xuICAgICAgICByZXR1cm4gc2lnbiAqIHJvdW5kVGllc1RvRXZlbihhYnMgLyBCSU5BUllfMzJfTUlOX1ZBTFVFIC8gQklOQVJZXzMyX0VQU0lMT04pICogQklOQVJZXzMyX01JTl9WQUxVRSAqIEJJTkFSWV8zMl9FUFNJTE9OO1xuICAgICAgfVxuICAgICAgLy8gVmVsdGthbXAncyBzcGxpdHRpbmcgKD8pXG4gICAgICB2YXIgYSA9ICgxICsgKEJJTkFSWV8zMl9FUFNJTE9OIC8gTnVtYmVyLkVQU0lMT04pKSAqIGFicztcbiAgICAgIHZhciByZXN1bHQgPSBhIC0gKGEgLSBhYnMpO1xuICAgICAgaWYgKHJlc3VsdCA+IEJJTkFSWV8zMl9NQVhfVkFMVUUgfHwgbnVtYmVySXNOYU4ocmVzdWx0KSkge1xuICAgICAgICByZXR1cm4gc2lnbiAqIEluZmluaXR5O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNpZ24gKiByZXN1bHQ7XG4gICAgfVxuICB9O1xuXG4gIHZhciB3aXRoaW5VTFBEaXN0YW5jZSA9IGZ1bmN0aW9uIHdpdGhpblVMUERpc3RhbmNlKHJlc3VsdCwgZXhwZWN0ZWQsIGRpc3RhbmNlKSB7XG4gICAgcmV0dXJuIF9hYnMoMSAtIChyZXN1bHQgLyBleHBlY3RlZCkpIC8gTnVtYmVyLkVQU0lMT04gPCAoZGlzdGFuY2UgfHwgOCk7XG4gIH07XG5cbiAgZGVmaW5lUHJvcGVydGllcyhNYXRoLCBNYXRoU2hpbXMpO1xuICAvLyBDaHJvbWUgPCA0MCBzaW5oIHJldHVybnMg4oieIGZvciBsYXJnZSBudW1iZXJzXG4gIGRlZmluZVByb3BlcnR5KE1hdGgsICdzaW5oJywgTWF0aFNoaW1zLnNpbmgsIE1hdGguc2luaCg3MTApID09PSBJbmZpbml0eSk7XG4gIC8vIENocm9tZSA8IDQwIGNvc2ggcmV0dXJucyDiiJ4gZm9yIGxhcmdlIG51bWJlcnNcbiAgZGVmaW5lUHJvcGVydHkoTWF0aCwgJ2Nvc2gnLCBNYXRoU2hpbXMuY29zaCwgTWF0aC5jb3NoKDcxMCkgPT09IEluZmluaXR5KTtcbiAgLy8gSUUgMTEgVFAgaGFzIGFuIGltcHJlY2lzZSBsb2cxcDogcmVwb3J0cyBNYXRoLmxvZzFwKC0xZS0xNykgYXMgMFxuICBkZWZpbmVQcm9wZXJ0eShNYXRoLCAnbG9nMXAnLCBNYXRoU2hpbXMubG9nMXAsIE1hdGgubG9nMXAoLTFlLTE3KSAhPT0gLTFlLTE3KTtcbiAgLy8gSUUgMTEgVFAgaGFzIGFuIGltcHJlY2lzZSBhc2luaDogcmVwb3J0cyBNYXRoLmFzaW5oKC0xZTcpIGFzIG5vdCBleGFjdGx5IGVxdWFsIHRvIC1NYXRoLmFzaW5oKDFlNylcbiAgZGVmaW5lUHJvcGVydHkoTWF0aCwgJ2FzaW5oJywgTWF0aFNoaW1zLmFzaW5oLCBNYXRoLmFzaW5oKC0xZTcpICE9PSAtTWF0aC5hc2luaCgxZTcpKTtcbiAgLy8gQ2hyb21lIDwgNTQgYXNpbmggcmV0dXJucyDiiJ4gZm9yIGxhcmdlIG51bWJlcnMgYW5kIHNob3VsZCBub3RcbiAgZGVmaW5lUHJvcGVydHkoTWF0aCwgJ2FzaW5oJywgTWF0aFNoaW1zLmFzaW5oLCBNYXRoLmFzaW5oKDFlKzMwMCkgPT09IEluZmluaXR5KTtcbiAgLy8gQ2hyb21lIDwgNTQgYXRhbmggaW5jb3JyZWN0bHkgcmV0dXJucyAwIGZvciBsYXJnZSBudW1iZXJzXG4gIGRlZmluZVByb3BlcnR5KE1hdGgsICdhdGFuaCcsIE1hdGhTaGltcy5hdGFuaCwgTWF0aC5hdGFuaCgxZS0zMDApID09PSAwKTtcbiAgLy8gQ2hyb21lIDQwIGhhcyBhbiBpbXByZWNpc2UgTWF0aC50YW5oIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzXG4gIGRlZmluZVByb3BlcnR5KE1hdGgsICd0YW5oJywgTWF0aFNoaW1zLnRhbmgsIE1hdGgudGFuaCgtMmUtMTcpICE9PSAtMmUtMTcpO1xuICAvLyBDaHJvbWUgNDAgbG9zZXMgTWF0aC5hY29zaCBwcmVjaXNpb24gd2l0aCBoaWdoIG51bWJlcnNcbiAgZGVmaW5lUHJvcGVydHkoTWF0aCwgJ2Fjb3NoJywgTWF0aFNoaW1zLmFjb3NoLCBNYXRoLmFjb3NoKE51bWJlci5NQVhfVkFMVUUpID09PSBJbmZpbml0eSk7XG4gIC8vIENocm9tZSA8IDU0IGhhcyBhbiBpbmFjY3VyYXRlIGFjb3NoIGZvciBFUFNJTE9OIGRlbHRhc1xuICBkZWZpbmVQcm9wZXJ0eShNYXRoLCAnYWNvc2gnLCBNYXRoU2hpbXMuYWNvc2gsICF3aXRoaW5VTFBEaXN0YW5jZShNYXRoLmFjb3NoKDEgKyBOdW1iZXIuRVBTSUxPTiksIE1hdGguc3FydCgyICogTnVtYmVyLkVQU0lMT04pKSk7XG4gIC8vIEZpcmVmb3ggMzggb24gV2luZG93c1xuICBkZWZpbmVQcm9wZXJ0eShNYXRoLCAnY2JydCcsIE1hdGhTaGltcy5jYnJ0LCAhd2l0aGluVUxQRGlzdGFuY2UoTWF0aC5jYnJ0KDFlLTMwMCksIDFlLTEwMCkpO1xuICAvLyBub2RlIDAuMTEgaGFzIGFuIGltcHJlY2lzZSBNYXRoLnNpbmggd2l0aCB2ZXJ5IHNtYWxsIG51bWJlcnNcbiAgZGVmaW5lUHJvcGVydHkoTWF0aCwgJ3NpbmgnLCBNYXRoU2hpbXMuc2luaCwgTWF0aC5zaW5oKC0yZS0xNykgIT09IC0yZS0xNyk7XG4gIC8vIEZGIDM1IG9uIExpbnV4IHJlcG9ydHMgMjIwMjUuNDY1Nzk0ODA2NzI1IGZvciBNYXRoLmV4cG0xKDEwKVxuICB2YXIgZXhwbTFPZlRlbiA9IE1hdGguZXhwbTEoMTApO1xuICBkZWZpbmVQcm9wZXJ0eShNYXRoLCAnZXhwbTEnLCBNYXRoU2hpbXMuZXhwbTEsIGV4cG0xT2ZUZW4gPiAyMjAyNS40NjU3OTQ4MDY3MTkgfHwgZXhwbTFPZlRlbiA8IDIyMDI1LjQ2NTc5NDgwNjcxNjUxNjgpO1xuXG4gIHZhciBvcmlnTWF0aFJvdW5kID0gTWF0aC5yb3VuZDtcbiAgLy8gYnJlYWtzIGluIGUuZy4gU2FmYXJpIDgsIEludGVybmV0IEV4cGxvcmVyIDExLCBPcGVyYSAxMlxuICB2YXIgcm91bmRIYW5kbGVzQm91bmRhcnlDb25kaXRpb25zID0gTWF0aC5yb3VuZCgwLjUgLSAoTnVtYmVyLkVQU0lMT04gLyA0KSkgPT09IDAgJiZcbiAgICBNYXRoLnJvdW5kKC0wLjUgKyAoTnVtYmVyLkVQU0lMT04gLyAzLjk5KSkgPT09IDE7XG5cbiAgLy8gV2hlbiBlbmdpbmVzIHVzZSBNYXRoLmZsb29yKHggKyAwLjUpIGludGVybmFsbHksIE1hdGgucm91bmQgY2FuIGJlIGJ1Z2d5IGZvciBsYXJnZSBpbnRlZ2Vycy5cbiAgLy8gVGhpcyBiZWhhdmlvciBzaG91bGQgYmUgZ292ZXJuZWQgYnkgXCJyb3VuZCB0byBuZWFyZXN0LCB0aWVzIHRvIGV2ZW4gbW9kZVwiXG4gIC8vIHNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdGVybXMtYW5kLWRlZmluaXRpb25zLW51bWJlci10eXBlXG4gIC8vIFRoZXNlIGFyZSB0aGUgYm91bmRhcnkgY2FzZXMgd2hlcmUgaXQgYnJlYWtzLlxuICB2YXIgc21hbGxlc3RQb3NpdGl2ZU51bWJlcldoZXJlUm91bmRCcmVha3MgPSBpbnZlcnNlRXBzaWxvbiArIDE7XG4gIHZhciBsYXJnZXN0UG9zaXRpdmVOdW1iZXJXaGVyZVJvdW5kQnJlYWtzID0gKDIgKiBpbnZlcnNlRXBzaWxvbikgLSAxO1xuICB2YXIgcm91bmREb2VzTm90SW5jcmVhc2VJbnRlZ2VycyA9IFtcbiAgICBzbWFsbGVzdFBvc2l0aXZlTnVtYmVyV2hlcmVSb3VuZEJyZWFrcyxcbiAgICBsYXJnZXN0UG9zaXRpdmVOdW1iZXJXaGVyZVJvdW5kQnJlYWtzXG4gIF0uZXZlcnkoZnVuY3Rpb24gKG51bSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG51bSkgPT09IG51bTtcbiAgfSk7XG4gIGRlZmluZVByb3BlcnR5KE1hdGgsICdyb3VuZCcsIGZ1bmN0aW9uIHJvdW5kKHgpIHtcbiAgICB2YXIgZmxvb3IgPSBfZmxvb3IoeCk7XG4gICAgdmFyIGNlaWwgPSBmbG9vciA9PT0gLTEgPyAtMCA6IGZsb29yICsgMTtcbiAgICByZXR1cm4geCAtIGZsb29yIDwgMC41ID8gZmxvb3IgOiBjZWlsO1xuICB9LCAhcm91bmRIYW5kbGVzQm91bmRhcnlDb25kaXRpb25zIHx8ICFyb3VuZERvZXNOb3RJbmNyZWFzZUludGVnZXJzKTtcbiAgVmFsdWUucHJlc2VydmVUb1N0cmluZyhNYXRoLnJvdW5kLCBvcmlnTWF0aFJvdW5kKTtcblxuICB2YXIgb3JpZ0ltdWwgPSBNYXRoLmltdWw7XG4gIGlmIChNYXRoLmltdWwoMHhmZmZmZmZmZiwgNSkgIT09IC01KSB7XG4gICAgLy8gU2FmYXJpIDYuMSwgYXQgbGVhc3QsIHJlcG9ydHMgXCIwXCIgZm9yIHRoaXMgdmFsdWVcbiAgICBNYXRoLmltdWwgPSBNYXRoU2hpbXMuaW11bDtcbiAgICBWYWx1ZS5wcmVzZXJ2ZVRvU3RyaW5nKE1hdGguaW11bCwgb3JpZ0ltdWwpO1xuICB9XG4gIGlmIChNYXRoLmltdWwubGVuZ3RoICE9PSAyKSB7XG4gICAgLy8gU2FmYXJpIDguMC40IGhhcyBhIGxlbmd0aCBvZiAxXG4gICAgLy8gZml4ZWQgaW4gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE0MzY1OFxuICAgIG92ZXJyaWRlTmF0aXZlKE1hdGgsICdpbXVsJywgZnVuY3Rpb24gaW11bCh4LCB5KSB7XG4gICAgICByZXR1cm4gRVMuQ2FsbChvcmlnSW11bCwgTWF0aCwgYXJndW1lbnRzKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFByb21pc2VzXG4gIC8vIFNpbXBsZXN0IHBvc3NpYmxlIGltcGxlbWVudGF0aW9uOyB1c2UgYSAzcmQtcGFydHkgbGlicmFyeSBpZiB5b3VcbiAgLy8gd2FudCB0aGUgYmVzdCBwb3NzaWJsZSBzcGVlZCBhbmQvb3IgbG9uZyBzdGFjayB0cmFjZXMuXG4gIHZhciBQcm9taXNlU2hpbSA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNldFRpbWVvdXQgPSBnbG9iYWxzLnNldFRpbWVvdXQ7XG4gICAgLy8gc29tZSBlbnZpcm9ubWVudHMgZG9uJ3QgaGF2ZSBzZXRUaW1lb3V0IC0gbm8gd2F5IHRvIHNoaW0gaGVyZS5cbiAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHNldFRpbWVvdXQgIT09ICdvYmplY3QnKSB7IHJldHVybjsgfVxuXG4gICAgRVMuSXNQcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgIGlmICghRVMuVHlwZUlzT2JqZWN0KHByb21pc2UpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgcHJvbWlzZS5fcHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyB1bmluaXRpYWxpemVkLCBvciBtaXNzaW5nIG91ciBoaWRkZW4gZmllbGQuXG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgLy8gXCJQcm9taXNlQ2FwYWJpbGl0eVwiIGluIHRoZSBzcGVjIGlzIHdoYXQgbW9zdCBwcm9taXNlIGltcGxlbWVudGF0aW9uc1xuICAgIC8vIGNhbGwgYSBcImRlZmVycmVkXCIuXG4gICAgdmFyIFByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICAgIGlmICghRVMuSXNDb25zdHJ1Y3RvcihDKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCYWQgcHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgICAgfVxuICAgICAgdmFyIGNhcGFiaWxpdHkgPSB0aGlzO1xuICAgICAgdmFyIHJlc29sdmVyID0gZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBpZiAoY2FwYWJpbGl0eS5yZXNvbHZlICE9PSB2b2lkIDAgfHwgY2FwYWJpbGl0eS5yZWplY3QgIT09IHZvaWQgMCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGltcGxlbWVudGF0aW9uIScpO1xuICAgICAgICB9XG4gICAgICAgIGNhcGFiaWxpdHkucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgIGNhcGFiaWxpdHkucmVqZWN0ID0gcmVqZWN0O1xuICAgICAgfTtcbiAgICAgIC8vIEluaXRpYWxpemUgZmllbGRzIHRvIGluZm9ybSBvcHRpbWl6ZXJzIGFib3V0IHRoZSBvYmplY3Qgc2hhcGUuXG4gICAgICBjYXBhYmlsaXR5LnJlc29sdmUgPSB2b2lkIDA7XG4gICAgICBjYXBhYmlsaXR5LnJlamVjdCA9IHZvaWQgMDtcbiAgICAgIGNhcGFiaWxpdHkucHJvbWlzZSA9IG5ldyBDKHJlc29sdmVyKTtcbiAgICAgIGlmICghKEVTLklzQ2FsbGFibGUoY2FwYWJpbGl0eS5yZXNvbHZlKSAmJiBFUy5Jc0NhbGxhYmxlKGNhcGFiaWxpdHkucmVqZWN0KSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQmFkIHByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gZmluZCBhbiBhcHByb3ByaWF0ZSBzZXRJbW1lZGlhdGUtYWxpa2VcbiAgICB2YXIgbWFrZVplcm9UaW1lb3V0O1xuICAgIC8qZ2xvYmFsIHdpbmRvdyAqL1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiBFUy5Jc0NhbGxhYmxlKHdpbmRvdy5wb3N0TWVzc2FnZSkpIHtcbiAgICAgIG1ha2VaZXJvVGltZW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gZnJvbSBodHRwOi8vZGJhcm9uLm9yZy9sb2cvMjAxMDAzMDktZmFzdGVyLXRpbWVvdXRzXG4gICAgICAgIHZhciB0aW1lb3V0cyA9IFtdO1xuICAgICAgICB2YXIgbWVzc2FnZU5hbWUgPSAnemVyby10aW1lb3V0LW1lc3NhZ2UnO1xuICAgICAgICB2YXIgc2V0WmVyb1RpbWVvdXQgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgICBfcHVzaCh0aW1lb3V0cywgZm4pO1xuICAgICAgICAgIHdpbmRvdy5wb3N0TWVzc2FnZShtZXNzYWdlTmFtZSwgJyonKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGhhbmRsZU1lc3NhZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSB3aW5kb3cgJiYgZXZlbnQuZGF0YSA9PT0gbWVzc2FnZU5hbWUpIHtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgaWYgKHRpbWVvdXRzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIHZhciBmbiA9IF9zaGlmdCh0aW1lb3V0cyk7XG4gICAgICAgICAgICBmbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBoYW5kbGVNZXNzYWdlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHNldFplcm9UaW1lb3V0O1xuICAgICAgfTtcbiAgICB9XG4gICAgdmFyIG1ha2VQcm9taXNlQXNhcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEFuIGVmZmljaWVudCB0YXNrLXNjaGVkdWxlciBiYXNlZCBvbiBhIHByZS1leGlzdGluZyBQcm9taXNlXG4gICAgICAvLyBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggd2UgY2FuIHVzZSBldmVuIGlmIHdlIG92ZXJyaWRlIHRoZVxuICAgICAgLy8gZ2xvYmFsIFByb21pc2UgYmVsb3cgKGluIG9yZGVyIHRvIHdvcmthcm91bmQgYnVncylcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9SYXlub3Mvb2JzZXJ2LWhhc2gvaXNzdWVzLzIjaXNzdWVjb21tZW50LTM1ODU3NjcxXG4gICAgICB2YXIgUCA9IGdsb2JhbHMuUHJvbWlzZTtcbiAgICAgIHZhciBwciA9IFAgJiYgUC5yZXNvbHZlICYmIFAucmVzb2x2ZSgpO1xuICAgICAgcmV0dXJuIHByICYmIGZ1bmN0aW9uICh0YXNrKSB7XG4gICAgICAgIHJldHVybiBwci50aGVuKHRhc2spO1xuICAgICAgfTtcbiAgICB9O1xuICAgIC8qZ2xvYmFsIHByb2Nlc3MgKi9cbiAgICB2YXIgZW5xdWV1ZSA9IEVTLklzQ2FsbGFibGUoZ2xvYmFscy5zZXRJbW1lZGlhdGUpID9cbiAgICAgIGdsb2JhbHMuc2V0SW1tZWRpYXRlIDpcbiAgICAgIHR5cGVvZiBwcm9jZXNzID09PSAnb2JqZWN0JyAmJiBwcm9jZXNzLm5leHRUaWNrID8gcHJvY2Vzcy5uZXh0VGljayA6IG1ha2VQcm9taXNlQXNhcCgpIHx8XG4gICAgICAoRVMuSXNDYWxsYWJsZShtYWtlWmVyb1RpbWVvdXQpID8gbWFrZVplcm9UaW1lb3V0KCkgOiBmdW5jdGlvbiAodGFzaykgeyBzZXRUaW1lb3V0KHRhc2ssIDApOyB9KTsgLy8gZmFsbGJhY2tcblxuICAgIC8vIENvbnN0YW50cyBmb3IgUHJvbWlzZSBpbXBsZW1lbnRhdGlvblxuICAgIHZhciBQUk9NSVNFX0lERU5USVRZID0gZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHg7IH07XG4gICAgdmFyIFBST01JU0VfVEhST1dFUiA9IGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH07XG4gICAgdmFyIFBST01JU0VfUEVORElORyA9IDA7XG4gICAgdmFyIFBST01JU0VfRlVMRklMTEVEID0gMTtcbiAgICB2YXIgUFJPTUlTRV9SRUpFQ1RFRCA9IDI7XG4gICAgLy8gV2Ugc3RvcmUgZnVsZmlsbC9yZWplY3QgaGFuZGxlcnMgYW5kIGNhcGFiaWxpdGllcyBpbiBhIHNpbmdsZSBhcnJheS5cbiAgICB2YXIgUFJPTUlTRV9GVUxGSUxMX09GRlNFVCA9IDA7XG4gICAgdmFyIFBST01JU0VfUkVKRUNUX09GRlNFVCA9IDE7XG4gICAgdmFyIFBST01JU0VfQ0FQQUJJTElUWV9PRkZTRVQgPSAyO1xuICAgIC8vIFRoaXMgaXMgdXNlZCBpbiBhbiBvcHRpbWl6YXRpb24gZm9yIGNoYWluaW5nIHByb21pc2VzIHZpYSB0aGVuLlxuICAgIHZhciBQUk9NSVNFX0ZBS0VfQ0FQQUJJTElUWSA9IHt9O1xuXG4gICAgdmFyIGVucXVldWVQcm9taXNlUmVhY3Rpb25Kb2IgPSBmdW5jdGlvbiAoaGFuZGxlciwgY2FwYWJpbGl0eSwgYXJndW1lbnQpIHtcbiAgICAgIGVucXVldWUoZnVuY3Rpb24gKCkge1xuICAgICAgICBwcm9taXNlUmVhY3Rpb25Kb2IoaGFuZGxlciwgY2FwYWJpbGl0eSwgYXJndW1lbnQpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciBwcm9taXNlUmVhY3Rpb25Kb2IgPSBmdW5jdGlvbiAoaGFuZGxlciwgcHJvbWlzZUNhcGFiaWxpdHksIGFyZ3VtZW50KSB7XG4gICAgICB2YXIgaGFuZGxlclJlc3VsdCwgZjtcbiAgICAgIGlmIChwcm9taXNlQ2FwYWJpbGl0eSA9PT0gUFJPTUlTRV9GQUtFX0NBUEFCSUxJVFkpIHtcbiAgICAgICAgLy8gRmFzdCBjYXNlLCB3aGVuIHdlIGRvbid0IGFjdHVhbGx5IG5lZWQgdG8gY2hhaW4gdGhyb3VnaCB0byBhXG4gICAgICAgIC8vIChyZWFsKSBwcm9taXNlQ2FwYWJpbGl0eS5cbiAgICAgICAgcmV0dXJuIGhhbmRsZXIoYXJndW1lbnQpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgaGFuZGxlclJlc3VsdCA9IGhhbmRsZXIoYXJndW1lbnQpO1xuICAgICAgICBmID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaGFuZGxlclJlc3VsdCA9IGU7XG4gICAgICAgIGYgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgICB9XG4gICAgICBmKGhhbmRsZXJSZXN1bHQpO1xuICAgIH07XG5cbiAgICB2YXIgZnVsZmlsbFByb21pc2UgPSBmdW5jdGlvbiAocHJvbWlzZSwgdmFsdWUpIHtcbiAgICAgIHZhciBfcHJvbWlzZSA9IHByb21pc2UuX3Byb21pc2U7XG4gICAgICB2YXIgbGVuZ3RoID0gX3Byb21pc2UucmVhY3Rpb25MZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoID4gMCkge1xuICAgICAgICBlbnF1ZXVlUHJvbWlzZVJlYWN0aW9uSm9iKFxuICAgICAgICAgIF9wcm9taXNlLmZ1bGZpbGxSZWFjdGlvbkhhbmRsZXIwLFxuICAgICAgICAgIF9wcm9taXNlLnJlYWN0aW9uQ2FwYWJpbGl0eTAsXG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgKTtcbiAgICAgICAgX3Byb21pc2UuZnVsZmlsbFJlYWN0aW9uSGFuZGxlcjAgPSB2b2lkIDA7XG4gICAgICAgIF9wcm9taXNlLnJlamVjdFJlYWN0aW9uczAgPSB2b2lkIDA7XG4gICAgICAgIF9wcm9taXNlLnJlYWN0aW9uQ2FwYWJpbGl0eTAgPSB2b2lkIDA7XG4gICAgICAgIGlmIChsZW5ndGggPiAxKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDEsIGlkeCA9IDA7IGkgPCBsZW5ndGg7IGkrKywgaWR4ICs9IDMpIHtcbiAgICAgICAgICAgIGVucXVldWVQcm9taXNlUmVhY3Rpb25Kb2IoXG4gICAgICAgICAgICAgIF9wcm9taXNlW2lkeCArIFBST01JU0VfRlVMRklMTF9PRkZTRVRdLFxuICAgICAgICAgICAgICBfcHJvbWlzZVtpZHggKyBQUk9NSVNFX0NBUEFCSUxJVFlfT0ZGU0VUXSxcbiAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBwcm9taXNlW2lkeCArIFBST01JU0VfRlVMRklMTF9PRkZTRVRdID0gdm9pZCAwO1xuICAgICAgICAgICAgcHJvbWlzZVtpZHggKyBQUk9NSVNFX1JFSkVDVF9PRkZTRVRdID0gdm9pZCAwO1xuICAgICAgICAgICAgcHJvbWlzZVtpZHggKyBQUk9NSVNFX0NBUEFCSUxJVFlfT0ZGU0VUXSA9IHZvaWQgMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIF9wcm9taXNlLnJlc3VsdCA9IHZhbHVlO1xuICAgICAgX3Byb21pc2Uuc3RhdGUgPSBQUk9NSVNFX0ZVTEZJTExFRDtcbiAgICAgIF9wcm9taXNlLnJlYWN0aW9uTGVuZ3RoID0gMDtcbiAgICB9O1xuXG4gICAgdmFyIHJlamVjdFByb21pc2UgPSBmdW5jdGlvbiAocHJvbWlzZSwgcmVhc29uKSB7XG4gICAgICB2YXIgX3Byb21pc2UgPSBwcm9taXNlLl9wcm9taXNlO1xuICAgICAgdmFyIGxlbmd0aCA9IF9wcm9taXNlLnJlYWN0aW9uTGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA+IDApIHtcbiAgICAgICAgZW5xdWV1ZVByb21pc2VSZWFjdGlvbkpvYihcbiAgICAgICAgICBfcHJvbWlzZS5yZWplY3RSZWFjdGlvbkhhbmRsZXIwLFxuICAgICAgICAgIF9wcm9taXNlLnJlYWN0aW9uQ2FwYWJpbGl0eTAsXG4gICAgICAgICAgcmVhc29uXG4gICAgICAgICk7XG4gICAgICAgIF9wcm9taXNlLmZ1bGZpbGxSZWFjdGlvbkhhbmRsZXIwID0gdm9pZCAwO1xuICAgICAgICBfcHJvbWlzZS5yZWplY3RSZWFjdGlvbnMwID0gdm9pZCAwO1xuICAgICAgICBfcHJvbWlzZS5yZWFjdGlvbkNhcGFiaWxpdHkwID0gdm9pZCAwO1xuICAgICAgICBpZiAobGVuZ3RoID4gMSkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxLCBpZHggPSAwOyBpIDwgbGVuZ3RoOyBpKyssIGlkeCArPSAzKSB7XG4gICAgICAgICAgICBlbnF1ZXVlUHJvbWlzZVJlYWN0aW9uSm9iKFxuICAgICAgICAgICAgICBfcHJvbWlzZVtpZHggKyBQUk9NSVNFX1JFSkVDVF9PRkZTRVRdLFxuICAgICAgICAgICAgICBfcHJvbWlzZVtpZHggKyBQUk9NSVNFX0NBUEFCSUxJVFlfT0ZGU0VUXSxcbiAgICAgICAgICAgICAgcmVhc29uXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcHJvbWlzZVtpZHggKyBQUk9NSVNFX0ZVTEZJTExfT0ZGU0VUXSA9IHZvaWQgMDtcbiAgICAgICAgICAgIHByb21pc2VbaWR4ICsgUFJPTUlTRV9SRUpFQ1RfT0ZGU0VUXSA9IHZvaWQgMDtcbiAgICAgICAgICAgIHByb21pc2VbaWR4ICsgUFJPTUlTRV9DQVBBQklMSVRZX09GRlNFVF0gPSB2b2lkIDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBfcHJvbWlzZS5yZXN1bHQgPSByZWFzb247XG4gICAgICBfcHJvbWlzZS5zdGF0ZSA9IFBST01JU0VfUkVKRUNURUQ7XG4gICAgICBfcHJvbWlzZS5yZWFjdGlvbkxlbmd0aCA9IDA7XG4gICAgfTtcblxuICAgIHZhciBjcmVhdGVSZXNvbHZpbmdGdW5jdGlvbnMgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgdmFyIGFscmVhZHlSZXNvbHZlZCA9IGZhbHNlO1xuICAgICAgdmFyIHJlc29sdmUgPSBmdW5jdGlvbiAocmVzb2x1dGlvbikge1xuICAgICAgICB2YXIgdGhlbjtcbiAgICAgICAgaWYgKGFscmVhZHlSZXNvbHZlZCkgeyByZXR1cm47IH1cbiAgICAgICAgYWxyZWFkeVJlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHJlc29sdXRpb24gPT09IHByb21pc2UpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0UHJvbWlzZShwcm9taXNlLCBuZXcgVHlwZUVycm9yKCdTZWxmIHJlc29sdXRpb24nKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFFUy5UeXBlSXNPYmplY3QocmVzb2x1dGlvbikpIHtcbiAgICAgICAgICByZXR1cm4gZnVsZmlsbFByb21pc2UocHJvbWlzZSwgcmVzb2x1dGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuID0gcmVzb2x1dGlvbi50aGVuO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdFByb21pc2UocHJvbWlzZSwgZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFFUy5Jc0NhbGxhYmxlKHRoZW4pKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bGZpbGxQcm9taXNlKHByb21pc2UsIHJlc29sdXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGVucXVldWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHByb21pc2VSZXNvbHZlVGhlbmFibGVKb2IocHJvbWlzZSwgcmVzb2x1dGlvbiwgdGhlbik7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICAgIHZhciByZWplY3QgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIGlmIChhbHJlYWR5UmVzb2x2ZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIGFscmVhZHlSZXNvbHZlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiByZWplY3RQcm9taXNlKHByb21pc2UsIHJlYXNvbik7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIHsgcmVzb2x2ZTogcmVzb2x2ZSwgcmVqZWN0OiByZWplY3QgfTtcbiAgICB9O1xuXG4gICAgdmFyIG9wdGltaXplZFRoZW4gPSBmdW5jdGlvbiAodGhlbiwgdGhlbmFibGUsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgLy8gT3B0aW1pemF0aW9uOiBzaW5jZSB3ZSBkaXNjYXJkIHRoZSByZXN1bHQsIHdlIGNhbiBwYXNzIG91clxuICAgICAgLy8gb3duIHRoZW4gaW1wbGVtZW50YXRpb24gYSBzcGVjaWFsIGhpbnQgdG8gbGV0IGl0IGtub3cgaXRcbiAgICAgIC8vIGRvZXNuJ3QgaGF2ZSB0byBjcmVhdGUgaXQuICAoVGhlIFBST01JU0VfRkFLRV9DQVBBQklMSVRZXG4gICAgICAvLyBvYmplY3QgaXMgbG9jYWwgdG8gdGhpcyBpbXBsZW1lbnRhdGlvbiBhbmQgdW5mb3JnZWFibGUgb3V0c2lkZS4pXG4gICAgICBpZiAodGhlbiA9PT0gUHJvbWlzZSRwcm90b3R5cGUkdGhlbikge1xuICAgICAgICBfY2FsbCh0aGVuLCB0aGVuYWJsZSwgcmVzb2x2ZSwgcmVqZWN0LCBQUk9NSVNFX0ZBS0VfQ0FQQUJJTElUWSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfY2FsbCh0aGVuLCB0aGVuYWJsZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBwcm9taXNlUmVzb2x2ZVRoZW5hYmxlSm9iID0gZnVuY3Rpb24gKHByb21pc2UsIHRoZW5hYmxlLCB0aGVuKSB7XG4gICAgICB2YXIgcmVzb2x2aW5nRnVuY3Rpb25zID0gY3JlYXRlUmVzb2x2aW5nRnVuY3Rpb25zKHByb21pc2UpO1xuICAgICAgdmFyIHJlc29sdmUgPSByZXNvbHZpbmdGdW5jdGlvbnMucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZXNvbHZpbmdGdW5jdGlvbnMucmVqZWN0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgb3B0aW1pemVkVGhlbih0aGVuLCB0aGVuYWJsZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgUHJvbWlzZSRwcm90b3R5cGUsIFByb21pc2UkcHJvdG90eXBlJHRoZW47XG4gICAgdmFyIFByb21pc2UgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIFByb21pc2VTaGltID0gZnVuY3Rpb24gUHJvbWlzZShyZXNvbHZlcikge1xuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUHJvbWlzZVNoaW0pKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ29uc3RydWN0b3IgUHJvbWlzZSByZXF1aXJlcyBcIm5ld1wiJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMgJiYgdGhpcy5fcHJvbWlzZSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBjb25zdHJ1Y3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzZWUgaHR0cHM6Ly9idWdzLmVjbWFzY3JpcHQub3JnL3Nob3dfYnVnLmNnaT9pZD0yNDgyXG4gICAgICAgIGlmICghRVMuSXNDYWxsYWJsZShyZXNvbHZlcikpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdub3QgYSB2YWxpZCByZXNvbHZlcicpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcm9taXNlID0gZW11bGF0ZUVTNmNvbnN0cnVjdCh0aGlzLCBQcm9taXNlU2hpbSwgUHJvbWlzZSRwcm90b3R5cGUsIHtcbiAgICAgICAgICBfcHJvbWlzZToge1xuICAgICAgICAgICAgcmVzdWx0OiB2b2lkIDAsXG4gICAgICAgICAgICBzdGF0ZTogUFJPTUlTRV9QRU5ESU5HLFxuICAgICAgICAgICAgLy8gVGhlIGZpcnN0IG1lbWJlciBvZiB0aGUgXCJyZWFjdGlvbnNcIiBhcnJheSBpcyBpbmxpbmVkIGhlcmUsXG4gICAgICAgICAgICAvLyBzaW5jZSBtb3N0IHByb21pc2VzIG9ubHkgaGF2ZSBvbmUgcmVhY3Rpb24uXG4gICAgICAgICAgICAvLyBXZSd2ZSBhbHNvIGV4cGxvZGVkIHRoZSAncmVhY3Rpb24nIG9iamVjdCB0byBpbmxpbmUgdGhlXG4gICAgICAgICAgICAvLyBcImhhbmRsZXJcIiBhbmQgXCJjYXBhYmlsaXR5XCIgZmllbGRzLCBzaW5jZSBib3RoIGZ1bGZpbGwgYW5kXG4gICAgICAgICAgICAvLyByZWplY3QgcmVhY3Rpb25zIHNoYXJlIHRoZSBzYW1lIGNhcGFiaWxpdHkuXG4gICAgICAgICAgICByZWFjdGlvbkxlbmd0aDogMCxcbiAgICAgICAgICAgIGZ1bGZpbGxSZWFjdGlvbkhhbmRsZXIwOiB2b2lkIDAsXG4gICAgICAgICAgICByZWplY3RSZWFjdGlvbkhhbmRsZXIwOiB2b2lkIDAsXG4gICAgICAgICAgICByZWFjdGlvbkNhcGFiaWxpdHkwOiB2b2lkIDBcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgcmVzb2x2aW5nRnVuY3Rpb25zID0gY3JlYXRlUmVzb2x2aW5nRnVuY3Rpb25zKHByb21pc2UpO1xuICAgICAgICB2YXIgcmVqZWN0ID0gcmVzb2x2aW5nRnVuY3Rpb25zLnJlamVjdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXNvbHZlcihyZXNvbHZpbmdGdW5jdGlvbnMucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgIH07XG4gICAgICByZXR1cm4gUHJvbWlzZVNoaW07XG4gICAgfSgpKTtcbiAgICBQcm9taXNlJHByb3RvdHlwZSA9IFByb21pc2UucHJvdG90eXBlO1xuXG4gICAgdmFyIF9wcm9taXNlQWxsUmVzb2x2ZXIgPSBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlcywgY2FwYWJpbGl0eSwgcmVtYWluaW5nKSB7XG4gICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSB7IHJldHVybjsgfVxuICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgdmFsdWVzW2luZGV4XSA9IHg7XG4gICAgICAgIGlmICgoLS1yZW1haW5pbmcuY291bnQpID09PSAwKSB7XG4gICAgICAgICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgICAgICAgcmVzb2x2ZSh2YWx1ZXMpOyAvLyBjYWxsIHcvIHRoaXM9PT11bmRlZmluZWRcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgdmFyIHBlcmZvcm1Qcm9taXNlQWxsID0gZnVuY3Rpb24gKGl0ZXJhdG9yUmVjb3JkLCBDLCByZXN1bHRDYXBhYmlsaXR5KSB7XG4gICAgICB2YXIgaXQgPSBpdGVyYXRvclJlY29yZC5pdGVyYXRvcjtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciByZW1haW5pbmcgPSB7IGNvdW50OiAxIH07XG4gICAgICB2YXIgbmV4dCwgbmV4dFZhbHVlO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbmV4dCA9IEVTLkl0ZXJhdG9yU3RlcChpdCk7XG4gICAgICAgICAgaWYgKG5leHQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpdGVyYXRvclJlY29yZC5kb25lID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZXh0VmFsdWUgPSBuZXh0LnZhbHVlO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaXRlcmF0b3JSZWNvcmQuZG9uZSA9IHRydWU7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZXNbaW5kZXhdID0gdm9pZCAwO1xuICAgICAgICB2YXIgbmV4dFByb21pc2UgPSBDLnJlc29sdmUobmV4dFZhbHVlKTtcbiAgICAgICAgdmFyIHJlc29sdmVFbGVtZW50ID0gX3Byb21pc2VBbGxSZXNvbHZlcihcbiAgICAgICAgICBpbmRleCxcbiAgICAgICAgICB2YWx1ZXMsXG4gICAgICAgICAgcmVzdWx0Q2FwYWJpbGl0eSxcbiAgICAgICAgICByZW1haW5pbmdcbiAgICAgICAgKTtcbiAgICAgICAgcmVtYWluaW5nLmNvdW50ICs9IDE7XG4gICAgICAgIG9wdGltaXplZFRoZW4obmV4dFByb21pc2UudGhlbiwgbmV4dFByb21pc2UsIHJlc29sdmVFbGVtZW50LCByZXN1bHRDYXBhYmlsaXR5LnJlamVjdCk7XG4gICAgICAgIGluZGV4ICs9IDE7XG4gICAgICB9XG4gICAgICBpZiAoKC0tcmVtYWluaW5nLmNvdW50KSA9PT0gMCkge1xuICAgICAgICB2YXIgcmVzb2x2ZSA9IHJlc3VsdENhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZXMpOyAvLyBjYWxsIHcvIHRoaXM9PT11bmRlZmluZWRcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgfTtcblxuICAgIHZhciBwZXJmb3JtUHJvbWlzZVJhY2UgPSBmdW5jdGlvbiAoaXRlcmF0b3JSZWNvcmQsIEMsIHJlc3VsdENhcGFiaWxpdHkpIHtcbiAgICAgIHZhciBpdCA9IGl0ZXJhdG9yUmVjb3JkLml0ZXJhdG9yO1xuICAgICAgdmFyIG5leHQsIG5leHRWYWx1ZSwgbmV4dFByb21pc2U7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIG5leHQgPSBFUy5JdGVyYXRvclN0ZXAoaXQpO1xuICAgICAgICAgIGlmIChuZXh0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgLy8gTk9URTogSWYgaXRlcmFibGUgaGFzIG5vIGl0ZW1zLCByZXN1bHRpbmcgcHJvbWlzZSB3aWxsIG5ldmVyXG4gICAgICAgICAgICAvLyByZXNvbHZlOyBzZWU6XG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZG9tZW5pYy9wcm9taXNlcy11bndyYXBwaW5nL2lzc3Vlcy83NVxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9idWdzLmVjbWFzY3JpcHQub3JnL3Nob3dfYnVnLmNnaT9pZD0yNTE1XG4gICAgICAgICAgICBpdGVyYXRvclJlY29yZC5kb25lID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZXh0VmFsdWUgPSBuZXh0LnZhbHVlO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaXRlcmF0b3JSZWNvcmQuZG9uZSA9IHRydWU7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgICBuZXh0UHJvbWlzZSA9IEMucmVzb2x2ZShuZXh0VmFsdWUpO1xuICAgICAgICBvcHRpbWl6ZWRUaGVuKG5leHRQcm9taXNlLnRoZW4sIG5leHRQcm9taXNlLCByZXN1bHRDYXBhYmlsaXR5LnJlc29sdmUsIHJlc3VsdENhcGFiaWxpdHkucmVqZWN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgfTtcblxuICAgIGRlZmluZVByb3BlcnRpZXMoUHJvbWlzZSwge1xuICAgICAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICAgICAgdmFyIEMgPSB0aGlzO1xuICAgICAgICBpZiAoIUVTLlR5cGVJc09iamVjdChDKSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb21pc2UgaXMgbm90IG9iamVjdCcpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgICAgICB2YXIgaXRlcmF0b3IsIGl0ZXJhdG9yUmVjb3JkO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGl0ZXJhdG9yID0gRVMuR2V0SXRlcmF0b3IoaXRlcmFibGUpO1xuICAgICAgICAgIGl0ZXJhdG9yUmVjb3JkID0geyBpdGVyYXRvcjogaXRlcmF0b3IsIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgcmV0dXJuIHBlcmZvcm1Qcm9taXNlQWxsKGl0ZXJhdG9yUmVjb3JkLCBDLCBjYXBhYmlsaXR5KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHZhciBleGNlcHRpb24gPSBlO1xuICAgICAgICAgIGlmIChpdGVyYXRvclJlY29yZCAmJiAhaXRlcmF0b3JSZWNvcmQuZG9uZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgRVMuSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgdHJ1ZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlZSkge1xuICAgICAgICAgICAgICBleGNlcHRpb24gPSBlZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgICAgICAgIHJlamVjdChleGNlcHRpb24pO1xuICAgICAgICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICAgICAgdmFyIEMgPSB0aGlzO1xuICAgICAgICBpZiAoIUVTLlR5cGVJc09iamVjdChDKSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb21pc2UgaXMgbm90IG9iamVjdCcpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgICAgICB2YXIgaXRlcmF0b3IsIGl0ZXJhdG9yUmVjb3JkO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGl0ZXJhdG9yID0gRVMuR2V0SXRlcmF0b3IoaXRlcmFibGUpO1xuICAgICAgICAgIGl0ZXJhdG9yUmVjb3JkID0geyBpdGVyYXRvcjogaXRlcmF0b3IsIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgcmV0dXJuIHBlcmZvcm1Qcm9taXNlUmFjZShpdGVyYXRvclJlY29yZCwgQywgY2FwYWJpbGl0eSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICB2YXIgZXhjZXB0aW9uID0gZTtcbiAgICAgICAgICBpZiAoaXRlcmF0b3JSZWNvcmQgJiYgIWl0ZXJhdG9yUmVjb3JkLmRvbmUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIEVTLkl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIHRydWUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZWUpIHtcbiAgICAgICAgICAgICAgZXhjZXB0aW9uID0gZWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAgICAgICByZWplY3QoZXhjZXB0aW9uKTtcbiAgICAgICAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyZWFzb24pIHtcbiAgICAgICAgdmFyIEMgPSB0aGlzO1xuICAgICAgICBpZiAoIUVTLlR5cGVJc09iamVjdChDKSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBwcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhcGFiaWxpdHkgPSBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgICAgIHZhciByZWplY3RGdW5jID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgICAgIHJlamVjdEZ1bmMocmVhc29uKTsgLy8gY2FsbCB3aXRoIHRoaXM9PT11bmRlZmluZWRcbiAgICAgICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgICAgIH0sXG5cbiAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUodikge1xuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9lc2Rpc2N1c3Mub3JnL3RvcGljL2ZpeGluZy1wcm9taXNlLXJlc29sdmUgZm9yIHNwZWNcbiAgICAgICAgdmFyIEMgPSB0aGlzO1xuICAgICAgICBpZiAoIUVTLlR5cGVJc09iamVjdChDKSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBwcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEVTLklzUHJvbWlzZSh2KSkge1xuICAgICAgICAgIHZhciBjb25zdHJ1Y3RvciA9IHYuY29uc3RydWN0b3I7XG4gICAgICAgICAgaWYgKGNvbnN0cnVjdG9yID09PSBDKSB7XG4gICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhcGFiaWxpdHkgPSBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgICAgIHZhciByZXNvbHZlRnVuYyA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICAgICAgcmVzb2x2ZUZ1bmModik7IC8vIGNhbGwgd2l0aCB0aGlzPT09dW5kZWZpbmVkXG4gICAgICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBkZWZpbmVQcm9wZXJ0aWVzKFByb21pc2UkcHJvdG90eXBlLCB7XG4gICAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gdGhpcy50aGVuKG51bGwsIG9uUmVqZWN0ZWQpO1xuICAgICAgfSxcblxuICAgICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gICAgICAgIGlmICghRVMuSXNQcm9taXNlKHByb21pc2UpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ25vdCBhIHByb21pc2UnKTsgfVxuICAgICAgICB2YXIgQyA9IEVTLlNwZWNpZXNDb25zdHJ1Y3Rvcihwcm9taXNlLCBQcm9taXNlKTtcbiAgICAgICAgdmFyIHJlc3VsdENhcGFiaWxpdHk7XG4gICAgICAgIHZhciByZXR1cm5WYWx1ZUlzSWdub3JlZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSA9PT0gUFJPTUlTRV9GQUtFX0NBUEFCSUxJVFk7XG4gICAgICAgIGlmIChyZXR1cm5WYWx1ZUlzSWdub3JlZCAmJiBDID09PSBQcm9taXNlKSB7XG4gICAgICAgICAgcmVzdWx0Q2FwYWJpbGl0eSA9IFBST01JU0VfRkFLRV9DQVBBQklMSVRZO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdENhcGFiaWxpdHkgPSBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUGVyZm9ybVByb21pc2VUaGVuKHByb21pc2UsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCByZXN1bHRDYXBhYmlsaXR5KVxuICAgICAgICAvLyBOb3RlIHRoYXQgd2UndmUgc3BsaXQgdGhlICdyZWFjdGlvbicgb2JqZWN0IGludG8gaXRzIHR3b1xuICAgICAgICAvLyBjb21wb25lbnRzLCBcImNhcGFiaWxpdGllc1wiIGFuZCBcImhhbmRsZXJcIlxuICAgICAgICAvLyBcImNhcGFiaWxpdGllc1wiIGlzIGFsd2F5cyBlcXVhbCB0byBgcmVzdWx0Q2FwYWJpbGl0eWBcbiAgICAgICAgdmFyIGZ1bGZpbGxSZWFjdGlvbkhhbmRsZXIgPSBFUy5Jc0NhbGxhYmxlKG9uRnVsZmlsbGVkKSA/IG9uRnVsZmlsbGVkIDogUFJPTUlTRV9JREVOVElUWTtcbiAgICAgICAgdmFyIHJlamVjdFJlYWN0aW9uSGFuZGxlciA9IEVTLklzQ2FsbGFibGUob25SZWplY3RlZCkgPyBvblJlamVjdGVkIDogUFJPTUlTRV9USFJPV0VSO1xuICAgICAgICB2YXIgX3Byb21pc2UgPSBwcm9taXNlLl9wcm9taXNlO1xuICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgIGlmIChfcHJvbWlzZS5zdGF0ZSA9PT0gUFJPTUlTRV9QRU5ESU5HKSB7XG4gICAgICAgICAgaWYgKF9wcm9taXNlLnJlYWN0aW9uTGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBfcHJvbWlzZS5mdWxmaWxsUmVhY3Rpb25IYW5kbGVyMCA9IGZ1bGZpbGxSZWFjdGlvbkhhbmRsZXI7XG4gICAgICAgICAgICBfcHJvbWlzZS5yZWplY3RSZWFjdGlvbkhhbmRsZXIwID0gcmVqZWN0UmVhY3Rpb25IYW5kbGVyO1xuICAgICAgICAgICAgX3Byb21pc2UucmVhY3Rpb25DYXBhYmlsaXR5MCA9IHJlc3VsdENhcGFiaWxpdHk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBpZHggPSAzICogKF9wcm9taXNlLnJlYWN0aW9uTGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICBfcHJvbWlzZVtpZHggKyBQUk9NSVNFX0ZVTEZJTExfT0ZGU0VUXSA9IGZ1bGZpbGxSZWFjdGlvbkhhbmRsZXI7XG4gICAgICAgICAgICBfcHJvbWlzZVtpZHggKyBQUk9NSVNFX1JFSkVDVF9PRkZTRVRdID0gcmVqZWN0UmVhY3Rpb25IYW5kbGVyO1xuICAgICAgICAgICAgX3Byb21pc2VbaWR4ICsgUFJPTUlTRV9DQVBBQklMSVRZX09GRlNFVF0gPSByZXN1bHRDYXBhYmlsaXR5O1xuICAgICAgICAgIH1cbiAgICAgICAgICBfcHJvbWlzZS5yZWFjdGlvbkxlbmd0aCArPSAxO1xuICAgICAgICB9IGVsc2UgaWYgKF9wcm9taXNlLnN0YXRlID09PSBQUk9NSVNFX0ZVTEZJTExFRCkge1xuICAgICAgICAgIHZhbHVlID0gX3Byb21pc2UucmVzdWx0O1xuICAgICAgICAgIGVucXVldWVQcm9taXNlUmVhY3Rpb25Kb2IoXG4gICAgICAgICAgICBmdWxmaWxsUmVhY3Rpb25IYW5kbGVyLFxuICAgICAgICAgICAgcmVzdWx0Q2FwYWJpbGl0eSxcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChfcHJvbWlzZS5zdGF0ZSA9PT0gUFJPTUlTRV9SRUpFQ1RFRCkge1xuICAgICAgICAgIHZhbHVlID0gX3Byb21pc2UucmVzdWx0O1xuICAgICAgICAgIGVucXVldWVQcm9taXNlUmVhY3Rpb25Kb2IoXG4gICAgICAgICAgICByZWplY3RSZWFjdGlvbkhhbmRsZXIsXG4gICAgICAgICAgICByZXN1bHRDYXBhYmlsaXR5LFxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3VuZXhwZWN0ZWQgUHJvbWlzZSBzdGF0ZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gVGhpcyBoZWxwcyB0aGUgb3B0aW1pemVyIGJ5IGVuc3VyaW5nIHRoYXQgbWV0aG9kcyB3aGljaCB0YWtlXG4gICAgLy8gY2FwYWJpbGl0aWVzIGFyZW4ndCBwb2x5bW9ycGhpYy5cbiAgICBQUk9NSVNFX0ZBS0VfQ0FQQUJJTElUWSA9IG5ldyBQcm9taXNlQ2FwYWJpbGl0eShQcm9taXNlKTtcbiAgICBQcm9taXNlJHByb3RvdHlwZSR0aGVuID0gUHJvbWlzZSRwcm90b3R5cGUudGhlbjtcblxuICAgIHJldHVybiBQcm9taXNlO1xuICB9KCkpO1xuXG4gIC8vIENocm9tZSdzIG5hdGl2ZSBQcm9taXNlIGhhcyBleHRyYSBtZXRob2RzIHRoYXQgaXQgc2hvdWxkbid0IGhhdmUuIExldCdzIHJlbW92ZSB0aGVtLlxuICBpZiAoZ2xvYmFscy5Qcm9taXNlKSB7XG4gICAgZGVsZXRlIGdsb2JhbHMuUHJvbWlzZS5hY2NlcHQ7XG4gICAgZGVsZXRlIGdsb2JhbHMuUHJvbWlzZS5kZWZlcjtcbiAgICBkZWxldGUgZ2xvYmFscy5Qcm9taXNlLnByb3RvdHlwZS5jaGFpbjtcbiAgfVxuXG4gIGlmICh0eXBlb2YgUHJvbWlzZVNoaW0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBleHBvcnQgdGhlIFByb21pc2UgY29uc3RydWN0b3IuXG4gICAgZGVmaW5lUHJvcGVydGllcyhnbG9iYWxzLCB7IFByb21pc2U6IFByb21pc2VTaGltIH0pO1xuICAgIC8vIEluIENocm9tZSAzMyAoYW5kIHRoZXJlYWJvdXRzKSBQcm9taXNlIGlzIGRlZmluZWQsIGJ1dCB0aGVcbiAgICAvLyBpbXBsZW1lbnRhdGlvbiBpcyBidWdneSBpbiBhIG51bWJlciBvZiB3YXlzLiAgTGV0J3MgY2hlY2sgc3ViY2xhc3NpbmdcbiAgICAvLyBzdXBwb3J0IHRvIHNlZSBpZiB3ZSBoYXZlIGEgYnVnZ3kgaW1wbGVtZW50YXRpb24uXG4gICAgdmFyIHByb21pc2VTdXBwb3J0c1N1YmNsYXNzaW5nID0gc3VwcG9ydHNTdWJjbGFzc2luZyhnbG9iYWxzLlByb21pc2UsIGZ1bmN0aW9uIChTKSB7XG4gICAgICByZXR1cm4gUy5yZXNvbHZlKDQyKS50aGVuKGZ1bmN0aW9uICgpIHt9KSBpbnN0YW5jZW9mIFM7XG4gICAgfSk7XG4gICAgdmFyIHByb21pc2VJZ25vcmVzTm9uRnVuY3Rpb25UaGVuQ2FsbGJhY2tzID0gIXRocm93c0Vycm9yKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBnbG9iYWxzLlByb21pc2UucmVqZWN0KDQyKS50aGVuKG51bGwsIDUpLnRoZW4obnVsbCwgbm9vcCk7XG4gICAgfSk7XG4gICAgdmFyIHByb21pc2VSZXF1aXJlc09iamVjdENvbnRleHQgPSB0aHJvd3NFcnJvcihmdW5jdGlvbiAoKSB7IHJldHVybiBnbG9iYWxzLlByb21pc2UuY2FsbCgzLCBub29wKTsgfSk7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlKCkgd2FzIGVycmF0YSdlZCBsYXRlIGluIHRoZSBFUzYgcHJvY2Vzcy5cbiAgICAvLyBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTExNzA3NDJcbiAgICAvLyAgICAgIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTYxXG4gICAgLy8gSXQgc2VydmVzIGFzIGEgcHJveHkgZm9yIGEgbnVtYmVyIG9mIG90aGVyIGJ1Z3MgaW4gZWFybHkgUHJvbWlzZVxuICAgIC8vIGltcGxlbWVudGF0aW9ucy5cbiAgICB2YXIgcHJvbWlzZVJlc29sdmVCcm9rZW4gPSAoZnVuY3Rpb24gKFByb21pc2UpIHtcbiAgICAgIHZhciBwID0gUHJvbWlzZS5yZXNvbHZlKDUpO1xuICAgICAgcC5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgdmFyIHAyID0gUHJvbWlzZS5yZXNvbHZlKHApO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcDIudGhlbihudWxsLCBub29wKS50aGVuKG51bGwsIG5vb3ApOyAvLyBhdm9pZCBcInVuY2F1Z2h0IHJlamVjdGlvblwiIHdhcm5pbmdzIGluIGNvbnNvbGVcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7IC8vIHY4IG5hdGl2ZSBQcm9taXNlcyBicmVhayBoZXJlIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01NzUzMTRcbiAgICAgIH1cbiAgICAgIHJldHVybiBwID09PSBwMjsgLy8gVGhpcyAqc2hvdWxkKiBiZSBmYWxzZSFcbiAgICB9KGdsb2JhbHMuUHJvbWlzZSkpO1xuXG4gICAgLy8gQ2hyb21lIDQ2IChwcm9iYWJseSBvbGRlciB0b28pIGRvZXMgbm90IHJldHJpZXZlIGEgdGhlbmFibGUncyAudGhlbiBzeW5jaHJvbm91c2x5XG4gICAgdmFyIGdldHNUaGVuU3luY2hyb25vdXNseSA9IHN1cHBvcnRzRGVzY3JpcHRvcnMgJiYgKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ2V0dGVyLXJldHVyblxuICAgICAgdmFyIHRoZW5hYmxlID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAndGhlbicsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IGNvdW50ICs9IDE7IH0gfSk7XG4gICAgICBQcm9taXNlLnJlc29sdmUodGhlbmFibGUpO1xuICAgICAgcmV0dXJuIGNvdW50ID09PSAxO1xuICAgIH0oKSk7XG5cbiAgICB2YXIgQmFkUmVzb2x2ZXJQcm9taXNlID0gZnVuY3Rpb24gQmFkUmVzb2x2ZXJQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgICB2YXIgcCA9IG5ldyBQcm9taXNlKGV4ZWN1dG9yKTtcbiAgICAgIGV4ZWN1dG9yKDMsIGZ1bmN0aW9uICgpIHt9KTtcbiAgICAgIHRoaXMudGhlbiA9IHAudGhlbjtcbiAgICAgIHRoaXMuY29uc3RydWN0b3IgPSBCYWRSZXNvbHZlclByb21pc2U7XG4gICAgfTtcbiAgICBCYWRSZXNvbHZlclByb21pc2UucHJvdG90eXBlID0gUHJvbWlzZS5wcm90b3R5cGU7XG4gICAgQmFkUmVzb2x2ZXJQcm9taXNlLmFsbCA9IFByb21pc2UuYWxsO1xuICAgIC8vIENocm9tZSBDYW5hcnkgNDkgKHByb2JhYmx5IG9sZGVyIHRvbykgaGFzIHNvbWUgaW1wbGVtZW50YXRpb24gYnVnc1xuICAgIHZhciBoYXNCYWRSZXNvbHZlclByb21pc2UgPSB2YWx1ZU9yRmFsc2VJZlRocm93cyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gISFCYWRSZXNvbHZlclByb21pc2UuYWxsKFsxLCAyXSk7XG4gICAgfSk7XG5cbiAgICBpZiAoIXByb21pc2VTdXBwb3J0c1N1YmNsYXNzaW5nIHx8ICFwcm9taXNlSWdub3Jlc05vbkZ1bmN0aW9uVGhlbkNhbGxiYWNrcyB8fFxuICAgICAgICAhcHJvbWlzZVJlcXVpcmVzT2JqZWN0Q29udGV4dCB8fCBwcm9taXNlUmVzb2x2ZUJyb2tlbiB8fFxuICAgICAgICAhZ2V0c1RoZW5TeW5jaHJvbm91c2x5IHx8IGhhc0JhZFJlc29sdmVyUHJvbWlzZSkge1xuICAgICAgLyogZ2xvYmFscyBQcm9taXNlOiB0cnVlICovXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiwgbm8tZ2xvYmFsLWFzc2lnbiAqL1xuICAgICAgUHJvbWlzZSA9IFByb21pc2VTaGltO1xuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby11bmRlZiwgbm8tZ2xvYmFsLWFzc2lnbiAqL1xuICAgICAgLyogZ2xvYmFscyBQcm9taXNlOiBmYWxzZSAqL1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoZ2xvYmFscywgJ1Byb21pc2UnLCBQcm9taXNlU2hpbSk7XG4gICAgfVxuICAgIGlmIChQcm9taXNlLmFsbC5sZW5ndGggIT09IDEpIHtcbiAgICAgIHZhciBvcmlnQWxsID0gUHJvbWlzZS5hbGw7XG4gICAgICBvdmVycmlkZU5hdGl2ZShQcm9taXNlLCAnYWxsJywgZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgICAgIHJldHVybiBFUy5DYWxsKG9yaWdBbGwsIHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKFByb21pc2UucmFjZS5sZW5ndGggIT09IDEpIHtcbiAgICAgIHZhciBvcmlnUmFjZSA9IFByb21pc2UucmFjZTtcbiAgICAgIG92ZXJyaWRlTmF0aXZlKFByb21pc2UsICdyYWNlJywgZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgICAgICByZXR1cm4gRVMuQ2FsbChvcmlnUmFjZSwgdGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoUHJvbWlzZS5yZXNvbHZlLmxlbmd0aCAhPT0gMSkge1xuICAgICAgdmFyIG9yaWdSZXNvbHZlID0gUHJvbWlzZS5yZXNvbHZlO1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoUHJvbWlzZSwgJ3Jlc29sdmUnLCBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICAgICAgcmV0dXJuIEVTLkNhbGwob3JpZ1Jlc29sdmUsIHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKFByb21pc2UucmVqZWN0Lmxlbmd0aCAhPT0gMSkge1xuICAgICAgdmFyIG9yaWdSZWplY3QgPSBQcm9taXNlLnJlamVjdDtcbiAgICAgIG92ZXJyaWRlTmF0aXZlKFByb21pc2UsICdyZWplY3QnLCBmdW5jdGlvbiByZWplY3Qocikge1xuICAgICAgICByZXR1cm4gRVMuQ2FsbChvcmlnUmVqZWN0LCB0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGVuc3VyZUVudW1lcmFibGUoUHJvbWlzZSwgJ2FsbCcpO1xuICAgIGVuc3VyZUVudW1lcmFibGUoUHJvbWlzZSwgJ3JhY2UnKTtcbiAgICBlbnN1cmVFbnVtZXJhYmxlKFByb21pc2UsICdyZXNvbHZlJyk7XG4gICAgZW5zdXJlRW51bWVyYWJsZShQcm9taXNlLCAncmVqZWN0Jyk7XG4gICAgYWRkRGVmYXVsdFNwZWNpZXMoUHJvbWlzZSk7XG4gIH1cblxuICAvLyBNYXAgYW5kIFNldCByZXF1aXJlIGEgdHJ1ZSBFUzUgZW52aXJvbm1lbnRcbiAgLy8gVGhlaXIgZmFzdCBwYXRoIGFsc28gcmVxdWlyZXMgdGhhdCB0aGUgZW52aXJvbm1lbnQgcHJlc2VydmVcbiAgLy8gcHJvcGVydHkgaW5zZXJ0aW9uIG9yZGVyLCB3aGljaCBpcyBub3QgZ3VhcmFudGVlZCBieSB0aGUgc3BlYy5cbiAgdmFyIHRlc3RPcmRlciA9IGZ1bmN0aW9uIChhKSB7XG4gICAgdmFyIGIgPSBrZXlzKF9yZWR1Y2UoYSwgZnVuY3Rpb24gKG8sIGspIHtcbiAgICAgIG9ba10gPSB0cnVlO1xuICAgICAgcmV0dXJuIG87XG4gICAgfSwge30pKTtcbiAgICByZXR1cm4gYS5qb2luKCc6JykgPT09IGIuam9pbignOicpO1xuICB9O1xuICB2YXIgcHJlc2VydmVzSW5zZXJ0aW9uT3JkZXIgPSB0ZXN0T3JkZXIoWyd6JywgJ2EnLCAnYmInXSk7XG4gIC8vIHNvbWUgZW5naW5lcyAoZWcsIENocm9tZSkgb25seSBwcmVzZXJ2ZSBpbnNlcnRpb24gb3JkZXIgZm9yIHN0cmluZyBrZXlzXG4gIHZhciBwcmVzZXJ2ZXNOdW1lcmljSW5zZXJ0aW9uT3JkZXIgPSB0ZXN0T3JkZXIoWyd6JywgMSwgJ2EnLCAnMycsIDJdKTtcblxuICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuXG4gICAgdmFyIGZhc3RrZXkgPSBmdW5jdGlvbiBmYXN0a2V5KGtleSwgc2tpcEluc2VydGlvbk9yZGVyQ2hlY2spIHtcbiAgICAgIGlmICghc2tpcEluc2VydGlvbk9yZGVyQ2hlY2sgJiYgIXByZXNlcnZlc0luc2VydGlvbk9yZGVyKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKGlzTnVsbE9yVW5kZWZpbmVkKGtleSkpIHtcbiAgICAgICAgcmV0dXJuICdeJyArIEVTLlRvU3RyaW5nKGtleSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiAnJCcgKyBrZXk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBrZXkgPT09ICdudW1iZXInKSB7XG4gICAgICAgIC8vIG5vdGUgdGhhdCAtMCB3aWxsIGdldCBjb2VyY2VkIHRvIFwiMFwiIHdoZW4gdXNlZCBhcyBhIHByb3BlcnR5IGtleVxuICAgICAgICBpZiAoIXByZXNlcnZlc051bWVyaWNJbnNlcnRpb25PcmRlcikge1xuICAgICAgICAgIHJldHVybiAnbicgKyBrZXk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGtleSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiAnYicgKyBrZXk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgdmFyIGVtcHR5T2JqZWN0ID0gZnVuY3Rpb24gZW1wdHlPYmplY3QoKSB7XG4gICAgICAvLyBhY2NvbW9kYXRlIHNvbWUgb2xkZXIgbm90LXF1aXRlLUVTNSBicm93c2Vyc1xuICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge307XG4gICAgfTtcblxuICAgIHZhciBhZGRJdGVyYWJsZVRvTWFwID0gZnVuY3Rpb24gYWRkSXRlcmFibGVUb01hcChNYXBDb25zdHJ1Y3RvciwgbWFwLCBpdGVyYWJsZSkge1xuICAgICAgaWYgKGlzQXJyYXkoaXRlcmFibGUpIHx8IFR5cGUuc3RyaW5nKGl0ZXJhYmxlKSkge1xuICAgICAgICBfZm9yRWFjaChpdGVyYWJsZSwgZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgaWYgKCFFUy5UeXBlSXNPYmplY3QoZW50cnkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJdGVyYXRvciB2YWx1ZSAnICsgZW50cnkgKyAnIGlzIG5vdCBhbiBlbnRyeSBvYmplY3QnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbWFwLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoaXRlcmFibGUgaW5zdGFuY2VvZiBNYXBDb25zdHJ1Y3Rvcikge1xuICAgICAgICBfY2FsbChNYXBDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZm9yRWFjaCwgaXRlcmFibGUsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgbWFwLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaXRlciwgYWRkZXI7XG4gICAgICAgIGlmICghaXNOdWxsT3JVbmRlZmluZWQoaXRlcmFibGUpKSB7XG4gICAgICAgICAgYWRkZXIgPSBtYXAuc2V0O1xuICAgICAgICAgIGlmICghRVMuSXNDYWxsYWJsZShhZGRlcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignYmFkIG1hcCcpOyB9XG4gICAgICAgICAgaXRlciA9IEVTLkdldEl0ZXJhdG9yKGl0ZXJhYmxlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGl0ZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIHZhciBuZXh0ID0gRVMuSXRlcmF0b3JTdGVwKGl0ZXIpO1xuICAgICAgICAgICAgaWYgKG5leHQgPT09IGZhbHNlKSB7IGJyZWFrOyB9XG4gICAgICAgICAgICB2YXIgbmV4dEl0ZW0gPSBuZXh0LnZhbHVlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgaWYgKCFFUy5UeXBlSXNPYmplY3QobmV4dEl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSXRlcmF0b3IgdmFsdWUgJyArIG5leHRJdGVtICsgJyBpcyBub3QgYW4gZW50cnkgb2JqZWN0Jyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgX2NhbGwoYWRkZXIsIG1hcCwgbmV4dEl0ZW1bMF0sIG5leHRJdGVtWzFdKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgRVMuSXRlcmF0b3JDbG9zZShpdGVyLCB0cnVlKTtcbiAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBhZGRJdGVyYWJsZVRvU2V0ID0gZnVuY3Rpb24gYWRkSXRlcmFibGVUb1NldChTZXRDb25zdHJ1Y3Rvciwgc2V0LCBpdGVyYWJsZSkge1xuICAgICAgaWYgKGlzQXJyYXkoaXRlcmFibGUpIHx8IFR5cGUuc3RyaW5nKGl0ZXJhYmxlKSkge1xuICAgICAgICBfZm9yRWFjaChpdGVyYWJsZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgc2V0LmFkZCh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChpdGVyYWJsZSBpbnN0YW5jZW9mIFNldENvbnN0cnVjdG9yKSB7XG4gICAgICAgIF9jYWxsKFNldENvbnN0cnVjdG9yLnByb3RvdHlwZS5mb3JFYWNoLCBpdGVyYWJsZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgc2V0LmFkZCh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGl0ZXIsIGFkZGVyO1xuICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKGl0ZXJhYmxlKSkge1xuICAgICAgICAgIGFkZGVyID0gc2V0LmFkZDtcbiAgICAgICAgICBpZiAoIUVTLklzQ2FsbGFibGUoYWRkZXIpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ2JhZCBzZXQnKTsgfVxuICAgICAgICAgIGl0ZXIgPSBFUy5HZXRJdGVyYXRvcihpdGVyYWJsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBpdGVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICB2YXIgbmV4dCA9IEVTLkl0ZXJhdG9yU3RlcChpdGVyKTtcbiAgICAgICAgICAgIGlmIChuZXh0ID09PSBmYWxzZSkgeyBicmVhazsgfVxuICAgICAgICAgICAgdmFyIG5leHRWYWx1ZSA9IG5leHQudmFsdWU7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBfY2FsbChhZGRlciwgc2V0LCBuZXh0VmFsdWUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBFUy5JdGVyYXRvckNsb3NlKGl0ZXIsIHRydWUpO1xuICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgY29sbGVjdGlvblNoaW1zID0ge1xuICAgICAgTWFwOiAoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIHZhciBlbXB0eSA9IHt9O1xuXG4gICAgICAgIHZhciBNYXBFbnRyeSA9IGZ1bmN0aW9uIE1hcEVudHJ5KGtleSwgdmFsdWUpIHtcbiAgICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgICAgICAgICB0aGlzLnByZXYgPSBudWxsO1xuICAgICAgICB9O1xuXG4gICAgICAgIE1hcEVudHJ5LnByb3RvdHlwZS5pc1JlbW92ZWQgPSBmdW5jdGlvbiBpc1JlbW92ZWQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMua2V5ID09PSBlbXB0eTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgaXNNYXAgPSBmdW5jdGlvbiBpc01hcChtYXApIHtcbiAgICAgICAgICByZXR1cm4gISFtYXAuX2VzNm1hcDtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcmVxdWlyZU1hcFNsb3QgPSBmdW5jdGlvbiByZXF1aXJlTWFwU2xvdChtYXAsIG1ldGhvZCkge1xuICAgICAgICAgIGlmICghRVMuVHlwZUlzT2JqZWN0KG1hcCkgfHwgIWlzTWFwKG1hcCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ01ldGhvZCBNYXAucHJvdG90eXBlLicgKyBtZXRob2QgKyAnIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXIgJyArIEVTLlRvU3RyaW5nKG1hcCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgTWFwSXRlcmF0b3IgPSBmdW5jdGlvbiBNYXBJdGVyYXRvcihtYXAsIGtpbmQpIHtcbiAgICAgICAgICByZXF1aXJlTWFwU2xvdChtYXAsICdbW01hcEl0ZXJhdG9yXV0nKTtcbiAgICAgICAgICB0aGlzLmhlYWQgPSBtYXAuX2hlYWQ7XG4gICAgICAgICAgdGhpcy5pID0gdGhpcy5oZWFkO1xuICAgICAgICAgIHRoaXMua2luZCA9IGtpbmQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgTWFwSXRlcmF0b3IucHJvdG90eXBlID0ge1xuICAgICAgICAgIGlzTWFwSXRlcmF0b3I6IHRydWUsXG4gICAgICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc01hcEl0ZXJhdG9yKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05vdCBhIE1hcEl0ZXJhdG9yJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaSA9IHRoaXMuaTtcbiAgICAgICAgICAgIHZhciBraW5kID0gdGhpcy5raW5kO1xuICAgICAgICAgICAgdmFyIGhlYWQgPSB0aGlzLmhlYWQ7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuaSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yUmVzdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoaS5pc1JlbW92ZWQoKSAmJiBpICE9PSBoZWFkKSB7XG4gICAgICAgICAgICAgIC8vIGJhY2sgdXAgb2ZmIG9mIHJlbW92ZWQgZW50cmllc1xuICAgICAgICAgICAgICBpID0gaS5wcmV2O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYWR2YW5jZSB0byBuZXh0IHVucmV0dXJuZWQgZWxlbWVudC5cbiAgICAgICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgICAgICB3aGlsZSAoaS5uZXh0ICE9PSBoZWFkKSB7XG4gICAgICAgICAgICAgIGkgPSBpLm5leHQ7XG4gICAgICAgICAgICAgIGlmICghaS5pc1JlbW92ZWQoKSkge1xuICAgICAgICAgICAgICAgIGlmIChraW5kID09PSAna2V5Jykge1xuICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gaS5rZXk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChraW5kID09PSAndmFsdWUnKSB7XG4gICAgICAgICAgICAgICAgICByZXN1bHQgPSBpLnZhbHVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXN1bHQgPSBbaS5rZXksIGkudmFsdWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmkgPSBpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVyYXRvclJlc3VsdChyZXN1bHQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBvbmNlIHRoZSBpdGVyYXRvciBpcyBkb25lLCBpdCBpcyBkb25lIGZvcmV2ZXIuXG4gICAgICAgICAgICB0aGlzLmkgPSB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4gaXRlcmF0b3JSZXN1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGFkZEl0ZXJhdG9yKE1hcEl0ZXJhdG9yLnByb3RvdHlwZSk7XG5cbiAgICAgICAgdmFyIE1hcCRwcm90b3R5cGU7XG4gICAgICAgIHZhciBNYXBTaGltID0gZnVuY3Rpb24gTWFwKCkge1xuICAgICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBNYXApKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDb25zdHJ1Y3RvciBNYXAgcmVxdWlyZXMgXCJuZXdcIicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpcyAmJiB0aGlzLl9lczZtYXApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBjb25zdHJ1Y3Rpb24nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG1hcCA9IGVtdWxhdGVFUzZjb25zdHJ1Y3QodGhpcywgTWFwLCBNYXAkcHJvdG90eXBlLCB7XG4gICAgICAgICAgICBfZXM2bWFwOiB0cnVlLFxuICAgICAgICAgICAgX2hlYWQ6IG51bGwsXG4gICAgICAgICAgICBfbWFwOiBPcmlnTWFwID8gbmV3IE9yaWdNYXAoKSA6IG51bGwsXG4gICAgICAgICAgICBfc2l6ZTogMCxcbiAgICAgICAgICAgIF9zdG9yYWdlOiBlbXB0eU9iamVjdCgpXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB2YXIgaGVhZCA9IG5ldyBNYXBFbnRyeShudWxsLCBudWxsKTtcbiAgICAgICAgICAvLyBjaXJjdWxhciBkb3VibHktbGlua2VkIGxpc3QuXG4gICAgICAgICAgLyogZXNsaW50IG5vLW11bHRpLWFzc2lnbjogMSAqL1xuICAgICAgICAgIGhlYWQubmV4dCA9IGhlYWQucHJldiA9IGhlYWQ7XG4gICAgICAgICAgbWFwLl9oZWFkID0gaGVhZDtcblxuICAgICAgICAgIC8vIE9wdGlvbmFsbHkgaW5pdGlhbGl6ZSBtYXAgZnJvbSBpdGVyYWJsZVxuICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgYWRkSXRlcmFibGVUb01hcChNYXAsIG1hcCwgYXJndW1lbnRzWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG1hcDtcbiAgICAgICAgfTtcbiAgICAgICAgTWFwJHByb3RvdHlwZSA9IE1hcFNoaW0ucHJvdG90eXBlO1xuXG4gICAgICAgIFZhbHVlLmdldHRlcihNYXAkcHJvdG90eXBlLCAnc2l6ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuX3NpemUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzaXplIG1ldGhvZCBjYWxsZWQgb24gaW5jb21wYXRpYmxlIE1hcCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyhNYXAkcHJvdG90eXBlLCB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICAgICAgICByZXF1aXJlTWFwU2xvdCh0aGlzLCAnZ2V0Jyk7XG4gICAgICAgICAgICB2YXIgZW50cnk7XG4gICAgICAgICAgICB2YXIgZmtleSA9IGZhc3RrZXkoa2V5LCB0cnVlKTtcbiAgICAgICAgICAgIGlmIChma2V5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIC8vIGZhc3QgTygxKSBwYXRoXG4gICAgICAgICAgICAgIGVudHJ5ID0gdGhpcy5fc3RvcmFnZVtma2V5XTtcbiAgICAgICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVudHJ5LnZhbHVlO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX21hcCkge1xuICAgICAgICAgICAgICAvLyBmYXN0IG9iamVjdCBrZXkgcGF0aFxuICAgICAgICAgICAgICBlbnRyeSA9IG9yaWdNYXBHZXQuY2FsbCh0aGlzLl9tYXAsIGtleSk7XG4gICAgICAgICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbnRyeS52YWx1ZTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBoZWFkID0gdGhpcy5faGVhZDtcbiAgICAgICAgICAgIHZhciBpID0gaGVhZDtcbiAgICAgICAgICAgIHdoaWxlICgoaSA9IGkubmV4dCkgIT09IGhlYWQpIHtcbiAgICAgICAgICAgICAgaWYgKEVTLlNhbWVWYWx1ZVplcm8oaS5rZXksIGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaS52YWx1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgICAgIHJlcXVpcmVNYXBTbG90KHRoaXMsICdoYXMnKTtcbiAgICAgICAgICAgIHZhciBma2V5ID0gZmFzdGtleShrZXksIHRydWUpO1xuICAgICAgICAgICAgaWYgKGZrZXkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgLy8gZmFzdCBPKDEpIHBhdGhcbiAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLl9zdG9yYWdlW2ZrZXldICE9PSAndW5kZWZpbmVkJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9tYXApIHtcbiAgICAgICAgICAgICAgLy8gZmFzdCBvYmplY3Qga2V5IHBhdGhcbiAgICAgICAgICAgICAgcmV0dXJuIG9yaWdNYXBIYXMuY2FsbCh0aGlzLl9tYXAsIGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaGVhZCA9IHRoaXMuX2hlYWQ7XG4gICAgICAgICAgICB2YXIgaSA9IGhlYWQ7XG4gICAgICAgICAgICB3aGlsZSAoKGkgPSBpLm5leHQpICE9PSBoZWFkKSB7XG4gICAgICAgICAgICAgIGlmIChFUy5TYW1lVmFsdWVaZXJvKGkua2V5LCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgcmVxdWlyZU1hcFNsb3QodGhpcywgJ3NldCcpO1xuICAgICAgICAgICAgdmFyIGhlYWQgPSB0aGlzLl9oZWFkO1xuICAgICAgICAgICAgdmFyIGkgPSBoZWFkO1xuICAgICAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICAgICAgdmFyIGZrZXkgPSBmYXN0a2V5KGtleSwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAoZmtleSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAvLyBmYXN0IE8oMSkgcGF0aFxuICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuX3N0b3JhZ2VbZmtleV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RvcmFnZVtma2V5XS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVudHJ5ID0gdGhpcy5fc3RvcmFnZVtma2V5XSA9IG5ldyBNYXBFbnRyeShrZXksIHZhbHVlKTsgLyogZXNsaW50IG5vLW11bHRpLWFzc2lnbjogMSAqL1xuICAgICAgICAgICAgICAgIGkgPSBoZWFkLnByZXY7XG4gICAgICAgICAgICAgICAgLy8gZmFsbCB0aHJvdWdoXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fbWFwKSB7XG4gICAgICAgICAgICAgIC8vIGZhc3Qgb2JqZWN0IGtleSBwYXRoXG4gICAgICAgICAgICAgIGlmIChvcmlnTWFwSGFzLmNhbGwodGhpcy5fbWFwLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgb3JpZ01hcEdldC5jYWxsKHRoaXMuX21hcCwga2V5KS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVudHJ5ID0gbmV3IE1hcEVudHJ5KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIG9yaWdNYXBTZXQuY2FsbCh0aGlzLl9tYXAsIGtleSwgZW50cnkpO1xuICAgICAgICAgICAgICAgIGkgPSBoZWFkLnByZXY7XG4gICAgICAgICAgICAgICAgLy8gZmFsbCB0aHJvdWdoXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlICgoaSA9IGkubmV4dCkgIT09IGhlYWQpIHtcbiAgICAgICAgICAgICAgaWYgKEVTLlNhbWVWYWx1ZVplcm8oaS5rZXksIGtleSkpIHtcbiAgICAgICAgICAgICAgICBpLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVudHJ5ID0gZW50cnkgfHwgbmV3IE1hcEVudHJ5KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgaWYgKEVTLlNhbWVWYWx1ZSgtMCwga2V5KSkge1xuICAgICAgICAgICAgICBlbnRyeS5rZXkgPSArMDsgLy8gY29lcmNlIC0wIHRvICswIGluIGVudHJ5XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbnRyeS5uZXh0ID0gdGhpcy5faGVhZDtcbiAgICAgICAgICAgIGVudHJ5LnByZXYgPSB0aGlzLl9oZWFkLnByZXY7XG4gICAgICAgICAgICBlbnRyeS5wcmV2Lm5leHQgPSBlbnRyeTtcbiAgICAgICAgICAgIGVudHJ5Lm5leHQucHJldiA9IGVudHJ5O1xuICAgICAgICAgICAgdGhpcy5fc2l6ZSArPSAxO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICByZXF1aXJlTWFwU2xvdCh0aGlzLCAnZGVsZXRlJyk7XG4gICAgICAgICAgICB2YXIgaGVhZCA9IHRoaXMuX2hlYWQ7XG4gICAgICAgICAgICB2YXIgaSA9IGhlYWQ7XG4gICAgICAgICAgICB2YXIgZmtleSA9IGZhc3RrZXkoa2V5LCB0cnVlKTtcbiAgICAgICAgICAgIGlmIChma2V5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIC8vIGZhc3QgTygxKSBwYXRoXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5fc3RvcmFnZVtma2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaSA9IHRoaXMuX3N0b3JhZ2VbZmtleV0ucHJldjtcbiAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3N0b3JhZ2VbZmtleV07XG4gICAgICAgICAgICAgIC8vIGZhbGwgdGhyb3VnaFxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9tYXApIHtcbiAgICAgICAgICAgICAgLy8gZmFzdCBvYmplY3Qga2V5IHBhdGhcbiAgICAgICAgICAgICAgaWYgKCFvcmlnTWFwSGFzLmNhbGwodGhpcy5fbWFwLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGkgPSBvcmlnTWFwR2V0LmNhbGwodGhpcy5fbWFwLCBrZXkpLnByZXY7XG4gICAgICAgICAgICAgIG9yaWdNYXBEZWxldGUuY2FsbCh0aGlzLl9tYXAsIGtleSk7XG4gICAgICAgICAgICAgIC8vIGZhbGwgdGhyb3VnaFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKChpID0gaS5uZXh0KSAhPT0gaGVhZCkge1xuICAgICAgICAgICAgICBpZiAoRVMuU2FtZVZhbHVlWmVybyhpLmtleSwga2V5KSkge1xuICAgICAgICAgICAgICAgIGkua2V5ID0gZW1wdHk7XG4gICAgICAgICAgICAgICAgaS52YWx1ZSA9IGVtcHR5O1xuICAgICAgICAgICAgICAgIGkucHJldi5uZXh0ID0gaS5uZXh0O1xuICAgICAgICAgICAgICAgIGkubmV4dC5wcmV2ID0gaS5wcmV2O1xuICAgICAgICAgICAgICAgIHRoaXMuX3NpemUgLT0gMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgICAgICAvKiBlc2xpbnQgbm8tbXVsdGktYXNzaWduOiAxICovXG4gICAgICAgICAgICByZXF1aXJlTWFwU2xvdCh0aGlzLCAnY2xlYXInKTtcbiAgICAgICAgICAgIHRoaXMuX21hcCA9IE9yaWdNYXAgPyBuZXcgT3JpZ01hcCgpIDogbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX3NpemUgPSAwO1xuICAgICAgICAgICAgdGhpcy5fc3RvcmFnZSA9IGVtcHR5T2JqZWN0KCk7XG4gICAgICAgICAgICB2YXIgaGVhZCA9IHRoaXMuX2hlYWQ7XG4gICAgICAgICAgICB2YXIgaSA9IGhlYWQ7XG4gICAgICAgICAgICB2YXIgcCA9IGkubmV4dDtcbiAgICAgICAgICAgIHdoaWxlICgoaSA9IHApICE9PSBoZWFkKSB7XG4gICAgICAgICAgICAgIGkua2V5ID0gZW1wdHk7XG4gICAgICAgICAgICAgIGkudmFsdWUgPSBlbXB0eTtcbiAgICAgICAgICAgICAgcCA9IGkubmV4dDtcbiAgICAgICAgICAgICAgaS5uZXh0ID0gaS5wcmV2ID0gaGVhZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhlYWQubmV4dCA9IGhlYWQucHJldiA9IGhlYWQ7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGtleXM6IGZ1bmN0aW9uIGtleXMoKSB7XG4gICAgICAgICAgICByZXF1aXJlTWFwU2xvdCh0aGlzLCAna2V5cycpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBNYXBJdGVyYXRvcih0aGlzLCAna2V5Jyk7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgICAgICAgcmVxdWlyZU1hcFNsb3QodGhpcywgJ3ZhbHVlcycpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBNYXBJdGVyYXRvcih0aGlzLCAndmFsdWUnKTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHtcbiAgICAgICAgICAgIHJlcXVpcmVNYXBTbG90KHRoaXMsICdlbnRyaWVzJyk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE1hcEl0ZXJhdG9yKHRoaXMsICdrZXkrdmFsdWUnKTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFjaykge1xuICAgICAgICAgICAgcmVxdWlyZU1hcFNsb3QodGhpcywgJ2ZvckVhY2gnKTtcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuICAgICAgICAgICAgdmFyIGl0ID0gdGhpcy5lbnRyaWVzKCk7XG4gICAgICAgICAgICBmb3IgKHZhciBlbnRyeSA9IGl0Lm5leHQoKTsgIWVudHJ5LmRvbmU7IGVudHJ5ID0gaXQubmV4dCgpKSB7XG4gICAgICAgICAgICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgX2NhbGwoY2FsbGJhY2ssIGNvbnRleHQsIGVudHJ5LnZhbHVlWzFdLCBlbnRyeS52YWx1ZVswXSwgdGhpcyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZW50cnkudmFsdWVbMV0sIGVudHJ5LnZhbHVlWzBdLCB0aGlzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGFkZEl0ZXJhdG9yKE1hcCRwcm90b3R5cGUsIE1hcCRwcm90b3R5cGUuZW50cmllcyk7XG5cbiAgICAgICAgcmV0dXJuIE1hcFNoaW07XG4gICAgICB9KCkpLFxuXG4gICAgICBTZXQ6IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpc1NldCA9IGZ1bmN0aW9uIGlzU2V0KHNldCkge1xuICAgICAgICAgIHJldHVybiBzZXQuX2VzNnNldCAmJiB0eXBlb2Ygc2V0Ll9zdG9yYWdlICE9PSAndW5kZWZpbmVkJztcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlcXVpcmVTZXRTbG90ID0gZnVuY3Rpb24gcmVxdWlyZVNldFNsb3Qoc2V0LCBtZXRob2QpIHtcbiAgICAgICAgICBpZiAoIUVTLlR5cGVJc09iamVjdChzZXQpIHx8ICFpc1NldChzZXQpKSB7XG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcGF1bG1pbGxyL2VzNi1zaGltL2lzc3Vlcy8xNzZcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1NldC5wcm90b3R5cGUuJyArIG1ldGhvZCArICcgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlciAnICsgRVMuVG9TdHJpbmcoc2V0KSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIENyZWF0aW5nIGEgTWFwIGlzIGV4cGVuc2l2ZS4gIFRvIHNwZWVkIHVwIHRoZSBjb21tb24gY2FzZSBvZlxuICAgICAgICAvLyBTZXRzIGNvbnRhaW5pbmcgb25seSBzdHJpbmcgb3IgbnVtZXJpYyBrZXlzLCB3ZSB1c2UgYW4gb2JqZWN0XG4gICAgICAgIC8vIGFzIGJhY2tpbmcgc3RvcmFnZSBhbmQgbGF6aWx5IGNyZWF0ZSBhIGZ1bGwgTWFwIG9ubHkgd2hlblxuICAgICAgICAvLyByZXF1aXJlZC5cbiAgICAgICAgdmFyIFNldCRwcm90b3R5cGU7XG4gICAgICAgIHZhciBTZXRTaGltID0gZnVuY3Rpb24gU2V0KCkge1xuICAgICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTZXQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDb25zdHJ1Y3RvciBTZXQgcmVxdWlyZXMgXCJuZXdcIicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpcyAmJiB0aGlzLl9lczZzZXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBjb25zdHJ1Y3Rpb24nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHNldCA9IGVtdWxhdGVFUzZjb25zdHJ1Y3QodGhpcywgU2V0LCBTZXQkcHJvdG90eXBlLCB7XG4gICAgICAgICAgICBfZXM2c2V0OiB0cnVlLFxuICAgICAgICAgICAgJ1tbU2V0RGF0YV1dJzogbnVsbCxcbiAgICAgICAgICAgIF9zdG9yYWdlOiBlbXB0eU9iamVjdCgpXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKCFzZXQuX2VzNnNldCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYmFkIHNldCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIE9wdGlvbmFsbHkgaW5pdGlhbGl6ZSBTZXQgZnJvbSBpdGVyYWJsZVxuICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgYWRkSXRlcmFibGVUb1NldChTZXQsIHNldCwgYXJndW1lbnRzWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHNldDtcbiAgICAgICAgfTtcbiAgICAgICAgU2V0JHByb3RvdHlwZSA9IFNldFNoaW0ucHJvdG90eXBlO1xuXG4gICAgICAgIHZhciBkZWNvZGVLZXkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgdmFyIGsgPSBrZXk7XG4gICAgICAgICAgaWYgKGsgPT09ICdebnVsbCcpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH0gZWxzZSBpZiAoayA9PT0gJ151bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgZmlyc3QgPSBrLmNoYXJBdCgwKTtcbiAgICAgICAgICAgIGlmIChmaXJzdCA9PT0gJyQnKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfc3RyU2xpY2UoaywgMSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSAnbicpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICtfc3RyU2xpY2UoaywgMSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSAnYicpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGsgPT09ICdidHJ1ZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAraztcbiAgICAgICAgfTtcbiAgICAgICAgLy8gU3dpdGNoIGZyb20gdGhlIG9iamVjdCBiYWNraW5nIHN0b3JhZ2UgdG8gYSBmdWxsIE1hcC5cbiAgICAgICAgdmFyIGVuc3VyZU1hcCA9IGZ1bmN0aW9uIGVuc3VyZU1hcChzZXQpIHtcbiAgICAgICAgICBpZiAoIXNldFsnW1tTZXREYXRhXV0nXSkge1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgY29sbGVjdGlvblNoaW1zLk1hcCgpO1xuICAgICAgICAgICAgc2V0WydbW1NldERhdGFdXSddID0gbTtcbiAgICAgICAgICAgIF9mb3JFYWNoKGtleXMoc2V0Ll9zdG9yYWdlKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICB2YXIgayA9IGRlY29kZUtleShrZXkpO1xuICAgICAgICAgICAgICBtLnNldChrLCBrKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2V0WydbW1NldERhdGFdXSddID0gbTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2V0Ll9zdG9yYWdlID0gbnVsbDsgLy8gZnJlZSBvbGQgYmFja2luZyBzdG9yYWdlXG4gICAgICAgIH07XG5cbiAgICAgICAgVmFsdWUuZ2V0dGVyKFNldFNoaW0ucHJvdG90eXBlLCAnc2l6ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXF1aXJlU2V0U2xvdCh0aGlzLCAnc2l6ZScpO1xuICAgICAgICAgIGlmICh0aGlzLl9zdG9yYWdlKSB7XG4gICAgICAgICAgICByZXR1cm4ga2V5cyh0aGlzLl9zdG9yYWdlKS5sZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVuc3VyZU1hcCh0aGlzKTtcbiAgICAgICAgICByZXR1cm4gdGhpc1snW1tTZXREYXRhXV0nXS5zaXplO1xuICAgICAgICB9KTtcblxuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKFNldFNoaW0ucHJvdG90eXBlLCB7XG4gICAgICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgICAgICByZXF1aXJlU2V0U2xvdCh0aGlzLCAnaGFzJyk7XG4gICAgICAgICAgICB2YXIgZmtleTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zdG9yYWdlICYmIChma2V5ID0gZmFzdGtleShrZXkpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICByZXR1cm4gISF0aGlzLl9zdG9yYWdlW2ZrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW5zdXJlTWFwKHRoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbJ1tbU2V0RGF0YV1dJ10uaGFzKGtleSk7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGFkZDogZnVuY3Rpb24gYWRkKGtleSkge1xuICAgICAgICAgICAgcmVxdWlyZVNldFNsb3QodGhpcywgJ2FkZCcpO1xuICAgICAgICAgICAgdmFyIGZrZXk7XG4gICAgICAgICAgICBpZiAodGhpcy5fc3RvcmFnZSAmJiAoZmtleSA9IGZhc3RrZXkoa2V5KSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgdGhpcy5fc3RvcmFnZVtma2V5XSA9IHRydWU7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW5zdXJlTWFwKHRoaXMpO1xuICAgICAgICAgICAgdGhpc1snW1tTZXREYXRhXV0nXS5zZXQoa2V5LCBrZXkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICByZXF1aXJlU2V0U2xvdCh0aGlzLCAnZGVsZXRlJyk7XG4gICAgICAgICAgICB2YXIgZmtleTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zdG9yYWdlICYmIChma2V5ID0gZmFzdGtleShrZXkpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICB2YXIgaGFzRktleSA9IF9oYXNPd25Qcm9wZXJ0eSh0aGlzLl9zdG9yYWdlLCBma2V5KTtcbiAgICAgICAgICAgICAgcmV0dXJuIChkZWxldGUgdGhpcy5fc3RvcmFnZVtma2V5XSkgJiYgaGFzRktleTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVuc3VyZU1hcCh0aGlzKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzWydbW1NldERhdGFdXSddWydkZWxldGUnXShrZXkpO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgICAgICByZXF1aXJlU2V0U2xvdCh0aGlzLCAnY2xlYXInKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zdG9yYWdlKSB7XG4gICAgICAgICAgICAgIHRoaXMuX3N0b3JhZ2UgPSBlbXB0eU9iamVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXNbJ1tbU2V0RGF0YV1dJ10pIHtcbiAgICAgICAgICAgICAgdGhpc1snW1tTZXREYXRhXV0nXS5jbGVhcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG5cbiAgICAgICAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgICAgICAgIHJlcXVpcmVTZXRTbG90KHRoaXMsICd2YWx1ZXMnKTtcbiAgICAgICAgICAgIGVuc3VyZU1hcCh0aGlzKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU2V0SXRlcmF0b3IodGhpc1snW1tTZXREYXRhXV0nXS52YWx1ZXMoKSk7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICAgICAgICByZXF1aXJlU2V0U2xvdCh0aGlzLCAnZW50cmllcycpO1xuICAgICAgICAgICAgZW5zdXJlTWFwKHRoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTZXRJdGVyYXRvcih0aGlzWydbW1NldERhdGFdXSddLmVudHJpZXMoKSk7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJlcXVpcmVTZXRTbG90KHRoaXMsICdmb3JFYWNoJyk7XG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogbnVsbDtcbiAgICAgICAgICAgIHZhciBlbnRpcmVTZXQgPSB0aGlzO1xuICAgICAgICAgICAgZW5zdXJlTWFwKGVudGlyZVNldCk7XG4gICAgICAgICAgICB0aGlzWydbW1NldERhdGFdXSddLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBfY2FsbChjYWxsYmFjaywgY29udGV4dCwga2V5LCBrZXksIGVudGlyZVNldCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soa2V5LCBrZXksIGVudGlyZVNldCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGRlZmluZVByb3BlcnR5KFNldFNoaW0ucHJvdG90eXBlLCAna2V5cycsIFNldFNoaW0ucHJvdG90eXBlLnZhbHVlcywgdHJ1ZSk7XG4gICAgICAgIGFkZEl0ZXJhdG9yKFNldFNoaW0ucHJvdG90eXBlLCBTZXRTaGltLnByb3RvdHlwZS52YWx1ZXMpO1xuXG4gICAgICAgIHZhciBTZXRJdGVyYXRvciA9IGZ1bmN0aW9uIFNldEl0ZXJhdG9yKGl0KSB7XG4gICAgICAgICAgdGhpcy5pdCA9IGl0O1xuICAgICAgICB9O1xuICAgICAgICBTZXRJdGVyYXRvci5wcm90b3R5cGUgPSB7XG4gICAgICAgICAgaXNTZXRJdGVyYXRvcjogdHJ1ZSxcbiAgICAgICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzU2V0SXRlcmF0b3IpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTm90IGEgU2V0SXRlcmF0b3InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLml0Lm5leHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGFkZEl0ZXJhdG9yKFNldEl0ZXJhdG9yLnByb3RvdHlwZSk7XG5cbiAgICAgICAgcmV0dXJuIFNldFNoaW07XG4gICAgICB9KCkpXG4gICAgfTtcblxuICAgIHZhciBpc0dvb2dsZVRyYW5zbGF0ZSA9IGdsb2JhbHMuU2V0ICYmICFTZXQucHJvdG90eXBlWydkZWxldGUnXSAmJiBTZXQucHJvdG90eXBlLnJlbW92ZSAmJiBTZXQucHJvdG90eXBlLml0ZW1zICYmIFNldC5wcm90b3R5cGUubWFwICYmIEFycmF5LmlzQXJyYXkobmV3IFNldCgpLmtleXMpO1xuICAgIGlmIChpc0dvb2dsZVRyYW5zbGF0ZSkge1xuICAgICAgLy8gc3BlY2lhbC1jYXNlIGZvcmNlIHJlbW92YWwgb2Ygd2lsZGx5IGludmFsaWQgU2V0IGltcGxlbWVudGF0aW9uIGluIEdvb2dsZSBUcmFuc2xhdGUgaWZyYW1lc1xuICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9wYXVsbWlsbHIvZXM2LXNoaW0vaXNzdWVzLzQzOCAvIGh0dHBzOi8vdHdpdHRlci5jb20vbGpoYXJiL3N0YXR1cy84NDkzMzU1NzMxMTQzNjM5MDRcbiAgICAgIGdsb2JhbHMuU2V0ID0gY29sbGVjdGlvblNoaW1zLlNldDtcbiAgICB9XG4gICAgaWYgKGdsb2JhbHMuTWFwIHx8IGdsb2JhbHMuU2V0KSB7XG4gICAgICAvLyBTYWZhcmkgOCwgZm9yIGV4YW1wbGUsIGRvZXNuJ3QgYWNjZXB0IGFuIGl0ZXJhYmxlLlxuICAgICAgdmFyIG1hcEFjY2VwdHNBcmd1bWVudHMgPSB2YWx1ZU9yRmFsc2VJZlRocm93cyhmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgTWFwKFtbMSwgMl1dKS5nZXQoMSkgPT09IDI7IH0pO1xuICAgICAgaWYgKCFtYXBBY2NlcHRzQXJndW1lbnRzKSB7XG4gICAgICAgIGdsb2JhbHMuTWFwID0gZnVuY3Rpb24gTWFwKCkge1xuICAgICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBNYXApKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDb25zdHJ1Y3RvciBNYXAgcmVxdWlyZXMgXCJuZXdcIicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgbSA9IG5ldyBPcmlnTWFwKCk7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBhZGRJdGVyYWJsZVRvTWFwKE1hcCwgbSwgYXJndW1lbnRzWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVsZXRlIG0uY29uc3RydWN0b3I7XG4gICAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKG0sIGdsb2JhbHMuTWFwLnByb3RvdHlwZSk7XG4gICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG4gICAgICAgIGdsb2JhbHMuTWFwLnByb3RvdHlwZSA9IGNyZWF0ZShPcmlnTWFwLnByb3RvdHlwZSk7XG4gICAgICAgIGRlZmluZVByb3BlcnR5KGdsb2JhbHMuTWFwLnByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgZ2xvYmFscy5NYXAsIHRydWUpO1xuICAgICAgICBWYWx1ZS5wcmVzZXJ2ZVRvU3RyaW5nKGdsb2JhbHMuTWFwLCBPcmlnTWFwKTtcbiAgICAgIH1cbiAgICAgIHZhciB0ZXN0TWFwID0gbmV3IE1hcCgpO1xuICAgICAgdmFyIG1hcFVzZXNTYW1lVmFsdWVaZXJvID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gQ2hyb21lIDM4LTQyLCBub2RlIDAuMTEvMC4xMiwgaW9qcyAxLzIgYWxzbyBoYXZlIGEgYnVnIHdoZW4gdGhlIE1hcCBoYXMgYSBzaXplID4gNFxuICAgICAgICB2YXIgbSA9IG5ldyBNYXAoW1sxLCAwXSwgWzIsIDBdLCBbMywgMF0sIFs0LCAwXV0pO1xuICAgICAgICBtLnNldCgtMCwgbSk7XG4gICAgICAgIHJldHVybiBtLmdldCgwKSA9PT0gbSAmJiBtLmdldCgtMCkgPT09IG0gJiYgbS5oYXMoMCkgJiYgbS5oYXMoLTApO1xuICAgICAgfSgpKTtcbiAgICAgIHZhciBtYXBTdXBwb3J0c0NoYWluaW5nID0gdGVzdE1hcC5zZXQoMSwgMikgPT09IHRlc3RNYXA7XG4gICAgICBpZiAoIW1hcFVzZXNTYW1lVmFsdWVaZXJvIHx8ICFtYXBTdXBwb3J0c0NoYWluaW5nKSB7XG4gICAgICAgIG92ZXJyaWRlTmF0aXZlKE1hcC5wcm90b3R5cGUsICdzZXQnLCBmdW5jdGlvbiBzZXQoaywgdikge1xuICAgICAgICAgIF9jYWxsKG9yaWdNYXBTZXQsIHRoaXMsIGsgPT09IDAgPyAwIDogaywgdik7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKCFtYXBVc2VzU2FtZVZhbHVlWmVybykge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKE1hcC5wcm90b3R5cGUsIHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldChrKSB7XG4gICAgICAgICAgICByZXR1cm4gX2NhbGwob3JpZ01hcEdldCwgdGhpcywgayA9PT0gMCA/IDAgOiBrKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGhhczogZnVuY3Rpb24gaGFzKGspIHtcbiAgICAgICAgICAgIHJldHVybiBfY2FsbChvcmlnTWFwSGFzLCB0aGlzLCBrID09PSAwID8gMCA6IGspO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgIFZhbHVlLnByZXNlcnZlVG9TdHJpbmcoTWFwLnByb3RvdHlwZS5nZXQsIG9yaWdNYXBHZXQpO1xuICAgICAgICBWYWx1ZS5wcmVzZXJ2ZVRvU3RyaW5nKE1hcC5wcm90b3R5cGUuaGFzLCBvcmlnTWFwSGFzKTtcbiAgICAgIH1cbiAgICAgIHZhciB0ZXN0U2V0ID0gbmV3IFNldCgpO1xuICAgICAgdmFyIHNldFVzZXNTYW1lVmFsdWVaZXJvID0gU2V0LnByb3RvdHlwZVsnZGVsZXRlJ10gJiYgU2V0LnByb3RvdHlwZS5hZGQgJiYgU2V0LnByb3RvdHlwZS5oYXMgJiYgKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgIHNbJ2RlbGV0ZSddKDApO1xuICAgICAgICBzLmFkZCgtMCk7XG4gICAgICAgIHJldHVybiAhcy5oYXMoMCk7XG4gICAgICB9KHRlc3RTZXQpKTtcbiAgICAgIHZhciBzZXRTdXBwb3J0c0NoYWluaW5nID0gdGVzdFNldC5hZGQoMSkgPT09IHRlc3RTZXQ7XG4gICAgICBpZiAoIXNldFVzZXNTYW1lVmFsdWVaZXJvIHx8ICFzZXRTdXBwb3J0c0NoYWluaW5nKSB7XG4gICAgICAgIHZhciBvcmlnU2V0QWRkID0gU2V0LnByb3RvdHlwZS5hZGQ7XG4gICAgICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKHYpIHtcbiAgICAgICAgICBfY2FsbChvcmlnU2V0QWRkLCB0aGlzLCB2ID09PSAwID8gMCA6IHYpO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9O1xuICAgICAgICBWYWx1ZS5wcmVzZXJ2ZVRvU3RyaW5nKFNldC5wcm90b3R5cGUuYWRkLCBvcmlnU2V0QWRkKTtcbiAgICAgIH1cbiAgICAgIGlmICghc2V0VXNlc1NhbWVWYWx1ZVplcm8pIHtcbiAgICAgICAgdmFyIG9yaWdTZXRIYXMgPSBTZXQucHJvdG90eXBlLmhhcztcbiAgICAgICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXModikge1xuICAgICAgICAgIHJldHVybiBfY2FsbChvcmlnU2V0SGFzLCB0aGlzLCB2ID09PSAwID8gMCA6IHYpO1xuICAgICAgICB9O1xuICAgICAgICBWYWx1ZS5wcmVzZXJ2ZVRvU3RyaW5nKFNldC5wcm90b3R5cGUuaGFzLCBvcmlnU2V0SGFzKTtcbiAgICAgICAgdmFyIG9yaWdTZXREZWwgPSBTZXQucHJvdG90eXBlWydkZWxldGUnXTtcbiAgICAgICAgU2V0LnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbiBTZXREZWxldGUodikge1xuICAgICAgICAgIHJldHVybiBfY2FsbChvcmlnU2V0RGVsLCB0aGlzLCB2ID09PSAwID8gMCA6IHYpO1xuICAgICAgICB9O1xuICAgICAgICBWYWx1ZS5wcmVzZXJ2ZVRvU3RyaW5nKFNldC5wcm90b3R5cGVbJ2RlbGV0ZSddLCBvcmlnU2V0RGVsKTtcbiAgICAgIH1cbiAgICAgIHZhciBtYXBTdXBwb3J0c1N1YmNsYXNzaW5nID0gc3VwcG9ydHNTdWJjbGFzc2luZyhnbG9iYWxzLk1hcCwgZnVuY3Rpb24gKE0pIHtcbiAgICAgICAgdmFyIG0gPSBuZXcgTShbXSk7XG4gICAgICAgIC8vIEZpcmVmb3ggMzIgaXMgb2sgd2l0aCB0aGUgaW5zdGFudGlhdGluZyB0aGUgc3ViY2xhc3MgYnV0IHdpbGxcbiAgICAgICAgLy8gdGhyb3cgd2hlbiB0aGUgbWFwIGlzIHVzZWQuXG4gICAgICAgIG0uc2V0KDQyLCA0Mik7XG4gICAgICAgIHJldHVybiBtIGluc3RhbmNlb2YgTTtcbiAgICAgIH0pO1xuICAgICAgLy8gd2l0aG91dCBPYmplY3Quc2V0UHJvdG90eXBlT2YsIHN1YmNsYXNzaW5nIGlzIG5vdCBwb3NzaWJsZVxuICAgICAgdmFyIG1hcEZhaWxzVG9TdXBwb3J0U3ViY2xhc3NpbmcgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgJiYgIW1hcFN1cHBvcnRzU3ViY2xhc3Npbmc7XG4gICAgICB2YXIgbWFwUmVxdWlyZXNOZXcgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiAhKGdsb2JhbHMuTWFwKCkgaW5zdGFuY2VvZiBnbG9iYWxzLk1hcCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZXR1cm4gZSBpbnN0YW5jZW9mIFR5cGVFcnJvcjtcbiAgICAgICAgfVxuICAgICAgfSgpKTtcbiAgICAgIGlmIChnbG9iYWxzLk1hcC5sZW5ndGggIT09IDAgfHwgbWFwRmFpbHNUb1N1cHBvcnRTdWJjbGFzc2luZyB8fCAhbWFwUmVxdWlyZXNOZXcpIHtcbiAgICAgICAgZ2xvYmFscy5NYXAgPSBmdW5jdGlvbiBNYXAoKSB7XG4gICAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE1hcCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvbnN0cnVjdG9yIE1hcCByZXF1aXJlcyBcIm5ld1wiJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBtID0gbmV3IE9yaWdNYXAoKTtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGFkZEl0ZXJhYmxlVG9NYXAoTWFwLCBtLCBhcmd1bWVudHNbMF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWxldGUgbS5jb25zdHJ1Y3RvcjtcbiAgICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YobSwgTWFwLnByb3RvdHlwZSk7XG4gICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG4gICAgICAgIGdsb2JhbHMuTWFwLnByb3RvdHlwZSA9IE9yaWdNYXAucHJvdG90eXBlO1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eShnbG9iYWxzLk1hcC5wcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIGdsb2JhbHMuTWFwLCB0cnVlKTtcbiAgICAgICAgVmFsdWUucHJlc2VydmVUb1N0cmluZyhnbG9iYWxzLk1hcCwgT3JpZ01hcCk7XG4gICAgICB9XG4gICAgICB2YXIgc2V0U3VwcG9ydHNTdWJjbGFzc2luZyA9IHN1cHBvcnRzU3ViY2xhc3NpbmcoZ2xvYmFscy5TZXQsIGZ1bmN0aW9uIChTKSB7XG4gICAgICAgIHZhciBzID0gbmV3IFMoW10pO1xuICAgICAgICBzLmFkZCg0MiwgNDIpO1xuICAgICAgICByZXR1cm4gcyBpbnN0YW5jZW9mIFM7XG4gICAgICB9KTtcbiAgICAgIC8vIHdpdGhvdXQgT2JqZWN0LnNldFByb3RvdHlwZU9mLCBzdWJjbGFzc2luZyBpcyBub3QgcG9zc2libGVcbiAgICAgIHZhciBzZXRGYWlsc1RvU3VwcG9ydFN1YmNsYXNzaW5nID0gT2JqZWN0LnNldFByb3RvdHlwZU9mICYmICFzZXRTdXBwb3J0c1N1YmNsYXNzaW5nO1xuICAgICAgdmFyIHNldFJlcXVpcmVzTmV3ID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gIShnbG9iYWxzLlNldCgpIGluc3RhbmNlb2YgZ2xvYmFscy5TZXQpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBUeXBlRXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH0oKSk7XG4gICAgICBpZiAoZ2xvYmFscy5TZXQubGVuZ3RoICE9PSAwIHx8IHNldEZhaWxzVG9TdXBwb3J0U3ViY2xhc3NpbmcgfHwgIXNldFJlcXVpcmVzTmV3KSB7XG4gICAgICAgIHZhciBPcmlnU2V0ID0gZ2xvYmFscy5TZXQ7XG4gICAgICAgIGdsb2JhbHMuU2V0ID0gZnVuY3Rpb24gU2V0KCkge1xuICAgICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTZXQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDb25zdHJ1Y3RvciBTZXQgcmVxdWlyZXMgXCJuZXdcIicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcyA9IG5ldyBPcmlnU2V0KCk7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBhZGRJdGVyYWJsZVRvU2V0KFNldCwgcywgYXJndW1lbnRzWzBdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVsZXRlIHMuY29uc3RydWN0b3I7XG4gICAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHMsIFNldC5wcm90b3R5cGUpO1xuICAgICAgICAgIHJldHVybiBzO1xuICAgICAgICB9O1xuICAgICAgICBnbG9iYWxzLlNldC5wcm90b3R5cGUgPSBPcmlnU2V0LnByb3RvdHlwZTtcbiAgICAgICAgZGVmaW5lUHJvcGVydHkoZ2xvYmFscy5TZXQucHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBnbG9iYWxzLlNldCwgdHJ1ZSk7XG4gICAgICAgIFZhbHVlLnByZXNlcnZlVG9TdHJpbmcoZ2xvYmFscy5TZXQsIE9yaWdTZXQpO1xuICAgICAgfVxuICAgICAgdmFyIG5ld01hcCA9IG5ldyBnbG9iYWxzLk1hcCgpO1xuICAgICAgdmFyIG1hcEl0ZXJhdGlvblRocm93c1N0b3BJdGVyYXRvciA9ICF2YWx1ZU9yRmFsc2VJZlRocm93cyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXdNYXAua2V5cygpLm5leHQoKS5kb25lO1xuICAgICAgfSk7XG4gICAgICAvKlxuICAgICAgICAtIEluIEZpcmVmb3ggPCAyMywgTWFwI3NpemUgaXMgYSBmdW5jdGlvbi5cbiAgICAgICAgLSBJbiBhbGwgY3VycmVudCBGaXJlZm94LCBTZXQjZW50cmllcy9rZXlzL3ZhbHVlcyAmIE1hcCNjbGVhciBkbyBub3QgZXhpc3RcbiAgICAgICAgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD04Njk5OTZcbiAgICAgICAgLSBJbiBGaXJlZm94IDI0LCBNYXAgYW5kIFNldCBkbyBub3QgaW1wbGVtZW50IGZvckVhY2hcbiAgICAgICAgLSBJbiBGaXJlZm94IDI1IGF0IGxlYXN0LCBNYXAgYW5kIFNldCBhcmUgY2FsbGFibGUgd2l0aG91dCBcIm5ld1wiXG4gICAgICAqL1xuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgZ2xvYmFscy5NYXAucHJvdG90eXBlLmNsZWFyICE9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgIG5ldyBnbG9iYWxzLlNldCgpLnNpemUgIT09IDAgfHxcbiAgICAgICAgbmV3TWFwLnNpemUgIT09IDAgfHxcbiAgICAgICAgdHlwZW9mIGdsb2JhbHMuTWFwLnByb3RvdHlwZS5rZXlzICE9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgIHR5cGVvZiBnbG9iYWxzLlNldC5wcm90b3R5cGUua2V5cyAhPT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICB0eXBlb2YgZ2xvYmFscy5NYXAucHJvdG90eXBlLmZvckVhY2ggIT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgdHlwZW9mIGdsb2JhbHMuU2V0LnByb3RvdHlwZS5mb3JFYWNoICE9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgIGlzQ2FsbGFibGVXaXRob3V0TmV3KGdsb2JhbHMuTWFwKSB8fFxuICAgICAgICBpc0NhbGxhYmxlV2l0aG91dE5ldyhnbG9iYWxzLlNldCkgfHxcbiAgICAgICAgdHlwZW9mIG5ld01hcC5rZXlzKCkubmV4dCAhPT0gJ2Z1bmN0aW9uJyB8fCAvLyBTYWZhcmkgOFxuICAgICAgICBtYXBJdGVyYXRpb25UaHJvd3NTdG9wSXRlcmF0b3IgfHwgLy8gRmlyZWZveCAyNVxuICAgICAgICAhbWFwU3VwcG9ydHNTdWJjbGFzc2luZ1xuICAgICAgKSB7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXMoZ2xvYmFscywge1xuICAgICAgICAgIE1hcDogY29sbGVjdGlvblNoaW1zLk1hcCxcbiAgICAgICAgICBTZXQ6IGNvbGxlY3Rpb25TaGltcy5TZXRcbiAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChnbG9iYWxzLlNldC5wcm90b3R5cGUua2V5cyAhPT0gZ2xvYmFscy5TZXQucHJvdG90eXBlLnZhbHVlcykge1xuICAgICAgICAvLyBGaXhlZCBpbiBXZWJLaXQgd2l0aCBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTQ0MTkwXG4gICAgICAgIGRlZmluZVByb3BlcnR5KGdsb2JhbHMuU2V0LnByb3RvdHlwZSwgJ2tleXMnLCBnbG9iYWxzLlNldC5wcm90b3R5cGUudmFsdWVzLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgLy8gU2hpbSBpbmNvbXBsZXRlIGl0ZXJhdG9yIGltcGxlbWVudGF0aW9ucy5cbiAgICAgIGFkZEl0ZXJhdG9yKE9iamVjdC5nZXRQcm90b3R5cGVPZigobmV3IGdsb2JhbHMuTWFwKCkpLmtleXMoKSkpO1xuICAgICAgYWRkSXRlcmF0b3IoT2JqZWN0LmdldFByb3RvdHlwZU9mKChuZXcgZ2xvYmFscy5TZXQoKSkua2V5cygpKSk7XG5cbiAgICAgIGlmIChmdW5jdGlvbnNIYXZlTmFtZXMgJiYgZ2xvYmFscy5TZXQucHJvdG90eXBlLmhhcy5uYW1lICE9PSAnaGFzJykge1xuICAgICAgICAvLyBNaWNyb3NvZnQgRWRnZSB2MC4xMS4xMDA3NC4wIGlzIG1pc3NpbmcgYSBuYW1lIG9uIFNldCNoYXNcbiAgICAgICAgdmFyIGFub255bW91c1NldEhhcyA9IGdsb2JhbHMuU2V0LnByb3RvdHlwZS5oYXM7XG4gICAgICAgIG92ZXJyaWRlTmF0aXZlKGdsb2JhbHMuU2V0LnByb3RvdHlwZSwgJ2hhcycsIGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgICByZXR1cm4gX2NhbGwoYW5vbnltb3VzU2V0SGFzLCB0aGlzLCBrZXkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZGVmaW5lUHJvcGVydGllcyhnbG9iYWxzLCBjb2xsZWN0aW9uU2hpbXMpO1xuICAgIGFkZERlZmF1bHRTcGVjaWVzKGdsb2JhbHMuTWFwKTtcbiAgICBhZGREZWZhdWx0U3BlY2llcyhnbG9iYWxzLlNldCk7XG4gIH1cblxuICB2YXIgdGhyb3dVbmxlc3NUYXJnZXRJc09iamVjdCA9IGZ1bmN0aW9uIHRocm93VW5sZXNzVGFyZ2V0SXNPYmplY3QodGFyZ2V0KSB7XG4gICAgaWYgKCFFUy5UeXBlSXNPYmplY3QodGFyZ2V0KSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGFyZ2V0IG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFNvbWUgUmVmbGVjdCBtZXRob2RzIGFyZSBiYXNpY2FsbHkgdGhlIHNhbWUgYXNcbiAgLy8gdGhvc2Ugb24gdGhlIE9iamVjdCBnbG9iYWwsIGV4Y2VwdCB0aGF0IGEgVHlwZUVycm9yIGlzIHRocm93biBpZlxuICAvLyB0YXJnZXQgaXNuJ3QgYW4gb2JqZWN0LiBBcyB3ZWxsIGFzIHJldHVybmluZyBhIGJvb2xlYW4gaW5kaWNhdGluZ1xuICAvLyB0aGUgc3VjY2VzcyBvZiB0aGUgb3BlcmF0aW9uLlxuICB2YXIgUmVmbGVjdFNoaW1zID0ge1xuICAgIC8vIEFwcGx5IG1ldGhvZCBpbiBhIGZ1bmN0aW9uYWwgZm9ybS5cbiAgICBhcHBseTogZnVuY3Rpb24gYXBwbHkoKSB7XG4gICAgICByZXR1cm4gRVMuQ2FsbChFUy5DYWxsLCBudWxsLCBhcmd1bWVudHMpO1xuICAgIH0sXG5cbiAgICAvLyBOZXcgb3BlcmF0b3IgaW4gYSBmdW5jdGlvbmFsIGZvcm0uXG4gICAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoY29uc3RydWN0b3IsIGFyZ3MpIHtcbiAgICAgIGlmICghRVMuSXNDb25zdHJ1Y3Rvcihjb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIGNvbnN0cnVjdG9yLicpO1xuICAgICAgfVxuICAgICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogY29uc3RydWN0b3I7XG4gICAgICBpZiAoIUVTLklzQ29uc3RydWN0b3IobmV3VGFyZ2V0KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCduZXcudGFyZ2V0IG11c3QgYmUgYSBjb25zdHJ1Y3Rvci4nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBFUy5Db25zdHJ1Y3QoY29uc3RydWN0b3IsIGFyZ3MsIG5ld1RhcmdldCwgJ2ludGVybmFsJyk7XG4gICAgfSxcblxuICAgIC8vIFdoZW4gZGVsZXRpbmcgYSBub24tZXhpc3RlbnQgb3IgY29uZmlndXJhYmxlIHByb3BlcnR5LFxuICAgIC8vIHRydWUgaXMgcmV0dXJuZWQuXG4gICAgLy8gV2hlbiBhdHRlbXB0aW5nIHRvIGRlbGV0ZSBhIG5vbi1jb25maWd1cmFibGUgcHJvcGVydHksXG4gICAgLy8gaXQgd2lsbCByZXR1cm4gZmFsc2UuXG4gICAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KSB7XG4gICAgICB0aHJvd1VubGVzc1RhcmdldElzT2JqZWN0KHRhcmdldCk7XG4gICAgICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xuXG4gICAgICAgIGlmIChkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBXaWxsIHJldHVybiB0cnVlLlxuICAgICAgcmV0dXJuIGRlbGV0ZSB0YXJnZXRba2V5XTtcbiAgICB9LFxuXG4gICAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBrZXkpIHtcbiAgICAgIHRocm93VW5sZXNzVGFyZ2V0SXNPYmplY3QodGFyZ2V0KTtcbiAgICAgIHJldHVybiBrZXkgaW4gdGFyZ2V0O1xuICAgIH1cbiAgfTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMpIHtcbiAgICBPYmplY3QuYXNzaWduKFJlZmxlY3RTaGltcywge1xuICAgICAgLy8gQmFzaWNhbGx5IHRoZSByZXN1bHQgb2YgY2FsbGluZyB0aGUgaW50ZXJuYWwgW1tPd25Qcm9wZXJ0eUtleXNdXS5cbiAgICAgIC8vIENvbmNhdGVuYXRpbmcgcHJvcGVydHlOYW1lcyBhbmQgcHJvcGVydHlTeW1ib2xzIHNob3VsZCBkbyB0aGUgdHJpY2suXG4gICAgICAvLyBUaGlzIHNob3VsZCBjb250aW51ZSB0byB3b3JrIHRvZ2V0aGVyIHdpdGggYSBTeW1ib2wgc2hpbVxuICAgICAgLy8gd2hpY2ggb3ZlcnJpZGVzIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIGFuZCBpbXBsZW1lbnRzXG4gICAgICAvLyBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLlxuICAgICAgb3duS2V5czogZnVuY3Rpb24gb3duS2V5cyh0YXJnZXQpIHtcbiAgICAgICAgdGhyb3dVbmxlc3NUYXJnZXRJc09iamVjdCh0YXJnZXQpO1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldCk7XG5cbiAgICAgICAgaWYgKEVTLklzQ2FsbGFibGUoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykpIHtcbiAgICAgICAgICBfcHVzaEFwcGx5KGtleXMsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ga2V5cztcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBjYWxsQW5kQ2F0Y2hFeGNlcHRpb24gPSBmdW5jdGlvbiBDb252ZXJ0RXhjZXB0aW9uVG9Cb29sZWFuKGZ1bmMpIHtcbiAgICByZXR1cm4gIXRocm93c0Vycm9yKGZ1bmMpO1xuICB9O1xuXG4gIGlmIChPYmplY3QucHJldmVudEV4dGVuc2lvbnMpIHtcbiAgICBPYmplY3QuYXNzaWduKFJlZmxlY3RTaGltcywge1xuICAgICAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBpc0V4dGVuc2libGUodGFyZ2V0KSB7XG4gICAgICAgIHRocm93VW5sZXNzVGFyZ2V0SXNPYmplY3QodGFyZ2V0KTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5pc0V4dGVuc2libGUodGFyZ2V0KTtcbiAgICAgIH0sXG4gICAgICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgICAgIHRocm93VW5sZXNzVGFyZ2V0SXNPYmplY3QodGFyZ2V0KTtcbiAgICAgICAgcmV0dXJuIGNhbGxBbmRDYXRjaEV4Y2VwdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmIChzdXBwb3J0c0Rlc2NyaXB0b3JzKSB7XG4gICAgdmFyIGludGVybmFsR2V0ID0gZnVuY3Rpb24gZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcikge1xuICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcblxuICAgICAgaWYgKCFkZXNjKSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KTtcblxuICAgICAgICBpZiAocGFyZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbnRlcm5hbEdldChwYXJlbnQsIGtleSwgcmVjZWl2ZXIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoJ3ZhbHVlJyBpbiBkZXNjKSB7XG4gICAgICAgIHJldHVybiBkZXNjLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGVzYy5nZXQpIHtcbiAgICAgICAgcmV0dXJuIEVTLkNhbGwoZGVzYy5nZXQsIHJlY2VpdmVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9O1xuXG4gICAgdmFyIGludGVybmFsU2V0ID0gZnVuY3Rpb24gc2V0KHRhcmdldCwga2V5LCB2YWx1ZSwgcmVjZWl2ZXIpIHtcbiAgICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG5cbiAgICAgIGlmICghZGVzYykge1xuICAgICAgICB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldCk7XG5cbiAgICAgICAgaWYgKHBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBpbnRlcm5hbFNldChwYXJlbnQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlc2MgPSB7XG4gICAgICAgICAgdmFsdWU6IHZvaWQgMCxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAoJ3ZhbHVlJyBpbiBkZXNjKSB7XG4gICAgICAgIGlmICghZGVzYy53cml0YWJsZSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghRVMuVHlwZUlzT2JqZWN0KHJlY2VpdmVyKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBleGlzdGluZ0Rlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHJlY2VpdmVyLCBrZXkpO1xuXG4gICAgICAgIGlmIChleGlzdGluZ0Rlc2MpIHtcbiAgICAgICAgICByZXR1cm4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShyZWNlaXZlciwga2V5LCB7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShyZWNlaXZlciwga2V5LCB7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgICAgX2NhbGwoZGVzYy5zZXQsIHJlY2VpdmVyLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIE9iamVjdC5hc3NpZ24oUmVmbGVjdFNoaW1zLCB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykge1xuICAgICAgICB0aHJvd1VubGVzc1RhcmdldElzT2JqZWN0KHRhcmdldCk7XG4gICAgICAgIHJldHVybiBjYWxsQW5kQ2F0Y2hFeGNlcHRpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcblxuICAgICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgICAgICB0aHJvd1VubGVzc1RhcmdldElzT2JqZWN0KHRhcmdldCk7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgICAgfSxcblxuICAgICAgLy8gU3ludGF4IGluIGEgZnVuY3Rpb25hbCBmb3JtLlxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQodGFyZ2V0LCBrZXkpIHtcbiAgICAgICAgdGhyb3dVbmxlc3NUYXJnZXRJc09iamVjdCh0YXJnZXQpO1xuICAgICAgICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHRhcmdldDtcblxuICAgICAgICByZXR1cm4gaW50ZXJuYWxHZXQodGFyZ2V0LCBrZXksIHJlY2VpdmVyKTtcbiAgICAgIH0sXG5cbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHRhcmdldCwga2V5LCB2YWx1ZSkge1xuICAgICAgICB0aHJvd1VubGVzc1RhcmdldElzT2JqZWN0KHRhcmdldCk7XG4gICAgICAgIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogdGFyZ2V0O1xuXG4gICAgICAgIHJldHVybiBpbnRlcm5hbFNldCh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmIChPYmplY3QuZ2V0UHJvdG90eXBlT2YpIHtcbiAgICB2YXIgb2JqZWN0RG90R2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gICAgUmVmbGVjdFNoaW1zLmdldFByb3RvdHlwZU9mID0gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSB7XG4gICAgICB0aHJvd1VubGVzc1RhcmdldElzT2JqZWN0KHRhcmdldCk7XG4gICAgICByZXR1cm4gb2JqZWN0RG90R2V0UHJvdG90eXBlT2YodGFyZ2V0KTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZiAmJiBSZWZsZWN0U2hpbXMuZ2V0UHJvdG90eXBlT2YpIHtcbiAgICB2YXIgd2lsbENyZWF0ZUNpcmN1bGFyUHJvdG90eXBlID0gZnVuY3Rpb24gKG9iamVjdCwgbGFzdFByb3RvKSB7XG4gICAgICB2YXIgcHJvdG8gPSBsYXN0UHJvdG87XG4gICAgICB3aGlsZSAocHJvdG8pIHtcbiAgICAgICAgaWYgKG9iamVjdCA9PT0gcHJvdG8pIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBwcm90byA9IFJlZmxlY3RTaGltcy5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIE9iamVjdC5hc3NpZ24oUmVmbGVjdFNoaW1zLCB7XG4gICAgICAvLyBTZXRzIHRoZSBwcm90b3R5cGUgb2YgdGhlIGdpdmVuIG9iamVjdC5cbiAgICAgIC8vIFJldHVybnMgdHJ1ZSBvbiBzdWNjZXNzLCBvdGhlcndpc2UgZmFsc2UuXG4gICAgICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2Yob2JqZWN0LCBwcm90bykge1xuICAgICAgICB0aHJvd1VubGVzc1RhcmdldElzT2JqZWN0KG9iamVjdCk7XG4gICAgICAgIGlmIChwcm90byAhPT0gbnVsbCAmJiAhRVMuVHlwZUlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Byb3RvIG11c3QgYmUgYW4gb2JqZWN0IG9yIG51bGwnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHRoZXkgYWxyZWFkeSBhcmUgdGhlIHNhbWUsIHdlJ3JlIGRvbmUuXG4gICAgICAgIGlmIChwcm90byA9PT0gUmVmbGVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYW5ub3QgYWx0ZXIgcHJvdG90eXBlIGlmIG9iamVjdCBub3QgZXh0ZW5zaWJsZS5cbiAgICAgICAgaWYgKFJlZmxlY3QuaXNFeHRlbnNpYmxlICYmICFSZWZsZWN0LmlzRXh0ZW5zaWJsZShvYmplY3QpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgd2UgZG8gbm90IGNyZWF0ZSBhIGNpcmN1bGFyIHByb3RvdHlwZSBjaGFpbi5cbiAgICAgICAgaWYgKHdpbGxDcmVhdGVDaXJjdWxhclByb3RvdHlwZShvYmplY3QsIHByb3RvKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihvYmplY3QsIHByb3RvKTtcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICB2YXIgZGVmaW5lT3JPdmVycmlkZVJlZmxlY3RQcm9wZXJ0eSA9IGZ1bmN0aW9uIChrZXksIHNoaW0pIHtcbiAgICBpZiAoIUVTLklzQ2FsbGFibGUoZ2xvYmFscy5SZWZsZWN0W2tleV0pKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eShnbG9iYWxzLlJlZmxlY3QsIGtleSwgc2hpbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY2NlcHRzUHJpbWl0aXZlcyA9IHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZ2xvYmFscy5SZWZsZWN0W2tleV0oMSk7XG4gICAgICAgIGdsb2JhbHMuUmVmbGVjdFtrZXldKE5hTik7XG4gICAgICAgIGdsb2JhbHMuUmVmbGVjdFtrZXldKHRydWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGFjY2VwdHNQcmltaXRpdmVzKSB7XG4gICAgICAgIG92ZXJyaWRlTmF0aXZlKGdsb2JhbHMuUmVmbGVjdCwga2V5LCBzaGltKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIE9iamVjdC5rZXlzKFJlZmxlY3RTaGltcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgZGVmaW5lT3JPdmVycmlkZVJlZmxlY3RQcm9wZXJ0eShrZXksIFJlZmxlY3RTaGltc1trZXldKTtcbiAgfSk7XG4gIHZhciBvcmlnaW5hbFJlZmxlY3RHZXRQcm90byA9IGdsb2JhbHMuUmVmbGVjdC5nZXRQcm90b3R5cGVPZjtcbiAgaWYgKGZ1bmN0aW9uc0hhdmVOYW1lcyAmJiBvcmlnaW5hbFJlZmxlY3RHZXRQcm90byAmJiBvcmlnaW5hbFJlZmxlY3RHZXRQcm90by5uYW1lICE9PSAnZ2V0UHJvdG90eXBlT2YnKSB7XG4gICAgb3ZlcnJpZGVOYXRpdmUoZ2xvYmFscy5SZWZsZWN0LCAnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZih0YXJnZXQpIHtcbiAgICAgIHJldHVybiBfY2FsbChvcmlnaW5hbFJlZmxlY3RHZXRQcm90bywgZ2xvYmFscy5SZWZsZWN0LCB0YXJnZXQpO1xuICAgIH0pO1xuICB9XG4gIGlmIChnbG9iYWxzLlJlZmxlY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICBpZiAodmFsdWVPckZhbHNlSWZUaHJvd3MoZnVuY3Rpb24gKCkge1xuICAgICAgZ2xvYmFscy5SZWZsZWN0LnNldFByb3RvdHlwZU9mKDEsIHt9KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pKSB7XG4gICAgICBvdmVycmlkZU5hdGl2ZShnbG9iYWxzLlJlZmxlY3QsICdzZXRQcm90b3R5cGVPZicsIFJlZmxlY3RTaGltcy5zZXRQcm90b3R5cGVPZik7XG4gICAgfVxuICB9XG4gIGlmIChnbG9iYWxzLlJlZmxlY3QuZGVmaW5lUHJvcGVydHkpIHtcbiAgICBpZiAoIXZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBiYXNpYyA9ICFnbG9iYWxzLlJlZmxlY3QuZGVmaW5lUHJvcGVydHkoMSwgJ3Rlc3QnLCB7IHZhbHVlOiAxIH0pO1xuICAgICAgLy8gXCJleHRlbnNpYmxlXCIgZmFpbHMgb24gRWRnZSAwLjEyXG4gICAgICB2YXIgZXh0ZW5zaWJsZSA9IHR5cGVvZiBPYmplY3QucHJldmVudEV4dGVuc2lvbnMgIT09ICdmdW5jdGlvbicgfHwgIWdsb2JhbHMuUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pLCAndGVzdCcsIHt9KTtcbiAgICAgIHJldHVybiBiYXNpYyAmJiBleHRlbnNpYmxlO1xuICAgIH0pKSB7XG4gICAgICBvdmVycmlkZU5hdGl2ZShnbG9iYWxzLlJlZmxlY3QsICdkZWZpbmVQcm9wZXJ0eScsIFJlZmxlY3RTaGltcy5kZWZpbmVQcm9wZXJ0eSk7XG4gICAgfVxuICB9XG4gIGlmIChnbG9iYWxzLlJlZmxlY3QuY29uc3RydWN0KSB7XG4gICAgaWYgKCF2YWx1ZU9yRmFsc2VJZlRocm93cyhmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgRiA9IGZ1bmN0aW9uIEYoKSB7fTtcbiAgICAgIHJldHVybiBnbG9iYWxzLlJlZmxlY3QuY29uc3RydWN0KGZ1bmN0aW9uICgpIHt9LCBbXSwgRikgaW5zdGFuY2VvZiBGO1xuICAgIH0pKSB7XG4gICAgICBvdmVycmlkZU5hdGl2ZShnbG9iYWxzLlJlZmxlY3QsICdjb25zdHJ1Y3QnLCBSZWZsZWN0U2hpbXMuY29uc3RydWN0KTtcbiAgICB9XG4gIH1cblxuICBpZiAoU3RyaW5nKG5ldyBEYXRlKE5hTikpICE9PSAnSW52YWxpZCBEYXRlJykge1xuICAgIHZhciBkYXRlVG9TdHJpbmcgPSBEYXRlLnByb3RvdHlwZS50b1N0cmluZztcbiAgICB2YXIgc2hpbW1lZERhdGVUb1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgdmFyIHZhbHVlT2YgPSArdGhpcztcbiAgICAgIGlmICh2YWx1ZU9mICE9PSB2YWx1ZU9mKSB7XG4gICAgICAgIHJldHVybiAnSW52YWxpZCBEYXRlJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBFUy5DYWxsKGRhdGVUb1N0cmluZywgdGhpcyk7XG4gICAgfTtcbiAgICBvdmVycmlkZU5hdGl2ZShEYXRlLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgc2hpbW1lZERhdGVUb1N0cmluZyk7XG4gIH1cblxuICAvLyBBbm5leCBCIEhUTUwgbWV0aG9kc1xuICAvLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtYWRkaXRpb25hbC1wcm9wZXJ0aWVzLW9mLXRoZS1zdHJpbmcucHJvdG90eXBlLW9iamVjdFxuICB2YXIgc3RyaW5nSFRNTHNoaW1zID0ge1xuICAgIGFuY2hvcjogZnVuY3Rpb24gYW5jaG9yKG5hbWUpIHsgcmV0dXJuIEVTLkNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpOyB9LFxuICAgIGJpZzogZnVuY3Rpb24gYmlnKCkgeyByZXR1cm4gRVMuQ3JlYXRlSFRNTCh0aGlzLCAnYmlnJywgJycsICcnKTsgfSxcbiAgICBibGluazogZnVuY3Rpb24gYmxpbmsoKSB7IHJldHVybiBFUy5DcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7IH0sXG4gICAgYm9sZDogZnVuY3Rpb24gYm9sZCgpIHsgcmV0dXJuIEVTLkNyZWF0ZUhUTUwodGhpcywgJ2InLCAnJywgJycpOyB9LFxuICAgIGZpeGVkOiBmdW5jdGlvbiBmaXhlZCgpIHsgcmV0dXJuIEVTLkNyZWF0ZUhUTUwodGhpcywgJ3R0JywgJycsICcnKTsgfSxcbiAgICBmb250Y29sb3I6IGZ1bmN0aW9uIGZvbnRjb2xvcihjb2xvcikgeyByZXR1cm4gRVMuQ3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdjb2xvcicsIGNvbG9yKTsgfSxcbiAgICBmb250c2l6ZTogZnVuY3Rpb24gZm9udHNpemUoc2l6ZSkgeyByZXR1cm4gRVMuQ3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdzaXplJywgc2l6ZSk7IH0sXG4gICAgaXRhbGljczogZnVuY3Rpb24gaXRhbGljcygpIHsgcmV0dXJuIEVTLkNyZWF0ZUhUTUwodGhpcywgJ2knLCAnJywgJycpOyB9LFxuICAgIGxpbms6IGZ1bmN0aW9uIGxpbmsodXJsKSB7IHJldHVybiBFUy5DcmVhdGVIVE1MKHRoaXMsICdhJywgJ2hyZWYnLCB1cmwpOyB9LFxuICAgIHNtYWxsOiBmdW5jdGlvbiBzbWFsbCgpIHsgcmV0dXJuIEVTLkNyZWF0ZUhUTUwodGhpcywgJ3NtYWxsJywgJycsICcnKTsgfSxcbiAgICBzdHJpa2U6IGZ1bmN0aW9uIHN0cmlrZSgpIHsgcmV0dXJuIEVTLkNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7IH0sXG4gICAgc3ViOiBmdW5jdGlvbiBzdWIoKSB7IHJldHVybiBFUy5DcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpOyB9LFxuICAgIHN1cDogZnVuY3Rpb24gc3ViKCkgeyByZXR1cm4gRVMuQ3JlYXRlSFRNTCh0aGlzLCAnc3VwJywgJycsICcnKTsgfVxuICB9O1xuICBfZm9yRWFjaChPYmplY3Qua2V5cyhzdHJpbmdIVE1Mc2hpbXMpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIG1ldGhvZCA9IFN0cmluZy5wcm90b3R5cGVba2V5XTtcbiAgICB2YXIgc2hvdWxkT3ZlcndyaXRlID0gZmFsc2U7XG4gICAgaWYgKEVTLklzQ2FsbGFibGUobWV0aG9kKSkge1xuICAgICAgdmFyIG91dHB1dCA9IF9jYWxsKG1ldGhvZCwgJycsICcgXCIgJyk7XG4gICAgICB2YXIgcXVvdGVzQ291bnQgPSBfY29uY2F0KFtdLCBvdXRwdXQubWF0Y2goL1wiL2cpKS5sZW5ndGg7XG4gICAgICBzaG91bGRPdmVyd3JpdGUgPSBvdXRwdXQgIT09IG91dHB1dC50b0xvd2VyQ2FzZSgpIHx8IHF1b3Rlc0NvdW50ID4gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdWxkT3ZlcndyaXRlID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHNob3VsZE92ZXJ3cml0ZSkge1xuICAgICAgb3ZlcnJpZGVOYXRpdmUoU3RyaW5nLnByb3RvdHlwZSwga2V5LCBzdHJpbmdIVE1Mc2hpbXNba2V5XSk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgSlNPTnN0cmluZ2lmaWVzU3ltYm9scyA9IChmdW5jdGlvbiAoKSB7XG4gICAgLy8gTWljcm9zb2Z0IEVkZ2UgdjAuMTIgc3RyaW5naWZpZXMgU3ltYm9scyBpbmNvcnJlY3RseVxuICAgIGlmICghaGFzU3ltYm9scykgeyByZXR1cm4gZmFsc2U7IH0gLy8gU3ltYm9scyBhcmUgbm90IHN1cHBvcnRlZFxuICAgIHZhciBzdHJpbmdpZnkgPSB0eXBlb2YgSlNPTiA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIEpTT04uc3RyaW5naWZ5ID09PSAnZnVuY3Rpb24nID8gSlNPTi5zdHJpbmdpZnkgOiBudWxsO1xuICAgIGlmICghc3RyaW5naWZ5KSB7IHJldHVybiBmYWxzZTsgfSAvLyBKU09OLnN0cmluZ2lmeSBpcyBub3Qgc3VwcG9ydGVkXG4gICAgaWYgKHR5cGVvZiBzdHJpbmdpZnkoU3ltYm9sKCkpICE9PSAndW5kZWZpbmVkJykgeyByZXR1cm4gdHJ1ZTsgfSAvLyBTeW1ib2xzIHNob3VsZCBiZWNvbWUgYHVuZGVmaW5lZGBcbiAgICBpZiAoc3RyaW5naWZ5KFtTeW1ib2woKV0pICE9PSAnW251bGxdJykgeyByZXR1cm4gdHJ1ZTsgfSAvLyBTeW1ib2xzIGluIGFycmF5cyBzaG91bGQgYmVjb21lIGBudWxsYFxuICAgIHZhciBvYmogPSB7IGE6IFN5bWJvbCgpIH07XG4gICAgb2JqW1N5bWJvbCgpXSA9IHRydWU7XG4gICAgaWYgKHN0cmluZ2lmeShvYmopICE9PSAne30nKSB7IHJldHVybiB0cnVlOyB9IC8vIFN5bWJvbC12YWx1ZWQga2V5cyAqYW5kKiBTeW1ib2wtdmFsdWVkIHByb3BlcnRpZXMgc2hvdWxkIGJlIG9taXR0ZWRcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0oKSk7XG4gIHZhciBKU09Oc3RyaW5naWZ5QWNjZXB0c09iamVjdFN5bWJvbCA9IHZhbHVlT3JGYWxzZUlmVGhyb3dzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBDaHJvbWUgNDUgdGhyb3dzIG9uIHN0cmluZ2lmeWluZyBvYmplY3Qgc3ltYm9sc1xuICAgIGlmICghaGFzU3ltYm9scykgeyByZXR1cm4gdHJ1ZTsgfSAvLyBTeW1ib2xzIGFyZSBub3Qgc3VwcG9ydGVkXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KE9iamVjdChTeW1ib2woKSkpID09PSAne30nICYmIEpTT04uc3RyaW5naWZ5KFtPYmplY3QoU3ltYm9sKCkpXSkgPT09ICdbe31dJztcbiAgfSk7XG4gIGlmIChKU09Oc3RyaW5naWZpZXNTeW1ib2xzIHx8ICFKU09Oc3RyaW5naWZ5QWNjZXB0c09iamVjdFN5bWJvbCkge1xuICAgIHZhciBvcmlnU3RyaW5naWZ5ID0gSlNPTi5zdHJpbmdpZnk7XG4gICAgb3ZlcnJpZGVOYXRpdmUoSlNPTiwgJ3N0cmluZ2lmeScsIGZ1bmN0aW9uIHN0cmluZ2lmeSh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N5bWJvbCcpIHsgcmV0dXJuOyB9XG4gICAgICB2YXIgcmVwbGFjZXI7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgcmVwbGFjZXIgPSBhcmd1bWVudHNbMV07XG4gICAgICB9XG4gICAgICB2YXIgYXJncyA9IFt2YWx1ZV07XG4gICAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSB7XG4gICAgICAgIHZhciByZXBsYWNlRm4gPSBFUy5Jc0NhbGxhYmxlKHJlcGxhY2VyKSA/IHJlcGxhY2VyIDogbnVsbDtcbiAgICAgICAgdmFyIHdyYXBwZWRSZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbCkge1xuICAgICAgICAgIHZhciBwYXJzZWRWYWx1ZSA9IHJlcGxhY2VGbiA/IF9jYWxsKHJlcGxhY2VGbiwgdGhpcywga2V5LCB2YWwpIDogdmFsO1xuICAgICAgICAgIGlmICh0eXBlb2YgcGFyc2VkVmFsdWUgIT09ICdzeW1ib2wnKSB7XG4gICAgICAgICAgICBpZiAoVHlwZS5zeW1ib2wocGFyc2VkVmFsdWUpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhc3NpZ25Ubyh7fSkocGFyc2VkVmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlZFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgYXJncy5wdXNoKHdyYXBwZWRSZXBsYWNlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjcmVhdGUgd3JhcHBlZCByZXBsYWNlciB0aGF0IGhhbmRsZXMgYW4gYXJyYXkgcmVwbGFjZXI/XG4gICAgICAgIGFyZ3MucHVzaChyZXBsYWNlcik7XG4gICAgICB9XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgYXJncy5wdXNoKGFyZ3VtZW50c1syXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3JpZ1N0cmluZ2lmeS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBnbG9iYWxzO1xufSkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWlzcHJvcGVydHlrZXlcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBJc1Byb3BlcnR5S2V5KGFyZ3VtZW50KSB7XG5cdHJldHVybiB0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N5bWJvbCc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ3JlYXRlRGF0YVByb3BlcnR5ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9DcmVhdGVEYXRhUHJvcGVydHknKTtcbnZhciBJc0NhbGxhYmxlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Jc0NhbGxhYmxlJyk7XG52YXIgUmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvUmVxdWlyZU9iamVjdENvZXJjaWJsZScpO1xudmFyIFRvT2JqZWN0ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Ub09iamVjdCcpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L2hlbHBlcnMvY2FsbEJvdW5kJyk7XG5cbnZhciAkZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgJGdldE93bk5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgJGdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyICRjb25jYXQgPSBjYWxsQm91bmQoJ0FycmF5LnByb3RvdHlwZS5jb25jYXQnKTtcbnZhciAkcmVkdWNlID0gY2FsbEJvdW5kKCdBcnJheS5wcm90b3R5cGUucmVkdWNlJyk7XG52YXIgZ2V0QWxsID0gJGdldFN5bWJvbHMgPyBmdW5jdGlvbiAob2JqKSB7XG5cdHJldHVybiAkY29uY2F0KCRnZXRPd25OYW1lcyhvYmopLCAkZ2V0U3ltYm9scyhvYmopKTtcbn0gOiAkZ2V0T3duTmFtZXM7XG5cbnZhciBpc0VTNSA9IElzQ2FsbGFibGUoJGdPUEQpICYmIElzQ2FsbGFibGUoJGdldE93bk5hbWVzKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHZhbHVlKSB7XG5cdFJlcXVpcmVPYmplY3RDb2VyY2libGUodmFsdWUpO1xuXHRpZiAoIWlzRVM1KSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyByZXF1aXJlcyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJyk7XG5cdH1cblxuXHR2YXIgTyA9IFRvT2JqZWN0KHZhbHVlKTtcblx0cmV0dXJuICRyZWR1Y2UoXG5cdFx0Z2V0QWxsKE8pLFxuXHRcdGZ1bmN0aW9uIChhY2MsIGtleSkge1xuXHRcdFx0dmFyIGRlc2NyaXB0b3IgPSAkZ09QRChPLCBrZXkpO1xuXHRcdFx0aWYgKHR5cGVvZiBkZXNjcmlwdG9yICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRDcmVhdGVEYXRhUHJvcGVydHkoYWNjLCBrZXksIGRlc2NyaXB0b3IpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGFjYztcblx0XHR9LFxuXHRcdHt9XG5cdCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gcmVxdWlyZSgnaGFzJyk7XG52YXIgUmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvUmVxdWlyZU9iamVjdENvZXJjaWJsZScpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L2hlbHBlcnMvY2FsbEJvdW5kJyk7XG5cbnZhciAkaXNFbnVtZXJhYmxlID0gY2FsbEJvdW5kKCdPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdmFsdWVzKE8pIHtcblx0dmFyIG9iaiA9IFJlcXVpcmVPYmplY3RDb2VyY2libGUoTyk7XG5cdHZhciB2YWxzID0gW107XG5cdGZvciAodmFyIGtleSBpbiBvYmopIHtcblx0XHRpZiAoaGFzKG9iaiwga2V5KSAmJiAkaXNFbnVtZXJhYmxlKG9iaiwga2V5KSkge1xuXHRcdFx0dmFscy5wdXNoKG9ialtrZXldKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHZhbHM7XG59O1xuIiwiLyoganNoaW50IGJyb3dzZXI6dHJ1ZVxuICpcbiAqIHdpbmRvdy1sb2NhdGlvbi1vcmlnaW4gLSB2ZXJzaW9uIDAuMC4xXG4gKiBBZGQgc3VwcG9ydCBmb3IgYnJvd3NlcnMgdGhhdCBkb24ndCBuYXRpdmVseSBzdXBwb3J0IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW5cbiAqXG4gKiBBdXRocm9yOiBLeWxlIFdlbHNieSA8a3lsZUBtZWt5bGUuY29tPlxuICogTGljZW5zZTogTUlUXG4gKi9cblxuKGZ1bmN0aW9uKGxvY2F0aW9uKXtcbiAgJ3VzZSBzdHJpY3QnO1xuICBpZiAoIWxvY2F0aW9uLm9yaWdpbikge1xuICAgIHZhciBvcmlnaW4gPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3RuYW1lICsgKGxvY2F0aW9uLnBvcnQgJiYgXCI6XCIgKyBsb2NhdGlvbi5wb3J0KTtcbiAgICBcbiAgICB0cnkge1xuICAgICAgLy8gTWFrZSBpdCBub24gZWRpdGFibGVcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShsb2NhdGlvbiwgXCJvcmlnaW5cIiwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogb3JpZ2luXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgIC8vIElFIDwgOFxuICAgICAgbG9jYXRpb24ub3JpZ2luID0gb3JpZ2luO1xuICAgIH1cbiAgfVxufSkod2luZG93LmxvY2F0aW9uKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRyZXR1cm4gdHlwZW9mIFN0cmluZy5wcm90b3R5cGUucGFkU3RhcnQgPT09ICdmdW5jdGlvbicgPyBTdHJpbmcucHJvdG90eXBlLnBhZFN0YXJ0IDogaW1wbGVtZW50YXRpb247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVG9MZW5ndGggPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1RvTGVuZ3RoJyk7XG52YXIgVG9TdHJpbmcgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1RvU3RyaW5nJyk7XG52YXIgUmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMTkvUmVxdWlyZU9iamVjdENvZXJjaWJsZScpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L2hlbHBlcnMvY2FsbEJvdW5kJyk7XG5cbnZhciAkc2xpY2UgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuc2xpY2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoKSB7XG5cdHZhciBPID0gUmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcblx0dmFyIFMgPSBUb1N0cmluZyhPKTtcblx0dmFyIHN0cmluZ0xlbmd0aCA9IFRvTGVuZ3RoKFMubGVuZ3RoKTtcblx0dmFyIGZpbGxTdHJpbmc7XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdGZpbGxTdHJpbmcgPSBhcmd1bWVudHNbMV07XG5cdH1cblx0dmFyIGZpbGxlciA9IHR5cGVvZiBmaWxsU3RyaW5nID09PSAndW5kZWZpbmVkJyA/ICcnIDogVG9TdHJpbmcoZmlsbFN0cmluZyk7XG5cdGlmIChmaWxsZXIgPT09ICcnKSB7XG5cdFx0ZmlsbGVyID0gJyAnO1xuXHR9XG5cdHZhciBpbnRNYXhMZW5ndGggPSBUb0xlbmd0aChtYXhMZW5ndGgpO1xuXHRpZiAoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCkge1xuXHRcdHJldHVybiBTO1xuXHR9XG5cdHZhciBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoO1xuXHR3aGlsZSAoZmlsbGVyLmxlbmd0aCA8IGZpbGxMZW4pIHtcblx0XHR2YXIgZkxlbiA9IGZpbGxlci5sZW5ndGg7XG5cdFx0dmFyIHJlbWFpbmluZ0NvZGVVbml0cyA9IGZpbGxMZW4gLSBmTGVuO1xuXHRcdGZpbGxlciArPSBmTGVuID4gcmVtYWluaW5nQ29kZVVuaXRzID8gJHNsaWNlKGZpbGxlciwgMCwgcmVtYWluaW5nQ29kZVVuaXRzKSA6IGZpbGxlcjtcblx0fVxuXG5cdHZhciB0cnVuY2F0ZWRTdHJpbmdGaWxsZXIgPSBmaWxsZXIubGVuZ3RoID4gZmlsbExlbiA/ICRzbGljZShmaWxsZXIsIDAsIGZpbGxMZW4pIDogZmlsbGVyO1xuXHRyZXR1cm4gUyArIHRydW5jYXRlZFN0cmluZ0ZpbGxlcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBrZXlzU2hpbTtcbmlmICghT2JqZWN0LmtleXMpIHtcblx0Ly8gbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW1cblx0dmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cdHZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cdHZhciBpc0FyZ3MgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZ2xvYmFsLXJlcXVpcmVcblx0dmFyIGlzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cdHZhciBoYXNEb250RW51bUJ1ZyA9ICFpc0VudW1lcmFibGUuY2FsbCh7IHRvU3RyaW5nOiBudWxsIH0sICd0b1N0cmluZycpO1xuXHR2YXIgaGFzUHJvdG9FbnVtQnVnID0gaXNFbnVtZXJhYmxlLmNhbGwoZnVuY3Rpb24gKCkge30sICdwcm90b3R5cGUnKTtcblx0dmFyIGRvbnRFbnVtcyA9IFtcblx0XHQndG9TdHJpbmcnLFxuXHRcdCd0b0xvY2FsZVN0cmluZycsXG5cdFx0J3ZhbHVlT2YnLFxuXHRcdCdoYXNPd25Qcm9wZXJ0eScsXG5cdFx0J2lzUHJvdG90eXBlT2YnLFxuXHRcdCdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG5cdFx0J2NvbnN0cnVjdG9yJ1xuXHRdO1xuXHR2YXIgZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUgPSBmdW5jdGlvbiAobykge1xuXHRcdHZhciBjdG9yID0gby5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gY3RvciAmJiBjdG9yLnByb3RvdHlwZSA9PT0gbztcblx0fTtcblx0dmFyIGV4Y2x1ZGVkS2V5cyA9IHtcblx0XHQkYXBwbGljYXRpb25DYWNoZTogdHJ1ZSxcblx0XHQkY29uc29sZTogdHJ1ZSxcblx0XHQkZXh0ZXJuYWw6IHRydWUsXG5cdFx0JGZyYW1lOiB0cnVlLFxuXHRcdCRmcmFtZUVsZW1lbnQ6IHRydWUsXG5cdFx0JGZyYW1lczogdHJ1ZSxcblx0XHQkaW5uZXJIZWlnaHQ6IHRydWUsXG5cdFx0JGlubmVyV2lkdGg6IHRydWUsXG5cdFx0JG9ubW96ZnVsbHNjcmVlbmNoYW5nZTogdHJ1ZSxcblx0XHQkb25tb3pmdWxsc2NyZWVuZXJyb3I6IHRydWUsXG5cdFx0JG91dGVySGVpZ2h0OiB0cnVlLFxuXHRcdCRvdXRlcldpZHRoOiB0cnVlLFxuXHRcdCRwYWdlWE9mZnNldDogdHJ1ZSxcblx0XHQkcGFnZVlPZmZzZXQ6IHRydWUsXG5cdFx0JHBhcmVudDogdHJ1ZSxcblx0XHQkc2Nyb2xsTGVmdDogdHJ1ZSxcblx0XHQkc2Nyb2xsVG9wOiB0cnVlLFxuXHRcdCRzY3JvbGxYOiB0cnVlLFxuXHRcdCRzY3JvbGxZOiB0cnVlLFxuXHRcdCRzZWxmOiB0cnVlLFxuXHRcdCR3ZWJraXRJbmRleGVkREI6IHRydWUsXG5cdFx0JHdlYmtpdFN0b3JhZ2VJbmZvOiB0cnVlLFxuXHRcdCR3aW5kb3c6IHRydWVcblx0fTtcblx0dmFyIGhhc0F1dG9tYXRpb25FcXVhbGl0eUJ1ZyA9IChmdW5jdGlvbiAoKSB7XG5cdFx0LyogZ2xvYmFsIHdpbmRvdyAqL1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgeyByZXR1cm4gZmFsc2U7IH1cblx0XHRmb3IgKHZhciBrIGluIHdpbmRvdykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0aWYgKCFleGNsdWRlZEtleXNbJyQnICsga10gJiYgaGFzLmNhbGwod2luZG93LCBrKSAmJiB3aW5kb3dba10gIT09IG51bGwgJiYgdHlwZW9mIHdpbmRvd1trXSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0ZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUod2luZG93W2tdKTtcblx0XHRcdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fSgpKTtcblx0dmFyIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlSWZOb3RCdWdneSA9IGZ1bmN0aW9uIChvKSB7XG5cdFx0LyogZ2xvYmFsIHdpbmRvdyAqL1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyB8fCAhaGFzQXV0b21hdGlvbkVxdWFsaXR5QnVnKSB7XG5cdFx0XHRyZXR1cm4gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUobyk7XG5cdFx0fVxuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUobyk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fTtcblxuXHRrZXlzU2hpbSA9IGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG5cdFx0dmFyIGlzT2JqZWN0ID0gb2JqZWN0ICE9PSBudWxsICYmIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnO1xuXHRcdHZhciBpc0Z1bmN0aW9uID0gdG9TdHIuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXHRcdHZhciBpc0FyZ3VtZW50cyA9IGlzQXJncyhvYmplY3QpO1xuXHRcdHZhciBpc1N0cmluZyA9IGlzT2JqZWN0ICYmIHRvU3RyLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgU3RyaW5nXSc7XG5cdFx0dmFyIHRoZUtleXMgPSBbXTtcblxuXHRcdGlmICghaXNPYmplY3QgJiYgIWlzRnVuY3Rpb24gJiYgIWlzQXJndW1lbnRzKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3Qua2V5cyBjYWxsZWQgb24gYSBub24tb2JqZWN0Jyk7XG5cdFx0fVxuXG5cdFx0dmFyIHNraXBQcm90byA9IGhhc1Byb3RvRW51bUJ1ZyAmJiBpc0Z1bmN0aW9uO1xuXHRcdGlmIChpc1N0cmluZyAmJiBvYmplY3QubGVuZ3RoID4gMCAmJiAhaGFzLmNhbGwob2JqZWN0LCAwKSkge1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBvYmplY3QubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0dGhlS2V5cy5wdXNoKFN0cmluZyhpKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGlzQXJndW1lbnRzICYmIG9iamVjdC5sZW5ndGggPiAwKSB7XG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IG9iamVjdC5sZW5ndGg7ICsraikge1xuXHRcdFx0XHR0aGVLZXlzLnB1c2goU3RyaW5nKGopKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICh2YXIgbmFtZSBpbiBvYmplY3QpIHtcblx0XHRcdFx0aWYgKCEoc2tpcFByb3RvICYmIG5hbWUgPT09ICdwcm90b3R5cGUnKSAmJiBoYXMuY2FsbChvYmplY3QsIG5hbWUpKSB7XG5cdFx0XHRcdFx0dGhlS2V5cy5wdXNoKFN0cmluZyhuYW1lKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoaGFzRG9udEVudW1CdWcpIHtcblx0XHRcdHZhciBza2lwQ29uc3RydWN0b3IgPSBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZUlmTm90QnVnZ3kob2JqZWN0KTtcblxuXHRcdFx0Zm9yICh2YXIgayA9IDA7IGsgPCBkb250RW51bXMubGVuZ3RoOyArK2spIHtcblx0XHRcdFx0aWYgKCEoc2tpcENvbnN0cnVjdG9yICYmIGRvbnRFbnVtc1trXSA9PT0gJ2NvbnN0cnVjdG9yJykgJiYgaGFzLmNhbGwob2JqZWN0LCBkb250RW51bXNba10pKSB7XG5cdFx0XHRcdFx0dGhlS2V5cy5wdXNoKGRvbnRFbnVtc1trXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHRoZUtleXM7XG5cdH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGtleXNTaGltO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkTWF0aCA9IEdldEludHJpbnNpYygnJU1hdGglJyk7XG52YXIgJE51bWJlciA9IEdldEludHJpbnNpYygnJU51bWJlciUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAkTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgfHwgJE1hdGgucG93KDIsIDUzKSAtIDE7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludCBnbG9iYWwtcmVxdWlyZTogMCAqL1xuLy8gdGhlIGNvZGUgaXMgc3RydWN0dXJlZCB0aGlzIHdheSBzbyB0aGF0IGJ1bmRsZXJzIGNhblxuLy8gYWxpYXMgb3V0IGBoYXMtc3ltYm9sc2AgdG8gYCgpID0+IHRydWVgIG9yIGAoKSA9PiBmYWxzZWAgaWYgeW91ciB0YXJnZXRcbi8vIGVudmlyb25tZW50cycgU3ltYm9sIGNhcGFiaWxpdGllcyBhcmUga25vd24sIGFuZCB0aGVuIHVzZVxuLy8gZGVhZCBjb2RlIGVsaW1pbmF0aW9uIG9uIHRoZSByZXN0IG9mIHRoaXMgbW9kdWxlLlxuLy9cbi8vIFNpbWlsYXJseSwgYGlzYXJyYXlgIGNhbiBiZSBhbGlhc2VkIHRvIGBBcnJheS5pc0FycmF5YCBpZlxuLy8gYXZhaWxhYmxlIGluIGFsbCB0YXJnZXQgZW52aXJvbm1lbnRzLlxuXG52YXIgaXNBcmd1bWVudHMgPSByZXF1aXJlKCdpcy1hcmd1bWVudHMnKTtcblxuaWYgKHJlcXVpcmUoJ2hhcy1zeW1ib2xzJykoKSB8fCByZXF1aXJlKCdoYXMtc3ltYm9scy9zaGFtcycpKCkpIHtcblx0dmFyICRpdGVyYXRvciA9IFN5bWJvbC5pdGVyYXRvcjtcblx0Ly8gU3ltYm9sIGlzIGF2YWlsYWJsZSBuYXRpdmVseSBvciBzaGFtbWVkXG5cdC8vIG5hdGl2ZWx5OlxuXHQvLyAgLSBDaHJvbWUgPj0gMzhcblx0Ly8gIC0gRWRnZSAxMi0xND8sIEVkZ2UgPj0gMTUgZm9yIHN1cmVcblx0Ly8gIC0gRkYgPj0gMzZcblx0Ly8gIC0gU2FmYXJpID49IDlcblx0Ly8gIC0gbm9kZSA+PSAwLjEyXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0SXRlcmF0b3IoaXRlcmFibGUpIHtcblx0XHQvLyBhbHRlcm5hdGl2ZWx5LCBgaXRlcmFibGVbJGl0ZXJhdG9yXT8uKClgXG5cdFx0aWYgKGl0ZXJhYmxlICE9IG51bGwgJiYgdHlwZW9mIGl0ZXJhYmxlWyRpdGVyYXRvcl0gIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRyZXR1cm4gaXRlcmFibGVbJGl0ZXJhdG9yXSgpO1xuXHRcdH1cblx0XHRpZiAoaXNBcmd1bWVudHMoaXRlcmFibGUpKSB7XG5cdFx0XHQvLyBhcmd1bWVudHMgb2JqZWN0cyBsYWNrIFN5bWJvbC5pdGVyYXRvclxuXHRcdFx0Ly8gLSBub2RlIDAuMTJcblx0XHRcdHJldHVybiBBcnJheS5wcm90b3R5cGVbJGl0ZXJhdG9yXS5jYWxsKGl0ZXJhYmxlKTtcblx0XHR9XG5cdH07XG59IGVsc2Uge1xuXHQvLyBTeW1ib2wgaXMgbm90IGF2YWlsYWJsZSwgbmF0aXZlIG9yIHNoYW1tZWRcblx0dmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG5cdHZhciBpc1N0cmluZyA9IHJlcXVpcmUoJ2lzLXN0cmluZycpO1xuXHR2YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvR2V0SW50cmluc2ljJyk7XG5cdHZhciAkTWFwID0gR2V0SW50cmluc2ljKCclTWFwJScsIHRydWUpO1xuXHR2YXIgJFNldCA9IEdldEludHJpbnNpYygnJVNldCUnLCB0cnVlKTtcblx0dmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L2hlbHBlcnMvY2FsbEJvdW5kJyk7XG5cdHZhciAkYXJyYXlQdXNoID0gY2FsbEJvdW5kKCdBcnJheS5wcm90b3R5cGUucHVzaCcpO1xuXHR2YXIgJGNoYXJDb2RlQXQgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuY2hhckNvZGVBdCcpO1xuXHR2YXIgJHN0cmluZ1NsaWNlID0gY2FsbEJvdW5kKCdTdHJpbmcucHJvdG90eXBlLnNsaWNlJyk7XG5cblx0dmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IGZ1bmN0aW9uIGFkdmFuY2VTdHJpbmdJbmRleChTLCBpbmRleCkge1xuXHRcdHZhciBsZW5ndGggPSBTLmxlbmd0aDtcblx0XHRpZiAoKGluZGV4ICsgMSkgPj0gbGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXggKyAxO1xuXHRcdH1cblxuXHRcdHZhciBmaXJzdCA9ICRjaGFyQ29kZUF0KFMsIGluZGV4KTtcblx0XHRpZiAoZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYpIHtcblx0XHRcdHJldHVybiBpbmRleCArIDE7XG5cdFx0fVxuXG5cdFx0dmFyIHNlY29uZCA9ICRjaGFyQ29kZUF0KFMsIGluZGV4ICsgMSk7XG5cdFx0aWYgKHNlY29uZCA8IDB4REMwMCB8fCBzZWNvbmQgPiAweERGRkYpIHtcblx0XHRcdHJldHVybiBpbmRleCArIDE7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGluZGV4ICsgMjtcblx0fTtcblxuXHR2YXIgZ2V0QXJyYXlJdGVyYXRvciA9IGZ1bmN0aW9uIGdldEFycmF5SXRlcmF0b3IoYXJyYXlsaWtlKSB7XG5cdFx0dmFyIGkgPSAwO1xuXHRcdHJldHVybiB7XG5cdFx0XHRuZXh0OiBmdW5jdGlvbiBuZXh0KCkge1xuXHRcdFx0XHR2YXIgZG9uZSA9IGkgPj0gYXJyYXlsaWtlLmxlbmd0aDtcblx0XHRcdFx0dmFyIHZhbHVlO1xuXHRcdFx0XHRpZiAoIWRvbmUpIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGFycmF5bGlrZVtpXTtcblx0XHRcdFx0XHRpICs9IDE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRkb25lOiBkb25lLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH07XG5cdH07XG5cblx0dmFyIGdldE5vbkNvbGxlY3Rpb25JdGVyYXRvciA9IGZ1bmN0aW9uIGdldE5vbkNvbGxlY3Rpb25JdGVyYXRvcihpdGVyYWJsZSkge1xuXHRcdGlmIChpc0FycmF5KGl0ZXJhYmxlKSB8fCBpc0FyZ3VtZW50cyhpdGVyYWJsZSkpIHtcblx0XHRcdHJldHVybiBnZXRBcnJheUl0ZXJhdG9yKGl0ZXJhYmxlKTtcblx0XHR9XG5cdFx0aWYgKGlzU3RyaW5nKGl0ZXJhYmxlKSkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0bmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcblx0XHRcdFx0XHR2YXIgbmV4dEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KGl0ZXJhYmxlLCBpKTtcblx0XHRcdFx0XHR2YXIgdmFsdWUgPSAkc3RyaW5nU2xpY2UoaXRlcmFibGUsIGksIG5leHRJbmRleCk7XG5cdFx0XHRcdFx0aSA9IG5leHRJbmRleDtcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0ZG9uZTogbmV4dEluZGV4ID4gaXRlcmFibGUubGVuZ3RoLFxuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdH07XG5cblx0aWYgKCEkTWFwICYmICEkU2V0KSB7XG5cdFx0Ly8gdGhlIG9ubHkgbGFuZ3VhZ2UgaXRlcmFibGVzIGFyZSBBcnJheSwgU3RyaW5nLCBhcmd1bWVudHNcblx0XHQvLyAtIFNhZmFyaSA8PSA2LjBcblx0XHQvLyAtIENocm9tZSA8IDM4XG5cdFx0Ly8gLSBub2RlIDwgMC4xMlxuXHRcdC8vIC0gRkYgPCAxM1xuXHRcdC8vIC0gSUUgPCAxMVxuXHRcdC8vIC0gRWRnZSA8IDExXG5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdldE5vbkNvbGxlY3Rpb25JdGVyYXRvcjtcblx0fSBlbHNlIHtcblx0XHQvLyBlaXRoZXIgTWFwIG9yIFNldCBhcmUgYXZhaWxhYmxlLCBidXQgU3ltYm9sIGlzIG5vdFxuXHRcdC8vIC0gZXM2LXNoaW0gb24gYW4gRVM1IGJyb3dzZXJcblx0XHQvLyAtIFNhZmFyaSA2LjIgKG1heWJlIDYuMT8pXG5cdFx0Ly8gLSBGRiB2WzEzLCAzNilcblx0XHQvLyAtIElFIDExXG5cdFx0Ly8gLSBFZGdlIDExXG5cdFx0Ly8gLSBTYWZhcmkgdls2LCA5KVxuXG5cdFx0dmFyIGlzTWFwID0gcmVxdWlyZSgnaXMtbWFwJyk7XG5cdFx0dmFyIGlzU2V0ID0gcmVxdWlyZSgnaXMtc2V0Jyk7XG5cblx0XHQvLyBGaXJlZm94ID49IDI3LCBJRSAxMSwgU2FmYXJpIDYuMiAtIDksIEVkZ2UgMTEsIGVzNi1zaGltIGluIG9sZGVyIGVudnMsIGFsbCBoYXZlIGZvckVhY2hcblx0XHR2YXIgJG1hcEZvckVhY2ggPSBjYWxsQm91bmQoJ01hcC5wcm90b3R5cGUuZm9yRWFjaCcsIHRydWUpO1xuXHRcdHZhciAkc2V0Rm9yRWFjaCA9IGNhbGxCb3VuZCgnU2V0LnByb3RvdHlwZS5mb3JFYWNoJywgdHJ1ZSk7XG5cdFx0aWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJyB8fCAhcHJvY2Vzcy52ZXJzaW9ucyB8fCAhcHJvY2Vzcy52ZXJzaW9ucy5ub2RlKSB7IC8vIFwiaWYgaXMgbm90IG5vZGVcIlxuXG5cdFx0XHQvLyBGaXJlZm94IDE3IC0gMjYgaGFzIGAuaXRlcmF0b3IoKWAsIHdob3NlIGl0ZXJhdG9yIGAubmV4dCgpYCBlaXRoZXJcblx0XHRcdC8vIHJldHVybnMgYSB2YWx1ZSwgb3IgdGhyb3dzIGEgU3RvcEl0ZXJhdGlvbiBvYmplY3QuIFRoZXNlIGJyb3dzZXJzXG5cdFx0XHQvLyBkbyBub3QgaGF2ZSBhbnkgb3RoZXIgbWVjaGFuaXNtIGZvciBpdGVyYXRpb24uXG5cdFx0XHR2YXIgJG1hcEl0ZXJhdG9yID0gY2FsbEJvdW5kKCdNYXAucHJvdG90eXBlLml0ZXJhdG9yJywgdHJ1ZSk7XG5cdFx0XHR2YXIgJHNldEl0ZXJhdG9yID0gY2FsbEJvdW5kKCdTZXQucHJvdG90eXBlLml0ZXJhdG9yJywgdHJ1ZSk7XG5cdFx0XHR2YXIgZ2V0U3RvcEl0ZXJhdGlvbkl0ZXJhdG9yID0gZnVuY3Rpb24gKGl0ZXJhdG9yKSB7XG5cdFx0XHRcdHZhciBkb25lID0gZmFsc2U7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0ZG9uZTogZG9uZSxcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZTogZG9uZSA/IHVuZGVmaW5lZCA6IGl0ZXJhdG9yLm5leHQoKVxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdFx0XHRkb25lID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRkb25lOiB0cnVlLFxuXHRcdFx0XHRcdFx0XHRcdHZhbHVlOiB1bmRlZmluZWRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXHRcdH1cblx0XHQvLyBGaXJlZm94IDI3LTM1LCBhbmQgc29tZSBvbGRlciBlczYtc2hpbSB2ZXJzaW9ucywgdXNlIGEgc3RyaW5nIFwiQEBpdGVyYXRvclwiIHByb3BlcnR5XG5cdFx0Ly8gdGhpcyByZXR1cm5zIGEgcHJvcGVyIGl0ZXJhdG9yIG9iamVjdCwgc28gd2Ugc2hvdWxkIHVzZSBpdCBpbnN0ZWFkIG9mIGZvckVhY2guXG5cdFx0Ly8gbmV3ZXIgZXM2LXNoaW0gdmVyc2lvbnMgdXNlIGEgc3RyaW5nIFwiX2VzNi1zaGltIGl0ZXJhdG9yX1wiIHByb3BlcnR5LlxuXHRcdHZhciAkbWFwQXRBdEl0ZXJhdG9yID0gY2FsbEJvdW5kKCdNYXAucHJvdG90eXBlLkBAaXRlcmF0b3InLCB0cnVlKSB8fCBjYWxsQm91bmQoJ01hcC5wcm90b3R5cGUuX2VzNi1zaGltIGl0ZXJhdG9yXycsIHRydWUpO1xuXHRcdHZhciAkc2V0QXRBdEl0ZXJhdG9yID0gY2FsbEJvdW5kKCdTZXQucHJvdG90eXBlLkBAaXRlcmF0b3InLCB0cnVlKSB8fCBjYWxsQm91bmQoJ1NldC5wcm90b3R5cGUuX2VzNi1zaGltIGl0ZXJhdG9yXycsIHRydWUpO1xuXG5cdFx0dmFyIGdldENvbGxlY3Rpb25JdGVyYXRvciA9IGZ1bmN0aW9uIGdldENvbGxlY3Rpb25JdGVyYXRvcihpdGVyYWJsZSkge1xuXHRcdFx0aWYgKGlzTWFwKGl0ZXJhYmxlKSkge1xuXHRcdFx0XHRpZiAoJG1hcEl0ZXJhdG9yKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGdldFN0b3BJdGVyYXRpb25JdGVyYXRvcigkbWFwSXRlcmF0b3IoaXRlcmFibGUpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoJG1hcEF0QXRJdGVyYXRvcikge1xuXHRcdFx0XHRcdHJldHVybiAkbWFwQXRBdEl0ZXJhdG9yKGl0ZXJhYmxlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoJG1hcEZvckVhY2gpIHtcblx0XHRcdFx0XHR2YXIgZW50cmllcyA9IFtdO1xuXHRcdFx0XHRcdCRtYXBGb3JFYWNoKGl0ZXJhYmxlLCBmdW5jdGlvbiAodiwgaykge1xuXHRcdFx0XHRcdFx0JGFycmF5UHVzaChlbnRyaWVzLCBbaywgdl0pO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHJldHVybiBnZXRBcnJheUl0ZXJhdG9yKGVudHJpZXMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoaXNTZXQoaXRlcmFibGUpKSB7XG5cdFx0XHRcdGlmICgkc2V0SXRlcmF0b3IpIHtcblx0XHRcdFx0XHRyZXR1cm4gZ2V0U3RvcEl0ZXJhdGlvbkl0ZXJhdG9yKCRzZXRJdGVyYXRvcihpdGVyYWJsZSkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICgkc2V0QXRBdEl0ZXJhdG9yKSB7XG5cdFx0XHRcdFx0cmV0dXJuICRzZXRBdEF0SXRlcmF0b3IoaXRlcmFibGUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICgkc2V0Rm9yRWFjaCkge1xuXHRcdFx0XHRcdHZhciB2YWx1ZXMgPSBbXTtcblx0XHRcdFx0XHQkc2V0Rm9yRWFjaChpdGVyYWJsZSwgZnVuY3Rpb24gKHYpIHtcblx0XHRcdFx0XHRcdCRhcnJheVB1c2godmFsdWVzLCB2KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRyZXR1cm4gZ2V0QXJyYXlJdGVyYXRvcih2YWx1ZXMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0SXRlcmF0b3IoaXRlcmFibGUpIHtcblx0XHRcdHJldHVybiBnZXRDb2xsZWN0aW9uSXRlcmF0b3IoaXRlcmFibGUpIHx8IGdldE5vbkNvbGxlY3Rpb25JdGVyYXRvcihpdGVyYWJsZSk7XG5cdFx0fTtcblx0fVxufVxuIiwiKGZ1bmN0aW9uKCkge1xuXHR2YXIgdGVzdE9iamVjdCA9IHt9O1xuXG5cdGlmICghKE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCB0ZXN0T2JqZWN0Ll9fcHJvdG9fXykpIHtcblx0XHR2YXIgbmF0aXZlR2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cblx0XHRPYmplY3QuZ2V0UHJvdG90eXBlT2YgPSBmdW5jdGlvbihvYmplY3QpIHtcblx0XHRcdGlmIChvYmplY3QuX19wcm90b19fKSB7XG5cdFx0XHRcdHJldHVybiBvYmplY3QuX19wcm90b19fO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIG5hdGl2ZUdldFByb3RvdHlwZU9mLmNhbGwoT2JqZWN0LCBvYmplY3QpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSkoKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIEludm9rZSA9IHJlcXVpcmUoJy4vSW52b2tlJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaXRlcmF0b3JuZXh0XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSXRlcmF0b3JOZXh0KGl0ZXJhdG9yLCB2YWx1ZSkge1xuXHR2YXIgcmVzdWx0ID0gSW52b2tlKGl0ZXJhdG9yLCAnbmV4dCcsIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gW10gOiBbdmFsdWVdKTtcblx0aWYgKFR5cGUocmVzdWx0KSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignaXRlcmF0b3IgbmV4dCBtdXN0IHJldHVybiBhbiBvYmplY3QnKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIElzUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuL0lzUHJvcGVydHlLZXknKTtcbnZhciBUb09iamVjdCA9IHJlcXVpcmUoJy4vVG9PYmplY3QnKTtcblxuLyoqXG4gKiA3LjMuMiBHZXRWIChWLCBQKVxuICogMS4gQXNzZXJ0OiBJc1Byb3BlcnR5S2V5KFApIGlzIHRydWUuXG4gKiAyLiBMZXQgTyBiZSBUb09iamVjdChWKS5cbiAqIDMuIFJldHVybklmQWJydXB0KE8pLlxuICogNC4gUmV0dXJuIE8uW1tHZXRdXShQLCBWKS5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEdldFYoViwgUCkge1xuXHQvLyA3LjMuMi4xXG5cdGlmICghSXNQcm9wZXJ0eUtleShQKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBJc1Byb3BlcnR5S2V5KFApIGlzIG5vdCB0cnVlJyk7XG5cdH1cblxuXHQvLyA3LjMuMi4yLTNcblx0dmFyIE8gPSBUb09iamVjdChWKTtcblxuXHQvLyA3LjMuMi40XG5cdHJldHVybiBPW1BdO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTkuM1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvTnVtYmVyKHZhbHVlKSB7XG5cdHJldHVybiArdmFsdWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8taW1wbGljaXQtY29lcmNpb25cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0aWYgKFN0cmluZy5wcm90b3R5cGUubWF0Y2hBbGwpIHtcblx0XHR0cnkge1xuXHRcdFx0JycubWF0Y2hBbGwoUmVnRXhwLnByb3RvdHlwZSk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0cmV0dXJuIFN0cmluZy5wcm90b3R5cGUubWF0Y2hBbGw7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBpbXBsZW1lbnRhdGlvbjtcbn07XG4iLCIvKiBnbG9iYWxzIHJlcXVlc3RJZGxlQ2FsbGJhY2ssIGNhbmNlbElkbGVDYWxsYmFjayAqL1xudmFyIGZhbGxiYWNrID0gZnVuY3Rpb24gKGNiKSB7XG4gIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhcnQgPSBEYXRlLm5vdygpXG4gICAgY2Ioe1xuICAgICAgZGlkVGltZW91dDogZmFsc2UsXG4gICAgICB0aW1lUmVtYWluaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heCgwLCA1MCAtIChEYXRlLm5vdygpIC0gc3RhcnQpKVxuICAgICAgfVxuICAgIH0pXG4gIH0sIDEpXG59XG5cbnZhciBpc1N1cHBvcnRlZCA9ICh0eXBlb2YgcmVxdWVzdElkbGVDYWxsYmFjayAhPT0gJ3VuZGVmaW5lZCcpXG5cbm1vZHVsZS5leHBvcnRzID0gaXNTdXBwb3J0ZWQgPyByZXF1ZXN0SWRsZUNhbGxiYWNrIDogZmFsbGJhY2tcbm1vZHVsZS5leHBvcnRzLmNhbmNlbElkbGVDYWxsYmFjayA9IGlzU3VwcG9ydGVkID8gY2FuY2VsSWRsZUNhbGxiYWNrIDogY2xlYXJUaW1lb3V0XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBUb0ludGVnZXIgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE4L1RvSW50ZWdlcicpO1xudmFyIFRvTGVuZ3RoID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOC9Ub0xlbmd0aCcpO1xudmFyIFRvT2JqZWN0ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOC9Ub09iamVjdCcpO1xudmFyIFNhbWVWYWx1ZVplcm8gPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE4L1NhbWVWYWx1ZVplcm8nKTtcbnZhciAkaXNOYU4gPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9oZWxwZXJzL2lzTmFOJyk7XG52YXIgJGlzRmluaXRlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvaGVscGVycy9pc0Zpbml0ZScpO1xudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L0dldEludHJpbnNpYycpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0L2hlbHBlcnMvY2FsbEJvdW5kJyk7XG52YXIgaXNTdHJpbmcgPSByZXF1aXJlKCdpcy1zdHJpbmcnKTtcblxudmFyICRjaGFyQXQgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuY2hhckF0Jyk7XG52YXIgJGluZGV4T2YgPSBHZXRJbnRyaW5zaWMoJyVBcnJheS5wcm90b3R5cGUuaW5kZXhPZiUnKTsgLy8gVE9ETzogdXNlIGNhbGxCaW5kLmFwcGx5IHdpdGhvdXQgYnJlYWtpbmcgSUUgOFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaEVsZW1lbnQpIHtcblx0dmFyIGZyb21JbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gVG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkgOiAwO1xuXHRpZiAoJGluZGV4T2YgJiYgISRpc05hTihzZWFyY2hFbGVtZW50KSAmJiAkaXNGaW5pdGUoZnJvbUluZGV4KSAmJiB0eXBlb2Ygc2VhcmNoRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gJGluZGV4T2YuYXBwbHkodGhpcywgYXJndW1lbnRzKSA+IC0xO1xuXHR9XG5cblx0dmFyIE8gPSBUb09iamVjdCh0aGlzKTtcblx0dmFyIGxlbmd0aCA9IFRvTGVuZ3RoKE8ubGVuZ3RoKTtcblx0aWYgKGxlbmd0aCA9PT0gMCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHR2YXIgayA9IGZyb21JbmRleCA+PSAwID8gZnJvbUluZGV4IDogTWF0aC5tYXgoMCwgbGVuZ3RoICsgZnJvbUluZGV4KTtcblx0d2hpbGUgKGsgPCBsZW5ndGgpIHtcblx0XHRpZiAoU2FtZVZhbHVlWmVybyhzZWFyY2hFbGVtZW50LCBpc1N0cmluZyhPKSA/ICRjaGFyQXQoTywgaykgOiBPW2tdKSkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdGsgKz0gMTtcblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltRmxhdCgpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKFxuXHRcdEFycmF5LnByb3RvdHlwZSxcblx0XHR7IGZsYXQ6IHBvbHlmaWxsIH0sXG5cdFx0eyBmbGF0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBBcnJheS5wcm90b3R5cGUuZmxhdCAhPT0gcG9seWZpbGw7IH0gfVxuXHQpO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJE1hcCA9IHR5cGVvZiBNYXAgPT09ICdmdW5jdGlvbicgJiYgTWFwLnByb3RvdHlwZSA/IE1hcCA6IG51bGw7XG52YXIgJFNldCA9IHR5cGVvZiBTZXQgPT09ICdmdW5jdGlvbicgJiYgU2V0LnByb3RvdHlwZSA/IFNldCA6IG51bGw7XG5cbnZhciBleHBvcnRlZDtcblxuaWYgKCEkU2V0KSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuXHRleHBvcnRlZCA9IGZ1bmN0aW9uIGlzU2V0KHgpIHtcblx0XHQvLyBgU2V0YCBpcyBub3QgcHJlc2VudCBpbiB0aGlzIGVudmlyb25tZW50LlxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxudmFyICRtYXBIYXMgPSAkTWFwID8gTWFwLnByb3RvdHlwZS5oYXMgOiBudWxsO1xudmFyICRzZXRIYXMgPSAkU2V0ID8gU2V0LnByb3RvdHlwZS5oYXMgOiBudWxsO1xuaWYgKCFleHBvcnRlZCAmJiAhJHNldEhhcykge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcblx0ZXhwb3J0ZWQgPSBmdW5jdGlvbiBpc1NldCh4KSB7XG5cdFx0Ly8gYFNldGAgZG9lcyBub3QgaGF2ZSBhIGBoYXNgIG1ldGhvZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlZCB8fCBmdW5jdGlvbiBpc1NldCh4KSB7XG5cdGlmICgheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0dHJ5IHtcblx0XHQkc2V0SGFzLmNhbGwoeCk7XG5cdFx0aWYgKCRtYXBIYXMpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdCRtYXBIYXMuY2FsbCh4KTtcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB4IGluc3RhbmNlb2YgJFNldDsgLy8gY29yZS1qcyB3b3JrYXJvdW5kLCBwcmUtdjIuNS4wXG5cdH0gY2F0Y2ggKGUpIHt9XG5cdHJldHVybiBmYWxzZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVxdWlyZVByb21pc2UoKSB7XG5cdGlmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2BQcm9taXNlLnByb3RvdHlwZS5maW5hbGx5YCByZXF1aXJlcyBhIGdsb2JhbCBgUHJvbWlzZWAgYmUgYXZhaWxhYmxlLicpO1xuXHR9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsICE9PSAnb2JqZWN0JyB8fCAhZ2xvYmFsIHx8IGdsb2JhbC5NYXRoICE9PSBNYXRoIHx8IGdsb2JhbC5BcnJheSAhPT0gQXJyYXkpIHtcblx0XHRyZXR1cm4gaW1wbGVtZW50YXRpb247XG5cdH1cblx0cmV0dXJuIGdsb2JhbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYWxsID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9DYWxsJyk7XG52YXIgR2V0ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9HZXQnKTtcbnZhciBHZXRNZXRob2QgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0dldE1ldGhvZCcpO1xudmFyIElzUmVnRXhwID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Jc1JlZ0V4cCcpO1xudmFyIFRvU3RyaW5nID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Ub1N0cmluZycpO1xudmFyIFJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1JlcXVpcmVPYmplY3RDb2VyY2libGUnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9oZWxwZXJzL2NhbGxCb3VuZCcpO1xudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scycpKCk7XG52YXIgZmxhZ3NHZXR0ZXIgPSByZXF1aXJlKCdyZWdleHAucHJvdG90eXBlLmZsYWdzJyk7XG5cbnZhciAkaW5kZXhPZiA9IGNhbGxCb3VuZCgnU3RyaW5nLnByb3RvdHlwZS5pbmRleE9mJyk7XG5cbnZhciByZWdleHBNYXRjaEFsbFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbC1yZWdleHAtbWF0Y2hhbGwnKTtcblxudmFyIGdldE1hdGNoZXIgPSBmdW5jdGlvbiBnZXRNYXRjaGVyKHJlZ2V4cCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG5cdHZhciBtYXRjaGVyUG9seWZpbGwgPSByZWdleHBNYXRjaEFsbFBvbHlmaWxsKCk7XG5cdGlmIChoYXNTeW1ib2xzICYmIHR5cGVvZiBTeW1ib2wubWF0Y2hBbGwgPT09ICdzeW1ib2wnKSB7XG5cdFx0dmFyIG1hdGNoZXIgPSBHZXRNZXRob2QocmVnZXhwLCBTeW1ib2wubWF0Y2hBbGwpO1xuXHRcdGlmIChtYXRjaGVyID09PSBSZWdFeHAucHJvdG90eXBlW1N5bWJvbC5tYXRjaEFsbF0gJiYgbWF0Y2hlciAhPT0gbWF0Y2hlclBvbHlmaWxsKSB7XG5cdFx0XHRyZXR1cm4gbWF0Y2hlclBvbHlmaWxsO1xuXHRcdH1cblx0XHRyZXR1cm4gbWF0Y2hlcjtcblx0fVxuXHQvLyBmYWxsYmFjayBmb3IgcHJlLVN5bWJvbC5tYXRjaEFsbCBlbnZpcm9ubWVudHNcblx0aWYgKElzUmVnRXhwKHJlZ2V4cCkpIHtcblx0XHRyZXR1cm4gbWF0Y2hlclBvbHlmaWxsO1xuXHR9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1hdGNoQWxsKHJlZ2V4cCkge1xuXHR2YXIgTyA9IFJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG5cblx0aWYgKHR5cGVvZiByZWdleHAgIT09ICd1bmRlZmluZWQnICYmIHJlZ2V4cCAhPT0gbnVsbCkge1xuXHRcdHZhciBpc1JlZ0V4cCA9IElzUmVnRXhwKHJlZ2V4cCk7XG5cdFx0aWYgKGlzUmVnRXhwKSB7XG5cdFx0XHQvLyB3b3JrYXJvdW5kIGZvciBvbGRlciBlbmdpbmVzIHRoYXQgbGFjayBSZWdFeHAucHJvdG90eXBlLmZsYWdzXG5cdFx0XHR2YXIgZmxhZ3MgPSAnZmxhZ3MnIGluIHJlZ2V4cCA/IEdldChyZWdleHAsICdmbGFncycpIDogZmxhZ3NHZXR0ZXIocmVnZXhwKTtcblx0XHRcdFJlcXVpcmVPYmplY3RDb2VyY2libGUoZmxhZ3MpO1xuXHRcdFx0aWYgKCRpbmRleE9mKFRvU3RyaW5nKGZsYWdzKSwgJ2cnKSA8IDApIHtcblx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignbWF0Y2hBbGwgcmVxdWlyZXMgYSBnbG9iYWwgcmVndWxhciBleHByZXNzaW9uJyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIG1hdGNoZXIgPSBnZXRNYXRjaGVyKHJlZ2V4cCk7XG5cdFx0aWYgKHR5cGVvZiBtYXRjaGVyICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0cmV0dXJuIENhbGwobWF0Y2hlciwgcmVnZXhwLCBbT10pO1xuXHRcdH1cblx0fVxuXG5cdHZhciBTID0gVG9TdHJpbmcoTyk7XG5cdC8vIHZhciByeCA9IFJlZ0V4cENyZWF0ZShyZWdleHAsICdnJyk7XG5cdHZhciByeCA9IG5ldyBSZWdFeHAocmVnZXhwLCAnZycpO1xuXHRyZXR1cm4gQ2FsbChnZXRNYXRjaGVyKHJ4KSwgcngsIFtTXSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRVM1VG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vNS9Ub0ludGVnZXInKTtcblxudmFyIFRvTnVtYmVyID0gcmVxdWlyZSgnLi9Ub051bWJlcicpO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXRvaW50ZWdlclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvSW50ZWdlcih2YWx1ZSkge1xuXHR2YXIgbnVtYmVyID0gVG9OdW1iZXIodmFsdWUpO1xuXHRyZXR1cm4gRVM1VG9JbnRlZ2VyKG51bWJlcik7XG59O1xuIiwidmFyIG5vdyA9IHJlcXVpcmUoJ3BlcmZvcm1hbmNlLW5vdycpXG4gICwgcm9vdCA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogd2luZG93XG4gICwgdmVuZG9ycyA9IFsnbW96JywgJ3dlYmtpdCddXG4gICwgc3VmZml4ID0gJ0FuaW1hdGlvbkZyYW1lJ1xuICAsIHJhZiA9IHJvb3RbJ3JlcXVlc3QnICsgc3VmZml4XVxuICAsIGNhZiA9IHJvb3RbJ2NhbmNlbCcgKyBzdWZmaXhdIHx8IHJvb3RbJ2NhbmNlbFJlcXVlc3QnICsgc3VmZml4XVxuXG5mb3IodmFyIGkgPSAwOyAhcmFmICYmIGkgPCB2ZW5kb3JzLmxlbmd0aDsgaSsrKSB7XG4gIHJhZiA9IHJvb3RbdmVuZG9yc1tpXSArICdSZXF1ZXN0JyArIHN1ZmZpeF1cbiAgY2FmID0gcm9vdFt2ZW5kb3JzW2ldICsgJ0NhbmNlbCcgKyBzdWZmaXhdXG4gICAgICB8fCByb290W3ZlbmRvcnNbaV0gKyAnQ2FuY2VsUmVxdWVzdCcgKyBzdWZmaXhdXG59XG5cbi8vIFNvbWUgdmVyc2lvbnMgb2YgRkYgaGF2ZSByQUYgYnV0IG5vdCBjQUZcbmlmKCFyYWYgfHwgIWNhZikge1xuICB2YXIgbGFzdCA9IDBcbiAgICAsIGlkID0gMFxuICAgICwgcXVldWUgPSBbXVxuICAgICwgZnJhbWVEdXJhdGlvbiA9IDEwMDAgLyA2MFxuXG4gIHJhZiA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgaWYocXVldWUubGVuZ3RoID09PSAwKSB7XG4gICAgICB2YXIgX25vdyA9IG5vdygpXG4gICAgICAgICwgbmV4dCA9IE1hdGgubWF4KDAsIGZyYW1lRHVyYXRpb24gLSAoX25vdyAtIGxhc3QpKVxuICAgICAgbGFzdCA9IG5leHQgKyBfbm93XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY3AgPSBxdWV1ZS5zbGljZSgwKVxuICAgICAgICAvLyBDbGVhciBxdWV1ZSBoZXJlIHRvIHByZXZlbnRcbiAgICAgICAgLy8gY2FsbGJhY2tzIGZyb20gYXBwZW5kaW5nIGxpc3RlbmVyc1xuICAgICAgICAvLyB0byB0aGUgY3VycmVudCBmcmFtZSdzIHF1ZXVlXG4gICAgICAgIHF1ZXVlLmxlbmd0aCA9IDBcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGNwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYoIWNwW2ldLmNhbmNlbGxlZCkge1xuICAgICAgICAgICAgdHJ5e1xuICAgICAgICAgICAgICBjcFtpXS5jYWxsYmFjayhsYXN0KVxuICAgICAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRocm93IGUgfSwgMClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIE1hdGgucm91bmQobmV4dCkpXG4gICAgfVxuICAgIHF1ZXVlLnB1c2goe1xuICAgICAgaGFuZGxlOiArK2lkLFxuICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgY2FuY2VsbGVkOiBmYWxzZVxuICAgIH0pXG4gICAgcmV0dXJuIGlkXG4gIH1cblxuICBjYWYgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmKHF1ZXVlW2ldLmhhbmRsZSA9PT0gaGFuZGxlKSB7XG4gICAgICAgIHF1ZXVlW2ldLmNhbmNlbGxlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbikge1xuICAvLyBXcmFwIGluIGEgbmV3IGZ1bmN0aW9uIHRvIHByZXZlbnRcbiAgLy8gYGNhbmNlbGAgcG90ZW50aWFsbHkgYmVpbmcgYXNzaWduZWRcbiAgLy8gdG8gdGhlIG5hdGl2ZSByQUYgZnVuY3Rpb25cbiAgcmV0dXJuIHJhZi5jYWxsKHJvb3QsIGZuKVxufVxubW9kdWxlLmV4cG9ydHMuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gIGNhZi5hcHBseShyb290LCBhcmd1bWVudHMpXG59XG5tb2R1bGUuZXhwb3J0cy5wb2x5ZmlsbCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAoIW9iamVjdCkge1xuICAgIG9iamVjdCA9IHJvb3Q7XG4gIH1cbiAgb2JqZWN0LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHJhZlxuICBvYmplY3QuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBjYWZcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcbnZhciAkU3ludGF4RXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVTeW50YXhFcnJvciUnKTtcblxudmFyIGhhcyA9IHJlcXVpcmUoJ2hhcycpO1xuXG52YXIgcHJlZGljYXRlcyA9IHtcblx0Ly8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXByb3BlcnR5LWRlc2NyaXB0b3Itc3BlY2lmaWNhdGlvbi10eXBlXG5cdCdQcm9wZXJ0eSBEZXNjcmlwdG9yJzogZnVuY3Rpb24gaXNQcm9wZXJ0eURlc2NyaXB0b3IoVHlwZSwgRGVzYykge1xuXHRcdGlmIChUeXBlKERlc2MpICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHR2YXIgYWxsb3dlZCA9IHtcblx0XHRcdCdbW0NvbmZpZ3VyYWJsZV1dJzogdHJ1ZSxcblx0XHRcdCdbW0VudW1lcmFibGVdXSc6IHRydWUsXG5cdFx0XHQnW1tHZXRdXSc6IHRydWUsXG5cdFx0XHQnW1tTZXRdXSc6IHRydWUsXG5cdFx0XHQnW1tWYWx1ZV1dJzogdHJ1ZSxcblx0XHRcdCdbW1dyaXRhYmxlXV0nOiB0cnVlXG5cdFx0fTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBEZXNjKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblx0XHRcdGlmIChoYXMoRGVzYywga2V5KSAmJiAhYWxsb3dlZFtrZXldKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2YXIgaXNEYXRhID0gaGFzKERlc2MsICdbW1ZhbHVlXV0nKTtcblx0XHR2YXIgSXNBY2Nlc3NvciA9IGhhcyhEZXNjLCAnW1tHZXRdXScpIHx8IGhhcyhEZXNjLCAnW1tTZXRdXScpO1xuXHRcdGlmIChpc0RhdGEgJiYgSXNBY2Nlc3Nvcikge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1Byb3BlcnR5IERlc2NyaXB0b3JzIG1heSBub3QgYmUgYm90aCBhY2Nlc3NvciBhbmQgZGF0YSBkZXNjcmlwdG9ycycpO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBhc3NlcnRSZWNvcmQoVHlwZSwgcmVjb3JkVHlwZSwgYXJndW1lbnROYW1lLCB2YWx1ZSkge1xuXHR2YXIgcHJlZGljYXRlID0gcHJlZGljYXRlc1tyZWNvcmRUeXBlXTtcblx0aWYgKHR5cGVvZiBwcmVkaWNhdGUgIT09ICdmdW5jdGlvbicpIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCd1bmtub3duIHJlY29yZCB0eXBlOiAnICsgcmVjb3JkVHlwZSk7XG5cdH1cblx0aWYgKCFwcmVkaWNhdGUoVHlwZSwgdmFsdWUpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoYXJndW1lbnROYW1lICsgJyBtdXN0IGJlIGEgJyArIHJlY29yZFR5cGUpO1xuXHR9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2dldEl0ZXJhdG9yTWV0aG9kJyk7XG52YXIgQWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9BZHZhbmNlU3RyaW5nSW5kZXgnKTtcbnZhciBDYWxsID0gcmVxdWlyZSgnLi9DYWxsJyk7XG52YXIgR2V0TWV0aG9kID0gcmVxdWlyZSgnLi9HZXRNZXRob2QnKTtcbnZhciBJc0FycmF5ID0gcmVxdWlyZSgnLi9Jc0FycmF5Jyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtZ2V0aXRlcmF0b3JcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBHZXRJdGVyYXRvcihvYmosIG1ldGhvZCkge1xuXHR2YXIgYWN0dWFsTWV0aG9kID0gbWV0aG9kO1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcblx0XHRhY3R1YWxNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChcblx0XHRcdHtcblx0XHRcdFx0QWR2YW5jZVN0cmluZ0luZGV4OiBBZHZhbmNlU3RyaW5nSW5kZXgsXG5cdFx0XHRcdEdldE1ldGhvZDogR2V0TWV0aG9kLFxuXHRcdFx0XHRJc0FycmF5OiBJc0FycmF5LFxuXHRcdFx0XHRUeXBlOiBUeXBlXG5cdFx0XHR9LFxuXHRcdFx0b2JqXG5cdFx0KTtcblx0fVxuXHR2YXIgaXRlcmF0b3IgPSBDYWxsKGFjdHVhbE1ldGhvZCwgb2JqKTtcblx0aWYgKFR5cGUoaXRlcmF0b3IpICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpdGVyYXRvciBtdXN0IHJldHVybiBhbiBvYmplY3QnKTtcblx0fVxuXG5cdHJldHVybiBpdGVyYXRvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciByZWdleEV4ZWMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NhbGxCb3VuZCcpKCdSZWdFeHAucHJvdG90eXBlLmV4ZWMnKTtcblxudmFyIENhbGwgPSByZXF1aXJlKCcuL0NhbGwnKTtcbnZhciBHZXQgPSByZXF1aXJlKCcuL0dldCcpO1xudmFyIElzQ2FsbGFibGUgPSByZXF1aXJlKCcuL0lzQ2FsbGFibGUnKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1yZWdleHBleGVjXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gUmVnRXhwRXhlYyhSLCBTKSB7XG5cdGlmIChUeXBlKFIpICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgUmAgbXVzdCBiZSBhbiBPYmplY3QnKTtcblx0fVxuXHRpZiAoVHlwZShTKSAhPT0gJ1N0cmluZycpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogYFNgIG11c3QgYmUgYSBTdHJpbmcnKTtcblx0fVxuXHR2YXIgZXhlYyA9IEdldChSLCAnZXhlYycpO1xuXHRpZiAoSXNDYWxsYWJsZShleGVjKSkge1xuXHRcdHZhciByZXN1bHQgPSBDYWxsKGV4ZWMsIFIsIFtTXSk7XG5cdFx0aWYgKHJlc3VsdCA9PT0gbnVsbCB8fCBUeXBlKHJlc3VsdCkgPT09ICdPYmplY3QnKSB7XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignXCJleGVjXCIgbWV0aG9kIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBPYmplY3QnKTtcblx0fVxuXHRyZXR1cm4gcmVnZXhFeGVjKFIsIFMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRpc05hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiAoYSkgeyByZXR1cm4gYSAhPT0gYTsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBOdW1iZXIuaXNGaW5pdGUgfHwgZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHR5cGVvZiB4ID09PSAnbnVtYmVyJyAmJiAhJGlzTmFOKHgpICYmIHggIT09IEluZmluaXR5ICYmIHggIT09IC1JbmZpbml0eTsgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi9zaGltJykoKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRyZXR1cm4gdHlwZW9mIE9iamVjdC52YWx1ZXMgPT09ICdmdW5jdGlvbicgPyBPYmplY3QudmFsdWVzIDogaW1wbGVtZW50YXRpb247XG59O1xuIiwiLyohXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW1cbiAqIEBsaWNlbnNlIGVzNS1zaGltIENvcHlyaWdodCAyMDA5LTIwMjAgYnkgY29udHJpYnV0b3JzLCBNSVQgTGljZW5zZVxuICogc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cblxuLy8gdmltOiB0cz00IHN0cz00IHN3PTQgZXhwYW5kdGFiXG5cbi8vIEFkZCBzZW1pY29sb24gdG8gcHJldmVudCBJSUZFIGZyb20gYmVpbmcgcGFzc2VkIGFzIGFyZ3VtZW50IHRvIGNvbmNhdGVuYXRlZCBjb2RlLlxuO1xuXG4vLyBVTUQgKFVuaXZlcnNhbCBNb2R1bGUgRGVmaW5pdGlvbilcbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vdW1kanMvdW1kL2Jsb2IvbWFzdGVyL3RlbXBsYXRlcy9yZXR1cm5FeHBvcnRzLmpzXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvKiBnbG9iYWwgZGVmaW5lICovXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgICAgIGRlZmluZShmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAvLyBOb2RlLiBEb2VzIG5vdCB3b3JrIHdpdGggc3RyaWN0IENvbW1vbkpTLCBidXRcbiAgICAgICAgLy8gb25seSBDb21tb25KUy1saWtlIGVudmlyb21lbnRzIHRoYXQgc3VwcG9ydCBtb2R1bGUuZXhwb3J0cyxcbiAgICAgICAgLy8gbGlrZSBOb2RlLlxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBCcm93c2VyIGdsb2JhbHMgKHJvb3QgaXMgd2luZG93KVxuICAgICAgICByb290LnJldHVybkV4cG9ydHMgPSBmYWN0b3J5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB9XG59KHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBCcmluZ3MgYW4gZW52aXJvbm1lbnQgYXMgY2xvc2UgdG8gRUNNQVNjcmlwdCA1IGNvbXBsaWFuY2VcbiAgICAgKiBhcyBpcyBwb3NzaWJsZSB3aXRoIHRoZSBmYWNpbGl0aWVzIG9mIGVyc3R3aGlsZSBlbmdpbmVzLlxuICAgICAqXG4gICAgICogQW5ub3RhdGVkIEVTNTogaHR0cDovL2VzNS5naXRodWIuY29tLyAoc3BlY2lmaWMgbGlua3MgYmVsb3cpXG4gICAgICogRVM1IFNwZWM6IGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9wdWJsaWNhdGlvbnMvZmlsZXMvRUNNQS1TVC9FY21hLTI2Mi5wZGZcbiAgICAgKiBSZXF1aXJlZCByZWFkaW5nOiBodHRwOi8vamF2YXNjcmlwdHdlYmxvZy53b3JkcHJlc3MuY29tLzIwMTEvMTIvMDUvZXh0ZW5kaW5nLWphdmFzY3JpcHQtbmF0aXZlcy9cbiAgICAgKi9cblxuICAgIC8vIFNob3J0Y3V0IHRvIGFuIG9mdGVuIGFjY2Vzc2VkIHByb3BlcnRpZXMsIGluIG9yZGVyIHRvIGF2b2lkIG11bHRpcGxlXG4gICAgLy8gZGVyZWZlcmVuY2UgdGhhdCBjb3N0cyB1bml2ZXJzYWxseS4gVGhpcyBhbHNvIGhvbGRzIGEgcmVmZXJlbmNlIHRvIGtub3duLWdvb2RcbiAgICAvLyBmdW5jdGlvbnMuXG4gICAgdmFyICRBcnJheSA9IEFycmF5O1xuICAgIHZhciBBcnJheVByb3RvdHlwZSA9ICRBcnJheS5wcm90b3R5cGU7XG4gICAgdmFyICRPYmplY3QgPSBPYmplY3Q7XG4gICAgdmFyIE9iamVjdFByb3RvdHlwZSA9ICRPYmplY3QucHJvdG90eXBlO1xuICAgIHZhciAkRnVuY3Rpb24gPSBGdW5jdGlvbjtcbiAgICB2YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSAkRnVuY3Rpb24ucHJvdG90eXBlO1xuICAgIHZhciAkU3RyaW5nID0gU3RyaW5nO1xuICAgIHZhciBTdHJpbmdQcm90b3R5cGUgPSAkU3RyaW5nLnByb3RvdHlwZTtcbiAgICB2YXIgJE51bWJlciA9IE51bWJlcjtcbiAgICB2YXIgTnVtYmVyUHJvdG90eXBlID0gJE51bWJlci5wcm90b3R5cGU7XG4gICAgdmFyIGFycmF5X3NsaWNlID0gQXJyYXlQcm90b3R5cGUuc2xpY2U7XG4gICAgdmFyIGFycmF5X3NwbGljZSA9IEFycmF5UHJvdG90eXBlLnNwbGljZTtcbiAgICB2YXIgYXJyYXlfcHVzaCA9IEFycmF5UHJvdG90eXBlLnB1c2g7XG4gICAgdmFyIGFycmF5X3Vuc2hpZnQgPSBBcnJheVByb3RvdHlwZS51bnNoaWZ0O1xuICAgIHZhciBhcnJheV9jb25jYXQgPSBBcnJheVByb3RvdHlwZS5jb25jYXQ7XG4gICAgdmFyIGFycmF5X2pvaW4gPSBBcnJheVByb3RvdHlwZS5qb2luO1xuICAgIHZhciBjYWxsID0gRnVuY3Rpb25Qcm90b3R5cGUuY2FsbDtcbiAgICB2YXIgYXBwbHkgPSBGdW5jdGlvblByb3RvdHlwZS5hcHBseTtcbiAgICB2YXIgbWF4ID0gTWF0aC5tYXg7XG4gICAgdmFyIG1pbiA9IE1hdGgubWluO1xuXG4gICAgLy8gSGF2aW5nIGEgdG9TdHJpbmcgbG9jYWwgdmFyaWFibGUgbmFtZSBicmVha3MgaW4gT3BlcmEgc28gdXNlIHRvX3N0cmluZy5cbiAgICB2YXIgdG9fc3RyaW5nID0gT2JqZWN0UHJvdG90eXBlLnRvU3RyaW5nO1xuXG4gICAgLyogZXNsaW50LWRpc2FibGUgb25lLXZhci1kZWNsYXJhdGlvbi1wZXItbGluZSwgbm8tcmVkZWNsYXJlLCBtYXgtc3RhdGVtZW50cy1wZXItbGluZSAqL1xuICAgIHZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCc7XG4gICAgdmFyIGlzQ2FsbGFibGU7IC8qIGlubGluZWQgZnJvbSBodHRwczovL25wbWpzLmNvbS9pcy1jYWxsYWJsZSAqLyB2YXIgZm5Ub1N0ciA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZywgY29uc3RydWN0b3JSZWdleCA9IC9eXFxzKmNsYXNzIC8sIGlzRVM2Q2xhc3NGbiA9IGZ1bmN0aW9uIGlzRVM2Q2xhc3NGbih2YWx1ZSkgeyB0cnkgeyB2YXIgZm5TdHIgPSBmblRvU3RyLmNhbGwodmFsdWUpOyB2YXIgc2luZ2xlU3RyaXBwZWQgPSBmblN0ci5yZXBsYWNlKC9cXC9cXC8uKlxcbi9nLCAnJyk7IHZhciBtdWx0aVN0cmlwcGVkID0gc2luZ2xlU3RyaXBwZWQucmVwbGFjZSgvXFwvXFwqWy5cXHNcXFNdKlxcKlxcLy9nLCAnJyk7IHZhciBzcGFjZVN0cmlwcGVkID0gbXVsdGlTdHJpcHBlZC5yZXBsYWNlKC9cXG4vbWcsICcgJykucmVwbGFjZSgvIHsyfS9nLCAnICcpOyByZXR1cm4gY29uc3RydWN0b3JSZWdleC50ZXN0KHNwYWNlU3RyaXBwZWQpOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgLyogbm90IGEgZnVuY3Rpb24gKi8gfSB9LCB0cnlGdW5jdGlvbk9iamVjdCA9IGZ1bmN0aW9uIHRyeUZ1bmN0aW9uT2JqZWN0KHZhbHVlKSB7IHRyeSB7IGlmIChpc0VTNkNsYXNzRm4odmFsdWUpKSB7IHJldHVybiBmYWxzZTsgfSBmblRvU3RyLmNhbGwodmFsdWUpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfSwgZm5DbGFzcyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsIGdlbkNsYXNzID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJywgaXNDYWxsYWJsZSA9IGZ1bmN0aW9uIGlzQ2FsbGFibGUodmFsdWUpIHsgaWYgKCF2YWx1ZSkgeyByZXR1cm4gZmFsc2U7IH0gaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7IHJldHVybiBmYWxzZTsgfSBpZiAoaGFzVG9TdHJpbmdUYWcpIHsgcmV0dXJuIHRyeUZ1bmN0aW9uT2JqZWN0KHZhbHVlKTsgfSBpZiAoaXNFUzZDbGFzc0ZuKHZhbHVlKSkgeyByZXR1cm4gZmFsc2U7IH0gdmFyIHN0ckNsYXNzID0gdG9fc3RyaW5nLmNhbGwodmFsdWUpOyByZXR1cm4gc3RyQ2xhc3MgPT09IGZuQ2xhc3MgfHwgc3RyQ2xhc3MgPT09IGdlbkNsYXNzOyB9O1xuXG4gICAgdmFyIGlzUmVnZXg7IC8qIGlubGluZWQgZnJvbSBodHRwczovL25wbWpzLmNvbS9pcy1yZWdleCAqLyB2YXIgcmVnZXhFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjLCB0cnlSZWdleEV4ZWMgPSBmdW5jdGlvbiB0cnlSZWdleEV4ZWModmFsdWUpIHsgdHJ5IHsgcmVnZXhFeGVjLmNhbGwodmFsdWUpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfSwgcmVnZXhDbGFzcyA9ICdbb2JqZWN0IFJlZ0V4cF0nOyBpc1JlZ2V4ID0gZnVuY3Rpb24gaXNSZWdleCh2YWx1ZSkgeyBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykgeyByZXR1cm4gZmFsc2U7IH0gcmV0dXJuIGhhc1RvU3RyaW5nVGFnID8gdHJ5UmVnZXhFeGVjKHZhbHVlKSA6IHRvX3N0cmluZy5jYWxsKHZhbHVlKSA9PT0gcmVnZXhDbGFzczsgfTtcbiAgICB2YXIgaXNTdHJpbmc7IC8qIGlubGluZWQgZnJvbSBodHRwczovL25wbWpzLmNvbS9pcy1zdHJpbmcgKi8gdmFyIHN0clZhbHVlID0gU3RyaW5nLnByb3RvdHlwZS52YWx1ZU9mLCB0cnlTdHJpbmdPYmplY3QgPSBmdW5jdGlvbiB0cnlTdHJpbmdPYmplY3QodmFsdWUpIHsgdHJ5IHsgc3RyVmFsdWUuY2FsbCh2YWx1ZSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9LCBzdHJpbmdDbGFzcyA9ICdbb2JqZWN0IFN0cmluZ10nOyBpc1N0cmluZyA9IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7IGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7IHJldHVybiB0cnVlOyB9IGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7IHJldHVybiBmYWxzZTsgfSByZXR1cm4gaGFzVG9TdHJpbmdUYWcgPyB0cnlTdHJpbmdPYmplY3QodmFsdWUpIDogdG9fc3RyaW5nLmNhbGwodmFsdWUpID09PSBzdHJpbmdDbGFzczsgfTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG9uZS12YXItZGVjbGFyYXRpb24tcGVyLWxpbmUsIG5vLXJlZGVjbGFyZSwgbWF4LXN0YXRlbWVudHMtcGVyLWxpbmUgKi9cblxuICAgIC8qIGlubGluZWQgZnJvbSBodHRwOi8vbnBtanMuY29tL2RlZmluZS1wcm9wZXJ0aWVzICovXG4gICAgdmFyIHN1cHBvcnRzRGVzY3JpcHRvcnMgPSAkT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgb2JqID0ge307XG4gICAgICAgICAgICAkT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgJ3gnLCB7IGVudW1lcmFibGU6IGZhbHNlLCB2YWx1ZTogb2JqIH0pO1xuICAgICAgICAgICAgZm9yICh2YXIgXyBpbiBvYmopIHsgLy8ganNjczppZ25vcmUgZGlzYWxsb3dVbnVzZWRWYXJpYWJsZXNcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb2JqLnggPT09IG9iajtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyAvKiB0aGlzIGlzIEVTMyAqL1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSgpKTtcbiAgICB2YXIgZGVmaW5lUHJvcGVydGllcyA9IChmdW5jdGlvbiAoaGFzKSB7XG4gICAgICAgIC8vIERlZmluZSBjb25maWd1cmFibGUsIHdyaXRhYmxlLCBhbmQgbm9uLWVudW1lcmFibGUgcHJvcHNcbiAgICAgICAgLy8gaWYgdGhleSBkb24ndCBleGlzdC5cbiAgICAgICAgdmFyIGRlZmluZVByb3BlcnR5O1xuICAgICAgICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lLCBtZXRob2QsIGZvcmNlQXNzaWduKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFmb3JjZUFzc2lnbiAmJiAobmFtZSBpbiBvYmplY3QpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBtZXRob2RcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIG1ldGhvZCwgZm9yY2VBc3NpZ24pIHtcbiAgICAgICAgICAgICAgICBpZiAoIWZvcmNlQXNzaWduICYmIChuYW1lIGluIG9iamVjdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvYmplY3RbbmFtZV0gPSBtZXRob2Q7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMob2JqZWN0LCBtYXAsIGZvcmNlQXNzaWduKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBuYW1lIGluIG1hcCkge1xuICAgICAgICAgICAgICAgIGlmIChoYXMuY2FsbChtYXAsIG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwgbmFtZSwgbWFwW25hbWVdLCBmb3JjZUFzc2lnbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0oT2JqZWN0UHJvdG90eXBlLmhhc093blByb3BlcnR5KSk7XG5cbiAgICAvL1xuICAgIC8vIFV0aWxcbiAgICAvLyA9PT09PT1cbiAgICAvL1xuXG4gICAgLyogcmVwbGFjZWFibGUgd2l0aCBodHRwczovL25wbWpzLmNvbS9wYWNrYWdlL2VzLWFic3RyYWN0IC9oZWxwZXJzL2lzUHJpbWl0aXZlICovXG4gICAgdmFyIGlzUHJpbWl0aXZlID0gZnVuY3Rpb24gaXNQcmltaXRpdmUoaW5wdXQpIHtcbiAgICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgaW5wdXQ7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PT0gbnVsbCB8fCAodHlwZSAhPT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gJ2Z1bmN0aW9uJyk7XG4gICAgfTtcblxuICAgIHZhciBpc0FjdHVhbE5hTiA9ICROdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gaXNBY3R1YWxOYU4oeCkge1xuICAgICAgICByZXR1cm4geCAhPT0geDtcbiAgICB9O1xuXG4gICAgdmFyIEVTID0ge1xuICAgICAgICAvLyBFUzUgOS40XG4gICAgICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDkuNFxuICAgICAgICAvLyBodHRwOi8vanNwZXJmLmNvbS90by1pbnRlZ2VyXG4gICAgICAgIC8qIHJlcGxhY2VhYmxlIHdpdGggaHR0cHM6Ly9ucG1qcy5jb20vcGFja2FnZS9lcy1hYnN0cmFjdCBFUzUuVG9JbnRlZ2VyICovXG4gICAgICAgIFRvSW50ZWdlcjogZnVuY3Rpb24gVG9JbnRlZ2VyKG51bSkge1xuICAgICAgICAgICAgdmFyIG4gPSArbnVtO1xuICAgICAgICAgICAgaWYgKGlzQWN0dWFsTmFOKG4pKSB7XG4gICAgICAgICAgICAgICAgbiA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG4gIT09IDAgJiYgbiAhPT0gKDEgLyAwKSAmJiBuICE9PSAtKDEgLyAwKSkge1xuICAgICAgICAgICAgICAgIG4gPSAobiA+IDAgfHwgLTEpICogTWF0aC5mbG9vcihNYXRoLmFicyhuKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgfSxcblxuICAgICAgICAvKiByZXBsYWNlYWJsZSB3aXRoIGh0dHBzOi8vbnBtanMuY29tL3BhY2thZ2UvZXMtYWJzdHJhY3QgRVM1LlRvUHJpbWl0aXZlICovXG4gICAgICAgIFRvUHJpbWl0aXZlOiBmdW5jdGlvbiBUb1ByaW1pdGl2ZShpbnB1dCkge1xuICAgICAgICAgICAgdmFyIHZhbCwgdmFsdWVPZiwgdG9TdHI7XG4gICAgICAgICAgICBpZiAoaXNQcmltaXRpdmUoaW5wdXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsdWVPZiA9IGlucHV0LnZhbHVlT2Y7XG4gICAgICAgICAgICBpZiAoaXNDYWxsYWJsZSh2YWx1ZU9mKSkge1xuICAgICAgICAgICAgICAgIHZhbCA9IHZhbHVlT2YuY2FsbChpbnB1dCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzUHJpbWl0aXZlKHZhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b1N0ciA9IGlucHV0LnRvU3RyaW5nO1xuICAgICAgICAgICAgaWYgKGlzQ2FsbGFibGUodG9TdHIpKSB7XG4gICAgICAgICAgICAgICAgdmFsID0gdG9TdHIuY2FsbChpbnB1dCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzUHJpbWl0aXZlKHZhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gRVM1IDkuOVxuICAgICAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3g5LjlcbiAgICAgICAgLyogcmVwbGFjZWFibGUgd2l0aCBodHRwczovL25wbWpzLmNvbS9wYWNrYWdlL2VzLWFic3RyYWN0IEVTNS5Ub09iamVjdCAqL1xuICAgICAgICBUb09iamVjdDogZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICAgIGlmIChvID09IG51bGwpIHsgLy8gdGhpcyBtYXRjaGVzIGJvdGggbnVsbCBhbmQgdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbid0IGNvbnZlcnQgXCIgKyBvICsgJyB0byBvYmplY3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAkT2JqZWN0KG8pO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qIHJlcGxhY2VhYmxlIHdpdGggaHR0cHM6Ly9ucG1qcy5jb20vcGFja2FnZS9lcy1hYnN0cmFjdCBFUzUuVG9VaW50MzIgKi9cbiAgICAgICAgVG9VaW50MzI6IGZ1bmN0aW9uIFRvVWludDMyKHgpIHtcbiAgICAgICAgICAgIHJldHVybiB4ID4+PiAwO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vXG4gICAgLy8gRnVuY3Rpb25cbiAgICAvLyA9PT09PT09PVxuICAgIC8vXG5cbiAgICAvLyBFUy01IDE1LjMuNC41XG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuMy40LjVcblxuICAgIHZhciBFbXB0eSA9IGZ1bmN0aW9uIEVtcHR5KCkge307XG5cbiAgICBkZWZpbmVQcm9wZXJ0aWVzKEZ1bmN0aW9uUHJvdG90eXBlLCB7XG4gICAgICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQodGhhdCkgeyAvLyAubGVuZ3RoIGlzIDFcbiAgICAgICAgICAgIC8vIDEuIExldCBUYXJnZXQgYmUgdGhlIHRoaXMgdmFsdWUuXG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcztcbiAgICAgICAgICAgIC8vIDIuIElmIElzQ2FsbGFibGUoVGFyZ2V0KSBpcyBmYWxzZSwgdGhyb3cgYSBUeXBlRXJyb3IgZXhjZXB0aW9uLlxuICAgICAgICAgICAgaWYgKCFpc0NhbGxhYmxlKHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBjYWxsZWQgb24gaW5jb21wYXRpYmxlICcgKyB0YXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gMy4gTGV0IEEgYmUgYSBuZXcgKHBvc3NpYmx5IGVtcHR5KSBpbnRlcm5hbCBsaXN0IG9mIGFsbCBvZiB0aGVcbiAgICAgICAgICAgIC8vICAgYXJndW1lbnQgdmFsdWVzIHByb3ZpZGVkIGFmdGVyIHRoaXNBcmcgKGFyZzEsIGFyZzIgZXRjKSwgaW4gb3JkZXIuXG4gICAgICAgICAgICAvLyBYWFggc2xpY2VkQXJncyB3aWxsIHN0YW5kIGluIGZvciBcIkFcIiBpZiB1c2VkXG4gICAgICAgICAgICB2YXIgYXJncyA9IGFycmF5X3NsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsgLy8gZm9yIG5vcm1hbCBjYWxsXG4gICAgICAgICAgICAvLyA0LiBMZXQgRiBiZSBhIG5ldyBuYXRpdmUgRUNNQVNjcmlwdCBvYmplY3QuXG4gICAgICAgICAgICAvLyAxMS4gU2V0IHRoZSBbW1Byb3RvdHlwZV1dIGludGVybmFsIHByb3BlcnR5IG9mIEYgdG8gdGhlIHN0YW5kYXJkXG4gICAgICAgICAgICAvLyAgIGJ1aWx0LWluIEZ1bmN0aW9uIHByb3RvdHlwZSBvYmplY3QgYXMgc3BlY2lmaWVkIGluIDE1LjMuMy4xLlxuICAgICAgICAgICAgLy8gMTIuIFNldCB0aGUgW1tDYWxsXV0gaW50ZXJuYWwgcHJvcGVydHkgb2YgRiBhcyBkZXNjcmliZWQgaW5cbiAgICAgICAgICAgIC8vICAgMTUuMy40LjUuMS5cbiAgICAgICAgICAgIC8vIDEzLiBTZXQgdGhlIFtbQ29uc3RydWN0XV0gaW50ZXJuYWwgcHJvcGVydHkgb2YgRiBhcyBkZXNjcmliZWQgaW5cbiAgICAgICAgICAgIC8vICAgMTUuMy40LjUuMi5cbiAgICAgICAgICAgIC8vIDE0LiBTZXQgdGhlIFtbSGFzSW5zdGFuY2VdXSBpbnRlcm5hbCBwcm9wZXJ0eSBvZiBGIGFzIGRlc2NyaWJlZCBpblxuICAgICAgICAgICAgLy8gICAxNS4zLjQuNS4zLlxuICAgICAgICAgICAgdmFyIGJvdW5kO1xuICAgICAgICAgICAgdmFyIGJpbmRlciA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgYm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gMTUuMy40LjUuMiBbW0NvbnN0cnVjdF1dXG4gICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gdGhlIFtbQ29uc3RydWN0XV0gaW50ZXJuYWwgbWV0aG9kIG9mIGEgZnVuY3Rpb24gb2JqZWN0LFxuICAgICAgICAgICAgICAgICAgICAvLyBGIHRoYXQgd2FzIGNyZWF0ZWQgdXNpbmcgdGhlIGJpbmQgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggYVxuICAgICAgICAgICAgICAgICAgICAvLyBsaXN0IG9mIGFyZ3VtZW50cyBFeHRyYUFyZ3MsIHRoZSBmb2xsb3dpbmcgc3RlcHMgYXJlIHRha2VuOlxuICAgICAgICAgICAgICAgICAgICAvLyAxLiBMZXQgdGFyZ2V0IGJlIHRoZSB2YWx1ZSBvZiBGJ3MgW1tUYXJnZXRGdW5jdGlvbl1dXG4gICAgICAgICAgICAgICAgICAgIC8vICAgaW50ZXJuYWwgcHJvcGVydHkuXG4gICAgICAgICAgICAgICAgICAgIC8vIDIuIElmIHRhcmdldCBoYXMgbm8gW1tDb25zdHJ1Y3RdXSBpbnRlcm5hbCBtZXRob2QsIGFcbiAgICAgICAgICAgICAgICAgICAgLy8gICBUeXBlRXJyb3IgZXhjZXB0aW9uIGlzIHRocm93bi5cbiAgICAgICAgICAgICAgICAgICAgLy8gMy4gTGV0IGJvdW5kQXJncyBiZSB0aGUgdmFsdWUgb2YgRidzIFtbQm91bmRBcmdzXV0gaW50ZXJuYWxcbiAgICAgICAgICAgICAgICAgICAgLy8gICBwcm9wZXJ0eS5cbiAgICAgICAgICAgICAgICAgICAgLy8gNC4gTGV0IGFyZ3MgYmUgYSBuZXcgbGlzdCBjb250YWluaW5nIHRoZSBzYW1lIHZhbHVlcyBhcyB0aGVcbiAgICAgICAgICAgICAgICAgICAgLy8gICBsaXN0IGJvdW5kQXJncyBpbiB0aGUgc2FtZSBvcmRlciBmb2xsb3dlZCBieSB0aGUgc2FtZVxuICAgICAgICAgICAgICAgICAgICAvLyAgIHZhbHVlcyBhcyB0aGUgbGlzdCBFeHRyYUFyZ3MgaW4gdGhlIHNhbWUgb3JkZXIuXG4gICAgICAgICAgICAgICAgICAgIC8vIDUuIFJldHVybiB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgdGhlIFtbQ29uc3RydWN0XV0gaW50ZXJuYWxcbiAgICAgICAgICAgICAgICAgICAgLy8gICBtZXRob2Qgb2YgdGFyZ2V0IHByb3ZpZGluZyBhcmdzIGFzIHRoZSBhcmd1bWVudHMuXG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGFwcGx5LmNhbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlfY29uY2F0LmNhbGwoYXJncywgYXJyYXlfc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoJE9iamVjdChyZXN1bHQpID09PSByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyAxNS4zLjQuNS4xIFtbQ2FsbF1dXG4gICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gdGhlIFtbQ2FsbF1dIGludGVybmFsIG1ldGhvZCBvZiBhIGZ1bmN0aW9uIG9iamVjdCwgRixcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hpY2ggd2FzIGNyZWF0ZWQgdXNpbmcgdGhlIGJpbmQgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggYVxuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIHZhbHVlIGFuZCBhIGxpc3Qgb2YgYXJndW1lbnRzIEV4dHJhQXJncywgdGhlIGZvbGxvd2luZ1xuICAgICAgICAgICAgICAgICAgICAvLyBzdGVwcyBhcmUgdGFrZW46XG4gICAgICAgICAgICAgICAgICAgIC8vIDEuIExldCBib3VuZEFyZ3MgYmUgdGhlIHZhbHVlIG9mIEYncyBbW0JvdW5kQXJnc11dIGludGVybmFsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgcHJvcGVydHkuXG4gICAgICAgICAgICAgICAgICAgIC8vIDIuIExldCBib3VuZFRoaXMgYmUgdGhlIHZhbHVlIG9mIEYncyBbW0JvdW5kVGhpc11dIGludGVybmFsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgcHJvcGVydHkuXG4gICAgICAgICAgICAgICAgICAgIC8vIDMuIExldCB0YXJnZXQgYmUgdGhlIHZhbHVlIG9mIEYncyBbW1RhcmdldEZ1bmN0aW9uXV0gaW50ZXJuYWxcbiAgICAgICAgICAgICAgICAgICAgLy8gICBwcm9wZXJ0eS5cbiAgICAgICAgICAgICAgICAgICAgLy8gNC4gTGV0IGFyZ3MgYmUgYSBuZXcgbGlzdCBjb250YWluaW5nIHRoZSBzYW1lIHZhbHVlcyBhcyB0aGVcbiAgICAgICAgICAgICAgICAgICAgLy8gICBsaXN0IGJvdW5kQXJncyBpbiB0aGUgc2FtZSBvcmRlciBmb2xsb3dlZCBieSB0aGUgc2FtZVxuICAgICAgICAgICAgICAgICAgICAvLyAgIHZhbHVlcyBhcyB0aGUgbGlzdCBFeHRyYUFyZ3MgaW4gdGhlIHNhbWUgb3JkZXIuXG4gICAgICAgICAgICAgICAgICAgIC8vIDUuIFJldHVybiB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgdGhlIFtbQ2FsbF1dIGludGVybmFsIG1ldGhvZFxuICAgICAgICAgICAgICAgICAgICAvLyAgIG9mIHRhcmdldCBwcm92aWRpbmcgYm91bmRUaGlzIGFzIHRoZSB0aGlzIHZhbHVlIGFuZFxuICAgICAgICAgICAgICAgICAgICAvLyAgIHByb3ZpZGluZyBhcmdzIGFzIHRoZSBhcmd1bWVudHMuXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gZXF1aXY6IHRhcmdldC5jYWxsKHRoaXMsIC4uLmJvdW5kQXJncywgLi4uYXJncylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwcGx5LmNhbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlfY29uY2F0LmNhbGwoYXJncywgYXJyYXlfc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyAxNS4gSWYgdGhlIFtbQ2xhc3NdXSBpbnRlcm5hbCBwcm9wZXJ0eSBvZiBUYXJnZXQgaXMgXCJGdW5jdGlvblwiLCB0aGVuXG4gICAgICAgICAgICAvLyAgICAgYS4gTGV0IEwgYmUgdGhlIGxlbmd0aCBwcm9wZXJ0eSBvZiBUYXJnZXQgbWludXMgdGhlIGxlbmd0aCBvZiBBLlxuICAgICAgICAgICAgLy8gICAgIGIuIFNldCB0aGUgbGVuZ3RoIG93biBwcm9wZXJ0eSBvZiBGIHRvIGVpdGhlciAwIG9yIEwsIHdoaWNoZXZlciBpc1xuICAgICAgICAgICAgLy8gICAgICAgbGFyZ2VyLlxuICAgICAgICAgICAgLy8gMTYuIEVsc2Ugc2V0IHRoZSBsZW5ndGggb3duIHByb3BlcnR5IG9mIEYgdG8gMC5cblxuICAgICAgICAgICAgdmFyIGJvdW5kTGVuZ3RoID0gbWF4KDAsIHRhcmdldC5sZW5ndGggLSBhcmdzLmxlbmd0aCk7XG5cbiAgICAgICAgICAgIC8vIDE3LiBTZXQgdGhlIGF0dHJpYnV0ZXMgb2YgdGhlIGxlbmd0aCBvd24gcHJvcGVydHkgb2YgRiB0byB0aGUgdmFsdWVzXG4gICAgICAgICAgICAvLyAgIHNwZWNpZmllZCBpbiAxNS4zLjUuMS5cbiAgICAgICAgICAgIHZhciBib3VuZEFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm91bmRMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGFycmF5X3B1c2guY2FsbChib3VuZEFyZ3MsICckJyArIGkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBYWFggQnVpbGQgYSBkeW5hbWljIGZ1bmN0aW9uIHdpdGggZGVzaXJlZCBhbW91bnQgb2YgYXJndW1lbnRzIGlzIHRoZSBvbmx5XG4gICAgICAgICAgICAvLyB3YXkgdG8gc2V0IHRoZSBsZW5ndGggcHJvcGVydHkgb2YgYSBmdW5jdGlvbi5cbiAgICAgICAgICAgIC8vIEluIGVudmlyb25tZW50cyB3aGVyZSBDb250ZW50IFNlY3VyaXR5IFBvbGljaWVzIGVuYWJsZWQgKENocm9tZSBleHRlbnNpb25zLFxuICAgICAgICAgICAgLy8gZm9yIGV4LikgYWxsIHVzZSBvZiBldmFsIG9yIEZ1bmN0aW9uIGNvc3RydWN0b3IgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgICAgICAgICAgIC8vIEhvd2V2ZXIgaW4gYWxsIG9mIHRoZXNlIGVudmlyb25tZW50cyBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBleGlzdHNcbiAgICAgICAgICAgIC8vIGFuZCBzbyB0aGlzIGNvZGUgd2lsbCBuZXZlciBiZSBleGVjdXRlZC5cbiAgICAgICAgICAgIGJvdW5kID0gJEZ1bmN0aW9uKCdiaW5kZXInLCAncmV0dXJuIGZ1bmN0aW9uICgnICsgYXJyYXlfam9pbi5jYWxsKGJvdW5kQXJncywgJywnKSArICcpeyByZXR1cm4gYmluZGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0nKShiaW5kZXIpO1xuXG4gICAgICAgICAgICBpZiAodGFyZ2V0LnByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IHRhcmdldC5wcm90b3R5cGU7XG4gICAgICAgICAgICAgICAgYm91bmQucHJvdG90eXBlID0gbmV3IEVtcHR5KCk7XG4gICAgICAgICAgICAgICAgLy8gQ2xlYW4gdXAgZGFuZ2xpbmcgcmVmZXJlbmNlcy5cbiAgICAgICAgICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUT0RPXG4gICAgICAgICAgICAvLyAxOC4gU2V0IHRoZSBbW0V4dGVuc2libGVdXSBpbnRlcm5hbCBwcm9wZXJ0eSBvZiBGIHRvIHRydWUuXG5cbiAgICAgICAgICAgIC8vIFRPRE9cbiAgICAgICAgICAgIC8vIDE5LiBMZXQgdGhyb3dlciBiZSB0aGUgW1tUaHJvd1R5cGVFcnJvcl1dIGZ1bmN0aW9uIE9iamVjdCAoMTMuMi4zKS5cbiAgICAgICAgICAgIC8vIDIwLiBDYWxsIHRoZSBbW0RlZmluZU93blByb3BlcnR5XV0gaW50ZXJuYWwgbWV0aG9kIG9mIEYgd2l0aFxuICAgICAgICAgICAgLy8gICBhcmd1bWVudHMgXCJjYWxsZXJcIiwgUHJvcGVydHlEZXNjcmlwdG9yIHtbW0dldF1dOiB0aHJvd2VyLCBbW1NldF1dOlxuICAgICAgICAgICAgLy8gICB0aHJvd2VyLCBbW0VudW1lcmFibGVdXTogZmFsc2UsIFtbQ29uZmlndXJhYmxlXV06IGZhbHNlfSwgYW5kXG4gICAgICAgICAgICAvLyAgIGZhbHNlLlxuICAgICAgICAgICAgLy8gMjEuIENhbGwgdGhlIFtbRGVmaW5lT3duUHJvcGVydHldXSBpbnRlcm5hbCBtZXRob2Qgb2YgRiB3aXRoXG4gICAgICAgICAgICAvLyAgIGFyZ3VtZW50cyBcImFyZ3VtZW50c1wiLCBQcm9wZXJ0eURlc2NyaXB0b3Ige1tbR2V0XV06IHRocm93ZXIsXG4gICAgICAgICAgICAvLyAgIFtbU2V0XV06IHRocm93ZXIsIFtbRW51bWVyYWJsZV1dOiBmYWxzZSwgW1tDb25maWd1cmFibGVdXTogZmFsc2V9LFxuICAgICAgICAgICAgLy8gICBhbmQgZmFsc2UuXG5cbiAgICAgICAgICAgIC8vIFRPRE9cbiAgICAgICAgICAgIC8vIE5PVEUgRnVuY3Rpb24gb2JqZWN0cyBjcmVhdGVkIHVzaW5nIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kIGRvIG5vdFxuICAgICAgICAgICAgLy8gaGF2ZSBhIHByb3RvdHlwZSBwcm9wZXJ0eSBvciB0aGUgW1tDb2RlXV0sIFtbRm9ybWFsUGFyYW1ldGVyc11dLCBhbmRcbiAgICAgICAgICAgIC8vIFtbU2NvcGVdXSBpbnRlcm5hbCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgLy8gWFhYIGNhbid0IGRlbGV0ZSBwcm90b3R5cGUgaW4gcHVyZS1qcy5cblxuICAgICAgICAgICAgLy8gMjIuIFJldHVybiBGLlxuICAgICAgICAgICAgcmV0dXJuIGJvdW5kO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBfUGxlYXNlIG5vdGU6IFNob3J0Y3V0cyBhcmUgZGVmaW5lZCBhZnRlciBgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRgIGFzIHdlXG4gICAgLy8gdXNlIGl0IGluIGRlZmluaW5nIHNob3J0Y3V0cy5cbiAgICB2YXIgb3ducyA9IGNhbGwuYmluZChPYmplY3RQcm90b3R5cGUuaGFzT3duUHJvcGVydHkpO1xuICAgIHZhciB0b1N0ciA9IGNhbGwuYmluZChPYmplY3RQcm90b3R5cGUudG9TdHJpbmcpO1xuICAgIHZhciBhcnJheVNsaWNlID0gY2FsbC5iaW5kKGFycmF5X3NsaWNlKTtcbiAgICB2YXIgYXJyYXlTbGljZUFwcGx5ID0gYXBwbHkuYmluZChhcnJheV9zbGljZSk7XG4gICAgLyogZ2xvYmFscyBkb2N1bWVudCAqL1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICdvYmplY3QnICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXJyYXlTbGljZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2hpbGROb2Rlcyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHZhciBvcmlnQXJyYXlTbGljZSA9IGFycmF5U2xpY2U7XG4gICAgICAgICAgICB2YXIgb3JpZ0FycmF5U2xpY2VBcHBseSA9IGFycmF5U2xpY2VBcHBseTtcbiAgICAgICAgICAgIGFycmF5U2xpY2UgPSBmdW5jdGlvbiBhcnJheVNsaWNlSUUoYXJyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHIgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IGFyci5sZW5ndGg7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcltpXSA9IGFycltpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdBcnJheVNsaWNlQXBwbHkociwgb3JpZ0FycmF5U2xpY2UoYXJndW1lbnRzLCAxKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYXJyYXlTbGljZUFwcGx5ID0gZnVuY3Rpb24gYXJyYXlTbGljZUFwcGx5SUUoYXJyLCBhcmdzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdBcnJheVNsaWNlQXBwbHkoYXJyYXlTbGljZShhcnIpLCBhcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHN0clNsaWNlID0gY2FsbC5iaW5kKFN0cmluZ1Byb3RvdHlwZS5zbGljZSk7XG4gICAgdmFyIHN0clNwbGl0ID0gY2FsbC5iaW5kKFN0cmluZ1Byb3RvdHlwZS5zcGxpdCk7XG4gICAgdmFyIHN0ckluZGV4T2YgPSBjYWxsLmJpbmQoU3RyaW5nUHJvdG90eXBlLmluZGV4T2YpO1xuICAgIHZhciBwdXNoQ2FsbCA9IGNhbGwuYmluZChhcnJheV9wdXNoKTtcbiAgICB2YXIgaXNFbnVtID0gY2FsbC5iaW5kKE9iamVjdFByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZSk7XG4gICAgdmFyIGFycmF5U29ydCA9IGNhbGwuYmluZChBcnJheVByb3RvdHlwZS5zb3J0KTtcblxuICAgIC8vXG4gICAgLy8gQXJyYXlcbiAgICAvLyA9PT09PVxuICAgIC8vXG5cbiAgICB2YXIgaXNBcnJheSA9ICRBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkob2JqKSB7XG4gICAgICAgIHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgIH07XG5cbiAgICAvLyBFUzUgMTUuNC40LjEyXG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuNC40LjEzXG4gICAgLy8gUmV0dXJuIGxlbithcmdDb3VudC5cbiAgICAvLyBbYnVnZml4LCBpZWx0OF1cbiAgICAvLyBJRSA8IDggYnVnOiBbXS51bnNoaWZ0KDApID09PSB1bmRlZmluZWQgYnV0IHNob3VsZCBiZSBcIjFcIlxuICAgIHZhciBoYXNVbnNoaWZ0UmV0dXJuVmFsdWVCdWcgPSBbXS51bnNoaWZ0KDApICE9PSAxO1xuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgdW5zaGlmdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYXJyYXlfdW5zaGlmdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgfSwgaGFzVW5zaGlmdFJldHVyblZhbHVlQnVnKTtcblxuICAgIC8vIEVTNSAxNS40LjMuMlxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuMy4yXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvaXNBcnJheVxuICAgIGRlZmluZVByb3BlcnRpZXMoJEFycmF5LCB7IGlzQXJyYXk6IGlzQXJyYXkgfSk7XG5cbiAgICAvLyBUaGUgSXNDYWxsYWJsZSgpIGNoZWNrIGluIHRoZSBBcnJheSBmdW5jdGlvbnNcbiAgICAvLyBoYXMgYmVlbiByZXBsYWNlZCB3aXRoIGEgc3RyaWN0IGNoZWNrIG9uIHRoZVxuICAgIC8vIGludGVybmFsIGNsYXNzIG9mIHRoZSBvYmplY3QgdG8gdHJhcCBjYXNlcyB3aGVyZVxuICAgIC8vIHRoZSBwcm92aWRlZCBmdW5jdGlvbiB3YXMgYWN0dWFsbHkgYSByZWd1bGFyXG4gICAgLy8gZXhwcmVzc2lvbiBsaXRlcmFsLCB3aGljaCBpbiBWOCBhbmRcbiAgICAvLyBKYXZhU2NyaXB0Q29yZSBpcyBhIHR5cGVvZiBcImZ1bmN0aW9uXCIuICBPbmx5IGluXG4gICAgLy8gVjggYXJlIHJlZ3VsYXIgZXhwcmVzc2lvbiBsaXRlcmFscyBwZXJtaXR0ZWQgYXNcbiAgICAvLyByZWR1Y2UgcGFyYW1ldGVycywgc28gaXQgaXMgZGVzaXJhYmxlIGluIHRoZVxuICAgIC8vIGdlbmVyYWwgY2FzZSBmb3IgdGhlIHNoaW0gdG8gbWF0Y2ggdGhlIG1vcmVcbiAgICAvLyBzdHJpY3QgYW5kIGNvbW1vbiBiZWhhdmlvciBvZiByZWplY3RpbmcgcmVndWxhclxuICAgIC8vIGV4cHJlc3Npb25zLlxuXG4gICAgLy8gRVM1IDE1LjQuNC4xOFxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuNC4xOFxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL2FycmF5L2ZvckVhY2hcblxuICAgIC8vIENoZWNrIGZhaWx1cmUgb2YgYnktaW5kZXggYWNjZXNzIG9mIHN0cmluZyBjaGFyYWN0ZXJzIChJRSA8IDkpXG4gICAgLy8gYW5kIGZhaWx1cmUgb2YgYDAgaW4gYm94ZWRTdHJpbmdgIChSaGlubylcbiAgICB2YXIgYm94ZWRTdHJpbmcgPSAkT2JqZWN0KCdhJyk7XG4gICAgdmFyIHNwbGl0U3RyaW5nID0gYm94ZWRTdHJpbmdbMF0gIT09ICdhJyB8fCAhKDAgaW4gYm94ZWRTdHJpbmcpO1xuXG4gICAgdmFyIHByb3Blcmx5Qm94ZXNDb250ZXh0ID0gZnVuY3Rpb24gcHJvcGVybHlCb3hlZChtZXRob2QpIHtcbiAgICAgICAgLy8gQ2hlY2sgbm9kZSAwLjYuMjEgYnVnIHdoZXJlIHRoaXJkIHBhcmFtZXRlciBpcyBub3QgYm94ZWRcbiAgICAgICAgdmFyIHByb3Blcmx5Qm94ZXNOb25TdHJpY3QgPSB0cnVlO1xuICAgICAgICB2YXIgcHJvcGVybHlCb3hlc1N0cmljdCA9IHRydWU7XG4gICAgICAgIHZhciB0aHJld0V4Y2VwdGlvbiA9IGZhbHNlO1xuICAgICAgICBpZiAobWV0aG9kKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG1ldGhvZC5jYWxsKCdmb28nLCBmdW5jdGlvbiAoXywgX18sIGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZXh0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVybHlCb3hlc05vblN0cmljdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBtZXRob2QuY2FsbChbMV0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgICAgICAgICAgICAgICAgIHByb3Blcmx5Qm94ZXNTdHJpY3QgPSB0eXBlb2YgdGhpcyA9PT0gJ3N0cmluZyc7XG4gICAgICAgICAgICAgICAgfSwgJ3gnKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB0aHJld0V4Y2VwdGlvbiA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICEhbWV0aG9kICYmICF0aHJld0V4Y2VwdGlvbiAmJiBwcm9wZXJseUJveGVzTm9uU3RyaWN0ICYmIHByb3Blcmx5Qm94ZXNTdHJpY3Q7XG4gICAgfTtcblxuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuLyosIHRoaXNBcmcqLykge1xuICAgICAgICAgICAgdmFyIG9iamVjdCA9IEVTLlRvT2JqZWN0KHRoaXMpO1xuICAgICAgICAgICAgdmFyIHNlbGYgPSBzcGxpdFN0cmluZyAmJiBpc1N0cmluZyh0aGlzKSA/IHN0clNwbGl0KHRoaXMsICcnKSA6IG9iamVjdDtcbiAgICAgICAgICAgIHZhciBpID0gLTE7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gRVMuVG9VaW50MzIoc2VsZi5sZW5ndGgpO1xuICAgICAgICAgICAgdmFyIFQ7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBUID0gYXJndW1lbnRzWzFdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiBubyBjYWxsYmFjayBmdW5jdGlvbiBvciBpZiBjYWxsYmFjayBpcyBub3QgYSBjYWxsYWJsZSBmdW5jdGlvblxuICAgICAgICAgICAgaWYgKCFpc0NhbGxhYmxlKGNhbGxiYWNrZm4pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkucHJvdG90eXBlLmZvckVhY2ggY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdoaWxlICgrK2kgPCBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoaSBpbiBzZWxmKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEludm9rZSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gd2l0aCBjYWxsLCBwYXNzaW5nIGFyZ3VtZW50czpcbiAgICAgICAgICAgICAgICAgICAgLy8gY29udGV4dCwgcHJvcGVydHkgdmFsdWUsIHByb3BlcnR5IGtleSwgdGhpc0FyZyBvYmplY3RcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBUID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tmbihzZWxmW2ldLCBpLCBvYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tmbi5jYWxsKFQsIHNlbGZbaV0sIGksIG9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCAhcHJvcGVybHlCb3hlc0NvbnRleHQoQXJyYXlQcm90b3R5cGUuZm9yRWFjaCkpO1xuXG4gICAgLy8gRVM1IDE1LjQuNC4xOVxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuNC4xOVxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0NvcmVfSmF2YVNjcmlwdF8xLjVfUmVmZXJlbmNlL09iamVjdHMvQXJyYXkvbWFwXG4gICAgZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwge1xuICAgICAgICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuLyosIHRoaXNBcmcqLykge1xuICAgICAgICAgICAgdmFyIG9iamVjdCA9IEVTLlRvT2JqZWN0KHRoaXMpO1xuICAgICAgICAgICAgdmFyIHNlbGYgPSBzcGxpdFN0cmluZyAmJiBpc1N0cmluZyh0aGlzKSA/IHN0clNwbGl0KHRoaXMsICcnKSA6IG9iamVjdDtcbiAgICAgICAgICAgIHZhciBsZW5ndGggPSBFUy5Ub1VpbnQzMihzZWxmLmxlbmd0aCk7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gJEFycmF5KGxlbmd0aCk7XG4gICAgICAgICAgICB2YXIgVDtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIFQgPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIG5vIGNhbGxiYWNrIGZ1bmN0aW9uIG9yIGlmIGNhbGxiYWNrIGlzIG5vdCBhIGNhbGxhYmxlIGZ1bmN0aW9uXG4gICAgICAgICAgICBpZiAoIWlzQ2FsbGFibGUoY2FsbGJhY2tmbikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5wcm90b3R5cGUubWFwIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgaW4gc2VsZikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIFQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbaV0gPSBjYWxsYmFja2ZuKHNlbGZbaV0sIGksIG9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbaV0gPSBjYWxsYmFja2ZuLmNhbGwoVCwgc2VsZltpXSwgaSwgb2JqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9LCAhcHJvcGVybHlCb3hlc0NvbnRleHQoQXJyYXlQcm90b3R5cGUubWFwKSk7XG5cbiAgICAvLyBFUzUgMTUuNC40LjIwXG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuNC40LjIwXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vQ29yZV9KYXZhU2NyaXB0XzEuNV9SZWZlcmVuY2UvT2JqZWN0cy9BcnJheS9maWx0ZXJcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgICAgIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4vKiwgdGhpc0FyZyovKSB7XG4gICAgICAgICAgICB2YXIgb2JqZWN0ID0gRVMuVG9PYmplY3QodGhpcyk7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHNwbGl0U3RyaW5nICYmIGlzU3RyaW5nKHRoaXMpID8gc3RyU3BsaXQodGhpcywgJycpIDogb2JqZWN0O1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IEVTLlRvVWludDMyKHNlbGYubGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgIHZhciBUO1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgVCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgbm8gY2FsbGJhY2sgZnVuY3Rpb24gb3IgaWYgY2FsbGJhY2sgaXMgbm90IGEgY2FsbGFibGUgZnVuY3Rpb25cbiAgICAgICAgICAgIGlmICghaXNDYWxsYWJsZShjYWxsYmFja2ZuKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5LnByb3RvdHlwZS5maWx0ZXIgY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSBpbiBzZWxmKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gc2VsZltpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBUID09PSAndW5kZWZpbmVkJyA/IGNhbGxiYWNrZm4odmFsdWUsIGksIG9iamVjdCkgOiBjYWxsYmFja2ZuLmNhbGwoVCwgdmFsdWUsIGksIG9iamVjdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHB1c2hDYWxsKHJlc3VsdCwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH0sICFwcm9wZXJseUJveGVzQ29udGV4dChBcnJheVByb3RvdHlwZS5maWx0ZXIpKTtcblxuICAgIC8vIEVTNSAxNS40LjQuMTZcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS40LjQuMTZcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9ldmVyeVxuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4vKiwgdGhpc0FyZyovKSB7XG4gICAgICAgICAgICB2YXIgb2JqZWN0ID0gRVMuVG9PYmplY3QodGhpcyk7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHNwbGl0U3RyaW5nICYmIGlzU3RyaW5nKHRoaXMpID8gc3RyU3BsaXQodGhpcywgJycpIDogb2JqZWN0O1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IEVTLlRvVWludDMyKHNlbGYubGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciBUO1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgVCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgbm8gY2FsbGJhY2sgZnVuY3Rpb24gb3IgaWYgY2FsbGJhY2sgaXMgbm90IGEgY2FsbGFibGUgZnVuY3Rpb25cbiAgICAgICAgICAgIGlmICghaXNDYWxsYWJsZShjYWxsYmFja2ZuKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5LnByb3RvdHlwZS5ldmVyeSBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpIGluIHNlbGYgJiYgISh0eXBlb2YgVCA9PT0gJ3VuZGVmaW5lZCcgPyBjYWxsYmFja2ZuKHNlbGZbaV0sIGksIG9iamVjdCkgOiBjYWxsYmFja2ZuLmNhbGwoVCwgc2VsZltpXSwgaSwgb2JqZWN0KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfSwgIXByb3Blcmx5Qm94ZXNDb250ZXh0KEFycmF5UHJvdG90eXBlLmV2ZXJ5KSk7XG5cbiAgICAvLyBFUzUgMTUuNC40LjE3XG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuNC40LjE3XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvc29tZVxuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuLyosIHRoaXNBcmcgKi8pIHtcbiAgICAgICAgICAgIHZhciBvYmplY3QgPSBFUy5Ub09iamVjdCh0aGlzKTtcbiAgICAgICAgICAgIHZhciBzZWxmID0gc3BsaXRTdHJpbmcgJiYgaXNTdHJpbmcodGhpcykgPyBzdHJTcGxpdCh0aGlzLCAnJykgOiBvYmplY3Q7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gRVMuVG9VaW50MzIoc2VsZi5sZW5ndGgpO1xuICAgICAgICAgICAgdmFyIFQ7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBUID0gYXJndW1lbnRzWzFdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiBubyBjYWxsYmFjayBmdW5jdGlvbiBvciBpZiBjYWxsYmFjayBpcyBub3QgYSBjYWxsYWJsZSBmdW5jdGlvblxuICAgICAgICAgICAgaWYgKCFpc0NhbGxhYmxlKGNhbGxiYWNrZm4pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkucHJvdG90eXBlLnNvbWUgY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSBpbiBzZWxmICYmICh0eXBlb2YgVCA9PT0gJ3VuZGVmaW5lZCcgPyBjYWxsYmFja2ZuKHNlbGZbaV0sIGksIG9iamVjdCkgOiBjYWxsYmFja2ZuLmNhbGwoVCwgc2VsZltpXSwgaSwgb2JqZWN0KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSwgIXByb3Blcmx5Qm94ZXNDb250ZXh0KEFycmF5UHJvdG90eXBlLnNvbWUpKTtcblxuICAgIC8vIEVTNSAxNS40LjQuMjFcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS40LjQuMjFcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9Db3JlX0phdmFTY3JpcHRfMS41X1JlZmVyZW5jZS9PYmplY3RzL0FycmF5L3JlZHVjZVxuICAgIHZhciByZWR1Y2VDb2VyY2VzVG9PYmplY3QgPSBmYWxzZTtcbiAgICBpZiAoQXJyYXlQcm90b3R5cGUucmVkdWNlKSB7XG4gICAgICAgIHJlZHVjZUNvZXJjZXNUb09iamVjdCA9IHR5cGVvZiBBcnJheVByb3RvdHlwZS5yZWR1Y2UuY2FsbCgnZXM1JywgZnVuY3Rpb24gKF8sIF9fLCBfX18sIGxpc3QpIHtcbiAgICAgICAgICAgIHJldHVybiBsaXN0O1xuICAgICAgICB9KSA9PT0gJ29iamVjdCc7XG4gICAgfVxuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbi8qLCBpbml0aWFsVmFsdWUqLykge1xuICAgICAgICAgICAgdmFyIG9iamVjdCA9IEVTLlRvT2JqZWN0KHRoaXMpO1xuICAgICAgICAgICAgdmFyIHNlbGYgPSBzcGxpdFN0cmluZyAmJiBpc1N0cmluZyh0aGlzKSA/IHN0clNwbGl0KHRoaXMsICcnKSA6IG9iamVjdDtcbiAgICAgICAgICAgIHZhciBsZW5ndGggPSBFUy5Ub1VpbnQzMihzZWxmLmxlbmd0aCk7XG5cbiAgICAgICAgICAgIC8vIElmIG5vIGNhbGxiYWNrIGZ1bmN0aW9uIG9yIGlmIGNhbGxiYWNrIGlzIG5vdCBhIGNhbGxhYmxlIGZ1bmN0aW9uXG4gICAgICAgICAgICBpZiAoIWlzQ2FsbGFibGUoY2FsbGJhY2tmbikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5wcm90b3R5cGUucmVkdWNlIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBubyB2YWx1ZSB0byByZXR1cm4gaWYgbm8gaW5pdGlhbCB2YWx1ZSBhbmQgYW4gZW1wdHkgYXJyYXlcbiAgICAgICAgICAgIGlmIChsZW5ndGggPT09IDAgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDIpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgaW4gc2VsZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gc2VsZltpKytdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBpZiBhcnJheSBjb250YWlucyBubyB2YWx1ZXMsIG5vIGluaXRpYWwgdmFsdWUgdG8gcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIGlmICgrK2kgPj0gbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IHdoaWxlICh0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpIGluIHNlbGYpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2tmbihyZXN1bHQsIHNlbGZbaV0sIGksIG9iamVjdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfSwgIXJlZHVjZUNvZXJjZXNUb09iamVjdCk7XG5cbiAgICAvLyBFUzUgMTUuNC40LjIyXG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuNC40LjIyXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vQ29yZV9KYXZhU2NyaXB0XzEuNV9SZWZlcmVuY2UvT2JqZWN0cy9BcnJheS9yZWR1Y2VSaWdodFxuICAgIHZhciByZWR1Y2VSaWdodENvZXJjZXNUb09iamVjdCA9IGZhbHNlO1xuICAgIGlmIChBcnJheVByb3RvdHlwZS5yZWR1Y2VSaWdodCkge1xuICAgICAgICByZWR1Y2VSaWdodENvZXJjZXNUb09iamVjdCA9IHR5cGVvZiBBcnJheVByb3RvdHlwZS5yZWR1Y2VSaWdodC5jYWxsKCdlczUnLCBmdW5jdGlvbiAoXywgX18sIF9fXywgbGlzdCkge1xuICAgICAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgICAgIH0pID09PSAnb2JqZWN0JztcbiAgICB9XG4gICAgZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwge1xuICAgICAgICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbi8qLCBpbml0aWFsKi8pIHtcbiAgICAgICAgICAgIHZhciBvYmplY3QgPSBFUy5Ub09iamVjdCh0aGlzKTtcbiAgICAgICAgICAgIHZhciBzZWxmID0gc3BsaXRTdHJpbmcgJiYgaXNTdHJpbmcodGhpcykgPyBzdHJTcGxpdCh0aGlzLCAnJykgOiBvYmplY3Q7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gRVMuVG9VaW50MzIoc2VsZi5sZW5ndGgpO1xuXG4gICAgICAgICAgICAvLyBJZiBubyBjYWxsYmFjayBmdW5jdGlvbiBvciBpZiBjYWxsYmFjayBpcyBub3QgYSBjYWxsYWJsZSBmdW5jdGlvblxuICAgICAgICAgICAgaWYgKCFpc0NhbGxhYmxlKGNhbGxiYWNrZm4pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0IGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBubyB2YWx1ZSB0byByZXR1cm4gaWYgbm8gaW5pdGlhbCB2YWx1ZSwgZW1wdHkgYXJyYXlcbiAgICAgICAgICAgIGlmIChsZW5ndGggPT09IDAgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3JlZHVjZVJpZ2h0IG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICAgICAgdmFyIGkgPSBsZW5ndGggLSAxO1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMikge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSBpbiBzZWxmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBzZWxmW2ktLV07XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIGFycmF5IGNvbnRhaW5zIG5vIHZhbHVlcywgbm8gaW5pdGlhbCB2YWx1ZSB0byByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgaWYgKC0taSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3JlZHVjZVJpZ2h0IG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSB3aGlsZSAodHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBpZiAoaSBpbiBzZWxmKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrZm4ocmVzdWx0LCBzZWxmW2ldLCBpLCBvYmplY3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKGktLSk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9LCAhcmVkdWNlUmlnaHRDb2VyY2VzVG9PYmplY3QpO1xuXG4gICAgLy8gRVM1IDE1LjQuNC4xNFxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuNC4xNFxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2luZGV4T2ZcbiAgICB2YXIgaGFzRmlyZWZveDJJbmRleE9mQnVnID0gQXJyYXlQcm90b3R5cGUuaW5kZXhPZiAmJiBbMCwgMV0uaW5kZXhPZigxLCAyKSAhPT0gLTE7XG4gICAgZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwge1xuICAgICAgICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQvKiwgZnJvbUluZGV4ICovKSB7XG4gICAgICAgICAgICB2YXIgc2VsZiA9IHNwbGl0U3RyaW5nICYmIGlzU3RyaW5nKHRoaXMpID8gc3RyU3BsaXQodGhpcywgJycpIDogRVMuVG9PYmplY3QodGhpcyk7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gRVMuVG9VaW50MzIoc2VsZi5sZW5ndGgpO1xuXG4gICAgICAgICAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBpID0gRVMuVG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGhhbmRsZSBuZWdhdGl2ZSBpbmRpY2VzXG4gICAgICAgICAgICBpID0gaSA+PSAwID8gaSA6IG1heCgwLCBsZW5ndGggKyBpKTtcbiAgICAgICAgICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSBpbiBzZWxmICYmIHNlbGZbaV0gPT09IHNlYXJjaEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgfSwgaGFzRmlyZWZveDJJbmRleE9mQnVnKTtcblxuICAgIC8vIEVTNSAxNS40LjQuMTVcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS40LjQuMTVcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9sYXN0SW5kZXhPZlxuICAgIHZhciBoYXNGaXJlZm94Mkxhc3RJbmRleE9mQnVnID0gQXJyYXlQcm90b3R5cGUubGFzdEluZGV4T2YgJiYgWzAsIDFdLmxhc3RJbmRleE9mKDAsIC0zKSAhPT0gLTE7XG4gICAgZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwge1xuICAgICAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudC8qLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgICAgICAgIHZhciBzZWxmID0gc3BsaXRTdHJpbmcgJiYgaXNTdHJpbmcodGhpcykgPyBzdHJTcGxpdCh0aGlzLCAnJykgOiBFUy5Ub09iamVjdCh0aGlzKTtcbiAgICAgICAgICAgIHZhciBsZW5ndGggPSBFUy5Ub1VpbnQzMihzZWxmLmxlbmd0aCk7XG5cbiAgICAgICAgICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaSA9IGxlbmd0aCAtIDE7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBpID0gbWluKGksIEVTLlRvSW50ZWdlcihhcmd1bWVudHNbMV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGhhbmRsZSBuZWdhdGl2ZSBpbmRpY2VzXG4gICAgICAgICAgICBpID0gaSA+PSAwID8gaSA6IGxlbmd0aCAtIE1hdGguYWJzKGkpO1xuICAgICAgICAgICAgZm9yICg7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgaW4gc2VsZiAmJiBzZWFyY2hFbGVtZW50ID09PSBzZWxmW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgIH0sIGhhc0ZpcmVmb3gyTGFzdEluZGV4T2ZCdWcpO1xuXG4gICAgLy8gRVM1IDE1LjQuNC4xMlxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuNC4xMlxuICAgIHZhciBzcGxpY2VOb29wUmV0dXJuc0VtcHR5QXJyYXkgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYSA9IFsxLCAyXTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGEuc3BsaWNlKCk7XG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gMiAmJiBpc0FycmF5KHJlc3VsdCkgJiYgcmVzdWx0Lmxlbmd0aCA9PT0gMDtcbiAgICB9KCkpO1xuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgLy8gU2FmYXJpIDUuMCBidWcgd2hlcmUgLnNwbGljZSgpIHJldHVybnMgdW5kZWZpbmVkXG4gICAgICAgIHNwbGljZTogZnVuY3Rpb24gc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCkge1xuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBhcnJheV9zcGxpY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sICFzcGxpY2VOb29wUmV0dXJuc0VtcHR5QXJyYXkpO1xuXG4gICAgdmFyIHNwbGljZVdvcmtzV2l0aEVtcHR5T2JqZWN0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9iaiA9IHt9O1xuICAgICAgICBBcnJheVByb3RvdHlwZS5zcGxpY2UuY2FsbChvYmosIDAsIDAsIDEpO1xuICAgICAgICByZXR1cm4gb2JqLmxlbmd0aCA9PT0gMTtcbiAgICB9KCkpO1xuICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgc3BsaWNlOiBmdW5jdGlvbiBzcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50KSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgdGhpcy5sZW5ndGggPSBtYXgoRVMuVG9JbnRlZ2VyKHRoaXMubGVuZ3RoKSwgMCk7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIGRlbGV0ZUNvdW50ICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIGFyZ3MgPSBhcnJheVNsaWNlKGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICAgICAgICBwdXNoQ2FsbChhcmdzLCB0aGlzLmxlbmd0aCAtIHN0YXJ0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhcmdzWzFdID0gRVMuVG9JbnRlZ2VyKGRlbGV0ZUNvdW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXJyYXlfc3BsaWNlLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgfSwgIXNwbGljZVdvcmtzV2l0aEVtcHR5T2JqZWN0KTtcbiAgICB2YXIgc3BsaWNlV29ya3NXaXRoTGFyZ2VTcGFyc2VBcnJheXMgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBQZXIgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8yOTVcbiAgICAgICAgLy8gU2FmYXJpIDcvOCBicmVha3Mgd2l0aCBzcGFyc2UgYXJyYXlzIG9mIHNpemUgMWU1IG9yIGdyZWF0ZXJcbiAgICAgICAgdmFyIGFyciA9IG5ldyAkQXJyYXkoMWU1KTtcbiAgICAgICAgLy8gbm90ZTogdGhlIGluZGV4IE1VU1QgYmUgOCBvciBsYXJnZXIgb3IgdGhlIHRlc3Qgd2lsbCBmYWxzZSBwYXNzXG4gICAgICAgIGFycls4XSA9ICd4JztcbiAgICAgICAgYXJyLnNwbGljZSgxLCAxKTtcbiAgICAgICAgLy8gbm90ZTogdGhpcyB0ZXN0IG11c3QgYmUgZGVmaW5lZCAqYWZ0ZXIqIHRoZSBpbmRleE9mIHNoaW1cbiAgICAgICAgLy8gcGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMzEzXG4gICAgICAgIHJldHVybiBhcnIuaW5kZXhPZigneCcpID09PSA3O1xuICAgIH0oKSk7XG4gICAgdmFyIHNwbGljZVdvcmtzV2l0aFNtYWxsU3BhcnNlQXJyYXlzID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gUGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMjk1XG4gICAgICAgIC8vIE9wZXJhIDEyLjE1IGJyZWFrcyBvbiB0aGlzLCBubyBpZGVhIHdoeS5cbiAgICAgICAgdmFyIG4gPSAyNTY7XG4gICAgICAgIHZhciBhcnIgPSBbXTtcbiAgICAgICAgYXJyW25dID0gJ2EnO1xuICAgICAgICBhcnIuc3BsaWNlKG4gKyAxLCAwLCAnYicpO1xuICAgICAgICByZXR1cm4gYXJyW25dID09PSAnYSc7XG4gICAgfSgpKTtcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgICAgIHNwbGljZTogZnVuY3Rpb24gc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCkge1xuICAgICAgICAgICAgdmFyIE8gPSBFUy5Ub09iamVjdCh0aGlzKTtcbiAgICAgICAgICAgIHZhciBBID0gW107XG4gICAgICAgICAgICB2YXIgbGVuID0gRVMuVG9VaW50MzIoTy5sZW5ndGgpO1xuICAgICAgICAgICAgdmFyIHJlbGF0aXZlU3RhcnQgPSBFUy5Ub0ludGVnZXIoc3RhcnQpO1xuICAgICAgICAgICAgdmFyIGFjdHVhbFN0YXJ0ID0gcmVsYXRpdmVTdGFydCA8IDAgPyBtYXgoKGxlbiArIHJlbGF0aXZlU3RhcnQpLCAwKSA6IG1pbihyZWxhdGl2ZVN0YXJ0LCBsZW4pO1xuICAgICAgICAgICAgdmFyIGFjdHVhbERlbGV0ZUNvdW50ID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMFxuICAgICAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgICAgIDogYXJndW1lbnRzLmxlbmd0aCA9PT0gMVxuICAgICAgICAgICAgICAgICAgICA/IGxlbiAtIGFjdHVhbFN0YXJ0XG4gICAgICAgICAgICAgICAgICAgIDogbWluKG1heChFUy5Ub0ludGVnZXIoZGVsZXRlQ291bnQpLCAwKSwgbGVuIC0gYWN0dWFsU3RhcnQpO1xuXG4gICAgICAgICAgICB2YXIgayA9IDA7XG4gICAgICAgICAgICB2YXIgZnJvbTtcbiAgICAgICAgICAgIHdoaWxlIChrIDwgYWN0dWFsRGVsZXRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICBmcm9tID0gJFN0cmluZyhhY3R1YWxTdGFydCArIGspO1xuICAgICAgICAgICAgICAgIGlmIChvd25zKE8sIGZyb20pKSB7XG4gICAgICAgICAgICAgICAgICAgIEFba10gPSBPW2Zyb21dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBrICs9IDE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBpdGVtcyA9IGFycmF5U2xpY2UoYXJndW1lbnRzLCAyKTtcbiAgICAgICAgICAgIHZhciBpdGVtQ291bnQgPSBpdGVtcy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgdG87XG4gICAgICAgICAgICBpZiAoaXRlbUNvdW50IDwgYWN0dWFsRGVsZXRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICBrID0gYWN0dWFsU3RhcnQ7XG4gICAgICAgICAgICAgICAgdmFyIG1heEsgPSBsZW4gLSBhY3R1YWxEZWxldGVDb3VudDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoayA8IG1heEspIHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbSA9ICRTdHJpbmcoayArIGFjdHVhbERlbGV0ZUNvdW50KTtcbiAgICAgICAgICAgICAgICAgICAgdG8gPSAkU3RyaW5nKGsgKyBpdGVtQ291bnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3ducyhPLCBmcm9tKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgT1t0b10gPSBPW2Zyb21dO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIE9bdG9dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGsgKz0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgayA9IGxlbjtcbiAgICAgICAgICAgICAgICB2YXIgbWluSyA9IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50ICsgaXRlbUNvdW50O1xuICAgICAgICAgICAgICAgIHdoaWxlIChrID4gbWluSykge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgT1trIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIGsgLT0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW1Db3VudCA+IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgayA9IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50O1xuICAgICAgICAgICAgICAgIHdoaWxlIChrID4gYWN0dWFsU3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbSA9ICRTdHJpbmcoayArIGFjdHVhbERlbGV0ZUNvdW50IC0gMSk7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gJFN0cmluZyhrICsgaXRlbUNvdW50IC0gMSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvd25zKE8sIGZyb20pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBPW3RvXSA9IE9bZnJvbV07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgT1t0b107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgayAtPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGsgPSBhY3R1YWxTdGFydDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBPW2tdID0gaXRlbXNbaV07XG4gICAgICAgICAgICAgICAgayArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgTy5sZW5ndGggPSBsZW4gLSBhY3R1YWxEZWxldGVDb3VudCArIGl0ZW1Db3VudDtcblxuICAgICAgICAgICAgcmV0dXJuIEE7XG4gICAgICAgIH1cbiAgICB9LCAhc3BsaWNlV29ya3NXaXRoTGFyZ2VTcGFyc2VBcnJheXMgfHwgIXNwbGljZVdvcmtzV2l0aFNtYWxsU3BhcnNlQXJyYXlzKTtcblxuICAgIHZhciBvcmlnaW5hbEpvaW4gPSBBcnJheVByb3RvdHlwZS5qb2luO1xuICAgIHZhciBoYXNTdHJpbmdKb2luQnVnO1xuICAgIHRyeSB7XG4gICAgICAgIGhhc1N0cmluZ0pvaW5CdWcgPSBBcnJheS5wcm90b3R5cGUuam9pbi5jYWxsKCcxMjMnLCAnLCcpICE9PSAnMSwyLDMnO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaGFzU3RyaW5nSm9pbkJ1ZyA9IHRydWU7XG4gICAgfVxuICAgIGlmIChoYXNTdHJpbmdKb2luQnVnKSB7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXMoQXJyYXlQcm90b3R5cGUsIHtcbiAgICAgICAgICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlcCA9IHR5cGVvZiBzZXBhcmF0b3IgPT09ICd1bmRlZmluZWQnID8gJywnIDogc2VwYXJhdG9yO1xuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbEpvaW4uY2FsbChpc1N0cmluZyh0aGlzKSA/IHN0clNwbGl0KHRoaXMsICcnKSA6IHRoaXMsIHNlcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGhhc1N0cmluZ0pvaW5CdWcpO1xuICAgIH1cblxuICAgIHZhciBoYXNKb2luVW5kZWZpbmVkQnVnID0gWzEsIDJdLmpvaW4odW5kZWZpbmVkKSAhPT0gJzEsMic7XG4gICAgaWYgKGhhc0pvaW5VbmRlZmluZWRCdWcpIHtcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwge1xuICAgICAgICAgICAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VwID0gdHlwZW9mIHNlcGFyYXRvciA9PT0gJ3VuZGVmaW5lZCcgPyAnLCcgOiBzZXBhcmF0b3I7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsSm9pbi5jYWxsKHRoaXMsIHNlcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGhhc0pvaW5VbmRlZmluZWRCdWcpO1xuICAgIH1cblxuICAgIHZhciBwdXNoU2hpbSA9IGZ1bmN0aW9uIHB1c2goaXRlbSkge1xuICAgICAgICB2YXIgTyA9IEVTLlRvT2JqZWN0KHRoaXMpO1xuICAgICAgICB2YXIgbiA9IEVTLlRvVWludDMyKE8ubGVuZ3RoKTtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIE9bbiArIGldID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICB9XG4gICAgICAgIE8ubGVuZ3RoID0gbiArIGk7XG4gICAgICAgIHJldHVybiBuICsgaTtcbiAgICB9O1xuXG4gICAgdmFyIHB1c2hJc05vdEdlbmVyaWMgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb2JqID0ge307XG4gICAgICAgIHZhciByZXN1bHQgPSBBcnJheS5wcm90b3R5cGUucHVzaC5jYWxsKG9iaiwgdW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCAhPT0gMSB8fCBvYmoubGVuZ3RoICE9PSAxIHx8IHR5cGVvZiBvYmpbMF0gIT09ICd1bmRlZmluZWQnIHx8ICFvd25zKG9iaiwgMCk7XG4gICAgfSgpKTtcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgICAgIHB1c2g6IGZ1bmN0aW9uIHB1c2goaXRlbSkge1xuICAgICAgICAgICAgaWYgKGlzQXJyYXkodGhpcykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXlfcHVzaC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHB1c2hTaGltLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICB9LCBwdXNoSXNOb3RHZW5lcmljKTtcblxuICAgIC8vIFRoaXMgZml4ZXMgYSB2ZXJ5IHdlaXJkIGJ1ZyBpbiBPcGVyYSAxMC42IHdoZW4gcHVzaGluZyBgdW5kZWZpbmVkXG4gICAgdmFyIHB1c2hVbmRlZmluZWRJc1dlaXJkID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyciA9IFtdO1xuICAgICAgICB2YXIgcmVzdWx0ID0gYXJyLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCAhPT0gMSB8fCBhcnIubGVuZ3RoICE9PSAxIHx8IHR5cGVvZiBhcnJbMF0gIT09ICd1bmRlZmluZWQnIHx8ICFvd25zKGFyciwgMCk7XG4gICAgfSgpKTtcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7IHB1c2g6IHB1c2hTaGltIH0sIHB1c2hVbmRlZmluZWRJc1dlaXJkKTtcblxuICAgIC8vIEVTNSAxNS4yLjMuMTRcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjQuNC4xMFxuICAgIC8vIEZpeCBib3hlZCBzdHJpbmcgYnVnXG4gICAgZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwge1xuICAgICAgICBzbGljZTogZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgICAgIHZhciBhcnIgPSBpc1N0cmluZyh0aGlzKSA/IHN0clNwbGl0KHRoaXMsICcnKSA6IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gYXJyYXlTbGljZUFwcGx5KGFyciwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH0sIHNwbGl0U3RyaW5nKTtcblxuICAgIHZhciBzb3J0SWdub3Jlc05vbkZ1bmN0aW9ucyA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBbMSwgMl0uc29ydChudWxsKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBbMSwgMl0uc29ydCh7fSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KCkpO1xuICAgIHZhciBzb3J0VGhyb3dzT25SZWdleCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIHRoaXMgaXMgYSBwcm9ibGVtIGluIEZpcmVmb3ggNCwgaW4gd2hpY2ggYHR5cGVvZiAvYS8gPT09ICdmdW5jdGlvbidgXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBbMSwgMl0uc29ydCgvYS8pO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KCkpO1xuICAgIHZhciBzb3J0SWdub3Jlc1VuZGVmaW5lZCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGFwcGxpZXMgaW4gSUUgOCwgZm9yIG9uZS5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIFsxLCAyXS5zb3J0KHVuZGVmaW5lZCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0oKSk7XG4gICAgZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwge1xuICAgICAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVGbikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb21wYXJlRm4gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5U29ydCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNDYWxsYWJsZShjb21wYXJlRm4pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkucHJvdG90eXBlLnNvcnQgY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXJyYXlTb3J0KHRoaXMsIGNvbXBhcmVGbik7XG4gICAgICAgIH1cbiAgICB9LCBzb3J0SWdub3Jlc05vbkZ1bmN0aW9ucyB8fCAhc29ydElnbm9yZXNVbmRlZmluZWQgfHwgIXNvcnRUaHJvd3NPblJlZ2V4KTtcblxuICAgIC8vXG4gICAgLy8gT2JqZWN0XG4gICAgLy8gPT09PT09XG4gICAgLy9cblxuICAgIC8vIEVTNSAxNS4yLjMuMTRcbiAgICAvLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS4yLjMuMTRcblxuICAgIC8vIGh0dHA6Ly93aGF0dGhlaGVhZHNhaWQuY29tLzIwMTAvMTAvYS1zYWZlci1vYmplY3Qta2V5cy1jb21wYXRpYmlsaXR5LWltcGxlbWVudGF0aW9uXG4gICAgdmFyIGhhc0RvbnRFbnVtQnVnID0gIWlzRW51bSh7ICd0b1N0cmluZyc6IG51bGwgfSwgJ3RvU3RyaW5nJyk7IC8vIGpzY3M6aWdub3JlIGRpc2FsbG93UXVvdGVkS2V5c0luT2JqZWN0c1xuICAgIHZhciBoYXNQcm90b0VudW1CdWcgPSBpc0VudW0oZnVuY3Rpb24gKCkge30sICdwcm90b3R5cGUnKTtcbiAgICB2YXIgaGFzU3RyaW5nRW51bUJ1ZyA9ICFvd25zKCd4JywgJzAnKTtcbiAgICB2YXIgZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUgPSBmdW5jdGlvbiAobykge1xuICAgICAgICB2YXIgY3RvciA9IG8uY29uc3RydWN0b3I7XG4gICAgICAgIHJldHVybiBjdG9yICYmIGN0b3IucHJvdG90eXBlID09PSBvO1xuICAgIH07XG4gICAgdmFyIGV4Y2x1ZGVkS2V5cyA9IHtcbiAgICAgICAgJGFwcGxpY2F0aW9uQ2FjaGU6IHRydWUsXG4gICAgICAgICRjb25zb2xlOiB0cnVlLFxuICAgICAgICAkZXh0ZXJuYWw6IHRydWUsXG4gICAgICAgICRmcmFtZTogdHJ1ZSxcbiAgICAgICAgJGZyYW1lRWxlbWVudDogdHJ1ZSxcbiAgICAgICAgJGZyYW1lczogdHJ1ZSxcbiAgICAgICAgJGlubmVySGVpZ2h0OiB0cnVlLFxuICAgICAgICAkaW5uZXJXaWR0aDogdHJ1ZSxcbiAgICAgICAgJG9ubW96ZnVsbHNjcmVlbmNoYW5nZTogdHJ1ZSxcbiAgICAgICAgJG9ubW96ZnVsbHNjcmVlbmVycm9yOiB0cnVlLFxuICAgICAgICAkb3V0ZXJIZWlnaHQ6IHRydWUsXG4gICAgICAgICRvdXRlcldpZHRoOiB0cnVlLFxuICAgICAgICAkcGFnZVhPZmZzZXQ6IHRydWUsXG4gICAgICAgICRwYWdlWU9mZnNldDogdHJ1ZSxcbiAgICAgICAgJHBhcmVudDogdHJ1ZSxcbiAgICAgICAgJHNjcm9sbExlZnQ6IHRydWUsXG4gICAgICAgICRzY3JvbGxUb3A6IHRydWUsXG4gICAgICAgICRzY3JvbGxYOiB0cnVlLFxuICAgICAgICAkc2Nyb2xsWTogdHJ1ZSxcbiAgICAgICAgJHNlbGY6IHRydWUsXG4gICAgICAgICR3ZWJraXRJbmRleGVkREI6IHRydWUsXG4gICAgICAgICR3ZWJraXRTdG9yYWdlSW5mbzogdHJ1ZSxcbiAgICAgICAgJHdpbmRvdzogdHJ1ZSxcblxuICAgICAgICAkd2lkdGg6IHRydWUsXG4gICAgICAgICRoZWlnaHQ6IHRydWUsXG4gICAgICAgICR0b3A6IHRydWUsXG4gICAgICAgICRsb2NhbFN0b3JhZ2U6IHRydWVcbiAgICB9O1xuICAgIHZhciBoYXNBdXRvbWF0aW9uRXF1YWxpdHlCdWcgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICAvKiBnbG9iYWxzIHdpbmRvdyAqL1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBrIGluIHdpbmRvdykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIWV4Y2x1ZGVkS2V5c1snJCcgKyBrXSAmJiBvd25zKHdpbmRvdywgaykgJiYgd2luZG93W2tdICE9PSBudWxsICYmIHR5cGVvZiB3aW5kb3dba10gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKHdpbmRvd1trXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KCkpO1xuICAgIHZhciBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZUlmTm90QnVnZ3kgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyB8fCAhaGFzQXV0b21hdGlvbkVxdWFsaXR5QnVnKSB7XG4gICAgICAgICAgICByZXR1cm4gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKG9iamVjdCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIGRvbnRFbnVtcyA9IFtcbiAgICAgICAgJ3RvU3RyaW5nJyxcbiAgICAgICAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgICAgICAgJ3ZhbHVlT2YnLFxuICAgICAgICAnaGFzT3duUHJvcGVydHknLFxuICAgICAgICAnaXNQcm90b3R5cGVPZicsXG4gICAgICAgICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG4gICAgICAgICdjb25zdHJ1Y3RvcidcbiAgICBdO1xuICAgIHZhciBkb250RW51bXNMZW5ndGggPSBkb250RW51bXMubGVuZ3RoO1xuXG4gICAgLy8gdGFrZW4gZGlyZWN0bHkgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbGpoYXJiL2lzLWFyZ3VtZW50cy9ibG9iL21hc3Rlci9pbmRleC5qc1xuICAgIC8vIGNhbiBiZSByZXBsYWNlZCB3aXRoIHJlcXVpcmUoJ2lzLWFyZ3VtZW50cycpIGlmIHdlIGV2ZXIgdXNlIGEgYnVpbGQgcHJvY2VzcyBpbnN0ZWFkXG4gICAgdmFyIGlzU3RhbmRhcmRBcmd1bWVudHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdG9TdHIodmFsdWUpID09PSAnW29iamVjdCBBcmd1bWVudHNdJztcbiAgICB9O1xuICAgIHZhciBpc0xlZ2FjeUFyZ3VtZW50cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbFxuICAgICAgICAgICAgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0J1xuICAgICAgICAgICAgJiYgdHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ251bWJlcidcbiAgICAgICAgICAgICYmIHZhbHVlLmxlbmd0aCA+PSAwXG4gICAgICAgICAgICAmJiAhaXNBcnJheSh2YWx1ZSlcbiAgICAgICAgICAgICYmIGlzQ2FsbGFibGUodmFsdWUuY2FsbGVlKTtcbiAgICB9O1xuICAgIHZhciBpc0FyZ3VtZW50cyA9IGlzU3RhbmRhcmRBcmd1bWVudHMoYXJndW1lbnRzKSA/IGlzU3RhbmRhcmRBcmd1bWVudHMgOiBpc0xlZ2FjeUFyZ3VtZW50cztcblxuICAgIGRlZmluZVByb3BlcnRpZXMoJE9iamVjdCwge1xuICAgICAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICAgICAgICAgICAgdmFyIGlzRm4gPSBpc0NhbGxhYmxlKG9iamVjdCk7XG4gICAgICAgICAgICB2YXIgaXNBcmdzID0gaXNBcmd1bWVudHMob2JqZWN0KTtcbiAgICAgICAgICAgIHZhciBpc09iamVjdCA9IG9iamVjdCAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JztcbiAgICAgICAgICAgIHZhciBpc1N0ciA9IGlzT2JqZWN0ICYmIGlzU3RyaW5nKG9iamVjdCk7XG5cbiAgICAgICAgICAgIGlmICghaXNPYmplY3QgJiYgIWlzRm4gJiYgIWlzQXJncykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5rZXlzIGNhbGxlZCBvbiBhIG5vbi1vYmplY3QnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHRoZUtleXMgPSBbXTtcbiAgICAgICAgICAgIHZhciBza2lwUHJvdG8gPSBoYXNQcm90b0VudW1CdWcgJiYgaXNGbjtcbiAgICAgICAgICAgIGlmICgoaXNTdHIgJiYgaGFzU3RyaW5nRW51bUJ1ZykgfHwgaXNBcmdzKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmplY3QubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgcHVzaENhbGwodGhlS2V5cywgJFN0cmluZyhpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWlzQXJncykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIG5hbWUgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHNraXBQcm90byAmJiBuYW1lID09PSAncHJvdG90eXBlJykgJiYgb3ducyhvYmplY3QsIG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwdXNoQ2FsbCh0aGVLZXlzLCAkU3RyaW5nKG5hbWUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGhhc0RvbnRFbnVtQnVnKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNraXBDb25zdHJ1Y3RvciA9IGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlSWZOb3RCdWdneShvYmplY3QpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZG9udEVudW1zTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRvbnRFbnVtID0gZG9udEVudW1zW2pdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShza2lwQ29uc3RydWN0b3IgJiYgZG9udEVudW0gPT09ICdjb25zdHJ1Y3RvcicpICYmIG93bnMob2JqZWN0LCBkb250RW51bSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHB1c2hDYWxsKHRoZUtleXMsIGRvbnRFbnVtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGVLZXlzO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIga2V5c1dvcmtzV2l0aEFyZ3VtZW50cyA9ICRPYmplY3Qua2V5cyAmJiAoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBTYWZhcmkgNS4wIGJ1Z1xuICAgICAgICByZXR1cm4gJE9iamVjdC5rZXlzKGFyZ3VtZW50cykubGVuZ3RoID09PSAyO1xuICAgIH0oMSwgMikpO1xuICAgIHZhciBrZXlzSGFzQXJndW1lbnRzTGVuZ3RoQnVnID0gJE9iamVjdC5rZXlzICYmIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdLZXlzID0gJE9iamVjdC5rZXlzKGFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoICE9PSAxIHx8IGFyZ0tleXMubGVuZ3RoICE9PSAxIHx8IGFyZ0tleXNbMF0gIT09IDE7XG4gICAgfSgxKSk7XG4gICAgdmFyIG9yaWdpbmFsS2V5cyA9ICRPYmplY3Qua2V5cztcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKCRPYmplY3QsIHtcbiAgICAgICAga2V5czogZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgICAgICAgICAgIGlmIChpc0FyZ3VtZW50cyhvYmplY3QpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsS2V5cyhhcnJheVNsaWNlKG9iamVjdCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxLZXlzKG9iamVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCAha2V5c1dvcmtzV2l0aEFyZ3VtZW50cyB8fCBrZXlzSGFzQXJndW1lbnRzTGVuZ3RoQnVnKTtcblxuICAgIC8vXG4gICAgLy8gRGF0ZVxuICAgIC8vID09PT1cbiAgICAvL1xuXG4gICAgdmFyIGhhc05lZ2F0aXZlTW9udGhZZWFyQnVnID0gbmV3IERhdGUoLTM1MDk4MjczMjk2MDAyOTIpLmdldFVUQ01vbnRoKCkgIT09IDA7XG4gICAgdmFyIGFOZWdhdGl2ZVRlc3REYXRlID0gbmV3IERhdGUoLTE1MDk4NDIyODk2MDAyOTIpO1xuICAgIHZhciBhUG9zaXRpdmVUZXN0RGF0ZSA9IG5ldyBEYXRlKDE0NDk2NjI0MDAwMDApO1xuICAgIHZhciBoYXNUb1VUQ1N0cmluZ0Zvcm1hdEJ1ZyA9IGFOZWdhdGl2ZVRlc3REYXRlLnRvVVRDU3RyaW5nKCkgIT09ICdNb24sIDAxIEphbiAtNDU4NzUgMTE6NTk6NTkgR01UJztcbiAgICB2YXIgaGFzVG9EYXRlU3RyaW5nRm9ybWF0QnVnO1xuICAgIHZhciBoYXNUb1N0cmluZ0Zvcm1hdEJ1ZztcbiAgICB2YXIgdGltZVpvbmVPZmZzZXQgPSBhTmVnYXRpdmVUZXN0RGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIGlmICh0aW1lWm9uZU9mZnNldCA8IC03MjApIHtcbiAgICAgICAgaGFzVG9EYXRlU3RyaW5nRm9ybWF0QnVnID0gYU5lZ2F0aXZlVGVzdERhdGUudG9EYXRlU3RyaW5nKCkgIT09ICdUdWUgSmFuIDAyIC00NTg3NSc7XG4gICAgICAgIGhhc1RvU3RyaW5nRm9ybWF0QnVnID0gISgvXlRodSBEZWMgMTAgMjAxNSBcXGRcXGQ6XFxkXFxkOlxcZFxcZCBHTVRbLStdXFxkXFxkXFxkXFxkKD86IHwkKS8pLnRlc3QoU3RyaW5nKGFQb3NpdGl2ZVRlc3REYXRlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaGFzVG9EYXRlU3RyaW5nRm9ybWF0QnVnID0gYU5lZ2F0aXZlVGVzdERhdGUudG9EYXRlU3RyaW5nKCkgIT09ICdNb24gSmFuIDAxIC00NTg3NSc7XG4gICAgICAgIGhhc1RvU3RyaW5nRm9ybWF0QnVnID0gISgvXldlZCBEZWMgMDkgMjAxNSBcXGRcXGQ6XFxkXFxkOlxcZFxcZCBHTVRbLStdXFxkXFxkXFxkXFxkKD86IHwkKS8pLnRlc3QoU3RyaW5nKGFQb3NpdGl2ZVRlc3REYXRlKSk7XG4gICAgfVxuXG4gICAgdmFyIG9yaWdpbmFsR2V0RnVsbFllYXIgPSBjYWxsLmJpbmQoRGF0ZS5wcm90b3R5cGUuZ2V0RnVsbFllYXIpO1xuICAgIHZhciBvcmlnaW5hbEdldE1vbnRoID0gY2FsbC5iaW5kKERhdGUucHJvdG90eXBlLmdldE1vbnRoKTtcbiAgICB2YXIgb3JpZ2luYWxHZXREYXRlID0gY2FsbC5iaW5kKERhdGUucHJvdG90eXBlLmdldERhdGUpO1xuICAgIHZhciBvcmlnaW5hbEdldFVUQ0Z1bGxZZWFyID0gY2FsbC5iaW5kKERhdGUucHJvdG90eXBlLmdldFVUQ0Z1bGxZZWFyKTtcbiAgICB2YXIgb3JpZ2luYWxHZXRVVENNb250aCA9IGNhbGwuYmluZChEYXRlLnByb3RvdHlwZS5nZXRVVENNb250aCk7XG4gICAgdmFyIG9yaWdpbmFsR2V0VVRDRGF0ZSA9IGNhbGwuYmluZChEYXRlLnByb3RvdHlwZS5nZXRVVENEYXRlKTtcbiAgICB2YXIgb3JpZ2luYWxHZXRVVENEYXkgPSBjYWxsLmJpbmQoRGF0ZS5wcm90b3R5cGUuZ2V0VVRDRGF5KTtcbiAgICB2YXIgb3JpZ2luYWxHZXRVVENIb3VycyA9IGNhbGwuYmluZChEYXRlLnByb3RvdHlwZS5nZXRVVENIb3Vycyk7XG4gICAgdmFyIG9yaWdpbmFsR2V0VVRDTWludXRlcyA9IGNhbGwuYmluZChEYXRlLnByb3RvdHlwZS5nZXRVVENNaW51dGVzKTtcbiAgICB2YXIgb3JpZ2luYWxHZXRVVENTZWNvbmRzID0gY2FsbC5iaW5kKERhdGUucHJvdG90eXBlLmdldFVUQ1NlY29uZHMpO1xuICAgIHZhciBvcmlnaW5hbEdldFVUQ01pbGxpc2Vjb25kcyA9IGNhbGwuYmluZChEYXRlLnByb3RvdHlwZS5nZXRVVENNaWxsaXNlY29uZHMpO1xuICAgIHZhciBkYXlOYW1lID0gWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXTtcbiAgICB2YXIgbW9udGhOYW1lID0gWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddO1xuICAgIHZhciBkYXlzSW5Nb250aCA9IGZ1bmN0aW9uIGRheXNJbk1vbnRoKG1vbnRoLCB5ZWFyKSB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbEdldERhdGUobmV3IERhdGUoeWVhciwgbW9udGgsIDApKTtcbiAgICB9O1xuXG4gICAgZGVmaW5lUHJvcGVydGllcyhEYXRlLnByb3RvdHlwZSwge1xuICAgICAgICBnZXRGdWxsWWVhcjogZnVuY3Rpb24gZ2V0RnVsbFllYXIoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMgfHwgISh0aGlzIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGlzIG5vdCBhIERhdGUgb2JqZWN0LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHllYXIgPSBvcmlnaW5hbEdldEZ1bGxZZWFyKHRoaXMpO1xuICAgICAgICAgICAgaWYgKHllYXIgPCAwICYmIG9yaWdpbmFsR2V0TW9udGgodGhpcykgPiAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB5ZWFyICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB5ZWFyO1xuICAgICAgICB9LFxuICAgICAgICBnZXRNb250aDogZnVuY3Rpb24gZ2V0TW9udGgoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMgfHwgISh0aGlzIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGlzIG5vdCBhIERhdGUgb2JqZWN0LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHllYXIgPSBvcmlnaW5hbEdldEZ1bGxZZWFyKHRoaXMpO1xuICAgICAgICAgICAgdmFyIG1vbnRoID0gb3JpZ2luYWxHZXRNb250aCh0aGlzKTtcbiAgICAgICAgICAgIGlmICh5ZWFyIDwgMCAmJiBtb250aCA+IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbW9udGg7XG4gICAgICAgIH0sXG4gICAgICAgIGdldERhdGU6IGZ1bmN0aW9uIGdldERhdGUoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMgfHwgISh0aGlzIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGlzIG5vdCBhIERhdGUgb2JqZWN0LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHllYXIgPSBvcmlnaW5hbEdldEZ1bGxZZWFyKHRoaXMpO1xuICAgICAgICAgICAgdmFyIG1vbnRoID0gb3JpZ2luYWxHZXRNb250aCh0aGlzKTtcbiAgICAgICAgICAgIHZhciBkYXRlID0gb3JpZ2luYWxHZXREYXRlKHRoaXMpO1xuICAgICAgICAgICAgaWYgKHllYXIgPCAwICYmIG1vbnRoID4gMTEpIHtcbiAgICAgICAgICAgICAgICBpZiAobW9udGggPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZGF5cyA9IGRheXNJbk1vbnRoKDAsIHllYXIgKyAxKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGRheXMgLSBkYXRlKSArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0VVRDRnVsbFllYXI6IGZ1bmN0aW9uIGdldFVUQ0Z1bGxZZWFyKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzIHx8ICEodGhpcyBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGhpcyBpcyBub3QgYSBEYXRlIG9iamVjdC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB5ZWFyID0gb3JpZ2luYWxHZXRVVENGdWxsWWVhcih0aGlzKTtcbiAgICAgICAgICAgIGlmICh5ZWFyIDwgMCAmJiBvcmlnaW5hbEdldFVUQ01vbnRoKHRoaXMpID4gMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geWVhciArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geWVhcjtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0VVRDTW9udGg6IGZ1bmN0aW9uIGdldFVUQ01vbnRoKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzIHx8ICEodGhpcyBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGhpcyBpcyBub3QgYSBEYXRlIG9iamVjdC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB5ZWFyID0gb3JpZ2luYWxHZXRVVENGdWxsWWVhcih0aGlzKTtcbiAgICAgICAgICAgIHZhciBtb250aCA9IG9yaWdpbmFsR2V0VVRDTW9udGgodGhpcyk7XG4gICAgICAgICAgICBpZiAoeWVhciA8IDAgJiYgbW9udGggPiAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1vbnRoO1xuICAgICAgICB9LFxuICAgICAgICBnZXRVVENEYXRlOiBmdW5jdGlvbiBnZXRVVENEYXRlKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzIHx8ICEodGhpcyBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGhpcyBpcyBub3QgYSBEYXRlIG9iamVjdC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB5ZWFyID0gb3JpZ2luYWxHZXRVVENGdWxsWWVhcih0aGlzKTtcbiAgICAgICAgICAgIHZhciBtb250aCA9IG9yaWdpbmFsR2V0VVRDTW9udGgodGhpcyk7XG4gICAgICAgICAgICB2YXIgZGF0ZSA9IG9yaWdpbmFsR2V0VVRDRGF0ZSh0aGlzKTtcbiAgICAgICAgICAgIGlmICh5ZWFyIDwgMCAmJiBtb250aCA+IDExKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1vbnRoID09PSAxMikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGRheXMgPSBkYXlzSW5Nb250aCgwLCB5ZWFyICsgMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChkYXlzIC0gZGF0ZSkgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgICAgIH1cbiAgICB9LCBoYXNOZWdhdGl2ZU1vbnRoWWVhckJ1Zyk7XG5cbiAgICBkZWZpbmVQcm9wZXJ0aWVzKERhdGUucHJvdG90eXBlLCB7XG4gICAgICAgIHRvVVRDU3RyaW5nOiBmdW5jdGlvbiB0b1VUQ1N0cmluZygpIHtcbiAgICAgICAgICAgIGlmICghdGhpcyB8fCAhKHRoaXMgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RoaXMgaXMgbm90IGEgRGF0ZSBvYmplY3QuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZGF5ID0gb3JpZ2luYWxHZXRVVENEYXkodGhpcyk7XG4gICAgICAgICAgICB2YXIgZGF0ZSA9IG9yaWdpbmFsR2V0VVRDRGF0ZSh0aGlzKTtcbiAgICAgICAgICAgIHZhciBtb250aCA9IG9yaWdpbmFsR2V0VVRDTW9udGgodGhpcyk7XG4gICAgICAgICAgICB2YXIgeWVhciA9IG9yaWdpbmFsR2V0VVRDRnVsbFllYXIodGhpcyk7XG4gICAgICAgICAgICB2YXIgaG91ciA9IG9yaWdpbmFsR2V0VVRDSG91cnModGhpcyk7XG4gICAgICAgICAgICB2YXIgbWludXRlID0gb3JpZ2luYWxHZXRVVENNaW51dGVzKHRoaXMpO1xuICAgICAgICAgICAgdmFyIHNlY29uZCA9IG9yaWdpbmFsR2V0VVRDU2Vjb25kcyh0aGlzKTtcbiAgICAgICAgICAgIHJldHVybiBkYXlOYW1lW2RheV0gKyAnLCAnXG4gICAgICAgICAgICAgICAgKyAoZGF0ZSA8IDEwID8gJzAnICsgZGF0ZSA6IGRhdGUpICsgJyAnXG4gICAgICAgICAgICAgICAgKyBtb250aE5hbWVbbW9udGhdICsgJyAnXG4gICAgICAgICAgICAgICAgKyB5ZWFyICsgJyAnXG4gICAgICAgICAgICAgICAgKyAoaG91ciA8IDEwID8gJzAnICsgaG91ciA6IGhvdXIpICsgJzonXG4gICAgICAgICAgICAgICAgKyAobWludXRlIDwgMTAgPyAnMCcgKyBtaW51dGUgOiBtaW51dGUpICsgJzonXG4gICAgICAgICAgICAgICAgKyAoc2Vjb25kIDwgMTAgPyAnMCcgKyBzZWNvbmQgOiBzZWNvbmQpICsgJyBHTVQnO1xuICAgICAgICB9XG4gICAgfSwgaGFzTmVnYXRpdmVNb250aFllYXJCdWcgfHwgaGFzVG9VVENTdHJpbmdGb3JtYXRCdWcpO1xuXG4gICAgLy8gT3BlcmEgMTIgaGFzIGAsYFxuICAgIGRlZmluZVByb3BlcnRpZXMoRGF0ZS5wcm90b3R5cGUsIHtcbiAgICAgICAgdG9EYXRlU3RyaW5nOiBmdW5jdGlvbiB0b0RhdGVTdHJpbmcoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMgfHwgISh0aGlzIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGlzIG5vdCBhIERhdGUgb2JqZWN0LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRheSA9IHRoaXMuZ2V0RGF5KCk7XG4gICAgICAgICAgICB2YXIgZGF0ZSA9IHRoaXMuZ2V0RGF0ZSgpO1xuICAgICAgICAgICAgdmFyIG1vbnRoID0gdGhpcy5nZXRNb250aCgpO1xuICAgICAgICAgICAgdmFyIHllYXIgPSB0aGlzLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgICByZXR1cm4gZGF5TmFtZVtkYXldICsgJyAnXG4gICAgICAgICAgICAgICAgKyBtb250aE5hbWVbbW9udGhdICsgJyAnXG4gICAgICAgICAgICAgICAgKyAoZGF0ZSA8IDEwID8gJzAnICsgZGF0ZSA6IGRhdGUpICsgJyAnXG4gICAgICAgICAgICAgICAgKyB5ZWFyO1xuICAgICAgICB9XG4gICAgfSwgaGFzTmVnYXRpdmVNb250aFllYXJCdWcgfHwgaGFzVG9EYXRlU3RyaW5nRm9ybWF0QnVnKTtcblxuICAgIC8vIGNhbid0IHVzZSBkZWZpbmVQcm9wZXJ0aWVzIGhlcmUgYmVjYXVzZSBvZiB0b1N0cmluZyBlbnVtZXJhdGlvbiBpc3N1ZSBpbiBJRSA8PSA4XG4gICAgaWYgKGhhc05lZ2F0aXZlTW9udGhZZWFyQnVnIHx8IGhhc1RvU3RyaW5nRm9ybWF0QnVnKSB7XG4gICAgICAgIERhdGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMgfHwgISh0aGlzIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGlzIG5vdCBhIERhdGUgb2JqZWN0LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRheSA9IHRoaXMuZ2V0RGF5KCk7XG4gICAgICAgICAgICB2YXIgZGF0ZSA9IHRoaXMuZ2V0RGF0ZSgpO1xuICAgICAgICAgICAgdmFyIG1vbnRoID0gdGhpcy5nZXRNb250aCgpO1xuICAgICAgICAgICAgdmFyIHllYXIgPSB0aGlzLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgICB2YXIgaG91ciA9IHRoaXMuZ2V0SG91cnMoKTtcbiAgICAgICAgICAgIHZhciBtaW51dGUgPSB0aGlzLmdldE1pbnV0ZXMoKTtcbiAgICAgICAgICAgIHZhciBzZWNvbmQgPSB0aGlzLmdldFNlY29uZHMoKTtcbiAgICAgICAgICAgIHZhciB0aW1lem9uZU9mZnNldCA9IHRoaXMuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgICAgICAgIHZhciBob3Vyc09mZnNldCA9IE1hdGguZmxvb3IoTWF0aC5hYnModGltZXpvbmVPZmZzZXQpIC8gNjApO1xuICAgICAgICAgICAgdmFyIG1pbnV0ZXNPZmZzZXQgPSBNYXRoLmZsb29yKE1hdGguYWJzKHRpbWV6b25lT2Zmc2V0KSAlIDYwKTtcbiAgICAgICAgICAgIHJldHVybiBkYXlOYW1lW2RheV0gKyAnICdcbiAgICAgICAgICAgICAgICArIG1vbnRoTmFtZVttb250aF0gKyAnICdcbiAgICAgICAgICAgICAgICArIChkYXRlIDwgMTAgPyAnMCcgKyBkYXRlIDogZGF0ZSkgKyAnICdcbiAgICAgICAgICAgICAgICArIHllYXIgKyAnICdcbiAgICAgICAgICAgICAgICArIChob3VyIDwgMTAgPyAnMCcgKyBob3VyIDogaG91cikgKyAnOidcbiAgICAgICAgICAgICAgICArIChtaW51dGUgPCAxMCA/ICcwJyArIG1pbnV0ZSA6IG1pbnV0ZSkgKyAnOidcbiAgICAgICAgICAgICAgICArIChzZWNvbmQgPCAxMCA/ICcwJyArIHNlY29uZCA6IHNlY29uZCkgKyAnIEdNVCdcbiAgICAgICAgICAgICAgICArICh0aW1lem9uZU9mZnNldCA+IDAgPyAnLScgOiAnKycpXG4gICAgICAgICAgICAgICAgKyAoaG91cnNPZmZzZXQgPCAxMCA/ICcwJyArIGhvdXJzT2Zmc2V0IDogaG91cnNPZmZzZXQpXG4gICAgICAgICAgICAgICAgKyAobWludXRlc09mZnNldCA8IDEwID8gJzAnICsgbWludXRlc09mZnNldCA6IG1pbnV0ZXNPZmZzZXQpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuICAgICAgICAgICAgJE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEYXRlLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywge1xuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBFUzUgMTUuOS41LjQzXG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuOS41LjQzXG4gICAgLy8gVGhpcyBmdW5jdGlvbiByZXR1cm5zIGEgU3RyaW5nIHZhbHVlIHJlcHJlc2VudCB0aGUgaW5zdGFuY2UgaW4gdGltZVxuICAgIC8vIHJlcHJlc2VudGVkIGJ5IHRoaXMgRGF0ZSBvYmplY3QuIFRoZSBmb3JtYXQgb2YgdGhlIFN0cmluZyBpcyB0aGUgRGF0ZSBUaW1lXG4gICAgLy8gc3RyaW5nIGZvcm1hdCBkZWZpbmVkIGluIDE1LjkuMS4xNS4gQWxsIGZpZWxkcyBhcmUgcHJlc2VudCBpbiB0aGUgU3RyaW5nLlxuICAgIC8vIFRoZSB0aW1lIHpvbmUgaXMgYWx3YXlzIFVUQywgZGVub3RlZCBieSB0aGUgc3VmZml4IFouIElmIHRoZSB0aW1lIHZhbHVlIG9mXG4gICAgLy8gdGhpcyBvYmplY3QgaXMgbm90IGEgZmluaXRlIE51bWJlciBhIFJhbmdlRXJyb3IgZXhjZXB0aW9uIGlzIHRocm93bi5cbiAgICB2YXIgbmVnYXRpdmVEYXRlID0gLTYyMTk4NzU1MjAwMDAwO1xuICAgIHZhciBuZWdhdGl2ZVllYXJTdHJpbmcgPSAnLTAwMDAwMSc7XG4gICAgdmFyIGhhc05lZ2F0aXZlRGF0ZUJ1ZyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nICYmIG5ldyBEYXRlKG5lZ2F0aXZlRGF0ZSkudG9JU09TdHJpbmcoKS5pbmRleE9mKG5lZ2F0aXZlWWVhclN0cmluZykgPT09IC0xOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG1heC1sZW5cbiAgICB2YXIgaGFzU2FmYXJpNTFEYXRlQnVnID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgJiYgbmV3IERhdGUoLTEpLnRvSVNPU3RyaW5nKCkgIT09ICcxOTY5LTEyLTMxVDIzOjU5OjU5Ljk5OVonO1xuXG4gICAgdmFyIGdldFRpbWUgPSBjYWxsLmJpbmQoRGF0ZS5wcm90b3R5cGUuZ2V0VGltZSk7XG5cbiAgICBkZWZpbmVQcm9wZXJ0aWVzKERhdGUucHJvdG90eXBlLCB7XG4gICAgICAgIHRvSVNPU3RyaW5nOiBmdW5jdGlvbiB0b0lTT1N0cmluZygpIHtcbiAgICAgICAgICAgIGlmICghaXNGaW5pdGUodGhpcykgfHwgIWlzRmluaXRlKGdldFRpbWUodGhpcykpKSB7XG4gICAgICAgICAgICAgICAgLy8gQWRvcGUgUGhvdG9zaG9wIHJlcXVpcmVzIHRoZSBzZWNvbmQgY2hlY2suXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0RhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nIGNhbGxlZCBvbiBub24tZmluaXRlIHZhbHVlLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgeWVhciA9IG9yaWdpbmFsR2V0VVRDRnVsbFllYXIodGhpcyk7XG5cbiAgICAgICAgICAgIHZhciBtb250aCA9IG9yaWdpbmFsR2V0VVRDTW9udGgodGhpcyk7XG4gICAgICAgICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xMTFcbiAgICAgICAgICAgIHllYXIgKz0gTWF0aC5mbG9vcihtb250aCAvIDEyKTtcbiAgICAgICAgICAgIG1vbnRoID0gKChtb250aCAlIDEyKSArIDEyKSAlIDEyO1xuXG4gICAgICAgICAgICAvLyB0aGUgZGF0ZSB0aW1lIHN0cmluZyBmb3JtYXQgaXMgc3BlY2lmaWVkIGluIDE1LjkuMS4xNS5cbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXG4gICAgICAgICAgICAgICAgbW9udGggKyAxLFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsR2V0VVRDRGF0ZSh0aGlzKSxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEdldFVUQ0hvdXJzKHRoaXMpLFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsR2V0VVRDTWludXRlcyh0aGlzKSxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEdldFVUQ1NlY29uZHModGhpcylcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICB5ZWFyID0gKFxuICAgICAgICAgICAgICAgICh5ZWFyIDwgMCA/ICctJyA6ICh5ZWFyID4gOTk5OSA/ICcrJyA6ICcnKSlcbiAgICAgICAgICAgICAgICArIHN0clNsaWNlKCcwMDAwMCcgKyBNYXRoLmFicyh5ZWFyKSwgKDAgPD0geWVhciAmJiB5ZWFyIDw9IDk5OTkpID8gLTQgOiAtNilcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgLy8gcGFkIG1vbnRocywgZGF5cywgaG91cnMsIG1pbnV0ZXMsIGFuZCBzZWNvbmRzIHRvIGhhdmUgdHdvIGRpZ2l0cy5cbiAgICAgICAgICAgICAgICByZXN1bHRbaV0gPSBzdHJTbGljZSgnMDAnICsgcmVzdWx0W2ldLCAtMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBwYWQgbWlsbGlzZWNvbmRzIHRvIGhhdmUgdGhyZWUgZGlnaXRzLlxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICB5ZWFyICsgJy0nICsgYXJyYXlTbGljZShyZXN1bHQsIDAsIDIpLmpvaW4oJy0nKVxuICAgICAgICAgICAgICAgICsgJ1QnICsgYXJyYXlTbGljZShyZXN1bHQsIDIpLmpvaW4oJzonKSArICcuJ1xuICAgICAgICAgICAgICAgICsgc3RyU2xpY2UoJzAwMCcgKyBvcmlnaW5hbEdldFVUQ01pbGxpc2Vjb25kcyh0aGlzKSwgLTMpICsgJ1onXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfSwgaGFzTmVnYXRpdmVEYXRlQnVnIHx8IGhhc1NhZmFyaTUxRGF0ZUJ1Zyk7XG5cbiAgICAvLyBFUzUgMTUuOS41LjQ0XG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuOS41LjQ0XG4gICAgLy8gVGhpcyBmdW5jdGlvbiBwcm92aWRlcyBhIFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIERhdGUgb2JqZWN0IGZvciB1c2UgYnlcbiAgICAvLyBKU09OLnN0cmluZ2lmeSAoMTUuMTIuMykuXG4gICAgdmFyIGRhdGVUb0pTT05Jc1N1cHBvcnRlZCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gRGF0ZS5wcm90b3R5cGUudG9KU09OXG4gICAgICAgICAgICAgICAgJiYgbmV3IERhdGUoTmFOKS50b0pTT04oKSA9PT0gbnVsbFxuICAgICAgICAgICAgICAgICYmIG5ldyBEYXRlKG5lZ2F0aXZlRGF0ZSkudG9KU09OKCkuaW5kZXhPZihuZWdhdGl2ZVllYXJTdHJpbmcpICE9PSAtMVxuICAgICAgICAgICAgICAgICYmIERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHsgLy8gZ2VuZXJpY1xuICAgICAgICAgICAgICAgICAgICB0b0lTT1N0cmluZzogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9KCkpO1xuICAgIGlmICghZGF0ZVRvSlNPTklzU3VwcG9ydGVkKSB7XG4gICAgICAgIERhdGUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHtcbiAgICAgICAgICAgIC8vIFdoZW4gdGhlIHRvSlNPTiBtZXRob2QgaXMgY2FsbGVkIHdpdGggYXJndW1lbnQga2V5LCB0aGUgZm9sbG93aW5nXG4gICAgICAgICAgICAvLyBzdGVwcyBhcmUgdGFrZW46XG5cbiAgICAgICAgICAgIC8vIDEuICBMZXQgTyBiZSB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgVG9PYmplY3QsIGdpdmluZyBpdCB0aGUgdGhpc1xuICAgICAgICAgICAgLy8gdmFsdWUgYXMgaXRzIGFyZ3VtZW50LlxuICAgICAgICAgICAgLy8gMi4gTGV0IHR2IGJlIEVTLlRvUHJpbWl0aXZlKE8sIGhpbnQgTnVtYmVyKS5cbiAgICAgICAgICAgIHZhciBPID0gJE9iamVjdCh0aGlzKTtcbiAgICAgICAgICAgIHZhciB0diA9IEVTLlRvUHJpbWl0aXZlKE8pO1xuICAgICAgICAgICAgLy8gMy4gSWYgdHYgaXMgYSBOdW1iZXIgYW5kIGlzIG5vdCBmaW5pdGUsIHJldHVybiBudWxsLlxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0diA9PT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHR2KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gNC4gTGV0IHRvSVNPIGJlIHRoZSByZXN1bHQgb2YgY2FsbGluZyB0aGUgW1tHZXRdXSBpbnRlcm5hbCBtZXRob2Qgb2ZcbiAgICAgICAgICAgIC8vIE8gd2l0aCBhcmd1bWVudCBcInRvSVNPU3RyaW5nXCIuXG4gICAgICAgICAgICB2YXIgdG9JU08gPSBPLnRvSVNPU3RyaW5nO1xuICAgICAgICAgICAgLy8gNS4gSWYgSXNDYWxsYWJsZSh0b0lTTykgaXMgZmFsc2UsIHRocm93IGEgVHlwZUVycm9yIGV4Y2VwdGlvbi5cbiAgICAgICAgICAgIGlmICghaXNDYWxsYWJsZSh0b0lTTykpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0b0lTT1N0cmluZyBwcm9wZXJ0eSBpcyBub3QgY2FsbGFibGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIDYuIFJldHVybiB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgdGhlIFtbQ2FsbF1dIGludGVybmFsIG1ldGhvZCBvZlxuICAgICAgICAgICAgLy8gIHRvSVNPIHdpdGggTyBhcyB0aGUgdGhpcyB2YWx1ZSBhbmQgYW4gZW1wdHkgYXJndW1lbnQgbGlzdC5cbiAgICAgICAgICAgIHJldHVybiB0b0lTTy5jYWxsKE8pO1xuXG4gICAgICAgICAgICAvLyBOT1RFIDEgVGhlIGFyZ3VtZW50IGlzIGlnbm9yZWQuXG5cbiAgICAgICAgICAgIC8vIE5PVEUgMiBUaGUgdG9KU09OIGZ1bmN0aW9uIGlzIGludGVudGlvbmFsbHkgZ2VuZXJpYzsgaXQgZG9lcyBub3RcbiAgICAgICAgICAgIC8vIHJlcXVpcmUgdGhhdCBpdHMgdGhpcyB2YWx1ZSBiZSBhIERhdGUgb2JqZWN0LiBUaGVyZWZvcmUsIGl0IGNhbiBiZVxuICAgICAgICAgICAgLy8gdHJhbnNmZXJyZWQgdG8gb3RoZXIga2luZHMgb2Ygb2JqZWN0cyBmb3IgdXNlIGFzIGEgbWV0aG9kLiBIb3dldmVyLFxuICAgICAgICAgICAgLy8gaXQgZG9lcyByZXF1aXJlIHRoYXQgYW55IHN1Y2ggb2JqZWN0IGhhdmUgYSB0b0lTT1N0cmluZyBtZXRob2QuIEFuXG4gICAgICAgICAgICAvLyBvYmplY3QgaXMgZnJlZSB0byB1c2UgdGhlIGFyZ3VtZW50IGtleSB0byBmaWx0ZXIgaXRzXG4gICAgICAgICAgICAvLyBzdHJpbmdpZmljYXRpb24uXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRVM1IDE1LjkuNC4yXG4gICAgLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuOS40LjJcbiAgICAvLyBiYXNlZCBvbiB3b3JrIHNoYXJlZCBieSBEYW5pZWwgRnJpZXNlbiAoZGFudG1hbilcbiAgICAvLyBodHRwOi8vZ2lzdC5naXRodWIuY29tLzMwMzI0OVxuICAgIHZhciBzdXBwb3J0c0V4dGVuZGVkWWVhcnMgPSBEYXRlLnBhcnNlKCcrMDMzNjU4LTA5LTI3VDAxOjQ2OjQwLjAwMFonKSA9PT0gMWUxNTtcbiAgICB2YXIgYWNjZXB0c0ludmFsaWREYXRlcyA9ICFpc05hTihEYXRlLnBhcnNlKCcyMDEyLTA0LTA0VDI0OjAwOjAwLjUwMFonKSkgfHwgIWlzTmFOKERhdGUucGFyc2UoJzIwMTItMTEtMzFUMjM6NTk6NTkuMDAwWicpKSB8fCAhaXNOYU4oRGF0ZS5wYXJzZSgnMjAxMi0xMi0zMVQyMzo1OTo2MC4wMDBaJykpO1xuICAgIHZhciBkb2VzTm90UGFyc2VZMktOZXdZZWFyID0gaXNOYU4oRGF0ZS5wYXJzZSgnMjAwMC0wMS0wMVQwMDowMDowMC4wMDBaJykpO1xuICAgIGlmIChkb2VzTm90UGFyc2VZMktOZXdZZWFyIHx8IGFjY2VwdHNJbnZhbGlkRGF0ZXMgfHwgIXN1cHBvcnRzRXh0ZW5kZWRZZWFycykge1xuICAgICAgICAvLyBYWFggZ2xvYmFsIGFzc2lnbm1lbnQgd29uJ3Qgd29yayBpbiBlbWJlZGRpbmdzIHRoYXQgdXNlXG4gICAgICAgIC8vIGFuIGFsdGVybmF0ZSBvYmplY3QgZm9yIHRoZSBjb250ZXh0LlxuICAgICAgICB2YXIgbWF4U2FmZVVuc2lnbmVkMzJCaXQgPSBNYXRoLnBvdygyLCAzMSkgLSAxO1xuICAgICAgICB2YXIgaGFzU2FmYXJpU2lnbmVkSW50QnVnID0gaXNBY3R1YWxOYU4obmV3IERhdGUoMTk3MCwgMCwgMSwgMCwgMCwgMCwgbWF4U2FmZVVuc2lnbmVkMzJCaXQgKyAxKS5nZXRUaW1lKCkpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW1wbGljaXQtZ2xvYmFscywgbm8tZ2xvYmFsLWFzc2lnblxuICAgICAgICBEYXRlID0gKGZ1bmN0aW9uIChOYXRpdmVEYXRlKSB7XG4gICAgICAgICAgICAvLyBEYXRlLmxlbmd0aCA9PT0gN1xuICAgICAgICAgICAgdmFyIERhdGVTaGltID0gZnVuY3Rpb24gRGF0ZShZLCBNLCBELCBoLCBtLCBzLCBtcykge1xuICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHZhciBkYXRlO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgTmF0aXZlRGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2Vjb25kcyA9IHM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtaWxsaXMgPSBtcztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc1NhZmFyaVNpZ25lZEludEJ1ZyAmJiBsZW5ndGggPj0gNyAmJiBtcyA+IG1heFNhZmVVbnNpZ25lZDMyQml0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3b3JrIGFyb3VuZCBhIFNhZmFyaSA4LzkgYnVnIHdoZXJlIGl0IHRyZWF0cyB0aGUgc2Vjb25kcyBhcyBzaWduZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtc1RvU2hpZnQgPSBNYXRoLmZsb29yKG1zIC8gbWF4U2FmZVVuc2lnbmVkMzJCaXQpICogbWF4U2FmZVVuc2lnbmVkMzJCaXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc1RvU2hpZnQgPSBNYXRoLmZsb29yKG1zVG9TaGlmdCAvIDFlMyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRzICs9IHNUb1NoaWZ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgbWlsbGlzIC09IHNUb1NoaWZ0ICogMWUzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRhdGUgPSBsZW5ndGggPT09IDEgJiYgJFN0cmluZyhZKSA9PT0gWSAvLyBpc1N0cmluZyhZKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgZXhwbGljaXRseSBwYXNzIGl0IHRocm91Z2ggcGFyc2U6XG4gICAgICAgICAgICAgICAgICAgICAgICA/IG5ldyBOYXRpdmVEYXRlKERhdGVTaGltLnBhcnNlKFkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSB0byBtYW51YWxseSBtYWtlIGNhbGxzIGRlcGVuZGluZyBvbiBhcmd1bWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGVuZ3RoIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbGVuZ3RoID49IDcgPyBuZXcgTmF0aXZlRGF0ZShZLCBNLCBELCBoLCBtLCBzZWNvbmRzLCBtaWxsaXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBsZW5ndGggPj0gNiA/IG5ldyBOYXRpdmVEYXRlKFksIE0sIEQsIGgsIG0sIHNlY29uZHMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbGVuZ3RoID49IDUgPyBuZXcgTmF0aXZlRGF0ZShZLCBNLCBELCBoLCBtKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBsZW5ndGggPj0gNCA/IG5ldyBOYXRpdmVEYXRlKFksIE0sIEQsIGgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBsZW5ndGggPj0gMyA/IG5ldyBOYXRpdmVEYXRlKFksIE0sIEQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbGVuZ3RoID49IDIgPyBuZXcgTmF0aXZlRGF0ZShZLCBNKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBsZW5ndGggPj0gMSA/IG5ldyBOYXRpdmVEYXRlKFkgaW5zdGFuY2VvZiBOYXRpdmVEYXRlID8gK1kgOiBZKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbmV3IE5hdGl2ZURhdGUoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkYXRlID0gTmF0aXZlRGF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWlzUHJpbWl0aXZlKGRhdGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgbWl4dXBzIHdpdGggdW5maXhlZCBEYXRlIG9iamVjdFxuICAgICAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKGRhdGUsIHsgY29uc3RydWN0b3I6IERhdGVTaGltIH0sIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIDE1LjkuMS4xNSBEYXRlIFRpbWUgU3RyaW5nIEZvcm1hdC5cbiAgICAgICAgICAgIHZhciBpc29EYXRlRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAoJ14nXG4gICAgICAgICAgICAgICAgKyAnKFxcXFxkezR9fFsrLV1cXFxcZHs2fSknIC8vIGZvdXItZGlnaXQgeWVhciBjYXB0dXJlIG9yIHNpZ24gKyA2LWRpZ2l0IGV4dGVuZGVkIHllYXJcbiAgICAgICAgICAgICAgICArICcoPzotKFxcXFxkezJ9KScgLy8gb3B0aW9uYWwgbW9udGggY2FwdHVyZVxuICAgICAgICAgICAgICAgICsgJyg/Oi0oXFxcXGR7Mn0pJyAvLyBvcHRpb25hbCBkYXkgY2FwdHVyZVxuICAgICAgICAgICAgICAgICsgJyg/OicgLy8gY2FwdHVyZSBob3VyczptaW51dGVzOnNlY29uZHMubWlsbGlzZWNvbmRzXG4gICAgICAgICAgICAgICAgICAgICsgJ1QoXFxcXGR7Mn0pJyAvLyBob3VycyBjYXB0dXJlXG4gICAgICAgICAgICAgICAgICAgICsgJzooXFxcXGR7Mn0pJyAvLyBtaW51dGVzIGNhcHR1cmVcbiAgICAgICAgICAgICAgICAgICAgKyAnKD86JyAvLyBvcHRpb25hbCA6c2Vjb25kcy5taWxsaXNlY29uZHNcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJzooXFxcXGR7Mn0pJyAvLyBzZWNvbmRzIGNhcHR1cmVcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJyg/OihcXFxcLlxcXFxkezEsfSkpPycgLy8gbWlsbGlzZWNvbmRzIGNhcHR1cmVcbiAgICAgICAgICAgICAgICAgICAgKyAnKT8nXG4gICAgICAgICAgICAgICAgKyAnKCcgLy8gY2FwdHVyZSBVVEMgb2Zmc2V0IGNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICArICdafCcgLy8gVVRDIGNhcHR1cmVcbiAgICAgICAgICAgICAgICAgICAgKyAnKD86JyAvLyBvZmZzZXQgc3BlY2lmaWVyICsvLWhvdXJzOm1pbnV0ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICsgJyhbLStdKScgLy8gc2lnbiBjYXB0dXJlXG4gICAgICAgICAgICAgICAgICAgICAgICArICcoXFxcXGR7Mn0pJyAvLyBob3VycyBvZmZzZXQgY2FwdHVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgKyAnOihcXFxcZHsyfSknIC8vIG1pbnV0ZXMgb2Zmc2V0IGNhcHR1cmVcbiAgICAgICAgICAgICAgICAgICAgKyAnKSdcbiAgICAgICAgICAgICAgICArICcpPyk/KT8pPydcbiAgICAgICAgICAgICsgJyQnKTtcblxuICAgICAgICAgICAgdmFyIG1vbnRocyA9IFswLCAzMSwgNTksIDkwLCAxMjAsIDE1MSwgMTgxLCAyMTIsIDI0MywgMjczLCAzMDQsIDMzNCwgMzY1XTtcblxuICAgICAgICAgICAgdmFyIGRheUZyb21Nb250aCA9IGZ1bmN0aW9uIGRheUZyb21Nb250aCh5ZWFyLCBtb250aCkge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gbW9udGggPiAxID8gMSA6IDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgbW9udGhzW21vbnRoXVxuICAgICAgICAgICAgICAgICAgICArIE1hdGguZmxvb3IoKHllYXIgLSAxOTY5ICsgdCkgLyA0KVxuICAgICAgICAgICAgICAgICAgICAtIE1hdGguZmxvb3IoKHllYXIgLSAxOTAxICsgdCkgLyAxMDApXG4gICAgICAgICAgICAgICAgICAgICsgTWF0aC5mbG9vcigoeWVhciAtIDE2MDEgKyB0KSAvIDQwMClcbiAgICAgICAgICAgICAgICAgICAgKyAoMzY1ICogKHllYXIgLSAxOTcwKSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIHRvVVRDID0gZnVuY3Rpb24gdG9VVEModCkge1xuICAgICAgICAgICAgICAgIHZhciBzID0gMDtcbiAgICAgICAgICAgICAgICB2YXIgbXMgPSB0O1xuICAgICAgICAgICAgICAgIGlmIChoYXNTYWZhcmlTaWduZWRJbnRCdWcgJiYgbXMgPiBtYXhTYWZlVW5zaWduZWQzMkJpdCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB3b3JrIGFyb3VuZCBhIFNhZmFyaSA4LzkgYnVnIHdoZXJlIGl0IHRyZWF0cyB0aGUgc2Vjb25kcyBhcyBzaWduZWRcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1zVG9TaGlmdCA9IE1hdGguZmxvb3IobXMgLyBtYXhTYWZlVW5zaWduZWQzMkJpdCkgKiBtYXhTYWZlVW5zaWduZWQzMkJpdDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNUb1NoaWZ0ID0gTWF0aC5mbG9vcihtc1RvU2hpZnQgLyAxZTMpO1xuICAgICAgICAgICAgICAgICAgICBzICs9IHNUb1NoaWZ0O1xuICAgICAgICAgICAgICAgICAgICBtcyAtPSBzVG9TaGlmdCAqIDFlMztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICROdW1iZXIobmV3IE5hdGl2ZURhdGUoMTk3MCwgMCwgMSwgMCwgMCwgcywgbXMpKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIENvcHkgYW55IGN1c3RvbSBtZXRob2RzIGEgM3JkIHBhcnR5IGxpYnJhcnkgbWF5IGhhdmUgYWRkZWRcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBOYXRpdmVEYXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG93bnMoTmF0aXZlRGF0ZSwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBEYXRlU2hpbVtrZXldID0gTmF0aXZlRGF0ZVtrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ29weSBcIm5hdGl2ZVwiIG1ldGhvZHMgZXhwbGljaXRseTsgdGhleSBtYXkgYmUgbm9uLWVudW1lcmFibGVcbiAgICAgICAgICAgIGRlZmluZVByb3BlcnRpZXMoRGF0ZVNoaW0sIHtcbiAgICAgICAgICAgICAgICBub3c6IE5hdGl2ZURhdGUubm93LFxuICAgICAgICAgICAgICAgIFVUQzogTmF0aXZlRGF0ZS5VVENcbiAgICAgICAgICAgIH0sIHRydWUpO1xuICAgICAgICAgICAgRGF0ZVNoaW0ucHJvdG90eXBlID0gTmF0aXZlRGF0ZS5wcm90b3R5cGU7XG4gICAgICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKERhdGVTaGltLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogRGF0ZVNoaW0gfSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIC8vIFVwZ3JhZGUgRGF0ZS5wYXJzZSB0byBoYW5kbGUgc2ltcGxpZmllZCBJU08gODYwMSBzdHJpbmdzXG4gICAgICAgICAgICB2YXIgcGFyc2VTaGltID0gZnVuY3Rpb24gcGFyc2Uoc3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gaXNvRGF0ZUV4cHJlc3Npb24uZXhlYyhzdHJpbmcpO1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBwYXJzZSBtb250aHMsIGRheXMsIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBhbmQgbWlsbGlzZWNvbmRzXG4gICAgICAgICAgICAgICAgICAgIC8vIHByb3ZpZGUgZGVmYXVsdCB2YWx1ZXMgaWYgbmVjZXNzYXJ5XG4gICAgICAgICAgICAgICAgICAgIC8vIHBhcnNlIHRoZSBVVEMgb2Zmc2V0IGNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICB2YXIgeWVhciA9ICROdW1iZXIobWF0Y2hbMV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9udGggPSAkTnVtYmVyKG1hdGNoWzJdIHx8IDEpIC0gMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRheSA9ICROdW1iZXIobWF0Y2hbM10gfHwgMSkgLSAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgaG91ciA9ICROdW1iZXIobWF0Y2hbNF0gfHwgMCksXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW51dGUgPSAkTnVtYmVyKG1hdGNoWzVdIHx8IDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kID0gJE51bWJlcihtYXRjaFs2XSB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbGxpc2Vjb25kID0gTWF0aC5mbG9vcigkTnVtYmVyKG1hdGNoWzddIHx8IDApICogMTAwMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHRpbWUgem9uZSBpcyBtaXNzZWQsIGxvY2FsIG9mZnNldCBzaG91bGQgYmUgdXNlZFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gKEVTIDUuMSBidWcpXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZWUgaHR0cHM6Ly9idWdzLmVjbWFzY3JpcHQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMTJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzTG9jYWxUaW1lID0gQm9vbGVhbihtYXRjaFs0XSAmJiAhbWF0Y2hbOF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbk9mZnNldCA9IG1hdGNoWzldID09PSAnLScgPyAxIDogLTEsXG4gICAgICAgICAgICAgICAgICAgICAgICBob3VyT2Zmc2V0ID0gJE51bWJlcihtYXRjaFsxMF0gfHwgMCksXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW51dGVPZmZzZXQgPSAkTnVtYmVyKG1hdGNoWzExXSB8fCAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhc01pbnV0ZXNPclNlY29uZHNPck1pbGxpc2Vjb25kcyA9IG1pbnV0ZSA+IDAgfHwgc2Vjb25kID4gMCB8fCBtaWxsaXNlY29uZCA+IDA7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdXIgPCAoaGFzTWludXRlc09yU2Vjb25kc09yTWlsbGlzZWNvbmRzID8gMjQgOiAyNSlcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIG1pbnV0ZSA8IDYwICYmIHNlY29uZCA8IDYwICYmIG1pbGxpc2Vjb25kIDwgMTAwMFxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgbW9udGggPiAtMSAmJiBtb250aCA8IDEyICYmIGhvdXJPZmZzZXQgPCAyNFxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgbWludXRlT2Zmc2V0IDwgNjAgLy8gZGV0ZWN0IGludmFsaWQgb2Zmc2V0c1xuICAgICAgICAgICAgICAgICAgICAgICAgJiYgZGF5ID4gLTFcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIGRheSA8IChkYXlGcm9tTW9udGgoeWVhciwgbW9udGggKyAxKSAtIGRheUZyb21Nb250aCh5ZWFyLCBtb250aCkpXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoZGF5RnJvbU1vbnRoKHllYXIsIG1vbnRoKSArIGRheSkgKiAyNClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIGhvdXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIChob3VyT2Zmc2V0ICogc2lnbk9mZnNldClcbiAgICAgICAgICAgICAgICAgICAgICAgICkgKiA2MDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9ICgoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKChyZXN1bHQgKyBtaW51dGUgKyAobWludXRlT2Zmc2V0ICogc2lnbk9mZnNldCkpICogNjApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBzZWNvbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICkgKiAxMDAwKSArIG1pbGxpc2Vjb25kO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdG9VVEMocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgtOC42NGUxNSA8PSByZXN1bHQgJiYgcmVzdWx0IDw9IDguNjRlMTUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBOYXRpdmVEYXRlLnBhcnNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZGVmaW5lUHJvcGVydGllcyhEYXRlU2hpbSwgeyBwYXJzZTogcGFyc2VTaGltIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gRGF0ZVNoaW07XG4gICAgICAgIH0oRGF0ZSkpO1xuICAgIH1cblxuICAgIC8vIEVTNSAxNS45LjQuNFxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjkuNC40XG4gICAgaWYgKCFEYXRlLm5vdykge1xuICAgICAgICBEYXRlLm5vdyA9IGZ1bmN0aW9uIG5vdygpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvL1xuICAgIC8vIE51bWJlclxuICAgIC8vID09PT09PVxuICAgIC8vXG5cbiAgICAvLyBFUzUuMSAxNS43LjQuNVxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjcuNC41XG4gICAgdmFyIGhhc1RvRml4ZWRCdWdzID0gTnVtYmVyUHJvdG90eXBlLnRvRml4ZWQgJiYgKFxuICAgICAgICAoMC4wMDAwOCkudG9GaXhlZCgzKSAhPT0gJzAuMDAwJ1xuICAgICAgICB8fCAoMC45KS50b0ZpeGVkKDApICE9PSAnMSdcbiAgICAgICAgfHwgKDEuMjU1KS50b0ZpeGVkKDIpICE9PSAnMS4yNSdcbiAgICAgICAgfHwgKDEwMDAwMDAwMDAwMDAwMDAxMjgpLnRvRml4ZWQoMCkgIT09ICcxMDAwMDAwMDAwMDAwMDAwMTI4J1xuICAgICk7XG5cbiAgICB2YXIgdG9GaXhlZEhlbHBlcnMgPSB7XG4gICAgICAgIGJhc2U6IDFlNyxcbiAgICAgICAgc2l6ZTogNixcbiAgICAgICAgZGF0YTogWzAsIDAsIDAsIDAsIDAsIDBdLFxuICAgICAgICBtdWx0aXBseTogZnVuY3Rpb24gbXVsdGlwbHkobiwgYykge1xuICAgICAgICAgICAgdmFyIGkgPSAtMTtcbiAgICAgICAgICAgIHZhciBjMiA9IGM7XG4gICAgICAgICAgICB3aGlsZSAoKytpIDwgdG9GaXhlZEhlbHBlcnMuc2l6ZSkge1xuICAgICAgICAgICAgICAgIGMyICs9IG4gKiB0b0ZpeGVkSGVscGVycy5kYXRhW2ldO1xuICAgICAgICAgICAgICAgIHRvRml4ZWRIZWxwZXJzLmRhdGFbaV0gPSBjMiAlIHRvRml4ZWRIZWxwZXJzLmJhc2U7XG4gICAgICAgICAgICAgICAgYzIgPSBNYXRoLmZsb29yKGMyIC8gdG9GaXhlZEhlbHBlcnMuYmFzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRpdmlkZTogZnVuY3Rpb24gZGl2aWRlKG4pIHtcbiAgICAgICAgICAgIHZhciBpID0gdG9GaXhlZEhlbHBlcnMuc2l6ZTtcbiAgICAgICAgICAgIHZhciBjID0gMDtcbiAgICAgICAgICAgIHdoaWxlICgtLWkgPj0gMCkge1xuICAgICAgICAgICAgICAgIGMgKz0gdG9GaXhlZEhlbHBlcnMuZGF0YVtpXTtcbiAgICAgICAgICAgICAgICB0b0ZpeGVkSGVscGVycy5kYXRhW2ldID0gTWF0aC5mbG9vcihjIC8gbik7XG4gICAgICAgICAgICAgICAgYyA9IChjICUgbikgKiB0b0ZpeGVkSGVscGVycy5iYXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBudW1Ub1N0cmluZzogZnVuY3Rpb24gbnVtVG9TdHJpbmcoKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHRvRml4ZWRIZWxwZXJzLnNpemU7XG4gICAgICAgICAgICB2YXIgcyA9ICcnO1xuICAgICAgICAgICAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHMgIT09ICcnIHx8IGkgPT09IDAgfHwgdG9GaXhlZEhlbHBlcnMuZGF0YVtpXSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdCA9ICRTdHJpbmcodG9GaXhlZEhlbHBlcnMuZGF0YVtpXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcyA9IHQ7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzICs9IHN0clNsaWNlKCcwMDAwMDAwJywgMCwgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgfSxcbiAgICAgICAgcG93OiBmdW5jdGlvbiBwb3coeCwgbiwgYWNjKSB7XG4gICAgICAgICAgICByZXR1cm4gKG4gPT09IDAgPyBhY2MgOiAobiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKSkpO1xuICAgICAgICB9LFxuICAgICAgICBsb2c6IGZ1bmN0aW9uIGxvZyh4KSB7XG4gICAgICAgICAgICB2YXIgbiA9IDA7XG4gICAgICAgICAgICB2YXIgeDIgPSB4O1xuICAgICAgICAgICAgd2hpbGUgKHgyID49IDQwOTYpIHtcbiAgICAgICAgICAgICAgICBuICs9IDEyO1xuICAgICAgICAgICAgICAgIHgyIC89IDQwOTY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoeDIgPj0gMikge1xuICAgICAgICAgICAgICAgIG4gKz0gMTtcbiAgICAgICAgICAgICAgICB4MiAvPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHRvRml4ZWRTaGltID0gZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cykge1xuICAgICAgICB2YXIgZiwgeCwgcywgbSwgZSwgeiwgaiwgaztcblxuICAgICAgICAvLyBUZXN0IGZvciBOYU4gYW5kIHJvdW5kIGZyYWN0aW9uRGlnaXRzIGRvd25cbiAgICAgICAgZiA9ICROdW1iZXIoZnJhY3Rpb25EaWdpdHMpO1xuICAgICAgICBmID0gaXNBY3R1YWxOYU4oZikgPyAwIDogTWF0aC5mbG9vcihmKTtcblxuICAgICAgICBpZiAoZiA8IDAgfHwgZiA+IDIwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignTnVtYmVyLnRvRml4ZWQgY2FsbGVkIHdpdGggaW52YWxpZCBudW1iZXIgb2YgZGVjaW1hbHMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHggPSAkTnVtYmVyKHRoaXMpO1xuXG4gICAgICAgIGlmIChpc0FjdHVhbE5hTih4KSkge1xuICAgICAgICAgICAgcmV0dXJuICdOYU4nO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgaXQgaXMgdG9vIGJpZyBvciBzbWFsbCwgcmV0dXJuIHRoZSBzdHJpbmcgdmFsdWUgb2YgdGhlIG51bWJlclxuICAgICAgICBpZiAoeCA8PSAtMWUyMSB8fCB4ID49IDFlMjEpIHtcbiAgICAgICAgICAgIHJldHVybiAkU3RyaW5nKHgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcyA9ICcnO1xuXG4gICAgICAgIGlmICh4IDwgMCkge1xuICAgICAgICAgICAgcyA9ICctJztcbiAgICAgICAgICAgIHggPSAteDtcbiAgICAgICAgfVxuXG4gICAgICAgIG0gPSAnMCc7XG5cbiAgICAgICAgaWYgKHggPiAxZS0yMSkge1xuICAgICAgICAgICAgLy8gMWUtMjEgPCB4IDwgMWUyMVxuICAgICAgICAgICAgLy8gLTcwIDwgbG9nMih4KSA8IDcwXG4gICAgICAgICAgICBlID0gdG9GaXhlZEhlbHBlcnMubG9nKHggKiB0b0ZpeGVkSGVscGVycy5wb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgICAgICAgeiA9IChlIDwgMCA/IHggKiB0b0ZpeGVkSGVscGVycy5wb3coMiwgLWUsIDEpIDogeCAvIHRvRml4ZWRIZWxwZXJzLnBvdygyLCBlLCAxKSk7XG4gICAgICAgICAgICB6ICo9IDB4MTAwMDAwMDAwMDAwMDA7IC8vIE1hdGgucG93KDIsIDUyKTtcbiAgICAgICAgICAgIGUgPSA1MiAtIGU7XG5cbiAgICAgICAgICAgIC8vIC0xOCA8IGUgPCAxMjJcbiAgICAgICAgICAgIC8vIHggPSB6IC8gMiBeIGVcbiAgICAgICAgICAgIGlmIChlID4gMCkge1xuICAgICAgICAgICAgICAgIHRvRml4ZWRIZWxwZXJzLm11bHRpcGx5KDAsIHopO1xuICAgICAgICAgICAgICAgIGogPSBmO1xuXG4gICAgICAgICAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgICAgICAgICAgICB0b0ZpeGVkSGVscGVycy5tdWx0aXBseSgxZTcsIDApO1xuICAgICAgICAgICAgICAgICAgICBqIC09IDc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdG9GaXhlZEhlbHBlcnMubXVsdGlwbHkodG9GaXhlZEhlbHBlcnMucG93KDEwLCBqLCAxKSwgMCk7XG4gICAgICAgICAgICAgICAgaiA9IGUgLSAxO1xuXG4gICAgICAgICAgICAgICAgd2hpbGUgKGogPj0gMjMpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9GaXhlZEhlbHBlcnMuZGl2aWRlKDEgPDwgMjMpO1xuICAgICAgICAgICAgICAgICAgICBqIC09IDIzO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRvRml4ZWRIZWxwZXJzLmRpdmlkZSgxIDw8IGopO1xuICAgICAgICAgICAgICAgIHRvRml4ZWRIZWxwZXJzLm11bHRpcGx5KDEsIDEpO1xuICAgICAgICAgICAgICAgIHRvRml4ZWRIZWxwZXJzLmRpdmlkZSgyKTtcbiAgICAgICAgICAgICAgICBtID0gdG9GaXhlZEhlbHBlcnMubnVtVG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdG9GaXhlZEhlbHBlcnMubXVsdGlwbHkoMCwgeik7XG4gICAgICAgICAgICAgICAgdG9GaXhlZEhlbHBlcnMubXVsdGlwbHkoMSA8PCAoLWUpLCAwKTtcbiAgICAgICAgICAgICAgICBtID0gdG9GaXhlZEhlbHBlcnMubnVtVG9TdHJpbmcoKSArIHN0clNsaWNlKCcwLjAwMDAwMDAwMDAwMDAwMDAwMDAwJywgMiwgMiArIGYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGYgPiAwKSB7XG4gICAgICAgICAgICBrID0gbS5sZW5ndGg7XG5cbiAgICAgICAgICAgIGlmIChrIDw9IGYpIHtcbiAgICAgICAgICAgICAgICBtID0gcyArIHN0clNsaWNlKCcwLjAwMDAwMDAwMDAwMDAwMDAwMDAnLCAwLCBmIC0gayArIDIpICsgbTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbSA9IHMgKyBzdHJTbGljZShtLCAwLCBrIC0gZikgKyAnLicgKyBzdHJTbGljZShtLCBrIC0gZik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtID0gcyArIG07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbTtcbiAgICB9O1xuICAgIGRlZmluZVByb3BlcnRpZXMoTnVtYmVyUHJvdG90eXBlLCB7IHRvRml4ZWQ6IHRvRml4ZWRTaGltIH0sIGhhc1RvRml4ZWRCdWdzKTtcblxuICAgIHZhciBoYXNUb1ByZWNpc2lvblVuZGVmaW5lZEJ1ZyA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gMS4wLnRvUHJlY2lzaW9uKHVuZGVmaW5lZCkgPT09ICcxJztcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9KCkpO1xuICAgIHZhciBvcmlnaW5hbFRvUHJlY2lzaW9uID0gTnVtYmVyUHJvdG90eXBlLnRvUHJlY2lzaW9uO1xuICAgIGRlZmluZVByb3BlcnRpZXMoTnVtYmVyUHJvdG90eXBlLCB7XG4gICAgICAgIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgcHJlY2lzaW9uID09PSAndW5kZWZpbmVkJyA/IG9yaWdpbmFsVG9QcmVjaXNpb24uY2FsbCh0aGlzKSA6IG9yaWdpbmFsVG9QcmVjaXNpb24uY2FsbCh0aGlzLCBwcmVjaXNpb24pO1xuICAgICAgICB9XG4gICAgfSwgaGFzVG9QcmVjaXNpb25VbmRlZmluZWRCdWcpO1xuXG4gICAgLy9cbiAgICAvLyBTdHJpbmdcbiAgICAvLyA9PT09PT1cbiAgICAvL1xuXG4gICAgLy8gRVM1IDE1LjUuNC4xNFxuICAgIC8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjUuNC4xNFxuXG4gICAgLy8gW2J1Z2ZpeCwgSUUgbHQgOSwgZmlyZWZveCA0LCBLb25xdWVyb3IsIE9wZXJhLCBvYnNjdXJlIGJyb3dzZXJzXVxuICAgIC8vIE1hbnkgYnJvd3NlcnMgZG8gbm90IHNwbGl0IHByb3Blcmx5IHdpdGggcmVndWxhciBleHByZXNzaW9ucyBvciB0aGV5XG4gICAgLy8gZG8gbm90IHBlcmZvcm0gdGhlIHNwbGl0IGNvcnJlY3RseSB1bmRlciBvYnNjdXJlIGNvbmRpdGlvbnMuXG4gICAgLy8gU2VlIGh0dHA6Ly9ibG9nLnN0ZXZlbmxldml0aGFuLmNvbS9hcmNoaXZlcy9jcm9zcy1icm93c2VyLXNwbGl0XG4gICAgLy8gSSd2ZSB0ZXN0ZWQgaW4gbWFueSBicm93c2VycyBhbmQgdGhpcyBzZWVtcyB0byBjb3ZlciB0aGUgZGV2aWFudCBvbmVzOlxuICAgIC8vICAgICdhYicuc3BsaXQoLyg/OmFiKSovKSBzaG91bGQgYmUgW1wiXCIsIFwiXCJdLCBub3QgW1wiXCJdXG4gICAgLy8gICAgJy4nLnNwbGl0KC8oLj8pKC4/KS8pIHNob3VsZCBiZSBbXCJcIiwgXCIuXCIsIFwiXCIsIFwiXCJdLCBub3QgW1wiXCIsIFwiXCJdXG4gICAgLy8gICAgJ3Rlc3N0Jy5zcGxpdCgvKHMpKi8pIHNob3VsZCBiZSBbXCJ0XCIsIHVuZGVmaW5lZCwgXCJlXCIsIFwic1wiLCBcInRcIl0sIG5vdFxuICAgIC8vICAgICAgIFt1bmRlZmluZWQsIFwidFwiLCB1bmRlZmluZWQsIFwiZVwiLCAuLi5dXG4gICAgLy8gICAgJycuc3BsaXQoLy4/Lykgc2hvdWxkIGJlIFtdLCBub3QgW1wiXCJdXG4gICAgLy8gICAgJy4nLnNwbGl0KC8oKSgpLykgc2hvdWxkIGJlIFtcIi5cIl0sIG5vdCBbXCJcIiwgXCJcIiwgXCIuXCJdXG5cbiAgICBpZiAoXG4gICAgICAgICdhYicuc3BsaXQoLyg/OmFiKSovKS5sZW5ndGggIT09IDJcbiAgICAgICAgfHwgJy4nLnNwbGl0KC8oLj8pKC4/KS8pLmxlbmd0aCAhPT0gNFxuICAgICAgICB8fCAndGVzc3QnLnNwbGl0KC8ocykqLylbMV0gPT09ICd0J1xuICAgICAgICB8fCAndGVzdCcuc3BsaXQoLyg/OikvLCAtMSkubGVuZ3RoICE9PSA0XG4gICAgICAgIHx8ICcnLnNwbGl0KC8uPy8pLmxlbmd0aFxuICAgICAgICB8fCAnLicuc3BsaXQoLygpKCkvKS5sZW5ndGggPiAxXG4gICAgKSB7XG4gICAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY29tcGxpYW50RXhlY05wY2cgPSB0eXBlb2YgKC8oKT8/LykuZXhlYygnJylbMV0gPT09ICd1bmRlZmluZWQnOyAvLyBOUENHOiBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cFxuICAgICAgICAgICAgdmFyIG1heFNhZmUzMkJpdEludCA9IE1hdGgucG93KDIsIDMyKSAtIDE7XG5cbiAgICAgICAgICAgIFN0cmluZ1Byb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNlcGFyYXRvciA9PT0gJ3VuZGVmaW5lZCcgJiYgbGltaXQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICAgICAgICAgICAgaWYgKCFpc1JlZ2V4KHNlcGFyYXRvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0clNwbGl0KHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgLy8gaW4gRVM2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKSwgLy8gRmlyZWZveCAzKyBhbmQgRVM2XG4gICAgICAgICAgICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSAwLFxuICAgICAgICAgICAgICAgICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgICAgICAgICAgICAgICBzZXBhcmF0b3IyLCBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgICAgICAgICAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICAgICAgICAgICAgaWYgKCFjb21wbGlhbnRFeGVjTnBjZykge1xuICAgICAgICAgICAgICAgICAgICAvLyBEb2Vzbid0IG5lZWQgZmxhZ3MgZ3ksIGJ1dCB0aGV5IGRvbid0IGh1cnRcbiAgICAgICAgICAgICAgICAgICAgc2VwYXJhdG9yMiA9IG5ldyBSZWdFeHAoJ14nICsgc2VwYXJhdG9yQ29weS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLyogVmFsdWVzIGZvciBgbGltaXRgLCBwZXIgdGhlIHNwZWM6XG4gICAgICAgICAgICAgICAgICogSWYgdW5kZWZpbmVkOiA0Mjk0OTY3Mjk1IC8vIG1heFNhZmUzMkJpdEludFxuICAgICAgICAgICAgICAgICAqIElmIDAsIEluZmluaXR5LCBvciBOYU46IDBcbiAgICAgICAgICAgICAgICAgKiBJZiBwb3NpdGl2ZSBudW1iZXI6IGxpbWl0ID0gTWF0aC5mbG9vcihsaW1pdCk7IGlmIChsaW1pdCA+IDQyOTQ5NjcyOTUpIGxpbWl0IC09IDQyOTQ5NjcyOTY7XG4gICAgICAgICAgICAgICAgICogSWYgbmVnYXRpdmUgbnVtYmVyOiA0Mjk0OTY3Mjk2IC0gTWF0aC5mbG9vcihNYXRoLmFicyhsaW1pdCkpXG4gICAgICAgICAgICAgICAgICogSWYgb3RoZXI6IFR5cGUtY29udmVydCwgdGhlbiB1c2UgdGhlIGFib3ZlIHJ1bGVzXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdmFyIHNwbGl0TGltaXQgPSB0eXBlb2YgbGltaXQgPT09ICd1bmRlZmluZWQnID8gbWF4U2FmZTMyQml0SW50IDogRVMuVG9VaW50MzIobGltaXQpO1xuICAgICAgICAgICAgICAgIG1hdGNoID0gc2VwYXJhdG9yQ29weS5leGVjKHN0cmluZyk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleGAgaXMgbm90IHJlbGlhYmxlIGNyb3NzLWJyb3dzZXJcbiAgICAgICAgICAgICAgICAgICAgbGFzdEluZGV4ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwdXNoQ2FsbChvdXRwdXQsIHN0clNsaWNlKHN0cmluZywgbGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgIGZvclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXBzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbXBsaWFudEV4ZWNOcGNnICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFswXS5yZXBsYWNlKHNlcGFyYXRvcjIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1tpXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFtpXSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gubGVuZ3RoID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheV9wdXNoLmFwcGx5KG91dHB1dCwgYXJyYXlTbGljZShtYXRjaCwgMSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3V0cHV0Lmxlbmd0aCA+PSBzcGxpdExpbWl0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlcGFyYXRvckNvcHkubGFzdEluZGV4ID09PSBtYXRjaC5pbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VwYXJhdG9yQ29weS5sYXN0SW5kZXgrKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoID0gc2VwYXJhdG9yQ29weS5leGVjKHN0cmluZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwdXNoQ2FsbChvdXRwdXQsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHB1c2hDYWxsKG91dHB1dCwgc3RyU2xpY2Uoc3RyaW5nLCBsYXN0TGFzdEluZGV4KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvdXRwdXQubGVuZ3RoID4gc3BsaXRMaW1pdCA/IGFycmF5U2xpY2Uob3V0cHV0LCAwLCBzcGxpdExpbWl0KSA6IG91dHB1dDtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0oKSk7XG5cbiAgICAvLyBbYnVnZml4LCBjaHJvbWVdXG4gICAgLy8gSWYgc2VwYXJhdG9yIGlzIHVuZGVmaW5lZCwgdGhlbiB0aGUgcmVzdWx0IGFycmF5IGNvbnRhaW5zIGp1c3Qgb25lIFN0cmluZyxcbiAgICAvLyB3aGljaCBpcyB0aGUgdGhpcyB2YWx1ZSAoY29udmVydGVkIHRvIGEgU3RyaW5nKS4gSWYgbGltaXQgaXMgbm90IHVuZGVmaW5lZCxcbiAgICAvLyB0aGVuIHRoZSBvdXRwdXQgYXJyYXkgaXMgdHJ1bmNhdGVkIHNvIHRoYXQgaXQgY29udGFpbnMgbm8gbW9yZSB0aGFuIGxpbWl0XG4gICAgLy8gZWxlbWVudHMuXG4gICAgLy8gXCIwXCIuc3BsaXQodW5kZWZpbmVkLCAwKSAtPiBbXVxuICAgIH0gZWxzZSBpZiAoJzAnLnNwbGl0KHZvaWQgMCwgMCkubGVuZ3RoKSB7XG4gICAgICAgIFN0cmluZ1Byb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VwYXJhdG9yID09PSAndW5kZWZpbmVkJyAmJiBsaW1pdCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdHJTcGxpdCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgc3RyX3JlcGxhY2UgPSBTdHJpbmdQcm90b3R5cGUucmVwbGFjZTtcbiAgICB2YXIgcmVwbGFjZVJlcG9ydHNHcm91cHNDb3JyZWN0bHkgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZ3JvdXBzID0gW107XG4gICAgICAgICd4Jy5yZXBsYWNlKC94KC4pPy9nLCBmdW5jdGlvbiAobWF0Y2gsIGdyb3VwKSB7XG4gICAgICAgICAgICBwdXNoQ2FsbChncm91cHMsIGdyb3VwKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBncm91cHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBncm91cHNbMF0gPT09ICd1bmRlZmluZWQnO1xuICAgIH0oKSk7XG5cbiAgICBpZiAoIXJlcGxhY2VSZXBvcnRzR3JvdXBzQ29ycmVjdGx5KSB7XG4gICAgICAgIFN0cmluZ1Byb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgaXNGbiA9IGlzQ2FsbGFibGUocmVwbGFjZVZhbHVlKTtcbiAgICAgICAgICAgIHZhciBoYXNDYXB0dXJpbmdHcm91cHMgPSBpc1JlZ2V4KHNlYXJjaFZhbHVlKSAmJiAoL1xcKVsqP10vKS50ZXN0KHNlYXJjaFZhbHVlLnNvdXJjZSk7XG4gICAgICAgICAgICBpZiAoIWlzRm4gfHwgIWhhc0NhcHR1cmluZ0dyb3Vwcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHJfcmVwbGFjZS5jYWxsKHRoaXMsIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgd3JhcHBlZFJlcGxhY2VWYWx1ZSA9IGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdpbmFsTGFzdEluZGV4ID0gc2VhcmNoVmFsdWUubGFzdEluZGV4O1xuICAgICAgICAgICAgICAgICAgICBzZWFyY2hWYWx1ZS5sYXN0SW5kZXggPSAwOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gc2VhcmNoVmFsdWUuZXhlYyhtYXRjaCkgfHwgW107XG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaFZhbHVlLmxhc3RJbmRleCA9IG9yaWdpbmFsTGFzdEluZGV4OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICAgICAgICAgIHB1c2hDYWxsKGFyZ3MsIGFyZ3VtZW50c1tsZW5ndGggLSAyXSwgYXJndW1lbnRzW2xlbmd0aCAtIDFdKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcGxhY2VWYWx1ZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHJfcmVwbGFjZS5jYWxsKHRoaXMsIHNlYXJjaFZhbHVlLCB3cmFwcGVkUmVwbGFjZVZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBFQ01BLTI2MiwgM3JkIEIuMi4zXG4gICAgLy8gTm90IGFuIEVDTUFTY3JpcHQgc3RhbmRhcmQsIGFsdGhvdWdoIEVDTUFTY3JpcHQgM3JkIEVkaXRpb24gaGFzIGFcbiAgICAvLyBub24tbm9ybWF0aXZlIHNlY3Rpb24gc3VnZ2VzdGluZyB1bmlmb3JtIHNlbWFudGljcyBhbmQgaXQgc2hvdWxkIGJlXG4gICAgLy8gbm9ybWFsaXplZCBhY3Jvc3MgYWxsIGJyb3dzZXJzXG4gICAgLy8gW2J1Z2ZpeCwgSUUgbHQgOV0gSUUgPCA5IHN1YnN0cigpIHdpdGggbmVnYXRpdmUgdmFsdWUgbm90IHdvcmtpbmcgaW4gSUVcbiAgICB2YXIgc3RyaW5nX3N1YnN0ciA9IFN0cmluZ1Byb3RvdHlwZS5zdWJzdHI7XG4gICAgdmFyIGhhc05lZ2F0aXZlU3Vic3RyQnVnID0gJycuc3Vic3RyICYmICcwYicuc3Vic3RyKC0xKSAhPT0gJ2InO1xuICAgIGRlZmluZVByb3BlcnRpZXMoU3RyaW5nUHJvdG90eXBlLCB7XG4gICAgICAgIHN1YnN0cjogZnVuY3Rpb24gc3Vic3RyKHN0YXJ0LCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBub3JtYWxpemVkU3RhcnQgPSBzdGFydDtcbiAgICAgICAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkU3RhcnQgPSBtYXgodGhpcy5sZW5ndGggKyBzdGFydCwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nX3N1YnN0ci5jYWxsKHRoaXMsIG5vcm1hbGl6ZWRTdGFydCwgbGVuZ3RoKTtcbiAgICAgICAgfVxuICAgIH0sIGhhc05lZ2F0aXZlU3Vic3RyQnVnKTtcblxuICAgIC8vIEVTNSAxNS41LjQuMjBcbiAgICAvLyB3aGl0ZXNwYWNlIGZyb206IGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuNS40LjIwXG4gICAgdmFyIHdzID0gJ1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJ1xuICAgICAgICArICdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOCdcbiAgICAgICAgKyAnXFx1MjAyOVxcdUZFRkYnO1xuICAgIHZhciB6ZXJvV2lkdGggPSAnXFx1MjAwYic7XG4gICAgdmFyIHdzUmVnZXhDaGFycyA9ICdbJyArIHdzICsgJ10nO1xuICAgIHZhciB0cmltQmVnaW5SZWdleHAgPSBuZXcgUmVnRXhwKCdeJyArIHdzUmVnZXhDaGFycyArIHdzUmVnZXhDaGFycyArICcqJyk7XG4gICAgdmFyIHRyaW1FbmRSZWdleHAgPSBuZXcgUmVnRXhwKHdzUmVnZXhDaGFycyArIHdzUmVnZXhDaGFycyArICcqJCcpO1xuICAgIHZhciBoYXNUcmltV2hpdGVzcGFjZUJ1ZyA9IFN0cmluZ1Byb3RvdHlwZS50cmltICYmICh3cy50cmltKCkgfHwgIXplcm9XaWR0aC50cmltKCkpO1xuICAgIGRlZmluZVByb3BlcnRpZXMoU3RyaW5nUHJvdG90eXBlLCB7XG4gICAgICAgIC8vIGh0dHA6Ly9ibG9nLnN0ZXZlbmxldml0aGFuLmNvbS9hcmNoaXZlcy9mYXN0ZXItdHJpbS1qYXZhc2NyaXB0XG4gICAgICAgIC8vIGh0dHA6Ly9wZXJmZWN0aW9ua2lsbHMuY29tL3doaXRlc3BhY2UtZGV2aWF0aW9ucy9cbiAgICAgICAgdHJpbTogZnVuY3Rpb24gdHJpbSgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcyA9PT0gJ3VuZGVmaW5lZCcgfHwgdGhpcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYW4ndCBjb252ZXJ0IFwiICsgdGhpcyArICcgdG8gb2JqZWN0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJFN0cmluZyh0aGlzKS5yZXBsYWNlKHRyaW1CZWdpblJlZ2V4cCwgJycpLnJlcGxhY2UodHJpbUVuZFJlZ2V4cCwgJycpO1xuICAgICAgICB9XG4gICAgfSwgaGFzVHJpbVdoaXRlc3BhY2VCdWcpO1xuICAgIHZhciB0cmltID0gY2FsbC5iaW5kKFN0cmluZy5wcm90b3R5cGUudHJpbSk7XG5cbiAgICB2YXIgaGFzTGFzdEluZGV4QnVnID0gU3RyaW5nUHJvdG90eXBlLmxhc3RJbmRleE9mICYmICdhYmPjgYLjgYQnLmxhc3RJbmRleE9mKCfjgYLjgYQnLCAyKSAhPT0gLTE7XG4gICAgZGVmaW5lUHJvcGVydGllcyhTdHJpbmdQcm90b3R5cGUsIHtcbiAgICAgICAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaFN0cmluZykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzID09PSAndW5kZWZpbmVkJyB8fCB0aGlzID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbid0IGNvbnZlcnQgXCIgKyB0aGlzICsgJyB0byBvYmplY3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBTID0gJFN0cmluZyh0aGlzKTtcbiAgICAgICAgICAgIHZhciBzZWFyY2hTdHIgPSAkU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgICAgICAgICB2YXIgbnVtUG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyAkTnVtYmVyKGFyZ3VtZW50c1sxXSkgOiBOYU47XG4gICAgICAgICAgICB2YXIgcG9zID0gaXNBY3R1YWxOYU4obnVtUG9zKSA/IEluZmluaXR5IDogRVMuVG9JbnRlZ2VyKG51bVBvcyk7XG4gICAgICAgICAgICB2YXIgc3RhcnQgPSBtaW4obWF4KHBvcywgMCksIFMubGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciBzZWFyY2hMZW4gPSBzZWFyY2hTdHIubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGsgPSBzdGFydCArIHNlYXJjaExlbjtcbiAgICAgICAgICAgIHdoaWxlIChrID4gMCkge1xuICAgICAgICAgICAgICAgIGsgPSBtYXgoMCwgayAtIHNlYXJjaExlbik7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gc3RySW5kZXhPZihzdHJTbGljZShTLCBrLCBzdGFydCArIHNlYXJjaExlbiksIHNlYXJjaFN0cik7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gayArIGluZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgIH0sIGhhc0xhc3RJbmRleEJ1Zyk7XG5cbiAgICB2YXIgb3JpZ2luYWxMYXN0SW5kZXhPZiA9IFN0cmluZ1Byb3RvdHlwZS5sYXN0SW5kZXhPZjtcbiAgICBkZWZpbmVQcm9wZXJ0aWVzKFN0cmluZ1Byb3RvdHlwZSwge1xuICAgICAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoU3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxMYXN0SW5kZXhPZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgfSwgU3RyaW5nUHJvdG90eXBlLmxhc3RJbmRleE9mLmxlbmd0aCAhPT0gMSk7XG5cbiAgICAvLyBFUy01IDE1LjEuMi4yXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJhZGl4XG4gICAgaWYgKHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMikge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZ2xvYmFsLWFzc2lnbiwgbm8taW1wbGljaXQtZ2xvYmFsc1xuICAgICAgICBwYXJzZUludCA9IChmdW5jdGlvbiAob3JpZ1BhcnNlSW50KSB7XG4gICAgICAgICAgICB2YXIgaGV4UmVnZXggPSAvXlstK10/MFt4WF0vO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHN0ciA9PT0gJ3N5bWJvbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxlIFN5bWJvbHMgaW4gbm9kZSA4LjMvOC40XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1pbXBsaWNpdC1jb2VyY2lvbiwgbm8tdW51c2VkLWV4cHJlc3Npb25zXG4gICAgICAgICAgICAgICAgICAgICcnICsgc3RyOyAvLyBqc2NzOmlnbm9yZSBkaXNhbGxvd0ltcGxpY2l0VHlwZUNvbnZlcnNpb25cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgc3RyaW5nID0gdHJpbShTdHJpbmcoc3RyKSk7XG4gICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRlZFJhZGl4ID0gJE51bWJlcihyYWRpeCkgfHwgKGhleFJlZ2V4LnRlc3Qoc3RyaW5nKSA/IDE2IDogMTApO1xuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnUGFyc2VJbnQoc3RyaW5nLCBkZWZhdWx0ZWRSYWRpeCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KHBhcnNlSW50KSk7XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMS4yLjNcbiAgICBpZiAoMSAvIHBhcnNlRmxvYXQoJy0wJykgIT09IC1JbmZpbml0eSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZ2xvYmFsLWFzc2lnbiwgbm8taW1wbGljaXQtZ2xvYmFscywgbm8tbmF0aXZlLXJlYXNzaWduXG4gICAgICAgIHBhcnNlRmxvYXQgPSAoZnVuY3Rpb24gKG9yaWdQYXJzZUZsb2F0KSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gcGFyc2VGbG9hdChzdHJpbmcpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXRTdHJpbmcgPSB0cmltKFN0cmluZyhzdHJpbmcpKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gb3JpZ1BhcnNlRmxvYXQoaW5wdXRTdHJpbmcpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgPT09IDAgJiYgc3RyU2xpY2UoaW5wdXRTdHJpbmcsIDAsIDEpID09PSAnLScgPyAtMCA6IHJlc3VsdDtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0ocGFyc2VGbG9hdCkpO1xuICAgIH1cblxuICAgIGlmIChTdHJpbmcobmV3IFJhbmdlRXJyb3IoJ3Rlc3QnKSkgIT09ICdSYW5nZUVycm9yOiB0ZXN0Jykge1xuICAgICAgICB2YXIgZXJyb3JUb1N0cmluZ1NoaW0gPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcyA9PT0gJ3VuZGVmaW5lZCcgfHwgdGhpcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYW4ndCBjb252ZXJ0IFwiICsgdGhpcyArICcgdG8gb2JqZWN0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbmFtZSA9IHRoaXMubmFtZTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBuYW1lID0gJ0Vycm9yJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgbmFtZSA9ICRTdHJpbmcobmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbXNnID0gdGhpcy5tZXNzYWdlO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBtc2cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgbXNnID0gJyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBtc2cgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgbXNnID0gJFN0cmluZyhtc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFuYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1zZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbXNnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmFtZSArICc6ICcgKyBtc2c7XG4gICAgICAgIH07XG4gICAgICAgIC8vIGNhbid0IHVzZSBkZWZpbmVQcm9wZXJ0aWVzIGhlcmUgYmVjYXVzZSBvZiB0b1N0cmluZyBlbnVtZXJhdGlvbiBpc3N1ZSBpbiBJRSA8PSA4XG4gICAgICAgIEVycm9yLnByb3RvdHlwZS50b1N0cmluZyA9IGVycm9yVG9TdHJpbmdTaGltO1xuICAgIH1cblxuICAgIGlmIChzdXBwb3J0c0Rlc2NyaXB0b3JzKSB7XG4gICAgICAgIHZhciBlbnN1cmVOb25FbnVtZXJhYmxlID0gZnVuY3Rpb24gKG9iaiwgcHJvcCkge1xuICAgICAgICAgICAgaWYgKGlzRW51bShvYmosIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwgcHJvcCk7XG4gICAgICAgICAgICAgICAgaWYgKGRlc2MuY29uZmlndXJhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc2MuZW51bWVyYWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBwcm9wLCBkZXNjKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGVuc3VyZU5vbkVudW1lcmFibGUoRXJyb3IucHJvdG90eXBlLCAnbWVzc2FnZScpO1xuICAgICAgICBpZiAoRXJyb3IucHJvdG90eXBlLm1lc3NhZ2UgIT09ICcnKSB7XG4gICAgICAgICAgICBFcnJvci5wcm90b3R5cGUubWVzc2FnZSA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIGVuc3VyZU5vbkVudW1lcmFibGUoRXJyb3IucHJvdG90eXBlLCAnbmFtZScpO1xuICAgIH1cblxuICAgIGlmIChTdHJpbmcoL2EvbWlnKSAhPT0gJy9hL2dpbScpIHtcbiAgICAgICAgdmFyIHJlZ2V4VG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgICAgIHZhciBzdHIgPSAnLycgKyB0aGlzLnNvdXJjZSArICcvJztcbiAgICAgICAgICAgIGlmICh0aGlzLmdsb2JhbCkge1xuICAgICAgICAgICAgICAgIHN0ciArPSAnZyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5pZ25vcmVDYXNlKSB7XG4gICAgICAgICAgICAgICAgc3RyICs9ICdpJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLm11bHRpbGluZSkge1xuICAgICAgICAgICAgICAgIHN0ciArPSAnbSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgICB9O1xuICAgICAgICAvLyBjYW4ndCB1c2UgZGVmaW5lUHJvcGVydGllcyBoZXJlIGJlY2F1c2Ugb2YgdG9TdHJpbmcgZW51bWVyYXRpb24gaXNzdWUgaW4gSUUgPD0gOFxuICAgICAgICBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nID0gcmVnZXhUb1N0cmluZztcbiAgICB9XG59KSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1BcnJheVByb3RvdHlwZU1hcCgpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKFxuXHRcdEFycmF5LnByb3RvdHlwZSxcblx0XHR7IG1hcDogcG9seWZpbGwgfSxcblx0XHR7IG1hcDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQXJyYXkucHJvdG90eXBlLm1hcCAhPT0gcG9seWZpbGw7IH0gfVxuXHQpO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltRmxhdE1hcCgpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKFxuXHRcdEFycmF5LnByb3RvdHlwZSxcblx0XHR7IGZsYXRNYXA6IHBvbHlmaWxsIH0sXG5cdFx0eyBmbGF0TWFwOiBmdW5jdGlvbiAoKSB7IHJldHVybiBBcnJheS5wcm90b3R5cGUuZmxhdE1hcCAhPT0gcG9seWZpbGw7IH0gfVxuXHQpO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9BcnJheVNwZWNpZXNDcmVhdGUnKTtcbnZhciBGbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9GbGF0dGVuSW50b0FycmF5Jyk7XG52YXIgR2V0ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9HZXQnKTtcbnZhciBUb0ludGVnZXIgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1RvSW50ZWdlcicpO1xudmFyIFRvTGVuZ3RoID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Ub0xlbmd0aCcpO1xudmFyIFRvT2JqZWN0ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Ub09iamVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZsYXQoKSB7XG5cdHZhciBPID0gVG9PYmplY3QodGhpcyk7XG5cdHZhciBzb3VyY2VMZW4gPSBUb0xlbmd0aChHZXQoTywgJ2xlbmd0aCcpKTtcblxuXHR2YXIgZGVwdGhOdW0gPSAxO1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIGFyZ3VtZW50c1swXSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRkZXB0aE51bSA9IFRvSW50ZWdlcihhcmd1bWVudHNbMF0pO1xuXHR9XG5cblx0dmFyIEEgPSBBcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG5cdEZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgc291cmNlTGVuLCAwLCBkZXB0aE51bSk7XG5cdHJldHVybiBBO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxucmVxdWlyZSgnLi9zaGltJykoKTtcbiIsImZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHtcbiAgdHJ5IHtcbiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7XG4gICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZWplY3QoZXJyb3IpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpbmZvLmRvbmUpIHtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTtcblxuICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBlcnIpO1xuICAgICAgfVxuXG4gICAgICBfbmV4dCh1bmRlZmluZWQpO1xuICAgIH0pO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hc3luY1RvR2VuZXJhdG9yOyIsIid1c2Ugc3RyaWN0JztcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1pc2NvbnN0cnVjdG9yXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkge1xuXHRyZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09PSAnZnVuY3Rpb24nICYmICEhYXJndW1lbnQucHJvdG90eXBlOyAvLyB1bmZvcnR1bmF0ZWx5IHRoZXJlJ3Mgbm8gd2F5IHRvIHRydWx5IGNoZWNrIHRoaXMgd2l0aG91dCB0cnkvY2F0Y2ggYG5ldyBhcmd1bWVudGBcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJ2VzLXRvLXByaW1pdGl2ZS9lczIwMTUnKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b3ByaW1pdGl2ZVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvUHJpbWl0aXZlKGlucHV0KSB7XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdHJldHVybiB0b1ByaW1pdGl2ZShpbnB1dCwgYXJndW1lbnRzWzFdKTtcblx0fVxuXHRyZXR1cm4gdG9QcmltaXRpdmUoaW5wdXQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnZXMtdG8tcHJpbWl0aXZlL2VzMjAxNScpO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXRvcHJpbWl0aXZlXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVG9QcmltaXRpdmUoaW5wdXQpIHtcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG5cdFx0cmV0dXJuIHRvUHJpbWl0aXZlKGlucHV0LCBhcmd1bWVudHNbMV0pO1xuXHR9XG5cdHJldHVybiB0b1ByaW1pdGl2ZShpbnB1dCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzU3ltYm9scyA9IHJlcXVpcmUoJ2hhcy1zeW1ib2xzJykoKTtcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlc2NyaXB0aW9uUG9seWZpbGwoKSB7XG5cdGlmICghaGFzU3ltYm9scyB8fCB0eXBlb2YgZ09QRCAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0dmFyIGRlc2MgPSBnT1BEKFN5bWJvbC5wcm90b3R5cGUsICdkZXNjcmlwdGlvbicpO1xuXHRpZiAoIWRlc2MgfHwgdHlwZW9mIGRlc2MuZ2V0ICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0cmV0dXJuIGltcGxlbWVudGF0aW9uO1xuXHR9XG5cblx0dmFyIGVtcHR5U3ltYm9sRGVzYyA9IGRlc2MuZ2V0LmNhbGwoU3ltYm9sKCkpO1xuXHR2YXIgZW1wdHlEZXNjVmFsaWQgPSB0eXBlb2YgZW1wdHlTeW1ib2xEZXNjID09PSAndW5kZWZpbmVkJyB8fCBlbXB0eVN5bWJvbERlc2MgPT09ICcnO1xuXHRpZiAoIWVtcHR5RGVzY1ZhbGlkIHx8IGRlc2MuZ2V0LmNhbGwoU3ltYm9sKCdhJykpICE9PSAnYScpIHtcblx0XHRyZXR1cm4gaW1wbGVtZW50YXRpb247XG5cdH1cblx0cmV0dXJuIGRlc2MuZ2V0O1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=